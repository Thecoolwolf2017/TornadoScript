<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptHookVDotNet3</name>
    </assembly>
    <members>
        <member name="T:GTA.Chrono.GameClock">
            <summary>
            Represents the global game clock.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClock.IsPaused">
            <summary>
            Gets or sets a value that indicates whether the in-game clock is paused.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClock.LastTimeMinAdded">
            <summary>
            Gets or sets the last game time minutes are added to the clock.
            You can use this value to calculate pseudo milliseconds along with <see cref="P:GTA.Game.GameTime"/>
            and <see cref="P:GTA.Chrono.GameClock.MillisecondsPerGameMinute"/> when the clock is not paused.
            You can also set a value to this property to shift the clock minute when the clock is not paused.
            </summary>
            <remarks>
            If <see cref="P:GTA.Chrono.GameClock.IsPaused"/> is set to <see langword="true"/>, this value will be updated to
            <see cref="P:GTA.Game.GameTime"/> every frame. This property accesses <c>CClock::ms_timeLastMinAdded</c>
            internally.
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Now">
            <summary>
            Gets or sets the current date time.
            </summary>
            <exception cref="T:GTA.Chrono.InvalidInternalMonthOfGameClockException">
            The month starting from 1 is not in the range of 1 to 12 inclusive and therefore the date time cannot be
            semantically normalized (can be thrown only from the getter).
            </exception>
            <remarks>
            <para>
            Normalizes the day of the date and the time when getting the current value if they are not normalized.
            For example, "September 47th, 2013 30:64:90" will be normalized to "October 18th, 2013 04:65:30".
            </para>
            <para>
            The game may get considerably heavier if you set the value to a value with a large year value such as
            <c>1e+7</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Today">
            <summary>
            Gets or sets the current date.
            </summary>
            <exception cref="T:GTA.Chrono.InvalidInternalMonthOfGameClockException">
            The month starting from 1 is not in the range of 1 to 12 inclusive and therefore the date cannot be
            semantically normalized (can be thrown only from the getter).
            </exception>
            <remarks>
            <para>
            The getter normalizes the day of the date if it is not normalized.
            For example, "September 47th, 2013" will be normalized to "October 17th, 2013".
            </para>
            <para>
            The setter normalizes the time of day if it is not normalized so the getter will be guaranteed to return
            the same date right after setting the value.
            </para>
            <para>
            The game may get considerably heavier if you set the value to a value with a large year value such as
            <c>1e+7</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.TimeOfDay">
            <summary>
            Gets or sets the current time.
            </summary>
            <remarks>
            The getter normalizes the time if it is not normalized.
            For example, "30:89:72" will be normalized to "7:30:12".
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Day">
            <summary>
            Gets or sets the day of month.
            The max value varies depending on the current month, but may return a value outside the range
            of 1 to the max value if not normalized yet.
            </summary>
            <remarks>
            If you set a value not in the range of 1 to the max value depending on the current month,
            the game will normalize the date time when the game updates the clock minute.
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Month">
            <summary>
            Gets or sets the day of month starting from 1.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not between 0 and 11 (in the setter only).
            </exception>
            <remarks>
            <para>
            You should not expect the getter to always return a value in the range of 1 to 12.
            Although the game uses an array of days in months (12 elements) without array bound checking
            and the invalid month will result an unexpected date time, the game having an invalid month for the game
            clock will not crash the game.
            </para>
            <para>
            When you do not plan to use this value to draw on the screen,
            consider using <see cref="P:GTA.Chrono.GameClock.Month0"/> since the game internally uses the zero-based month representation.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Month0">
            <summary>
            Gets or sets the day of month starting from 0.
            The representation is the same as the game uses for the month.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not between 0 and 11 (in the setter only).
            </exception>
            <remarks>
            You should not expect the getter to always return a value in the range of 0 to 11.
            Although the game uses an array of days in months (12 elements) without array bound checking
            and the invalid month will result an unexpected date time, the game having an invalid month for the game
            clock will not crash the game.
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Year">
            <summary>
            Gets or sets the year number (no range limitation).
            </summary>
            <value>
            The current year number.
            </value>
            <remarks>
            The game may get considerably heavier if you set the value to a very large value such as 1e+7.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClock.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current date in the GTA world.
            </summary>
            <param name="day">
            The day (1 through the number of days in <paramref name="month"/>).
            If you set another value, the game will normalize the date time when the game updates
            the clock minute.
            </param>
            <param name="month">
            The month (1 through 12).
            </param>
            <param name="year">
            The year (no range limitation).
            </param>
            <remarks>
            You should not set a value not in the range of 1 to 12 to this property.
            Doing so may result in an unexpected date time, since the game uses an array of days in months
            without array bound checking.
            On the other hands, you can safely set an arbitrary day value as the game normalizes the day value as a result
            when the game updates the clock minute.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClock.SetDateMonth0(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current date in the GTA world.
            </summary>
            <param name="day">
            The day (1 through the number of days in <paramref name="month"/>).
            If you set another value, the game will normalize the date time when the game updates
            the clock minute.
            </param>
            <param name="month">
            The month (0 through 11).
            </param>
            <param name="year">
            The year (no range limitation).
            </param>
            <remarks>
            You should not set a value not in the range of 0 to 11 to this property.
            Doing so may result in an unexpected date time, since the game uses an array of days in months
            without array bound checking.
            On the other hands, you can safely set an arbitrary day value as the game normalizes the day value as a result
            when the game updates the clock minute.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClock.AddToCurrentTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the specified number of hours, minutes, and seconds to the current in-game time.
            </summary>
            <param name="hours">The number of hours to add to the in-game clock.</param>
            <param name="minutes">The number of minutes to add to the in-game clock.</param>
            <param name="seconds">The number of seconds to add to the in-game clock.</param>
        </member>
        <member name="P:GTA.Chrono.GameClock.DayOfWeek">
            <summary>
            Gets the day of the week.
            </summary>
            <remarks>
            Returns the cached value, not the value calculated by <see cref="P:GTA.Chrono.GameClock.Day"/>, <see cref="P:GTA.Chrono.GameClock.Month"/>, and <see cref="P:GTA.Chrono.GameClock.Year"/>.
            If some of them is modified without updating the cached value for the day of week by direct memory editing,
            this property will return an incorrect value.
            </remarks>
        </member>
        <member name="P:GTA.Chrono.GameClock.Hour">
            <summary>
            Gets or sets the hour number from 0 to 23.
            </summary>
            <value>
            The current hour number.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClock.Minute">
            <summary>
            Gets or sets the minute number from 0 to 59.
            </summary>
            <value>
            The current minute number.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClock.Second">
            <summary>
            Gets or sets the second number from 0 to 59.
            </summary>
            <value>
            The current second number.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClock.MillisecondsPerGameMinute">
            <summary>
            Gets or sets how many milliseconds in the real world one game minute takes.
            </summary>
            <value>
            The milliseconds one game minute takes in the real world.
            </value>
        </member>
        <member name="M:GTA.Chrono.GameClock.NormalizeDate(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Normalizes an date just like how the game clock normalizes the date if the day value is not normalized.
            Cannot normalize if month0 is not in the range of 0 to 11 since the method can't determine how many days
            to add or subtract.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClock.NormalizeTime(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Normalizes an time in the almost same way from how the game clock normalizes the hour, minute, and second
            (which is done by shifting them by one at the same time). Returns the number of day to add for the
            normalized date.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClock.GetDaysOfMonth0(System.Int32,System.Int32)">
            <summary>
            Get the number of month. Returns 31 if month0 is not in the range of 0 to 11 for smaller code size
            (having an statement that throws an exception significantly increases code size).
            </summary>
        </member>
        <member name="T:GTA.Chrono.GameClockDate">
            <summary>
            Represents a game clock date, allowing for every <see langword="int"/> year as how the game clock
            can represent its year.
            </summary>
            <remarks>
            <para>
            The <c>With*</c> methods can be convenient to change a single component of a date, but they must be used with
            some care. Examples to watch out for:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:GTA.Chrono.GameClockDate.WithYear(System.Int32)"/> changes the year component of a year-month-day value. Do not use this method if you
            want the ordinal to stay the same after changing the year, of if you want the week and weekday values to stay
            the same.
            </description>
            </item>
            <item>
            <description>
            Do not combine two <c>With*</c> methods to change two components of the date. For example to change both the
            year and month components of a date. This could fail because an intermediate value does not exist, while the
            final date would be valid.
            </description>
            </item>
            </list>
            For more complex changes to a date, it is best to create a new <see cref="T:GTA.Chrono.GameClockDate"/> value instead of
            altering an existing date.
            </para>
            <para>
            Do not access any methods or properties on <see cref="T:GTA.Chrono.GameClockDate"/> with the default value. Doing so may
            result in undefined behaviors.
            </para>
            </remarks>
        </member>
        <member name="F:GTA.Chrono.GameClockDate.MaxValue">
            <summary>
            Represents the largest possible value of a <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <value>
            The largest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is December 31, 2147483647 CE.
            </value>
        </member>
        <member name="F:GTA.Chrono.GameClockDate.MinValue">
            <summary>
            Represents the smallest possible value of a <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <value>
            The smallest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is January 1, -2147483648 BCE.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.Year">
            <summary>
            Returns the year part of this <see cref="T:GTA.Chrono.GameClockDate"/>. The returned value is an integer in the range of
            <see langword="int"/>.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.DayOfYear">
            <summary>
            Returns the day of the year represented by this <see cref="T:GTA.Chrono.GameClockDate"/> starting from 1.
            The returned value is an integer between 1 and 366.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.DayOfYear0">
            <summary>
            Returns the day of the year represented by this <see cref="T:GTA.Chrono.GameClockDate"/> starting from 0.
            The returned value is an integer between 0 and 365 (the same as <see cref="P:GTA.Chrono.GameClockDate.DayOfYear"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.DayOfWeek">
            <summary>
            Returns the day of the week represented by this <see cref="T:GTA.Chrono.GameClockDate"/> in
            <see cref="T:System.DayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Sunday, 1 indicates Monday, 2 indicates
            Tuesday, 3 indicates Wednesday, 4 indicates Thursday, 5 indicates Friday, and 6 indicates Saturday.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.IsoDayOfWeek">
            <summary>
            Returns the day of the week for ISO 8601 represented by this <see cref="T:GTA.Chrono.GameClockDate"/> in
            <see cref="T:GTA.Chrono.IsoDayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Monday, 1 indicates Tuesday,
            2 indicates Wednesday, 3 indicates Thursday, 4 indicates Friday, 5 indicates Saturday, and 6 indicates
            Sunday.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.Month">
            <summary>
            Returns the month part of this <see cref="T:GTA.Chrono.GameClockDate"/>.
            The returned value is an integer between 1 and 12.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.Month0">
            <summary>
            Returns the zero-based month part of this <see cref="T:GTA.Chrono.GameClockDate"/>.
            The returned value is an integer between 0 and 11 (the same as <see cref="P:GTA.Chrono.GameClockDate.Month"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.Day">
            <summary>
            Returns the day-of-month part of this <see cref="T:GTA.Chrono.GameClockDate"/>.
            The returned value is an integer between 1 and 31.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.Day0">
            <summary>
            Returns the zero-based day-of-month part of this <see cref="T:GTA.Chrono.GameClockDate"/>.
            The returned value is an integer between 0 and 30 (the same as <see cref="P:GTA.Chrono.GameClockDate.Day"/> minus 1).
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.AndTime(GTA.Chrono.GameClockTime)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> from the current date and given <see cref="T:GTA.Chrono.GameClockTime"/>.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.AndHms(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> from this <see cref="T:GTA.Chrono.GameClockDate"/>, hour, minute and second.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.FromSystemDateTime(System.DateTime)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> from a <see cref="T:System.DateTime"/>.
            This does not perform any time zone conversions, so a <see cref="T:System.DateTime"/> with a
            <see cref="P:System.DateTime.Kind"/> of <see cref="F:System.DateTimeKind.Utc"/> will still represent the same year/month/day.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.FromYmd(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> from the calendar date (year, month and day).
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="month">The month of year.</param>
            <param name="day">The day of month.</param>
            <returns>The resulting date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TryFromYmd(System.Int32,System.Int32,System.Int32,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to make a new <see cref="T:GTA.Chrono.GameClockDate"/> from the calendar date (year, month and day).
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="month">The month of year.</param>
            <param name="day">The day of month.</param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the date is valid and this method successfully created
            a <see cref="T:GTA.Chrono.GameClockDate"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.FromOrdinalDate(System.Int32,System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> from the ordinal date (year and day of the year).
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="ordinal">The day of year.</param>
            <returns>The resulting date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TryFromOrdinalDate(System.Int32,System.Int32,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to make a new <see cref="T:GTA.Chrono.GameClockDate"/> from the ordinal date (year and day of the year).
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="ordinal">The day of year.</param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the date is valid and this method successfully created
            a <see cref="T:GTA.Chrono.GameClockDate"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.FromIsoWeekDate(System.Int32,System.Int32,GTA.Chrono.IsoDayOfWeek)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> from the ISO week date (year, week number and day of the week).
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> may have a different year from the input year.
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="week">The week number.</param>
            <param name="dayOfWeek">The day of the <paramref name="week"/>.</param>
            <returns>The resulting date.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The parameters do not form a valid date.</exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TryFromIsoWeekDate(System.Int32,System.Int32,GTA.Chrono.IsoDayOfWeek,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to make a new <see cref="T:GTA.Chrono.GameClockDateTime"/> from the ISO week date (year, week number and day of
            the week).
            </summary>
            <param name="year">The year. Any int32 years are valid.</param>
            <param name="week">The week number.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the date is valid and this method successfully created
            a <see cref="T:GTA.Chrono.GameClockDate"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Chrono.GameClockDate.IsLeapYear">
            <summary>
            Returns <see langword="true"/> if the year of this <see cref="T:GTA.Chrono.GameClockDate"/> is a leap one.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_Addition(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDuration)">
            <summary>
            Adds a specified game clock duration to a specified game clock date, yielding a new date.
            Discards the fractional days, rounding to the closest integral number of days towards
            <see cref="F:GTA.Chrono.GameClockDuration.Zero"/>.
            </summary>
            <param name="date">The date to add.</param>
            <param name="duration">The duration to add. Only the whole days will be used.</param>
            <returns>
            An object whose value is the sum of the <paramref name="date"/> and the whole days of <paramref name="duration"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> is less than <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TryAdd(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to return a new <see cref="T:GTA.Chrono.GameClockDate"/> that adds the whole days of the specified
            <see cref="T:GTA.Chrono.GameClockDuration"/> to the value of this instance. Discards the fractional days, rounding to
            the closest integral number of days towards <see cref="F:GTA.Chrono.GameClockDuration.Zero"/>.
            </summary>
            <param name="duration">
            A positive or negative game clock duration. Only the whole days will be used.
            </param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date is between <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> and <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.AddMonths(System.Int64)">
            <summary>
            Adds a duration in <paramref name="months"/> to the date.
            </summary>
            <param name="months">The number of months to add. Can be negative.</param>
            <returns>
            An object whose value is the sum of the date represented by this instance and <paramref name="months"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> is less than <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>.
            </exception>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TryAddMonths(System.Int64,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to add a duration in <paramref name="months"/> to the date.
            </summary>
            <param name="months">The number of months to add. Can be negative.</param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date is between <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> and <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TrySubtract(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to return a new <see cref="T:GTA.Chrono.GameClockDate"/> that subtracts the whole days of the specified
            <see cref="T:GTA.Chrono.GameClockDuration"/> to the value of this instance. Discards the fractional days, rounding to
            the closest integral number of days towards <see cref="F:GTA.Chrono.GameClockDuration.Zero"/>.
            </summary>
            <param name="duration">
            A positive or negative game clock duration. Only the whole days will be used.
            </param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date is between <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> and <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.SubtractMonths(System.Int64)">
            <summary>
            Subtracts a duration in <paramref name="months"/> from the date.
            </summary>
            <param name="months">The number of months to subtract. Can be negative.</param>
            <returns>
            An object whose value is the date represented by this instance minus <paramref name="months"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> is less than <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>.
            </exception>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.TrySubtractMonths(System.Int64,GTA.Chrono.GameClockDate@)">
            <summary>
            Tries to subtract a duration in <paramref name="months"/> from the date.
            </summary>
            <param name="months">The number of months to subtract. Can be negative.</param>
            <param name="date">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDate"/>, or an undefined value on failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date is between <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> and <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_Subtraction(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDuration)">
            <summary>
            Subtracts a specified duration from a specified date, yielding a new date.
            Discards the fractional days, rounding to the closest integral number of days towards
            <see cref="F:GTA.Chrono.GameClockDuration.Zero"/>.
            </summary>
            <param name="date">The date to subtract from.</param>
            <param name="duration">The duration to subtract. Only the whole days will be used.</param>
            <returns>
            An object whose value is the <paramref name="date"/> minus the whole days of <paramref name="duration"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> is less than <see cref="F:GTA.Chrono.GameClockDate.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDate.MaxValue"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_Subtraction(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Subtracts a specified from the current date, yielding a signed duration.
            This does not overflow or underflow at all, as all possible output fits in the range of
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="d1">The date value to subtract from (the minuend).</param>
            <param name="d2">The date value to subtract (the subtrahend).</param>
            <returns>
            The signed duration between <paramref name="d1"/> and <paramref name="d2"/>; that is,
            <paramref name="d1"/> minus <paramref name="d2"/>.
            </returns>
            <remarks>
            The implementation is a wrapper around <see cref="M:GTA.Chrono.GameClockDate.SignedDurationSince(GTA.Chrono.GameClockDate)"/>.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the year number changed, while keeping the same month and day.
            </summary>
            <param name="year">The new year.</param>
            <returns>
            An object whose value is the date represented by this instance but the year is the specified
            <paramref name="year"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The date is February 29 in a leap year but the specified <paramref name="year"/> is a non-leap one.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The internal state of this instance is invalid and therefore cannot create a new
            <see cref="T:GTA.Chrono.GameClockDate"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithMonth(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the month number (starting from 1) changed.
            </summary>
            <param name="month">The new month.</param>
            <returns>
            An object whose value is the date represented by this instance but the month is the specified
            <paramref name="month"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month"/> is invalid (not an integer between 1 and 12).
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithMonth0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the month number (starting from 0) changed.
            </summary>
            <param name="month0">The new month.</param>
            <returns>
            An object whose value is the date represented by this instance but the month is the specified
            <paramref name="month0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month0"/> is invalid (not an integer between 0 and 11).
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithDay(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the day of month (starting from 1) changed.
            </summary>
            <param name="day">The new day of month.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of month is the specified
            <paramref name="day"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithDay0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the day of month (starting from 0) changed.
            </summary>
            <param name="day0">The new day of month.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of month is the specified
            <paramref name="day0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day0"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithDayOfYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the day of year (starting from 1) changed.
            </summary>
            <param name="dayOfYear">The day of year.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of year is
            <paramref name="dayOfYear"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.WithDayOfYear0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDate"/> with the day of year (starting from 0) changed.
            </summary>
            <param name="dayOfYear0">The day of year.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of year is
            <paramref name="dayOfYear0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear0"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.SignedDurationSince(GTA.Chrono.GameClockDate)">
            <summary>
            Returns a duration subtracted from this instance by <paramref name="value"/>.
            This does not throw an exception in any cases, as all possible output fits in the range of
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="value">The date to subtract.</param>
            <returns>
            A signed duration that is equal to the date represented by this instance minus the date represented by
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.YearsSince(GTA.Chrono.GameClockDate)">
            <summary>
            Returns the number of whole years from <paramref name="other"/> until this instance.
            </summary>
            <param name="other">The other date.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="other"/> is later than this instance.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs a time into year, month, and day components.
            </summary>
            <param name="year">The year component.</param>
            <param name="month">The month component.</param>
            <param name="day">The day component.</param>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.Equals(GTA.Chrono.GameClockDate)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:GTA.Chrono.GameClockDate"/>
            object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> represents the same game clock date as this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a <see cref="T:GTA.Chrono.GameClockDate"/> object that represents
            the same game clock date as the current <see cref="T:GTA.Chrono.GameClockDate"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_Equality(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDate"/> instances are equal.
            </summary>
            <param name="left">The game clock date to compare.</param>
            <param name="right">The second game date time to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_Inequality(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDate"/> instances are not equal.
            </summary>
            <param name="left">The game clock date to compare.</param>
            <param name="right">The second game clock date to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified
            <see cref="T:GTA.Chrono.GameClockDate"/> value, and returns an integer that indicates whether this instance is earlier
            than, the same as, or later than the specified <see cref="T:GTA.Chrono.GameClockDate"/> value.
            </summary>
            <param name="value">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter. Less than zero if
            this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this
            instance is later than value.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a <see cref="T:GTA.Chrono.GameClockDate"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.CompareTo(GTA.Chrono.GameClockDate)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:GTA.Chrono.GameClockDate"/> value and indicates whether
            this instance is earlier than, the same as, or later than the specified <see cref="T:GTA.Chrono.GameClockDate"/> value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter.
            <list type="bullet">
            <item>
            <description>Less than zero if this instance is earlier than <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Zero if this instance is the same as <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Greater than zero if this instance is later than <paramref name="value"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_LessThan(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDate"/> is earlier than another specified
            <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <param name="left">The first game clock date to compare.</param>
            <param name="right">The second game clock date to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_LessThanOrEqual(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDate"/> is earlier than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <param name="left">The first game clock date to compare.</param>
            <param name="right">The second game clock date to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_GreaterThan(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDate"/> is later than another specified
            <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <param name="left">The first game clock date to compare.</param>
            <param name="right">The second game clock date to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.op_GreaterThanOrEqual(GTA.Chrono.GameClockDate,GTA.Chrono.GameClockDate)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDate"/> is later than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <param name="left">The first game clock date to compare.</param>
            <param name="right">The second game clock date to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDate.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GTA.Chrono.GameClockDateTime">
            <summary>
            Represents a combined game clock date and time with the second precision.
            </summary>
            <remarks>
            <para>
            The <c>With*</c> methods can be convenient to change a single component of a date, but they must be used with
            some care. Examples to watch out for:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:GTA.Chrono.GameClockDateTime.WithYear(System.Int32)"/> changes the year component of a year-month-day value. Do not use this method if you
            want the ordinal to stay the same after changing the year, of if you want the week and weekday values to stay
            the same.
            </description>
            </item>
            <item>
            <description>
            Do not combine two <c>With*</c> methods to change two components of the date. For example to change both the
            year and month components of a date. This could fail because an intermediate value does not exist, while the
            final date would be valid.
            </description>
            </item>
            </list>
            For more complex changes to a date, it is best to create a new <see cref="T:GTA.Chrono.GameClockDateTime"/> value instead of
            altering an existing date.
            </para>
            <para>
            Do not access any methods or properties on <see cref="T:GTA.Chrono.GameClockDateTime"/> with the default value. Doing so may
            result in undefined behaviors.
            </para>
            </remarks>
        </member>
        <member name="F:GTA.Chrono.GameClockDateTime.MaxValue">
            <summary>
            Gets the largest possible value of <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <value>
            The largest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is <c>+2147483647-12-31T23:59:59</c>
            (23:59:59 on December 31, 2147483647 CE).
            </value>
        </member>
        <member name="F:GTA.Chrono.GameClockDateTime.MinValue">
            <summary>
            Gets the smallest possible value of <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <value>
            The smallest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is <c>-2147483648-01-01T00:00:00</c>
            (00:00:00 on January 1, -2147483648 BCE).
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Date">
            <summary>
            Returns the date component of this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Time">
            <summary>
            Returns the time component of this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Year">
            <summary>
            Returns the year part of this <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            The returned value is an integer in the range of <see langword="int"/>.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.DayOfYear">
            <summary>
            Returns the day of the year represented by this <see cref="T:GTA.Chrono.GameClockDateTime"/> starting from 1.
            The returned value is an integer between 1 and 366.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.DayOfYear0">
            <summary>
            Returns the day of the year represented by this <see cref="T:GTA.Chrono.GameClockDateTime"/> starting from 0.
            The returned value is an integer between 0 and 365 (the same as <see cref="P:GTA.Chrono.GameClockDateTime.DayOfYear"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.DayOfWeek">
            <summary>
            Returns the day of the week represented by this <see cref="T:GTA.Chrono.GameClockDateTime"/> in
            <see cref="T:System.DayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Sunday, 1 indicates Monday, 2 indicates
            Tuesday, 3 indicates Wednesday, 4 indicates Thursday, 5 indicates Friday, and 6 indicates Saturday.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.IsoDayOfWeek">
            <summary>
            Returns the day of the week for ISO 8601 represented by this <see cref="T:GTA.Chrono.GameClockDateTime"/> in
            <see cref="T:GTA.Chrono.IsoDayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Monday, 1 indicates Tuesday,
            2 indicates Wednesday, 3 indicates Thursday, 4 indicates Friday, 5 indicates Saturday, and 6 indicates
            Sunday.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Month">
            <summary>
            Returns the month part of this <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            The returned value is an integer between 1 and 12.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Month0">
            <summary>
            Returns the zero-based month part of this <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            The returned value is an integer between 0 and 11 (the same as <see cref="P:GTA.Chrono.GameClockDateTime.Month"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Day">
            <summary>
            Returns the day-of-month part of this <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            The returned value is an integer between 1 and 31.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Day0">
            <summary>
            Returns the zero-based day-of-month part of this <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            The returned value is an integer between 0 and 30 (the same as <see cref="P:GTA.Chrono.GameClockDateTime.Day"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Hour">
            <summary>
            Gets the hour component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Hour12">
            <summary>
            Gets the hour number from 1 to 12 of the time represented by this instance with a boolean flag, which is
            <see langword="false"/> for AM and <see langword="true"/> for PM.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.GetHour12(System.Int32@)">
            <returns>
            <see langword="true"/> if the time represented by this instance is in from midnight to noon (where
            <see cref="P:GTA.Chrono.GameClockDateTime.Hour"/> is between 0 and 11); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Minute">
            <summary>
            Gets the minute component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.Second">
            <summary>
            Gets the second component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDateTime.SecondsFromMidnight">
            <summary>
            Gets the number of seconds past the last midnight.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the year number changed, while keeping the same month and
            day.
            </summary>
            <param name="year">The new year.</param>
            <returns>
            An object whose value is the date time represented by this instance but the year is the specified
            <paramref name="year"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The date is February 29 in a leap year but the specified <paramref name="year"/> is a non-leap one.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithMonth(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the month number (starting from 1) changed.
            </summary>
            <param name="month">The new month.</param>
            <returns>
            An object whose value is the date time represented by this instance but the month is the specified
            <paramref name="month"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month"/> is invalid (not an integer between 1 and 12).
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithMonth0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the month number (starting from 0) changed.
            </summary>
            <param name="month0">The new month.</param>
            <returns>
            An object whose value is the date time represented by this instance but the month is the specified
            <paramref name="month0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month0"/> is invalid (not an integer between 0 and 11).
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithDay(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the day of month (starting from 1) changed.
            </summary>
            <param name="day">The new day of month.</param>
            <returns>
            An object whose value is the date time represented by this instance but the day of month is the specified
            <paramref name="day"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithDay0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the day of month (starting from 0) changed.
            </summary>
            <param name="day0">The new day of month.</param>
            <returns>
            An object whose value is the date time represented by this instance but the day of month is the specified
            <paramref name="day0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day0"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithDayOfYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the day of year (starting from 1) changed.
            </summary>
            <param name="dayOfYear">The day of year.</param>
            <returns>
            An object whose value is the date time represented by this instance but the day of year is
            <paramref name="dayOfYear"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithDayOfYear0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the day of year (starting from 0) changed.
            </summary>
            <param name="dayOfYear0">The day of year.</param>
            <returns>
            An object whose value is the date time represented by this instance but the day of year is
            <paramref name="dayOfYear0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear0"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithHour(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the hour number changed.
            </summary>
            <param name="hour">The new hour.</param>
            <returns>
            An object whose value is the date time represented by this instance but the hour is the specified
            <paramref name="hour"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithMinute(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the minute number changed.
            </summary>
            <param name="minute">The new minute.</param>
            <returns>
            An object whose value is the date time represented by this instance but the minute is the specified
            <paramref name="minute"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.WithSecond(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> with the second number changed.
            </summary>
            <param name="second">The new second.</param>
            <returns>
            An object whose value is the date time represented by this instance but the second is the specified
            <paramref name="second"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.FromSystemDateTime(System.DateTime)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockDateTime"/> from a <see cref="T:System.DateTime"/>.
            This does not perform any time zone conversions, so a <see cref="T:System.DateTime"/> with a
            <see cref="P:System.DateTime.Kind"/> of <see cref="F:System.DateTimeKind.Utc"/> will still represent the same year/month/day.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_Addition(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDuration)">
            <summary>
            Adds a specified duration to a specified date time, yielding a new date time.
            </summary>
            <param name="dateTime">The date time value to add.</param>
            <param name="duration">The duration value to add.</param>
            <returns>
            An object that is the sum of the values of <paramref name="dateTime"/> and <paramref name="duration"/>.
            </returns>
            <remarks>
            The addition wraps around and ignores integral number of days.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.TryAdd(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDateTime@)">
            <summary>
            Tries to return a new <see cref="T:GTA.Chrono.GameClockDateTime"/> that adds the specified
            <see cref="T:GTA.Chrono.GameClockDuration"/> to the value of this instance. .
            </summary>
            <param name="duration">
            A positive or negative game clock duration.
            </param>
            <param name="dateTime">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDateTime"/>, or an undefined value on
            failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date time is between <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> and
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.AddMonths(System.Int64)">
            <summary>
            Adds a duration in <paramref name="months"/> to the date time.
            </summary>
            <param name="months">The number of months to add. Can be negative.</param>
            <returns>
            An object whose value is the sum of the date represented by this instance and <paramref name="months"/> and
            the time component of this instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDateTime"/> is less than <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>.
            </exception>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.TryAddMonths(System.Int64,GTA.Chrono.GameClockDateTime@)">
            <summary>
            Tries to add a duration in <paramref name="months"/> to the date time.
            </summary>
            <param name="months">The number of months to add. Can be negative.</param>
            <param name="dateTime">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDateTime"/>, or an undefined value on
            failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date time is between <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> and
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_Subtraction(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDuration)">
            <summary>
            Subtracts a specified duration from a specified date time and returns a new time.
            </summary>
            <param name="dateTime">The date time value to subtract from.</param>
            <param name="duration">The duration value to subtract.</param>
            <returns>
            An object whose value is the value of <paramref name="dateTime"/> minus the value of
            <paramref name="duration"/>.
            </returns>
            <remarks>
            The subtraction wraps around and ignores integral number of days.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.TrySubtract(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDateTime@)">
            <summary>
            Tries to return a new <see cref="T:GTA.Chrono.GameClockDateTime"/> that subtracts the specified
            <see cref="T:GTA.Chrono.GameClockDuration"/> to the value of this instance.
            </summary>
            <param name="duration">
            A positive or negative game clock duration.
            </param>
            <param name="dateTime">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDateTime"/>, or an undefined value on
            failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date time is between <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> and
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.SubtractMonths(System.Int64)">
            <summary>
            Subtracts a duration in <paramref name="months"/> from the date time.
            </summary>
            <param name="months">The number of months to subtract. Can be negative.</param>
            <returns>
            An object whose value is the date time represented by this instance minus <paramref name="months"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:GTA.Chrono.GameClockDate"/> is less than <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> or greater than
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>.
            </exception>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.TrySubtractMonths(System.Int64,GTA.Chrono.GameClockDateTime@)">
            <summary>
            Tries to subtract a duration in <paramref name="months"/> from the date time.
            </summary>
            <param name="months">The number of months to subtract. Can be negative.</param>
            <param name="dateTime">
            When this method returns, contains the result <see cref="T:GTA.Chrono.GameClockDateTime"/>, or an undefined value on
            failure.
            </param>
            <returns>
            <see langword="true"/> if the resulting date time is between <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> and
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Uses the last day of the month if the day does not exist in the resulting month.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.SignedDurationSince(GTA.Chrono.GameClockDateTime)">
            <summary>
            Returns a duration subtracted from this instance by <paramref name="value"/>.
            This does not throw an exception in any cases, as all possible output fits in the range of
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="value">The date time to subtract.</param>
            <returns>
            A signed duration that is equal to the date time represented by this instance minus the date time
            represented by <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_Subtraction(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Subtracts a specified from the current date time, yielding a signed duration.
            This does not overflow or underflow at all, as all possible output fits in the range of
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="dt1">The date time value to subtract from (the minuend).</param>
            <param name="dt2">The date time value to subtract (the subtrahend).</param>
            <returns>
            The signed duration between <paramref name="dt1"/> and <paramref name="dt2"/>; that is,
            <paramref name="dt1"/> minus <paramref name="dt2"/>.
            </returns>
            <remarks>
            The implementation is a wrapper around <see cref="M:GTA.Chrono.GameClockDateTime.SignedDurationSince(GTA.Chrono.GameClockDateTime)"/>.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.Deconstruct(GTA.Chrono.GameClockDate@,GTA.Chrono.GameClockTime@)">
            <summary>
            Deconstructs a time into game clock date and time components.
            </summary>
            <param name="date">The game clock date component.</param>
            <param name="time">The game clock time component.</param>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.Equals(GTA.Chrono.GameClockDateTime)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:GTA.Chrono.GameClockDateTime"/>
            object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> represents the same game clock date time as this
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a <see cref="T:GTA.Chrono.GameClockDateTime"/> object that
            represents the same game clock date time as the current <see cref="T:GTA.Chrono.GameClockDateTime"/> structure;
            otherwise, false.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_Equality(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDateTime"/> instances are equal.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game date time to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_Inequality(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDateTime"/> instances are not equal.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game clock date time to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/> value, and returns an integer that indicates whether this instance is
            earlier than, the same as, or later than the specified <see cref="T:GTA.Chrono.GameClockDateTime"/> value.
            </summary>
            <param name="value">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter. Less than zero if
            this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this
            instance is later than value.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.CompareTo(GTA.Chrono.GameClockDateTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:GTA.Chrono.GameClockDateTime"/> value and indicates
            whether this instance is earlier than, the same as, or later than the specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/>
            value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter.
            <list type="bullet">
            <item>
            <description>Less than zero if this instance is earlier  than <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Zero if this instance is the same as <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Greater than zero if this instance is later than <paramref name="value"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_LessThan(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDateTime"/> is earlier than another specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game clock date time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_LessThanOrEqual(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDateTime"/> is earlier than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game clock date time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_GreaterThan(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDateTime"/> is later than another specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game clock date time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.op_GreaterThanOrEqual(GTA.Chrono.GameClockDateTime,GTA.Chrono.GameClockDateTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDateTime"/> is later than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDateTime"/>.
            </summary>
            <param name="left">The first game clock date time to compare.</param>
            <param name="right">The second game clock date time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDateTime.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GTA.Chrono.GameClockDuration">
            <summary>
            Represents a fixed length of game clock time with the millisecond precision.
            </summary>
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.SecsPerMinute">
            The number of seconds in a minute.
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.SecsPerHour">
            The number of seconds in an hour.
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.SecsPerDay">
            The number of (non-leap) seconds in days.
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.SecsPerWeek">
            The number of (non-leap) seconds in a week.
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.DayCountUInt32YearsLaterSinceInt32MinValueYear">
            <summary>
            The number of days elapsed since January 1st, the -2147483648 year until December 31st, the 2147483647 year,
            which will result in 1_568_704_592_609 days. Subtracted by 1 because 1 day is taken for the min date value.
            </summary>
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.MaxSecDifference">
            <summary>
            The same value as 135_536_076_801_503_999 seconds.
            </summary>
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.Zero">
            <summary>
            Represents the zero <see cref="T:GTA.Chrono.GameClockDuration"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.MaxValue">
            <summary>
            Represents the maximum <see cref="T:GTA.Chrono.GameClockDuration"/> value, which can represent the duration from
            <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/> to <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/>.
            This field is read-only.
            </summary>
        </member>
        <member name="F:GTA.Chrono.GameClockDuration.MinValue">
            <summary>
            Represents the maximum <see cref="T:GTA.Chrono.GameClockDuration"/> value, which can represent the duration from
            <see cref="F:GTA.Chrono.GameClockDateTime.MaxValue"/> to <see cref="F:GTA.Chrono.GameClockDateTime.MinValue"/>.
            This field is read-only.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.Hours">
            <summary>
            Gets the hours component of the time interval represented by the current <see cref="T:GTA.Chrono.GameClockDuration"/>
            structure.
            </summary>
            <value>
            The hour component of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure.
            The return value ranges from -23 through 23.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.Minutes">
            <summary>
            Gets the minutes component of the time interval represented by the current <see cref="T:GTA.Chrono.GameClockDuration"/>
            structure.
            </summary>
            <value>
            The minute component of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure.
            The return value ranges from -59 through 59.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.Seconds">
            <summary>
            Gets the seconds component of the time interval represented by the current <see cref="T:GTA.Chrono.GameClockDuration"/>
            structure.
            </summary>
            <value>
            The second component of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure.
            The return value ranges from -59 through 59.
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.TotalWeeks">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole and fractional
            weeks.
            </summary>
            <value>The total number of weeks represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.TotalDays">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole and fractional
            days.
            </summary>
            <value>The total number of days represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.TotalHours">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole and fractional
            hours.
            </summary>
            <value>The total number of hours represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.TotalMinutes">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole and fractional
            minutes.
            </summary>
            <value>The total number of minutes represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.WholeWeeks">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole weeks.
            </summary>
            <value>The number of whole weeks represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.WholeDays">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole days.
            </summary>
            <value>The number of whole days represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.WholeHours">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole hours.
            </summary>
            <value>The number of whole hours represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.WholeMinutes">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole minutes.
            </summary>
            <value>The number of whole minutes represented by this instance.</value>
        </member>
        <member name="P:GTA.Chrono.GameClockDuration.WholeSeconds">
            <summary>
            Gets the value of the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure expressed in whole seconds.
            </summary>
            <value>The number of whole seconds represented by this instance.</value>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified
            <see cref="T:GTA.Chrono.GameClockDuration"/> value, and returns an integer that indicates whether this instance is
            less than, the same as, or greater than the specified <see cref="T:GTA.Chrono.GameClockDuration"/> value.
            </summary>
            <param name="value">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter. Less than zero if
            this instance is less than value. Zero if this instance is the same as value. Greater than zero if this
            instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.CompareTo(GTA.Chrono.GameClockDuration)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:GTA.Chrono.GameClockTime"/> value and indicates whether
            this instance is less than, the same as, or greater than the specified <see cref="T:GTA.Chrono.GameClockTime"/> value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter.
            <list type="bullet">
            <item>
            <description>Less than zero if this instance is less than <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Zero if this instance is the same as <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Greater than zero if this instance is greater than <paramref name="value"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.FromWeeks(System.Int64)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> that represents a specified number of weeks.
            </summary>
            <param name="weeks">A number of weeks.</param>
            <returns>An object that represents <paramref name="weeks"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="weeks"/> is not between -224100656035 and 224100656035.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.FromDays(System.Int64)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> that represents a specified number of days.
            </summary>
            <param name="days">A number of days.</param>
            <returns>An object that represents <paramref name="days"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="days"/> is not between -1568704592245 and 1568704592245.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.FromHours(System.Int64)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> that represents a specified number of hours.
            </summary>
            <param name="hours">A number of hours.</param>
            <returns>An object that represents <paramref name="hours"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="hours"/> is not between -37648910213903 and 37648910213903.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.FromMinutes(System.Int64)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> that represents a specified number of minutes.
            </summary>
            <param name="minutes">A number of minutes.</param>
            <returns>An object that represents <paramref name="minutes"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minutes"/> is not between -2258934612834239 and 2258934612834239.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.FromSeconds(System.Int64)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> that represents a specified number of seconds.
            </summary>
            <param name="seconds">A number of seconds.</param>
            <returns>An object that represents <paramref name="seconds"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="seconds"/> is not between -135536076770054399 and 135536076770054399.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_UnaryPlus(GTA.Chrono.GameClockDuration)">
            <summary>
            Returns the specified instance of <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="d">The duration to return.</param>
            <returns>The time interval specified by <paramref name="d"/>.</returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Addition(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Adds two specified <see cref="T:GTA.Chrono.GameClockDuration"/> instances.
            </summary>
            <param name="d1">The first game clock duration to add.</param>
            <param name="d2">The second game clock duration to add.</param>
            <returns>
            An object whose value is the sum of the values of <paramref name="d1"/> and <paramref name="d2"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_UnaryNegation(GTA.Chrono.GameClockDuration)">
            <summary>
            Returns a <see cref="T:GTA.Chrono.GameClockDuration"/> whose value is the negated value of the specified instance.
            </summary>
            <param name="d">The duration to be negated.</param>
            <returns>
            An object that has the same numeric value as this instance, but the opposite sign.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Subtraction(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Subtracts a specified <see cref="T:GTA.Chrono.GameClockDuration"/> from another specified
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="d1">The minuend.</param>
            <param name="d2">The subtrahend.</param>
            <returns>
            An object whose value is the result of the value of <paramref name="d1"/> minus the value of
            <paramref name="d2"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Multiply(GTA.Chrono.GameClockDuration,System.Int64)">
            <summary>
            Returns a new <see cref="T:GTA.Chrono.GameClockDuration"/> object whose value is the result of multiplying the specified
            <paramref name="duration"/> instance and the specified <paramref name="factor"/>.
            </summary>
            <param name="duration">The value to be multiplied.</param>
            <param name="factor">The value to be multiplied by.</param>
            <returns>
            A new <see cref="T:GTA.Chrono.GameClockDuration"/> representing the result of multiplying <paramref name="duration"/>
            by <paramref name="factor"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Multiply(System.Int64,GTA.Chrono.GameClockDuration)">
            <summary>
            Returns a new <see cref="T:GTA.Chrono.GameClockDuration"/> object whose value is the result of multiplying the
            specified <paramref name="factor"/> and the specified <paramref name="duration"/> instance.
            </summary>
            <param name="factor">The value to be multiplied by.</param>
            <param name="duration">The value to be multiplied.</param>
            <returns>
            A new object that represents the value of the specified <paramref name="factor"/> multiplied by the value
            of the specified <paramref name="duration"/> instance.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Multiply(System.Double,GTA.Chrono.GameClockDuration)">
            <summary>
            Returns a new <see cref="T:GTA.Chrono.GameClockDuration"/> object whose value is the result of multiplying the
            specified <paramref name="factor"/> and the specified <paramref name="duration"/> instance.
            </summary>
            <param name="factor">The value to be multiplied by.</param>
            <param name="duration">The value to be multiplied.</param>
            <returns>
            A new object that represents the value of the specified <paramref name="factor"/> multiplied by the value
            of the specified <paramref name="duration"/> instance.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Division(GTA.Chrono.GameClockDuration,System.Int64)">
            <summary>
            Returns a new TimeSpan object whose value is the result of dividing the specified
            <paramref name="duration"/> by the specified <paramref name="divisor"/>.
            </summary>
            <param name="duration">Dividend or the value to be divided.</param>
            <param name="divisor">The value to be divided by.</param>
            <returns>
            A new object that represents the value of <paramref name="duration"/> divided by the value of
            <paramref name="divisor"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Division(GTA.Chrono.GameClockDuration,System.Double)">
            <summary>
            Returns a new TimeSpan object whose value is the result of dividing the specified
            <paramref name="duration"/> by the specified <paramref name="divisor"/>.
            </summary>
            <param name="duration">Dividend or the value to be divided.</param>
            <param name="divisor">The value to be divided by.</param>
            <returns>
            A new object that represents the value of <paramref name="duration"/> divided by the value of
            <paramref name="divisor"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Division(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Returns a new Double value that's the result of dividing <paramref name="d1"/> by <paramref name="d2"/>.
            </summary>
            <param name="d1">The dividend or the value to be divided.</param>
            <param name="d2">The value to be divided by.</param>
            <returns>
            A new value that represents result of dividing <paramref name="d1"/> by the value of
            <paramref name="d2"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.Equals(GTA.Chrono.GameClockDuration)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:GTA.Chrono.GameClockDuration"/>
            object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> represents the same game clock duration as this
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a <see cref="T:GTA.Chrono.GameClockDuration"/> object that
            represents the same game clock duration as the current <see cref="T:GTA.Chrono.GameClockDuration"/> structure;
            otherwise, false.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Equality(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDuration"/> instances are equal.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_Inequality(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockDuration"/> instances are not equal.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_LessThan(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDuration"/> is less than another specified
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is less than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_LessThanOrEqual(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDuration"/> is less than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is less than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_GreaterThan(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDuration"/> is greater than another specified
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is greater than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.op_GreaterThanOrEqual(GTA.Chrono.GameClockDuration,GTA.Chrono.GameClockDuration)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockDuration"/> is greater than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="left">The first game clock duration to compare.</param>
            <param name="right">The second game clock duration to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is greater than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockDuration.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GTA.Chrono.GameClockTime">
            <summary>
            Represents a game clock time with the second precision.
            </summary>
            <remarks>
            The <see cref="T:GTA.Chrono.GameClockTime"/> structure does not store the millisecond component. Although the game clock
            stores the last time its minute ticked (which can be accessed via <see cref="P:GTA.Chrono.GameClock.LastTimeMinAdded"/>)
            and you can calculate the pseudo-millisecond component, the last time is volatile and it will be set to
            the same value as <see cref="P:GTA.Game.GameTime"/> every frame when the clock is paused.
            </remarks>
        </member>
        <member name="F:GTA.Chrono.GameClockTime.MaxValue">
            <summary>
            Gets the largest possible value of <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <value>
            The largest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is 23:59:59.
            </value>
        </member>
        <member name="F:GTA.Chrono.GameClockTime.MinValue">
            <summary>
            Gets the smallest possible value of <see cref="T:GTA.Chrono.GameClockDate"/>.
            </summary>
            <value>
            The smallest possible value of <see cref="T:GTA.Chrono.GameClockTime"/>, which is 00:00:00 (midnight).
            </value>
        </member>
        <member name="P:GTA.Chrono.GameClockTime.Hour">
            <summary>
            Gets the hour component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockTime.Hour12">
            <summary>
            Gets the hour number from 1 to 12 of the time represented by this instance with a boolean flag, which is
            <see langword="false"/> for AM and <see langword="true"/> for PM.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.GetHour12(System.Int32@)">
            <returns>
            <see langword="true"/> if the time represented by this instance is in from midnight to noon (where
            <see cref="P:GTA.Chrono.GameClockTime.Hour"/> is between 0 and 11); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Chrono.GameClockTime.Minute">
            <summary>
            Gets the minute component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockTime.Second">
            <summary>
            Gets the second component of the time represented by this instance.
            </summary>
        </member>
        <member name="P:GTA.Chrono.GameClockTime.SecondsFromMidnight">
            <summary>
            Gets the number of seconds past the last midnight.
            </summary>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.FromHms(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockTime"/> from hour, minute, second and microsecond.
            </summary>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <returns>The resulting time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The parameters do not form a valid time.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.FromSecondsFromMidnight(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockTime"/> from the number of seconds since midnight.
            </summary>
            <param name="seconds">The number of seconds since midnight.</param>
            <returns>
            The resulting time.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="seconds"/> is not between 0 and 86399.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.WithHour(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockTime"/> with the hour number changed.
            </summary>
            <param name="hour">The new hour.</param>
            <returns>
            An object whose value is the time represented by this instance but the hour is the specified
            <paramref name="hour"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.WithMinute(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockTime"/> with the minute number changed.
            </summary>
            <param name="minute">The new minute.</param>
            <returns>
            An object whose value is the time represented by this instance but the minute is the specified
            <paramref name="minute"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.WithSecond(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.GameClockTime"/> with the second number changed.
            </summary>
            <param name="second">The new second.</param>
            <returns>
            An object whose value is the time represented by this instance but the second is the specified
            <paramref name="second"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.OverflowingAddSigned(GTA.Chrono.GameClockDuration,System.Int64@)">
            <summary>
            Adds the specified <see cref="T:GTA.Chrono.GameClockDuration"/> to the current time, and also returns the integral
            number of wrapped days.
            </summary>
            <param name="duration">The duration to add.</param>
            <param name="wrappedDays">
            When this method returns, contains the wrapped days.
            </param>
            <returns>The resulting date.</returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.OverflowingSubtractSigned(GTA.Chrono.GameClockDuration,System.Int64@)">
            <summary>
            Subtracts the specified <see cref="T:GTA.Chrono.GameClockDuration"/> from the current time, and also returns
            the integral number of wrapped days.
            </summary>
            <param name="duration">The duration to add.</param>
            <param name="wrappedDays">
            When this method returns, contains the wrapped days.
            </param>
            <returns>The resulting date.</returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.SignedDurationSince(GTA.Chrono.GameClockTime)">
            <summary>
            Subtracts another <see cref="T:GTA.Chrono.GameClockTime"/> from the current time and returns a
            <see cref="T:GTA.Chrono.GameClockDuration"/> within +/- 1 day.
            </summary>
            <param name="value">The time to subtract.</param>
            <returns>
            A signed duration that is equal to the time represented by this instance minus the time represented by
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified
            <see cref="T:GTA.Chrono.GameClockTime"/> value, and returns an integer that indicates whether this instance is earlier
            than, the same as, or later than the specified <see cref="T:GTA.Chrono.GameClockTime"/> value.
            </summary>
            <param name="value">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter. Less than zero if
            this instance is earlier than value. Zero if this instance is the same as value. Greater than zero if this
            instance is later than value.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a <see cref="T:GTA.Chrono.GameClockTime"/>.
            </exception>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.CompareTo(GTA.Chrono.GameClockTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:GTA.Chrono.GameClockTime"/> value and indicates whether
            this instance is earlier than, the same as, or later than the specified <see cref="T:GTA.Chrono.GameClockTime"/> value.
            </summary>
            <param name="value">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the value parameter.
            <list type="bullet">
            <item>
            <description>Less than zero if this instance is earlier than <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Zero if this instance is the same as <paramref name="value"/>.</description>
            </item>
            <item>
            <description>Greater than zero if this instance is later than <paramref name="value"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_Addition(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockDuration)">
            <summary>
            Adds a specified duration to a specified time, yielding a new time.
            </summary>
            <param name="time">The time value to add.</param>
            <param name="duration">The duration value to add.</param>
            <returns>
            An object that is the sum of the values of <paramref name="time"/> and <paramref name="duration"/>.
            </returns>
            <remarks>
            The addition wraps around and ignores integral number of days.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_Subtraction(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockDuration)">
            <summary>
            Subtracts a specified duration from a specified time and returns a new time.
            </summary>
            <param name="time">The time value to subtract from.</param>
            <param name="duration">The duration value to subtract.</param>
            <returns>
            An object whose value is the value of <paramref name="time"/> minus the value of
            <paramref name="duration"/>.
            </returns>
            <remarks>
            The subtraction wraps around and ignores integral number of days.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_Subtraction(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Subtracts a specified from the current time, yielding a signed duration.
            This does not overflow or underflow at all, as all possible output fits in the range of
            <see cref="T:GTA.Chrono.GameClockDuration"/>.
            </summary>
            <param name="t1">The time value to subtract from (the minuend).</param>
            <param name="t2">The time value to subtract (the subtrahend).</param>
            <returns>
            The signed duration between <paramref name="t1"/> and <paramref name="t2"/>; that is,
            <paramref name="t1"/> minus <paramref name="t2"/>.
            </returns>
            <remarks>
            The implementation is a wrapper around <see cref="M:GTA.Chrono.GameClockTime.SignedDurationSince(GTA.Chrono.GameClockTime)"/>.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Deconstructs a time into hour, minute, and second components.
            </summary>
            <param name="hour">The hour component.</param>
            <param name="minute">The minute component.</param>
            <param name="second">The second component.</param>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.Equals(GTA.Chrono.GameClockTime)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:GTA.Chrono.GameClockTime"/>
            object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> represents the same game clock time as this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a <see cref="T:GTA.Chrono.GameClockTime"/> object that represents
            the same game clock time as the current <see cref="T:GTA.Chrono.GameClockTime"/> structure; otherwise, false.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_Equality(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockTime"/> instances are equal.
            </summary>
            <param name="left">The game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_Inequality(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether two <see cref="T:GTA.Chrono.GameClockTime"/> instances are not equal.
            </summary>
            <param name="left">The game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_LessThan(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockTime"/> is earlier than another specified
            <see cref="T:GTA.Chrono.GameClockTime"/>.
            </summary>
            <param name="left">The first game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_LessThanOrEqual(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockTime"/> is earlier than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockTime"/>.
            </summary>
            <param name="left">The first game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is earlier than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_GreaterThan(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockTime"/> is later than another specified
            <see cref="T:GTA.Chrono.GameClockTime"/>.
            </summary>
            <param name="left">The first game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.op_GreaterThanOrEqual(GTA.Chrono.GameClockTime,GTA.Chrono.GameClockTime)">
            <summary>
            Indicates whether a specified <see cref="T:GTA.Chrono.GameClockTime"/> is later than or equal to another specified
            <see cref="T:GTA.Chrono.GameClockTime"/>.
            </summary>
            <param name="left">The first game clock time to compare.</param>
            <param name="right">The second game clock time to compare.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is later than or equal to the value of
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.GameClockTime.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GTA.Chrono.IDatelike`1">
            <summary>
            Defines the common set of methods for date component.
            </summary>
            <remarks>
            <para>
            Methods such as <see cref="P:GTA.Chrono.IDatelike`1.Year"/>, <see cref="P:GTA.Chrono.IDatelike`1.Month"/>, <see cref="P:GTA.Chrono.IDatelike`1.Day"/>, <see cref="P:GTA.Chrono.IDatelike`1.DayOfWeek"/>, and
            <see cref="P:GTA.Chrono.IDatelike`1.IsoDayOfWeek"/> can be used to get basic information about the date. The <c>With*</c> methods can
            change the date.
            </para>
            <para>
            The <c>With*</c> methods can be convenient to change a single component of a date, but they must be used with
            some care. Examples to watch out for:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:GTA.Chrono.IDatelike`1.WithYear(System.Int32)"/> changes the year component of a year-month-day value. Do not use this method if you
            want the ordinal to stay the same after changing the year, of if you want the week and weekday values to stay
            the same.
            </description>
            </item>
            <item>
            <description>
            Do not combine two <c>With*</c> methods to change two components of the date. For example to change both the
            year and month components of a date. This could fail because an intermediate value does not exist, while the
            final date would be valid.
            </description>
            </item>
            </list>
            For more complex changes to a date, it is best to create a new <see cref="T:GTA.Chrono.IDatelike`1"/> value instead of
            altering an existing date.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.Year">
            <summary>
            Returns the year part of this interface. The returned value is an integer in the range of <see langword="int"/>.
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.Month">
            <summary>
            Returns the month part of this interface. The returned value is an integer between 1 and 12.
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.Month0">
            <summary>
            Returns the zero-based month part of this interface.
            The returned value is an integer between 0 and 11 (the same as <see cref="P:GTA.Chrono.IDatelike`1.Month"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.Day">
            <summary>
            Returns the day-of-month part of this interface. The returned value is an integer between 1 and 31.
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.Day0">
            <summary>
            Returns the zero-based day-of-month part of this interface.
            The returned value is an integer between 0 and 30 (the same as <see cref="P:GTA.Chrono.IDatelike`1.Day"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.DayOfYear">
            <summary>
            Returns the day of the year represented by this interface starting from 1.
            The returned value is an integer between 1 and 366.
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.DayOfYear0">
            <summary>
            Returns the day of the year represented by this interface starting from 0.
            The returned value is an integer between 0 and 365 (the same as <see cref="P:GTA.Chrono.IDatelike`1.DayOfYear"/> minus 1).
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.DayOfWeek">
            <summary>
            Returns the day of the week represented by this interface in <see cref="T:System.DayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Sunday, 1 indicates Monday, 2 indicates
            Tuesday, 3 indicates Wednesday, 4 indicates Thursday, 5 indicates Friday, and 6 indicates Saturday.
            </summary>
        </member>
        <member name="P:GTA.Chrono.IDatelike`1.IsoDayOfWeek">
            <summary>
            Returns the day of the week for ISO 8601 represented by this interface in <see cref="T:GTA.Chrono.IsoDayOfWeek"/>.
            The returned value is an integer between 0 and 6, where 0 indicates Monday, 1 indicates Tuesday,
            2 indicates Wednesday, 3 indicates Thursday, 4 indicates Friday, 5 indicates Saturday, and 6 indicates
            Sunday.
            </summary>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the year number changed, while keeping the same month and day.
            </summary>
            <param name="year">The new year.</param>
            <returns>
            An object whose value is the date represented by this instance but the year is the specified
            <paramref name="year"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The date is February 29 in a leap year but the specified <paramref name="year"/> is a non-leap one.
            </exception>
            <remarks>
            Do not use this method if you want the ordinal to stay the same after changing the year, or if you want the
            week and weekday values to stay the same.
            </remarks>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithMonth(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the month number (starting from 1) changed.
            </summary>
            <param name="month">The new month.</param>
            <returns>
            An object whose value is the date represented by this instance but the month is the specified
            <paramref name="month"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month"/> is invalid (not an integer between 1 and 12).
            </exception>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithMonth0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the month number (starting from 0) changed.
            </summary>
            <param name="month0">The new month.</param>
            <returns>
            An object whose value is the date represented by this instance but the month is the specified
            <paramref name="month0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="month0"/> is invalid (not an integer between 0 and 11).
            </exception>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithDay(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the day of month (starting from 1) changed.
            </summary>
            <param name="day">The new day of month.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of month is the specified
            <paramref name="day"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithDay0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the day of month (starting from 0) changed.
            </summary>
            <param name="day0">The new day of month.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of month is the specified
            <paramref name="day0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="day0"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithDayOfYear(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the day of year (starting from 1) changed.
            </summary>
            <param name="dayOfYear">The day of year.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of year is
            <paramref name="dayOfYear"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear"/> is invalid.
            </exception>
        </member>
        <member name="M:GTA.Chrono.IDatelike`1.WithDayOfYear0(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.IDatelike`1"/> with the day of year (starting from 0) changed.
            </summary>
            <param name="dayOfYear0">The day of year.</param>
            <returns>
            An object whose value is the date represented by this instance but the day of year is
            <paramref name="dayOfYear0"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="dayOfYear0"/> is invalid.
            </exception>
        </member>
        <member name="F:GTA.Chrono.Internals.OlToMdl">
            <summary>
            Converts Ol to Mdl (where the day of month will be the 1st).
            </summary>
        </member>
        <member name="M:GTA.Chrono.IntExtensions.RemEuclid(System.Int32,System.Int32)">
            <summary>
            Calculates the least non-negative remainder of <paramref name="lhs"/> (mod <paramref name="rhs"/>).
            This is done as if by the Euclidean division algorithm.
            </summary>
        </member>
        <member name="M:GTA.Chrono.IntExtensions.RemEuclid(System.Int64,System.Int64)">
            <summary>
            Calculates the least non-negative remainder of <paramref name="lhs"/> (mod <paramref name="rhs"/>).
            This is done as if by the Euclidean division algorithm.
            </summary>
        </member>
        <member name="T:GTA.Chrono.InvalidInternalMonthOfGameClockException">
            <summary>
            The exception that is thrown when an invoked method tries to return the normalized current date or date time
            but the internal month starting from 0 is not in the range of 0 to 11 and therefore the date cannot be
            semantically normalized.
            </summary>
        </member>
        <member name="T:GTA.Chrono.IsoDayOfWeek">
            <summary>
            Specifies the day of the week with their numerical value according to ISO 8601.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Monday">
            <summary>
            Indicates Monday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Tuesday">
            <summary>
            Indicates Tuesday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Wednesday">
            <summary>
            Indicates Wednesday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Thursday">
            <summary>
            Indicates Thursday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Friday">
            <summary>
            Indicates Friday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Saturday">
            <summary>
            Indicates Saturday.
            </summary>
        </member>
        <member name="F:GTA.Chrono.IsoDayOfWeek.Sunday">
            <summary>
            Indicates Sunday.
            </summary>
        </member>
        <member name="T:GTA.Chrono.ITimelike`1">
            <summary>
            Defines the common set of methods for time component.
            </summary>
        </member>
        <member name="P:GTA.Chrono.ITimelike`1.Hour">
            <summary>
            Gets the hour component of the time represented by this interface.
            </summary>
        </member>
        <member name="P:GTA.Chrono.ITimelike`1.Hour12">
            <summary>
            Gets the hour number from 1 to 12 of the time represented by this interface with a boolean flag, which is
            <see langword="false"/> for AM and <see langword="true"/> for PM.
            </summary>
        </member>
        <member name="P:GTA.Chrono.ITimelike`1.Minute">
            <summary>
            Gets the minute component of the time represented by this interface.
            </summary>
        </member>
        <member name="P:GTA.Chrono.ITimelike`1.Second">
            <summary>
            Gets the second component of the time represented by this interface.
            </summary>
        </member>
        <member name="P:GTA.Chrono.ITimelike`1.SecondsFromMidnight">
            <summary>
            Gets the number of seconds past the last midnight.
            </summary>
        </member>
        <member name="M:GTA.Chrono.ITimelike`1.GetHour12(System.Int32@)">
            <returns>
            <see langword="true"/> if the time represented by this interface is in from midnight to noon (where
            <see cref="P:GTA.Chrono.ITimelike`1.Hour"/> is between 0 and 11); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.ITimelike`1.WithHour(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.ITimelike`1"/> with the hour number changed.
            </summary>
            <param name="hour">The new hour.</param>
            <returns>
            An object whose value is the time represented by this interface but the hour is the specified
            <paramref name="hour"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.ITimelike`1.WithMinute(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.ITimelike`1"/> with the minute number changed.
            </summary>
            <param name="minute">The new minute.</param>
            <returns>
            An object whose value is the time represented by this interface but the minute is the specified
            <paramref name="minute"/>.
            </returns>
        </member>
        <member name="M:GTA.Chrono.ITimelike`1.WithSecond(System.Int32)">
            <summary>
            Makes a new <see cref="T:GTA.Chrono.ITimelike`1"/> with the second number changed.
            </summary>
            <param name="second">The new second.</param>
            <returns>
            An object whose value is the time represented by this interface but the second is the specified
            <paramref name="second"/>.
            </returns>
        </member>
        <member name="T:GTA.Chrono.MonthDayFlags">
            <summary>
            <para>
            Month, day of month and year flags: `<c>(month &lt;&lt; 9) | (day &lt;&lt; 4) | flags</c>`
            </para>
            <para>
            The whole bits except for the least 3 bits are referred as `<c>Mdl</c>` (month, day of month and leap flag),
            which is an index to the <see cref="F:GTA.Chrono.Internals.MdlToOl"/> lookup table.
            </para>
            <para>
            The methods implemented on <see cref="T:GTA.Chrono.MonthDayFlags"/> do not always return a valid value.
            Dates that can't exist, like February 30, can still be represented.
            Use <see cref="P:GTA.Chrono.MonthDayFlags.IsValid"/> to check whether the date is valid.
            </para>
            </summary>
        </member>
        <member name="T:GTA.Chrono.OrdFlags">
            <summary>
            <para>
            Ordinal (day of year) and year flags: `<c>(ordinal &lt;&lt; 4) | flags</c>`.
            </para>
            <para>
            The whole bits except for the least 3 bits are referred as `<c>Ol</c>` (ordinal and leap flag),
            which is an index to the <see cref="F:GTA.Chrono.Internals.OlToMdl"/> lookup table.
            </para>
            <para>
            The methods implemented on <see cref="T:GTA.Chrono.OrdFlags"/> always return a valid value.
            </para>
            </summary>
        </member>
        <member name="T:GTA.Chrono.YearFlags">
            <summary>
            The YearFlags stores this information into 4 bits `<c>abbb</c>`,
            where `<c>a</c>` is `<c>1</c>` for the common year (simplifies the <see cref="T:GTA.Chrono.OrdFlags"/> validation)
            and `<c>bbb</c>` is a non-zero <see cref="T:GTA.Chrono.IsoDayOfWeek"/> (mapping <see cref="F:GTA.Chrono.IsoDayOfWeek.Monday"/> to 7,
            <see cref="F:GTA.Chrono.IsoDayOfWeek.Tuesday"/> to 1 and so on) of the last day in the past year.
            </summary>
        </member>
        <member name="F:GTA.Chrono.YearFlags.YearToFlags">
            <summary>
            Contains dominical letters.
            </summary>
        </member>
        <member name="T:GTA.Graphics.Scripted2DGfxSettings">
            <summary>
            Represents a static class to access global scripted 2D graphics settings.
            </summary>
            <remarks>
            Changing values that can be accessed by this class will affect all scripts including game ysc scripts
            and external scripts not for SHVDN.
            </remarks>
        </member>
        <member name="P:GTA.Graphics.Scripted2DGfxSettings.DrawsBehindPauseMenu">
            <summary>
            Sets whether to display this scripted gfx when the game pauses where the pause menu is drawn.
            The setting is defaulted to off (<see langword="false"/>).
            </summary>
        </member>
        <member name="P:GTA.Graphics.Scripted2DGfxSettings.DrawOrder">
            <summary>
            Sets scripted graphics draw order.
            The default setting is <see cref="F:GTA.Graphics.ScriptedGfxDrawOrder.AfterHud"/>.
            </summary>
        </member>
        <member name="M:GTA.Graphics.Scripted2DGfxSettings.SetAlignmentType(GTA.Graphics.UIAlignment,GTA.Graphics.UIAlignment)">
            <summary>
            Sets the alignment type to the safezone.
            </summary>
            <param name="alignX">
            The x alignment type.
            The following is the list of acceptable values that make the game aligns 2D graphic elements differently:
            <see cref="F:GTA.Graphics.UIAlignment.Left"/> or <see cref="F:GTA.Graphics.UIAlignment.Right"/>.
            </param>
            <param name="alignY">
            The y alignment type.
            The following is the list of acceptable values that make the game aligns 2D graphic elements differently:
            <see cref="F:GTA.Graphics.UIAlignment.Top"/> or <see cref="F:GTA.Graphics.UIAlignment.Bottom"/>.
            </param>
        </member>
        <member name="M:GTA.Graphics.Scripted2DGfxSettings.SetAlignmentOffsetAndSize(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Sets the alignment offset and size.
            </summary>
            <param name="offset">
            <para>
            The <see cref="T:System.Drawing.PointF"/> value to offset all x, y coords passed to 2d renderer,
            where 0 is at the top left corner of the screen and 1 is at the bottom right corner of the screen.
            </para>
            <para>
            Set <c>new PointF(0, 0)</c> to revert to the default value.
            The method will not assert that both offset values are within the range of 0 to 1 inclusive.
            </para>
            </param>
            <param name="size">
            <para>
            If you are aligned to the right or bottom of the screen, it assumes the x or y size of everything is this.
            This makes the calculations for positioning multiple UI elements of different sizes easier.
            Set this to the size of the largest element.
            </para>
            <para>
            Set <c>new SizeF(0, 0)</c> to revert to the default value.
            The method will not assert that both size values are within the range of 0 to 1 inclusive.
            </para>
            </param>
        </member>
        <member name="M:GTA.Graphics.Scripted2DGfxSettings.ResetAlignment">
            <summary>
            Resets all the alignment parameters to unaligned with no offsets.
            </summary>
            <remarks>
            Calling this method has the same effect as calling <see cref="M:GTA.Graphics.Scripted2DGfxSettings.SetAlignmentType(GTA.Graphics.UIAlignment,GTA.Graphics.UIAlignment)"/> with both parameters
            assigned to <see cref="F:GTA.Graphics.UIAlignment.Ignore"/> and calling <see cref="M:GTA.Graphics.Scripted2DGfxSettings.SetAlignmentOffsetAndSize(System.Drawing.PointF,System.Drawing.SizeF)"/>
            with the zero offset and the zero size.
            </remarks>
        </member>
        <member name="M:GTA.Graphics.Scripted2DGfxSettings.GetAlignPosition(System.Drawing.PointF)">
            <summary>
            Get a position on screen given the current alignment setup.
            </summary>
            <param name="offset">
            The input <see cref="T:System.Drawing.PointF"/> value in screen space (not 1280x720 screen pixel space),
            where 0 is at the top left corner of the screen and 1 is at the bottom right corner of the screen.
            </param>
        </member>
        <member name="F:GTA.Graphics.ScriptedGfxDrawOrder.AfterHud">
            <summary>
            The default value.
            When you draw scripted graphics such as texts, rects, or textures on a render target (texture),
            you need to specify this value.
            </summary>
        </member>
        <member name="T:GTA.Graphics.TextureAsset">
            <summary>
            Represents a struct that contains a <see cref="P:GTA.Graphics.TextureAsset.Txd"/> and a texture name <see cref="T:System.String"/> to use a texture
            (<c>rage::grcTexturePC11</c>).
            </summary>
            <remarks>
            You should not use the default constructor. The fallback behavior can be changed from filling in the 2 values
            with <see langword="null"/> after the codebase of SHVDN starts to use C# 10 or later C# version.
            </remarks>
        </member>
        <member name="P:GTA.Graphics.TextureAsset.Txd">
            <summary>
            Gets the <see cref="P:GTA.Graphics.TextureAsset.Txd"/> struct of texture dictionary name.
            </summary>
        </member>
        <member name="P:GTA.Graphics.TextureAsset.TextureName">
            <summary>
            Gets the texture name.
            </summary>
        </member>
        <member name="M:GTA.Graphics.TextureAsset.HashTextureName">
            <summary>
            Computes the hash of <see cref="P:GTA.Graphics.TextureAsset.TextureName"/> in the same way as how the game calculates hashes for
            texture names to store in a <c>rage::fwAssetStore&lt;rage::pgDictionary&lt;rage::grcTexture&gt;,rage::fwTxdDef&gt;</c>
            and as how <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> calculates.
            May be useful when you want to get the identifier in the same way as how the game handles texture
            dictionaries or when you investigate game memory to see how textures are stored in the texture dictionary.
            </summary>
            <returns>The hash value calculated from <see cref="P:GTA.Graphics.TextureAsset.TextureName"/>.</returns>
        </member>
        <member name="T:GTA.Graphics.Txd">
            <summary>
            Represents a struct that contains a texture dictionary <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:GTA.Graphics.Txd.Name">
            <summary>
            Gets the name of this texture dictionary.
            </summary>
        </member>
        <member name="M:GTA.Graphics.Txd.HashName">
            <summary>
            Computes the hash of <see cref="P:GTA.Graphics.Txd.Name"/> in the same way as how the game calculates hashes for texture
            dictionaries to store in the global <c>rage::fwTxdStore</c> and as how
            <see cref="M:GTA.StringHash.AtStringHashUtf8(System.String,System.UInt32)"/> calculates.
            May be useful when you want to get the identifier in the same way as how the game handles texture
            dictionaries or when you investigate game memory to see how textures are stored in texture dictionaries
            (should be in a <c>rage::pgDictionary&lt;rage::grcTexturePC&gt;</c> instance).
            </summary>
            <returns>The hash value calculated from <see cref="P:GTA.Graphics.Txd.Name"/>.</returns>
        </member>
        <member name="P:GTA.Graphics.Txd.IsLoaded">
            <summary>
            Gets a value indicating whether the textures of this <see cref="T:GTA.Graphics.Txd"/> are loaded
            the global <c>rage::fwTxdStore</c> so they are ready to use.
            </summary>
            <remarks>
            You might want to check if this property returns <see langword="true"/> before calling
            <see cref="M:GTA.Graphics.Txd.Request"/>. If already, you should not want to call <see cref="M:GTA.Graphics.Txd.MarkAsNoLongerNeeded"/>
            after your script finished using the texture dictionary.
            Another SHVDN script will crash the game for access violation during some texture
            operation if you call <see cref="M:GTA.Graphics.Txd.MarkAsNoLongerNeeded"/> on a <see cref="T:GTA.Graphics.Txd"/>
            that is loaded before your script tried to use and if the game tries to unload the textures of the texture
            dictionary equivalent to said <see cref="T:GTA.Graphics.Txd"/>.
            </remarks>
        </member>
        <member name="M:GTA.Graphics.Txd.Request">
            <summary>
            Attempts to load the textures of this <see cref="T:GTA.Graphics.Txd"/> into memory.
            You do not need to call this method if this <see cref="T:GTA.Graphics.Txd"/> is loaded by another way,
            such as <see cref="T:GTA.PedHeadshot"/>.
            </summary>
            <remarks>
            Allocates a <c>CScriptResource_TextureDictionary</c> instance for the SHVDN runtime.
            </remarks>
        </member>
        <member name="M:GTA.Graphics.Txd.Request(System.Int32)">
            <summary>
            Attempts to load the textures of this <see cref="T:GTA.Graphics.Txd"/> into memory for a given period of time.
            You do not need to call this method if this <see cref="T:GTA.Graphics.Txd"/> is loaded by another way,
            such as <see cref="T:GTA.PedHeadshot"/>.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.Graphics.Txd"/>.</param>
            <returns><see langword="true"/> if this <see cref="T:GTA.Graphics.Txd"/> is loaded; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Allocates a <c>CScriptResource_TextureDictionary</c> instance for the SHVDN runtime.
            </remarks>
        </member>
        <member name="M:GTA.Graphics.Txd.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.Graphics.Txd"/> and it can be freed from memory.
            You do not need to call this method if this <see cref="T:GTA.Graphics.Txd"/> was loaded by another way before your script
            used this <see cref="T:GTA.Graphics.Txd"/>, such as <see cref="T:GTA.PedHeadshot"/>.
            </summary>
            <remarks>
            Releases a <c>CScriptResource_TextureDictionary</c> instance from the <c>CGameScriptHandler</c> for
            the SHVDN runtime.
            </remarks>
        </member>
        <member name="M:GTA.Graphics.Txd.Equals(GTA.Graphics.Txd)">
            <summary>
            Returns <see langword="true"/> if the Jenkins-one-at-a-time (joaat) hash value of <see cref="P:GTA.Graphics.Txd.Name"/>
            matches that of <paramref name="other"/>, as the game uses joaat hashes as identifiers of texture dictionaries.
            </summary>
        </member>
        <member name="T:GTA.Graphics.UIAlignment">
            <summary>
            An enumeration of all possible values where scripted draw commands align 2d graphic elements in different ways
            and the default value for no special alignment.
            </summary>
            <remarks>
            This enumeration specifies <see cref="T:System.Byte"/> as the base type as the game internally uses 1-byte values
            for UI alignment types.
            </remarks>
        </member>
        <member name="F:GTA.Graphics.UIAlignment.Left">
            <summary>
            The left alignment value, which can be used for the horizontal alignment.
            </summary>
            <remarks>
            Represents 'L' out of the  ASCII characters.
            </remarks>
        </member>
        <member name="F:GTA.Graphics.UIAlignment.Right">
            <summary>
            The right alignment value, which can be used for the horizontal alignment.
            </summary>
            <remarks>
            Represents 'R' out of the ASCII characters.
            </remarks>
        </member>
        <member name="F:GTA.Graphics.UIAlignment.Top">
            <summary>
            The top alignment value, which can be used for the vertical alignment.
            </summary>
            <remarks>
            Represents 'T' out of the ASCII characters.
            </remarks>
        </member>
        <member name="F:GTA.Graphics.UIAlignment.Bottom">
            <summary>
            The bottom alignment value, which can be used for the vertical alignment.
            </summary>
            <remarks>
            Represents 'B' out of the ASCII characters.
            </remarks>
        </member>
        <member name="F:GTA.Graphics.UIAlignment.Ignore">
            <summary>
            The canonical value of the ignore value (represents 'I' in ASCII characters),
            where script 2d draw commands skips the UI alignment.
            </summary>
            <remarks>
            Although this value is the initial value for the UI alignment when the game launches,
            script 2d draw commands do some alignment operation only if one of the acceptable values is set
            (you can confirm this by searching the function that can be found with
            <c>"40 80 FE 4C 75 08 F3 0F 10 7C 24 78 EB 2A 40 80 FE 52 75 0C"</c>).
            </remarks>
        </member>
        <member name="T:GTA.EulerRotationOrder">
            <summary>
            <para>The order in which to apply rotations in world space.</para>
            <para>
            For instance, <c>Entity.Rotation = new Vector(30f, 45f, 60f);</c>, where the rotation order is the same as <see cref="F:GTA.EulerRotationOrder.YXZ"/> in the setter of <c>Entity.Rotation</c>,
            will set (almost) the same rotation as <c>Entity.Quaternion = Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad);</c>
            on condition that <c>deg2Rad</c> is calculated with <c>(System.Math.PI / 180.0)</c>.
            </para>
            </summary>
            <remarks>Applying rotations in the reverse order in local space will get the same result.</remarks>
        </member>
        <member name="T:GTA.Math.Matrix">
            <summary>
            Defines a 4x4 matrix.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M11">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M12">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M13">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M14">
            <summary>
            Gets or sets the element of the matrix that exists in the first row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M21">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M22">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M23">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M24">
            <summary>
            Gets or sets the element of the matrix that exists in the second row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M31">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M32">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M33">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M34">
            <summary>
            Gets or sets the element of the matrix that exists in the third row and fourth column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M41">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and first column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M42">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and second column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M43">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and third column.
            </summary>
        </member>
        <member name="F:GTA.Math.Matrix.M44">
            <summary>
            Gets or sets the element of the matrix that exists in the fourth row and fourth column.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Matrix"/> structure.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:GTA.Math.Matrix.Zero">
            <summary>
            A <see cref="T:GTA.Math.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="P:GTA.Math.Matrix.Identity">
            <summary>
            The identity <see cref="T:GTA.Math.Matrix"/>.
            </summary>
        </member>
        <member name="P:GTA.Math.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:GTA.Math.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:GTA.Math.Matrix.GetOrigin">
            <summary>Gets the origin of the coordinate system.</summary>
            <returns>The origin of the coordinate system.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.SetOrigin(GTA.Math.Vector3)">
            <summary>Sets the origin of the coordinate system to the given vector.</summary>
            <param name="newOrigin">The new origin of the coordinate system.</param>
        </member>
        <member name="M:GTA.Math.Matrix.GetScaleVector(System.Single)">
            <summary>Returns a 3D scale vector calculated from this matrix (where each component is the magnitude of a row vector) with error tolerance.</summary>
        </member>
        <member name="P:GTA.Math.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <see langword="true" /> if this instance is an identity matrix; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Math.Matrix.HasInverse">
            <summary>
            Gets a value indicating whether this instance has an inverse matrix.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.Inverse">
            <summary>
            Returns the inverted matrix.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.FastInvert">
            <summary>
            Fast inverts the matrix.
            The matrix must be orthogonal to calculate the approximately correct result.
            </summary>
            <inheritdoc cref="M:GTA.Math.Matrix.FastInverse" path="/remarks"/>
        </member>
        <member name="M:GTA.Math.Matrix.FastInverse">
            <summary>
            Returns the inverted matrix fast.
            The matrix must be orthogonal to calculate the approximately correct result.
            </summary>
            <remarks>
            <para>
            </para>
            Affine translation will be set to none, which is the same as that of <see cref="P:GTA.Math.Matrix.Identity"/>.
            The result will be a bit inaccurate than <see cref="M:GTA.Math.Matrix.Inverse"/>.
            <para>
            Identical to how <c>rage::Matrix44::FastInverse(rage::Matrix44 *this, rage::Matrix44 const &amp;m)</c>
            calculates, where the prameter <c>m</c> is the source matrix and the parameter <c>this</c> is the
            destination matrix.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)">
            <summary>
            Apply the transformation matrix to a point in world space
            </summary>
            <param name="point">The original vertex location</param>
            <returns>The vertex location transformed by the given <see cref="T:GTA.Math.Matrix"/></returns>
        </member>
        <member name="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)">
            <summary>
            Calculates the position of a point before this transformation matrix gets applied
            </summary>
            <param name="point">The transformed vertex location</param>
            <returns>The original vertex location before being transformed by the given <see cref="T:GTA.Math.Matrix"/></returns>
        </member>
        <member name="M:GTA.Math.Matrix.TransformVector(GTA.Math.Vector3)">
            <summary>
            Transform a vector with this transformation <see cref="T:GTA.Math.Matrix"/>.
            Will not take into account translation part of the <see cref="T:GTA.Math.Matrix"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector transformed by the given <see cref="T:GTA.Math.Matrix"/>.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.InverseTransformVector(GTA.Math.Vector3)">
            <summary>
            Calculates the vector before this transformation matrix gets applied.
            This operation is not affected by position of the transform.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector transformed by the inverse of the given <see cref="T:GTA.Math.Matrix"/>.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.TransformDirection(GTA.Math.Vector3)">
            <summary>
            Transform a direction vector with this transformation <see cref="T:GTA.Math.Matrix"/>.
            Will not take into account scale or translation part of the <see cref="T:GTA.Math.Matrix"/>.
            The returned vector has the same length as <paramref name="direction"/>.
            </summary>
            <param name="direction">The direction vector.</param>
            <returns>The direction vector transformed by the given <see cref="T:GTA.Math.Matrix"/>.</returns>
            <remarks>You should use <see cref="M:GTA.Math.Matrix.TransformPoint(GTA.Math.Vector3)"/> for the conversion if the vector represents a position rather than a direction.</remarks>
        </member>
        <member name="M:GTA.Math.Matrix.InverseTransformDirection(GTA.Math.Vector3)">
            <summary>
            Calculates the direction vector before this transformation matrix gets applied.
            This operation is not affected by scale or position of the transform.
            The returned vector has the same length as <paramref name="direction"/>.
            </summary>
            <param name="direction">The direction vector.</param>
            <returns>The vector transformed by the inverse of the given <see cref="T:GTA.Math.Matrix"/>.</returns>
            <remarks>You should use <see cref="M:GTA.Math.Matrix.InverseTransformPoint(GTA.Math.Vector3)"/> for the conversion if the vector represents a position rather than a direction.</remarks>
        </member>
        <member name="M:GTA.Math.Matrix.Add(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Subtract(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Multiply(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Divide(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Negate(GTA.Math.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Invert(GTA.Math.Matrix)">
            <summary>
            Calculates the inverse of a matrix if it exists.
            </summary>
            <returns>The inverse of the matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Lerp(GTA.Math.Matrix,GTA.Math.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationAxis(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationQuaternion(GTA.Math.Quaternion)">
            <summary>
            Creates a rotation matrix from a rotation.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Scaling(GTA.Math.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Translation(GTA.Math.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Transpose(GTA.Math.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ApplyScale(System.Single)">
            <summary>
            Applies scale to this matrix.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The matrix applied the scale.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ApplyScale(GTA.Math.Vector3)">
            <summary>
            Applies scale to this matrix.
            </summary>
            <param name="scale">The scale vector.</param>
            <returns>The matrix applied the scale.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.GetMatrixWithoutScale">
            <summary>
            Returns matrix after RemoveScaling.
            </summary>
            <returns>The matrix without scale information.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.GetMatrixWithoutScale(System.Single)">
            <summary>
            Returns matrix after RemoveScaling with error tolerance.
            </summary>
            <param name="tolerance">The error tolerance.</param>
            <returns>The matrix without scale information.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RemoveTranslation">
            <summary>
            Returns the same matrix but without translation.
            </summary>
            <returns>The matrix without translation information.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.RemoveScaling">
            <summary>
            Remove any scaling from this matrix (ie magnitude of each row is 1).
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.RemoveScaling(System.Single)">
            <summary>
            Remove any scaling from this matrix (ie magnitude of each row is 1) with error tolerance.
            </summary>
            <param name="tolerance">The error tolerance.</param>
        </member>
        <member name="M:GTA.Math.Matrix.op_UnaryNegation(GTA.Math.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Addition(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Subtraction(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Division(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(GTA.Math.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Multiply(System.Single,GTA.Math.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Equality(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.op_Inequality(GTA.Math.Matrix,GTA.Math.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ToArray">
            <summary>
            Converts the matrix to an array of floats.
            </summary>
        </member>
        <member name="M:GTA.Math.Matrix.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Matrix.Equals(GTA.Math.Matrix)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:GTA.Math.Plane">
            <summary>
            Represents a plane in 3D space.
            </summary>
            <remarks>
            Do not try to directly read <c>rage::Vector4</c> and <c>rage::Vec4V</c>, which are 16-byte aligned structs,
            using this struct.
            Doing so will result in having an incorrect distance value. Instead, use read them as <see cref="T:GTA.Math.Vector4"/>
            and then convert to <see cref="T:GTA.Math.Plane"/> using the explicit cast.
            </remarks>
        </member>
        <member name="F:GTA.Math.Plane.Normal">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Plane.D">
            <summary>
            Gets or sets the distance component of the vector.
            </summary>
            <value>The distance component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Plane.#ctor(GTA.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Plane"/> class.
            </summary>
            <param name="normal">Initial value for the normal component of the vector.</param>
            <param name="d">Initial value for the distance component of the vector.</param>
        </member>
        <member name="M:GTA.Math.Plane.#ctor(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Plane"/> class.
            </summary>
        </member>
        <member name="M:GTA.Math.Plane.#ctor(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Plane"/> class.
            The resulting plane goes through the given three points.
            The points go around counter-clockwise as you look down on the top surface of the plane, which is the same
            way as the <c>TPlane</c> constructors with 3 <c>TVector</c> points in Unreal Engine 5, and
            <c>rage::Vector4::ComputePlane</c> in GTA V (the name is not included in production builds).
            </summary>
            <param name="a">The first point in the plane.</param>
            <param name="b">The second point in the plane.</param>
            <param name="c">The third point in the plane.</param>
        </member>
        <member name="M:GTA.Math.Plane.DistanceTo(GTA.Math.Vector3)">
            <summary>
            Returns a signed shortest distance in the direction of the normal from this <see cref="T:GTA.Math.Plane"/> to a given
            point.
            </summary>
            <param name="point">A point that are not on the <see cref="T:GTA.Math.Plane"/>.</param>
            <returns>
            The signed shortest distance in the direction of the normal from the <see cref="T:GTA.Math.Plane"/> to the point.
            If the point is above the plane, the distance will be positive.
            If below, the distance will be negative.
            </returns>
        </member>
        <member name="M:GTA.Math.Plane.Intersect3(GTA.Math.Plane@,GTA.Math.Plane@,GTA.Math.Plane@,GTA.Math.Vector3@)">
            <summary>
            Computes intersection point of three planes.
            </summary>
            <param name="a">The first plane.</param>
            <param name="b">The second plane.</param>
            <param name="c">The third plane.</param>
            <param name="dest">
            When this method returns, contains the intersection point of the three planes <paramref name="a"/>,
            <paramref name="b"/>, and <paramref name="c"/> if successfully calculated the point; otherwise,
            the zero value. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if this method successfully calculated the intersection point; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Math.Plane.IntersectsRay(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3@)">
            <summary>
            Finds the intersection point of a ray consisting of the position <paramref name="from"/> and the direction
            normal <paramref name="dir"/> with this <see cref="T:GTA.Math.Plane"/>.
            </summary>
            <param name="from">The start point.</param>
            <param name="dir">The direction.</param>
            <param name="dest">
            When this method returns, contains the intersection point of ray consisting of the position
            <paramref name="from"/> and the direction normal <paramref name="dir"/>, if successfully calculated
            the point; otherwise, the zero value. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if this method successfully calculated the intersection point; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            Returns <see langword="false"/> if the intersection point is before <paramref name="from"/> point.
            </remarks>
        </member>
        <member name="M:GTA.Math.Plane.ProjectPoint(GTA.Math.Vector3)">
            <summary>
            Returns the orthogonal projection of <paramref name="point"/> into a point on the plane.
            </summary>
            <param name="point">A point that are not on the <see cref="T:GTA.Math.Plane"/>.</param>
            <returns>
            The orthogonal projection of <paramref name="point"/> (the closest point on the <see cref="T:GTA.Math.Plane"/> to
            <paramref name="point"/>).
            </returns>
        </member>
        <member name="P:GTA.Math.Plane.Normalized">
            <summary>
            Returns this plane with a magnitude of 1.
            </summary>
        </member>
        <member name="M:GTA.Math.Plane.Normalize">
            <summary>
            Converts the plane into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Plane.Normalize(GTA.Math.Plane)">
            <summary>
            Converts the plane into a unit plane.
            </summary>
            <param name="plane">The plane to normalize.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:GTA.Math.Plane.op_Equality(GTA.Math.Plane,GTA.Math.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Plane.op_Inequality(GTA.Math.Plane,GTA.Math.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Plane.op_Explicit(GTA.Math.Vector4)~GTA.Math.Plane">
            <summary>
            Converts a <see cref="T:GTA.Math.Vector4"/> to a <see cref="T:GTA.Math.Plane"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Plane.op_Explicit(GTA.Math.Plane)~GTA.Math.Vector4">
            <summary>
            Converts a <see cref="T:GTA.Math.Plane"/> to a <see cref="T:GTA.Math.Vector4"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Plane.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Plane.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="F:GTA.Math.Quaternion.X">
            <summary>
            Gets or sets the X component of the quaternion.
            </summary>
            <value>The X component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.Y">
            <summary>
            Gets or sets the Y component of the quaternion.
            </summary>
            <value>The Y component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.Z">
            <summary>
            Gets or sets the Z component of the quaternion.
            </summary>
            <value>The Z component of the quaternion.</value>
        </member>
        <member name="F:GTA.Math.Quaternion.W">
            <summary>
            Gets or sets the W component of the quaternion.
            </summary>
            <value>The W component of the quaternion.</value>
        </member>
        <member name="M:GTA.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Quaternion"/> structure.
            </summary>
            <param name="x">The X component of the quaternion.</param>
            <param name="y">The Y component of the quaternion.</param>
            <param name="z">The Z component of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="M:GTA.Math.Quaternion.#ctor(GTA.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Quaternion"/> structure.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
        </member>
        <member name="P:GTA.Math.Quaternion.Zero">
            <summary>
            A <see cref="T:GTA.Math.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.One">
            <summary>
            A <see cref="T:GTA.Math.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Identity">
            <summary>
            The identity <see cref="T:GTA.Math.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
        </member>
        <member name="P:GTA.Math.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.Negate(GTA.Math.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Add(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Subtract(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Multiplies two Quaternions together.
            </summary>
            <param name="left">The Quaternion on the left side of the multiplication.</param>
            <param name="right">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Multiply(GTA.Math.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Divide(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Divides a quaternion by another.
            </summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Normalize(GTA.Math.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Conjugate(GTA.Math.Quaternion)">
            <summary>
            Creates the conjugate of a specified Quaternion.
            </summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <returns>A new Quaternion that is the conjugate of the specified one.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Invert(GTA.Math.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="quaternion">The quaternion to conjugate and re-normalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Dot(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Lerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.Slerp(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.SlerpUnclamped(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation. The parameter /t/ is not clamped.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:GTA.Math.Quaternion.LookRotation(GTA.Math.Vector3)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> and <see cref="P:GTA.Math.Vector3.WorldUp"/> directions.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.LookRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a rotation with the specified <paramref name="forward"/> and <paramref name="up"/> directions.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.FromToRotation(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a rotation which rotates from fromDirection to toDirection.
            </summary>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTowards(GTA.Math.Quaternion,GTA.Math.Quaternion,System.Single)">
            <summary>
            Rotates a rotation from towards to.
            </summary>
            <param name="from">From Quaternion.</param>
            <param name="to">To Quaternion.</param>
            <param name ="maxDegreesDelta"></param>
        </member>
        <member name="M:GTA.Math.Quaternion.AngleBetween(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Returns the angle in degrees between two rotations a and b.
            </summary>
            <param name="a">The first quaternion to calculate angle.</param>
            <param name="b">The second quaternion to calculate angle.</param>
            <returns>The angle in degrees between two rotations a and b.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <summary>
            <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</para>
            <para>
            For example, <c>Quaternion.Euler(60f, 30f, 45f)</c> will yield (almost) the same result as <c>Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad)</c>
            provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>.
            </para>
            </summary>
            <param name="zaxis">Z degrees.</param>
            <param name ="xaxis">X degrees.</param>
            <param name ="yaxis">Y degrees.</param>
            <remarks>
            <para>You should aware the parameter order are z degrees, x degrees, and then y degrees, not x degrees, y degrees, and then z degrees.</para>
            <para>
            For compatibility with scripts built against v3.6.0 or earlier, this overload does the same as <see cref="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single,GTA.EulerRotationOrder)"/>
            where <see cref="F:GTA.EulerRotationOrder.ZXY"/> is passed as the rotation order.
            In most cases, you should use the other overload <see cref="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single,GTA.EulerRotationOrder)"/> and pass <see cref="F:GTA.EulerRotationOrder.YXZ"/> as the rotation order.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(System.Single,System.Single,System.Single,GTA.EulerRotationOrder)">
            <summary>
            <para>Returns a rotation that rotates degrees in the specified order in world space.</para>
            <para>
            For example, <c>Quaternion.Euler(60f, 30f, 45f, EulerRotationOrder.YXZ)</c> will yield (almost) the same result as
            <c>Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad)</c>
            provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>.
            </para>
            </summary>
            <param name="z">Z degrees.</param>
            <param name ="x">X degrees.</param>
            <param name ="y">Y degrees.</param>
            <param name="rotationOrder">
            The order in which to apply rotations in world space.
            For most methods for the game and native functions, you would like to use <see cref="F:GTA.EulerRotationOrder.YXZ"/>.
            </param>
            <remarks>
            <para>You should aware the parameter order are z degrees, x degrees, and then y degrees, not x degrees, y degrees, and then z degrees.</para>
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3)">
            <summary>
            <para>
            Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            </para>
            <para>
            For example, <c>Quaternion.Euler(new Vector3(30f, 45f, 60f))</c> will yield (almost) the same result as <c>Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad)</c>
            provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>.
            </para>
            </summary>
            <param name="euler">Euler angles in degrees. euler.X = around X axis, euler.Y = around Y axis, euler.Z = around Z axis</param>
            <remarks>
            For compatibility with scripts built against v3.6.0 or earlier, this overload does the same as <see cref="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3,GTA.EulerRotationOrder)"/>
            where <see cref="F:GTA.EulerRotationOrder.ZXY"/> is passed as the rotation order.
            In most cases, you should use the other overload <see cref="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3,GTA.EulerRotationOrder)"/> and pass <see cref="F:GTA.EulerRotationOrder.YXZ"/> as the rotation order.
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.Euler(GTA.Math.Vector3,GTA.EulerRotationOrder)">
            <summary>
            <para>Returns a rotation that rotates degrees in the specified order in world space.</para>
            <para>
            For example, <c>Quaternion.Euler(new Vector3(30f, 45f, 60f), EulerRotationOrder.YXZ)</c> will yield (almost) the same result as <c>Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad)</c>
            provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>.
            </para>
            <para>
            <c>entity.Quaternion = Quaternion.Euler(new Vector3(30f, 45f, 60f), EulerRotationOrder.YXZ)</c> does the same as
            <c>entity.Quaternion = new Vector3(30f, 45f, 60f)</c> provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>..
            </para>
            </summary>
            <param name="euler">Euler angles in degrees. euler.X = around X axis, euler.Y = around Y axis, euler.Z = around Z axis</param>
            <param name="rotationOrder">
            The order in which to apply rotations in world space.
            For most methods for the game and native functions, you would like to use <see cref="F:GTA.EulerRotationOrder.YXZ"/>.
            </param>
        </member>
        <member name="M:GTA.Math.Quaternion.ToEuler(GTA.EulerRotationOrder)">
            <summary>
            Returns a <see cref="T:GTA.Math.Vector3"/> that represents euler angles in degrees.
            Each component is in the range of [-180, 180].
            </summary>
            <param name="rotationOrder">
            The order in which to apply rotations in world space.
            For most methods for the game and native functions, you would like to use <see cref="F:GTA.EulerRotationOrder.YXZ"/>.
            </param>
            <remarks>
            <para>
            May return the other value that represents the same rotation if the rotation has no singularities.
            For instance, <c>Quaternion.Euler(new Vector3(-170f, 45f, 60f), EulerRotationOrder.YXZ).ToEuler(EulerRotationOrder.YXZ)</c>
            will return <c>Vector3(10f, -135f, -120f)</c>
            </para>
            <para>
            If the rotation has singularities, the value for the third axis will be zero just like <see cref="P:GTA.Entity.Rotation"/> does.
            For instance, the return <see cref="T:GTA.Math.Vector3"/> value will have zero as the z value if the rotation has singularities
            and <paramref name="rotationOrder"/> is set to <see cref="F:GTA.EulerRotationOrder.XYZ"/> or <see cref="F:GTA.EulerRotationOrder.YXZ"/>).
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationAxis(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationMatrix(GTA.Math.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            Will NOT work correctly if there is scaling in the matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a Quaternion from the given yaw, pitch, and roll, in radians.</para>
            <para>
            The order of transformations is first yaw, then pitch, then roll (the same as <see cref="F:GTA.EulerRotationOrder.ZXY"/>,
            which is inconvenient to use when calling native functions but the rotation order is kept for compatibility with scripts built against v3.6.0 or earlier.
            Relative to the object's local coordinate axis, this is equivalent to rotation around the y-axis, followed by rotation around the x-axis, followed by rotation around the z-axis.
            For example, <c>Quaternion.RotationYawPitchRoll(60f * deg2Rad, 30f * deg2Rad, 45f * deg2Rad)</c> will yield (almost) the same result as
            <c>Quaternion.RotationAxis(Vector3.UnitY, 45f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitX, 30f * deg2Rad) * Quaternion.RotationAxis(Vector3.UnitZ, 60f * deg2Rad)</c>
            provided that <c>deg2Rad</c> is calculated with <c>(float)((System.Math.PI / 180.0))</c>.
            </para>
            </summary>
            <param name="yaw">The yaw angle, in radians, around the Z-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the X-axis.</param>
            <param name="roll">The roll angle, in radians, around the Y-axis.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.DirectionVectors(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Creates a Quaternion from the given relative x, y, z axis
            </summary>
            The Vectors need to be perpendicular to each other
            <param name="rightVector">Relative X axis</param>
            <param name="forwardVector">Relative Y axis</param>
            <param name="upVector">Relative Z axis</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.GetDirectionVectors(GTA.Math.Quaternion,GTA.Math.Vector3@,GTA.Math.Vector3@,GTA.Math.Vector3@)">
            <summary>
            Get direction vectors from the given quaternion
            </summary>
            <param name="quaternion">The quaternion</param>
            <param name="rightVector">RightVector = relative x axis</param>
            <param name="forwardVector">ForwardVector = relative y axis</param>
            <param name="upVector">UpVector = relative z axis</param>
        </member>
        <member name="M:GTA.Math.Quaternion.op_UnaryNegation(GTA.Math.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Addition(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Subtraction(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(System.Single,GTA.Math.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Division(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Divides a Quaternion by another Quaternion.
            </summary>
            <param name="left">The source Quaternion.</param>
            <param name="right">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Equality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Inequality(GTA.Math.Quaternion,GTA.Math.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.op_Multiply(GTA.Math.Quaternion,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Quaternion,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Quaternion,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="rotation">The quaternion to rotate the vector.</param>
            <param name="point">The vector to be rotated.</param>
            <param name="center">The vector representing the origin of the new coordinate system.</param>
            <returns>The vector after rotation in the original coordinate system.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="point">The vector to be rotated.</param>
            <returns>The vector after rotation.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.RotateTransform(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Rotates the point with rotation.
            </summary>
            <param name="point">The vector to be rotated.</param>
            <param name="center">The vector representing the origin of the new coordinate system.</param>
            <returns>The vector after rotation in the original coordinate system.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation using
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Quaternion.Equals(GTA.Math.Quaternion)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:GTA.Math.Vector2">
            <remarks>
            Guaranteed to be an 8-byte aligned struct, which has the same memory layout as <c>rage::Vector2</c>.
            You can use this struct to read that kind of data using memory dereference.
            The memory layout is different from that of <c>rage::Vec2V</c>, which is 16-byte aligned structs that has a
            vectorized 128-bit value.
            </remarks>
        </member>
        <member name="F:GTA.Math.Vector2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Vector2"/> class.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="P:GTA.Math.Vector2.Normalized">
            <summary>
            Returns this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Zero">
            <summary>
            Returns a zero vector, which is (0, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.One">
            <summary>
            Returns a one vector, which is (1, 1, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:GTA.Math.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:GTA.Math.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Up">
            <summary>
            Returns the up vector. (0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Down">
            <summary>
            Returns the down vector. (0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Right">
            <summary>
            Returns the right vector. (1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Left">
            <summary>
            Returns the left vector. (-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:GTA.Math.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceTo(GTA.Math.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceToSquared(GTA.Math.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the squared distance to.</param>
            <returns>The squared distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Distance(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.DistanceSquared(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Angle(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the angle in degrees between from and to.
            The angle returned is always the acute angle between the two vectors.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.SignedAngle(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the signed angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.ToHeading">
            <summary>
            Converts a vector to a heading.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.RandomXY">
            <summary>
            Returns a new normalized vector with random X and Y components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.Add(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Subtract(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Multiply(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Divide(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Negate(GTA.Math.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Clamp(GTA.Math.Vector2,GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Lerp(GTA.Math.Vector2,GTA.Math.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Vector2.Normalize(GTA.Math.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Dot(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Reflect(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:GTA.Math.Vector2.Minimize(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Maximize(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Addition(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Subtraction(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_UnaryNegation(GTA.Math.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Multiply(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Multiply(System.Single,GTA.Math.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Division(GTA.Math.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Equality(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Inequality(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.op_Implicit(GTA.Math.Vector2)~GTA.Math.Vector3">
            <summary>
            Converts a Vector2 to a Vector3 implicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector2.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector2.Equals(GTA.Math.Vector2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:GTA.Math.Vector3">
            <summary>
            Represents a vector with four single-precision floating-point values that can be used to represent 3D
            coordinates or any other triplet of numeric values.
            </summary>
            <remarks>
            Guaranteed to be a 16-byte aligned struct, which has the same memory layout as <c>rage::Vector3</c> and
            <c>rage::Vec3V</c>, where a padding field is included as the last field in the executable for at least Win64.
            You can use this struct to read these kinds of data using memory dereference. You should not write data to
            contiguous X, Y, Z values using this struct if you are not sure a padding 4-byte value follows after the Z value
            of the contiguous 3 values.
            </remarks>
        </member>
        <member name="F:GTA.Math.Vector3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Vector3"/> class.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="P:GTA.Math.Vector3.Normalized">
            <summary>
            Returns this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.Zero">
            <summary>
            Returns a zero vector, which is (0, 0, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.One">
            <summary>
            Returns a one vector, which is (1, 1, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:GTA.Math.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:GTA.Math.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:GTA.Math.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldUp">
            <summary>
            Returns the world Up vector. (0,0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldDown">
            <summary>
            Returns the world Down vector. (0,0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldNorth">
            <summary>
            Returns the world North vector. (0,1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldSouth">
            <summary>
            Returns the world South vector. (0,-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldEast">
            <summary>
            Returns the world East vector. (1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.WorldWest">
            <summary>
            Returns the world West vector. (-1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeRight">
            <summary>
            Returns the relative Right vector. (1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeLeft">
            <summary>
            Returns the relative Left vector. (-1,0,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeFront">
            <summary>
            Returns the relative Front vector. (0,1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeBack">
            <summary>
            Returns the relative Back vector. (0,-1,0)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeTop">
            <summary>
            Returns the relative Top vector. (0,0,1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.RelativeBottom">
            <summary>
            Returns the relative Bottom vector as used. (0,0,-1)
            </summary>
        </member>
        <member name="P:GTA.Math.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:GTA.Math.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceTo(GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceToSquared(GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceTo2D(GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position">The second vector to calculate the distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceToSquared2D(GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position">The second vector to calculate the squared distance to.</param>
            <returns>The distance to the other vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Distance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceSquared(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Distance2D(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position1">The first vector to calculate the distance to the second vector.</param>
            <param name="position2">The second vector to calculate the distance to the first vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.DistanceSquared2D(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the squared distance between two vectors, ignoring the Z-component.
            </summary>
            <param name="position1">The first vector to calculate the squared distance to the second vector.</param>
            <param name="position2">The second vector to calculate the squared distance to the first vector.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Angle(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the angle in degrees between from and to.
            The angle returned is always the acute angle between the two vectors.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.SignedAngle(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the signed angle in degrees between from and to.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToHeading">
            <summary>
            Converts a vector to a heading.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Around(System.Single)">
            <summary>
            Creates a random vector inside the circle around this position.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Round(System.Int32)">
            <summary>
            Rounds each float inside the vector to a select amount of decimal places (2 by default).
            </summary>
            <param name="decimalPlaces">Number of decimal places to round to</param>
            <returns>The vector containing rounded values</returns>
        </member>
        <member name="M:GTA.Math.Vector3.RandomXY">
            <summary>
            Returns a new normalized vector with random X and Y components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.RandomXYZ">
            <summary>
            Returns a new normalized vector with random X, Y and Z components.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.Add(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Subtract(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Multiply(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Divide(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Negate(GTA.Math.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Clamp(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Lerp(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Vector3.Normalize(GTA.Math.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Dot(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Cross(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Project(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">Vector to project onto, does not assume it is normalized.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.ProjectOnPlane(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="planeNormal">Normal of the plane,  does not assume it is normalized.</param>
            <returns>The Projection of vector onto plane.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Reflect(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The vector to project onto the plane.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:GTA.Math.Vector3.Minimize(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Maximize(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Addition(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Subtraction(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_UnaryNegation(GTA.Math.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="vector">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Multiply(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Multiply(System.Single,GTA.Math.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Division(GTA.Math.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Equality(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Inequality(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.op_Implicit(GTA.Math.Vector3)~GTA.Math.Vector2">
            <summary>
            Converts a Vector3 to a Vector2 implicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToArray">
            <summary>
            Converts the matrix to an array of floats.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector3.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The number format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:GTA.Math.Vector3.Equals(GTA.Math.Vector3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><see langword="true" /> if the current instance is equal to the specified object; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:GTA.Math.Vector4">
            <summary>
            Represents a vector with four single-precision floating-point values that can be used to represent 4D
            coordinates or any other quadruplet of numeric values.
            </summary>
            <remarks>
            Guaranteed to be a 16-byte aligned struct, which has the same memory layout as <c>rage::Vector4</c> and
            <c>rage::Vec4V</c>. You can use this struct to read these kinds of data using memory dereference.
            </remarks>
        </member>
        <member name="F:GTA.Math.Vector4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:GTA.Math.Vector4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:GTA.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Math.Vector4"/> class.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="P:GTA.Math.Vector4.Normalized">
            <summary>
            Returns this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector4.Zero">
            <summary>
            Returns a zero vector, a vector with all components set to <c>0</c>.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector4.One">
            <summary>
            Returns a one vector, a vector with all components set to <c>1</c>.
            </summary>
        </member>
        <member name="P:GTA.Math.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">
            The index of the component to access.
            Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:GTA.Math.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector4.Clamp(GTA.Math.Vector4,GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.Lerp(GTA.Math.Vector4,GTA.Math.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned.
            </remarks>
        </member>
        <member name="M:GTA.Math.Vector4.Normalize(GTA.Math.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.Dot(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.Min(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.Max(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Addition(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Subtraction(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_UnaryNegation(GTA.Math.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Multiply(GTA.Math.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Multiply(System.Single,GTA.Math.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Division(GTA.Math.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Equality(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Inequality(GTA.Math.Vector4,GTA.Math.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.op_Explicit(GTA.Math.Vector3)~GTA.Math.Vector4">
            <summary>
            Converts a <see cref="T:GTA.Math.Vector3"/> to a <see cref="T:GTA.Math.Vector4"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector4.op_Explicit(GTA.Math.Vector4)~GTA.Math.Vector3">
            <summary>
            Converts a <see cref="T:GTA.Math.Vector4"/> to a <see cref="T:GTA.Math.Vector3"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector4.op_Explicit(GTA.Math.Vector2)~GTA.Math.Vector4">
            <summary>
            Converts a <see cref="T:GTA.Math.Vector2"/> to a <see cref="T:GTA.Math.Vector4"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector4.op_Explicit(GTA.Math.Vector4)~GTA.Math.Vector2">
            <summary>
            Converts a <see cref="T:GTA.Math.Vector4"/> to a <see cref="T:GTA.Math.Vector2"/> explicitly.
            </summary>
        </member>
        <member name="M:GTA.Math.Vector4.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.ToString(System.String)">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <param name="format">The format.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:GTA.Math.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the current instance using the specified format string to format
            individual elements and the specified format provider to define culture-specific formatting.
            </summary>
            <param name="format">
            A standard or custom numeric format string that defines the format of individual elements.
            </param>
            <param name="provider">
            A format provider that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:GTA.Native.InputArgument">
            <summary>
            An input argument passed to a script function.
            </summary>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class to a script function input argument.
            </summary>
            <param name="value">The pointer value.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class to a script function input argument.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.InputArgument"/> class and converts a managed object to a script function input argument.
            </summary>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:GTA.Native.InputArgument.ToString">
            <summary>
            Converts the internal value of the argument to its equivalent string representation.
            </summary>
        </member>
        <member name="T:GTA.Native.OutputArgument">
            <summary>
            An output argument passed to a script function.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> class for script functions that output data into pointers.
            Allocates 24 bytes so the instance can allocate for <see cref="T:GTA.Math.Vector3"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> class with an initial value for script functions
            that require the pointer to data instead of the actual data.
            </summary>
            <param name="value">The value to set the data of this <see cref="T:GTA.Native.OutputArgument"/> to.</param>
            <remarks>
            This constructor only supports <see langword="null"/>, <see cref="T:System.String"/>, and classes and structs that implements <see cref="T:GTA.Native.INativeValue"/>.
            Otherwise, this constructor throws an exception.
            </remarks>
        </member>
        <member name="M:GTA.Native.OutputArgument.Finalize">
            <summary>
            Frees the unmanaged resources associated with this <see cref="T:GTA.Native.OutputArgument"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.Alloc(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> class for script functions that output data
            into pointers.
            Allocates a block of memory of specified size.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.AllocForType``1">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.OutputArgument"/> where the storage has a block of memory of
            the blittable struct type specified by the type parameter.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.Init``1(``0)">
            <summary>
            Initializes a <see cref="T:GTA.Native.OutputArgument"/> instance with the specified blittable struct.
            </summary>
        </member>
        <member name="M:GTA.Native.OutputArgument.InitByRef``1(``0@)">
            <summary>
            Initializes a <see cref="T:GTA.Native.OutputArgument"/> instance with the specified blittable struct by reference.
            </summary>
            <remarks>
            You don't have to use <see cref="M:GTA.Native.OutputArgument.GetResultAsBlittableStruct``1"/>, since the content of
            <paramref name="value"/> will be mutated when the <see cref="T:GTA.Native.OutputArgument"/> is passed to
            a native function and the function writes some value in the storage of <see cref="T:GTA.Native.OutputArgument"/>.
            </remarks>
        </member>
        <member name="M:GTA.Native.OutputArgument.GetResult``1">
            <summary>
            Gets the value of data stored in this <see cref="T:GTA.Native.OutputArgument"/>.
            Do not use this method for custom struct types that are not primitives or defined in the SDK/API.
            Use <see cref="M:GTA.Native.OutputArgument.GetResultAsBlittableStruct``1"/> for custom struct types instead.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown when failed to get the result for unsupported type.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the internal storage is already disposed.</exception>
        </member>
        <member name="M:GTA.Native.OutputArgument.GetResultAsBlittableStruct``1">
            <summary>
            Gets the value of data stored in this <see cref="T:GTA.Native.OutputArgument"/> as a blittable struct without any conversion.
            Do not use this method for scripting types defined in the SDK/API such as <see cref="T:GTA.Math.Vector3"/>.
            Use <see cref="M:GTA.Native.OutputArgument.GetResult``1"/> for scripting types instead.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when the internal storage is already disposed.</exception>
        </member>
        <member name="T:GTA.Native.Function">
            <summary>
            A static class which handles script function execution.
            </summary>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and returns its return value.
            </summary>
            <param name="hash">The hashed name of the native script function.</param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash)">
            <summary>
            Calls the specified native script function and returns its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument">The input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and ignores its return value, without letting
            the <see cref="T:GTA.Script"/> get timeout and stop being executed even if the script blocks other ones
            longer than the timeout set by the user config.
            </summary>
            <param name="hash">
            The hash code of the native function, which is a magic number associated with native.
            </param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
            <remarks>
            This method should be used only when the native function is expensive enough to take a long time
            (e.g. 1 or 5 seconds) for better user experience, as calling this variant is more expensive than the normal
            variant.
            </remarks>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"
            />
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc``1(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value, without letting
            the <see cref="T:GTA.Script"/> get timeout and stop being executed even if the script blocks other ones
            longer than the timeout set by the user config.
            </summary>
            <param name="hash">
            The hash code of the native function, which is a magic number associated with native.
            </param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
            <remarks>
            This method should be used only when the native function is expensive enough to take a long time
            (e.g. 1 or 5 seconds) for better user experience, as calling this variant is more expensive than the normal
            variant.
            </remarks>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.Call(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value.
            </summary>
            <param name="hash">The hashed name of the script function.</param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <returns>The return value of the native.</returns>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument[])">
            <summary>
            Calls the specified native script function and ignores its return value, without letting
            the <see cref="T:GTA.Script"/> get timeout and stop being executed even if the script blocks other ones
            longer than the timeout set by the user config.
            </summary>
            <param name="hash">
            The hash code of the native function, which is a magic number associated with native.
            </param>
            <param name="arguments">A list of input and output arguments to pass to the native script function.</param>
            <remarks>
            This method should be used only when the native function is expensive enough to take a long time
            (e.g. 1 or 5 seconds) for better user experience, as calling this variant is more expensive than the normal
            variant. `<c>ON_ENTER_MP</c>` is one of the examples of the native functions where calling this method
            would be justified over the normal variant.
            </remarks>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <inheritdoc
            cref="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)"/>
        </member>
        <member name="M:GTA.Native.Function.CallLongBlockingFunc(GTA.Native.Hash,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument,GTA.Native.InputArgument)">
            <summary>
            Calls the specified native script function and ignores its return value, without letting
            the <see cref="T:GTA.Script"/> get timeout and stop being executed even if the script blocks other ones
            longer than the timeout set by the user config.
            </summary>
            <param name="hash">
            The hash code of the native function, which is a magic number associated with native.
            </param>
            <param name="argument0">The 1st input or output argument to pass to the native script function.</param>
            <param name="argument1">The 2nd input or output argument to pass to the native script function.</param>
            <param name="argument2">The 3rd input or output argument to pass to the native script function.</param>
            <param name="argument3">The 4th input or output argument to pass to the native script function.</param>
            <param name="argument4">The 5th input or output argument to pass to the native script function.</param>
            <param name="argument5">The 6th input or output argument to pass to the native script function.</param>
            <param name="argument6">The 7th input or output argument to pass to the native script function.</param>
            <param name="argument7">The 8th input or output argument to pass to the native script function.</param>
            <param name="argument8">The 9th input or output argument to pass to the native script function.</param>
            <param name="argument9">The 10th input or output argument to pass to the native script function.</param>
            <param name="argument10">The 11th input or output argument to pass to the native script function.</param>
            <param name="argument11">The 12th input or output argument to pass to the native script function.</param>
            <param name="argument12">The 13th input or output argument to pass to the native script function.</param>
            <param name="argument13">The 14th input or output argument to pass to the native script function.</param>
            <param name="argument14">The 15th input or output argument to pass to the native script function.</param>
            <param name="argument15">The 16th input or output argument to pass to the native script function.</param>
            <remarks>
            This method should be used only when the native function is expensive enough to take a long time
            (e.g. 1 or 5 seconds) for better user experience, as calling this variant is more expensive than the normal
            variant. `<c>ON_ENTER_MP</c>` is one of the examples of the native functions where calling this method
            would be justified over the normal variant.
            </remarks>
        </member>
        <member name="M:GTA.Native.Function.ObjectToNative(System.Object)">
            <summary>
            Converts a managed object to a native value.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>A native value representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="M:GTA.Native.Function.ObjectFromNative``1(System.UInt64*)">
            <summary>
            Converts a native value to a managed object of a value type.
            </summary>
            <typeparam name="T">The return type. The type should be a value type.</typeparam>
            <param name="value">The native value to convert.</param>
            <returns>A managed object representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="M:GTA.Native.Function.ObjectFromNative(System.Type,System.UInt64*)">
            <summary>
            Converts a native value to a managed object of a reference type.
            </summary>
            <param name="type">The type to convert to. The type should be a reference type.</param>
            <param name="value">The native value to convert.</param>
            <returns>A managed object representing the input <paramref name="value"/>.</returns>
        </member>
        <member name="T:GTA.Native.GlobalVariable">
            <summary>
            A value class which handles access to global script variables.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Native.GlobalVariable"/> class with a variable address.
            </summary>
            <param name="address">The memory address of the global variable.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Get(System.Int32)">
            <summary>
            Gets the global variable at the specified index.
            </summary>
            <param name="index">The index of the global variable.</param>
            <returns>A <see cref="T:GTA.Native.GlobalVariable"/> instance representing the global variable.</returns>
        </member>
        <member name="P:GTA.Native.GlobalVariable.MemoryAddress">
            <summary>
            Gets the native memory address of the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Read``1">
            <summary>
            Gets the value stored in the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
        </member>
        <member name="M:GTA.Native.GlobalVariable.Write``1(``0)">
            <summary>
            Set the value stored in the <see cref="T:GTA.Native.GlobalVariable"/>.
            </summary>
            <param name="value">The new value to assign to the <see cref="T:GTA.Native.GlobalVariable"/>.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.WriteString(System.String,System.Int32)">
            <summary>
            Set the value stored in the <see cref="T:GTA.Native.GlobalVariable"/> to a string.
            </summary>
            <param name="value">The string to set the <see cref="T:GTA.Native.GlobalVariable"/> to.</param>
            <param name="maxSize">The maximum size of the string. Can be found for a given global variable by checking the decompiled scripts from the game.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.SetBit(System.Int32)">
            <summary>
            Set the value of a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> to true.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to set.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.ClearBit(System.Int32)">
            <summary>
            Set the value of a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> to false.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to clear.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.IsBitSet(System.Int32)">
            <summary>
            Gets a value indicating whether a specific bit of the <see cref="T:GTA.Native.GlobalVariable"/> is set.
            </summary>
            <param name="index">The zero indexed bit of the <see cref="T:GTA.Native.GlobalVariable"/> to check.</param>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetStructField(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.Native.GlobalVariable"/> stored at a given offset in a global structure.
            </summary>
            <param name="index">The index the <see cref="T:GTA.Native.GlobalVariable"/> is stored in the structure. For example the Y component of a Vector3 is at index 1.</param>
            <returns>The <see cref="T:GTA.Native.GlobalVariable"/> at the index given.</returns>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetArray(System.Int32)">
            <summary>
            Returns an array of all <see cref="T:GTA.Native.GlobalVariable"/>s in a global array.
            </summary>
            <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
            <returns>The array of <see cref="T:GTA.Native.GlobalVariable"/>s.</returns>
        </member>
        <member name="M:GTA.Native.GlobalVariable.GetArrayItem(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.Native.GlobalVariable"/> stored at a specific index in a global array.
            </summary>
            <param name="index">The array index.</param>
            <param name="itemSize">The number of items stored in each array index. For example an array of Vector3s takes up 3 items.</param>
            <returns>The <see cref="T:GTA.Native.GlobalVariable"/> at the index given.</returns>
        </member>
        <member name="T:GTA.NaturalMotion.CustomHelper">
            <summary>
            A helper class for building a <seealso cref="T:GTA.NaturalMotion.Message" /> and sending it to a given <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.#ctor(GTA.Ped,System.String)">
            <summary>
            Creates a helper class for building a NaturalMotion Euphoria message to send to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> that the message will be applied to.</param>
            <param name="message">The name of the natural motion message.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Start">
            <summary>
            Starts this behavior on the <see cref="T:GTA.Ped"/> and loop it until manually aborted.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Start(System.Int32)">
            <summary>
            Starts this behavior on the <see cref="T:GTA.Ped"/> for a specified duration.
            </summary>
            <param name="duration">How long to apply the behavior for (-1 for looped).</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Update">
            <summary>
            Updates this behavior on the <see cref="T:GTA.Ped"/> if it already running.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.Stop">
            <summary>
            Stops this behavior on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Boolean)">
            <summary>
            Sets an argument to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Int32)">
            <summary>
            Sets an argument to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.Single)">
            <summary>
            Sets an argument to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,System.String)">
            <summary>
            Sets an argument to a <see cref="T:System.String"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.SetArgument(System.String,GTA.Math.Vector3)">
            <summary>
            Sets an argument to a <see cref="T:GTA.Math.Vector3"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.ResetArguments">
            <summary>
            Resets all arguments to their default values.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CustomHelper.ToString">
            <summary>
            Returns the internal message name.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ActivePose">
            <summary>
            Gets a ActivePose Helper class for sending ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ApplyImpulse">
            <summary>
            Gets a ApplyImpulse Helper class for sending ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ApplyBulletImpulse">
            <summary>
            Gets a ApplyBulletImpulse Helper class for sending ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyRelax">
            <summary>
            Gets a BodyRelax Helper class for sending BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBalance">
            <summary>
            Gets a ConfigureBalance Helper class for sending ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBalanceReset">
            <summary>
            Gets a ConfigureBalanceReset Helper class for sending ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            reset the values configurable by the Configure Balance message to their defaults.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureSelfAvoidance">
            <summary>
            Gets a ConfigureSelfAvoidance Helper class for sending ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            this single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBullets">
            <summary>
            Gets a ConfigureBullets Helper class for sending ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureBulletsExtra">
            <summary>
            Gets a ConfigureBulletsExtra Helper class for sending ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureLimits">
            <summary>
            Gets a ConfigureLimits Helper class for sending ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureSoftLimit">
            <summary>
            Gets a ConfigureSoftLimit Helper class for sending ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureShotInjuredArm">
            <summary>
            Gets a ConfigureShotInjuredArm Helper class for sending ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure the injured arm reaction during shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureShotInjuredLeg">
            <summary>
            Gets a ConfigureShotInjuredLeg Helper class for sending ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This single message allows you to configure the injured leg reaction during shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.DefineAttachedObject">
            <summary>
            Gets a DefineAttachedObject Helper class for sending DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceToBodyPart">
            <summary>
            Gets a ForceToBodyPart Helper class for sending ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Apply an impulse to a named body part
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanInDirection">
            <summary>
            Gets a LeanInDirection Helper class for sending LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanRandom">
            <summary>
            Gets a LeanRandom Helper class for sending LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanToPosition">
            <summary>
            Gets a LeanToPosition Helper class for sending LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.LeanTowardsObject">
            <summary>
            Gets a LeanTowardsObject Helper class for sending LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanInDirection">
            <summary>
            Gets a HipsLeanInDirection Helper class for sending HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanRandom">
            <summary>
            Gets a HipsLeanRandom Helper class for sending HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanToPosition">
            <summary>
            Gets a HipsLeanToPosition Helper class for sending HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HipsLeanTowardsObject">
            <summary>
            Gets a HipsLeanTowardsObject Helper class for sending HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanInDirection">
            <summary>
            Gets a ForceLeanInDirection Helper class for sending ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanRandom">
            <summary>
            Gets a ForceLeanRandom Helper class for sending ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanToPosition">
            <summary>
            Gets a ForceLeanToPosition Helper class for sending ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ForceLeanTowardsObject">
            <summary>
            Gets a ForceLeanTowardsObject Helper class for sending ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetStiffness">
            <summary>
            Gets a SetStiffness Helper class for sending SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetMuscleStiffness">
            <summary>
            Gets a SetMuscleStiffness Helper class for sending SetMuscleStiffness <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetWeaponMode">
            <summary>
            Gets a SetWeaponMode Helper class for sending SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to set the character's weapon mode. This is an alternative to the setWeaponMode public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.RegisterWeapon">
            <summary>
            Gets a RegisterWeapon Helper class for sending RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Use this message to register weapon. This is an alternative to the registerWeapon public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotRelax">
            <summary>
            Gets a ShotRelax Helper class for sending ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.FireWeapon">
            <summary>
            Gets a FireWeapon Helper class for sending FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            One shot message apply a force to the hand as we fire the gun that should be in this hand
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ConfigureConstraints">
            <summary>
            Gets a ConfigureConstraints Helper class for sending ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            One shot to give state of constraints on character and response to constraints
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StayUpright">
            <summary>
            Gets a StayUpright Helper class for sending StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StopAllBehaviors">
            <summary>
            Gets a StopAllBehaviors Helper class for sending StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Send this message to immediately stop all behaviors from executing.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterStrength">
            <summary>
            Gets a SetCharacterStrength Helper class for sending SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1]
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterHealth">
            <summary>
            Gets a SetCharacterHealth Helper class for sending SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets character's health on the dead-to-alive scale: [0..1]
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetFallingReaction">
            <summary>
            Gets a SetFallingReaction Helper class for sending SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets the type of reaction if catchFall is called
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterUnderwater">
            <summary>
            Gets a SetCharacterUnderwater Helper class for sending SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Sets viscosity applied to damping limbs
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterCollisions">
            <summary>
            Gets a SetCharacterCollisions Helper class for sending SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            setCharacterCollisions:
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetCharacterDamping">
            <summary>
            Gets a SetCharacterDamping Helper class for sending SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Damp out cartwheeling and somersaulting above a certain threshold
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SetFrictionScale">
            <summary>
            Gets a SetFrictionScale Helper class for sending SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            setFrictionScale:
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.AnimPose">
            <summary>
            Gets a AnimPose Helper class for sending AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ArmsWindmill">
            <summary>
            Gets a ArmsWindmill Helper class for sending ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ArmsWindmillAdaptive">
            <summary>
            Gets a ArmsWindmillAdaptive Helper class for sending ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BalancerCollisionsReaction">
            <summary>
            Gets a BalancerCollisionsReaction Helper class for sending BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyBalance">
            <summary>
            Gets a BodyBalance Helper class for sending BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyFoetal">
            <summary>
            Gets a BodyFoetal Helper class for sending BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyRollUp">
            <summary>
            Gets a BodyRollUp Helper class for sending BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BodyWrithe">
            <summary>
            Gets a BodyWrithe Helper class for sending BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.BraceForImpact">
            <summary>
            Gets a BraceForImpact Helper class for sending BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Buoyancy">
            <summary>
            Gets a Buoyancy Helper class for sending Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.CatchFall">
            <summary>
            Gets a CatchFall Helper class for sending CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Electrocute">
            <summary>
            Gets a Electrocute Helper class for sending Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.FallOverWall">
            <summary>
            Gets a FallOverWall Helper class for sending FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Grab">
            <summary>
            Gets a Grab Helper class for sending Grab <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HeadLook">
            <summary>
            Gets a HeadLook Helper class for sending HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.HighFall">
            <summary>
            Gets a HighFall Helper class for sending HighFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.IncomingTransforms">
            <summary>
            Gets a IncomingTransforms Helper class for sending IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.InjuredOnGround">
            <summary>
            Gets a InjuredOnGround Helper class for sending InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            InjuredOnGround
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Carried">
            <summary>
            Gets a Carried Helper class for sending Carried <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Carried
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Dangle">
            <summary>
            Gets a Dangle Helper class for sending Dangle <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Dangle
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.OnFire">
            <summary>
            Gets a OnFire Helper class for sending OnFire <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PedalLegs">
            <summary>
            Gets a PedalLegs Helper class for sending PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointArm">
            <summary>
            Gets a PointArm Helper class for sending PointArm <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to overridebodyParts: Arms (useLeftArm, useRightArm)
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointGun">
            <summary>
            Gets a PointGun Helper class for sending PointGun <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.PointGunExtra">
            <summary>
            Gets a PointGunExtra Helper class for sending PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.RollDownStairs">
            <summary>
            Gets a RollDownStairs Helper class for sending RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Shot">
            <summary>
            Gets a Shot Helper class for sending Shot <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotNewBullet">
            <summary>
            Gets a ShotNewBullet Helper class for sending ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotSnap">
            <summary>
            Gets a ShotSnap Helper class for sending ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotShockSpin">
            <summary>
            Gets a ShotShockSpin Helper class for sending ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotFallToKnees">
            <summary>
            Gets a ShotFallToKnees Helper class for sending ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the fall to knees shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotFromBehind">
            <summary>
            Gets a ShotFromBehind Helper class for sending ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shot from behind reaction
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotInGuts">
            <summary>
            Gets a ShotInGuts Helper class for sending ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the shot in guts reaction
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotHeadLook">
            <summary>
            Gets a ShotHeadLook Helper class for sending ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.ShotConfigureArms">
            <summary>
            Gets a ShotConfigureArms Helper class for sending ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            configure the arm reactions in shot
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.SmartFall">
            <summary>
            Gets a SmartFall Helper class for sending SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Clone of High Fall with a wider range of operating conditions.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.StaggerFall">
            <summary>
            Gets a StaggerFall Helper class for sending StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Teeter">
            <summary>
            Gets a Teeter Helper class for sending Teeter <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.UpperBodyFlinch">
            <summary>
            Gets a UpperBodyFlinch Helper class for sending UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.Euphoria.Yanked">
            <summary>
            Gets a Yanked Helper class for sending Yanked <see cref="T:GTA.NaturalMotion.Message"/> to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ActivePoseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ActivePoseHelper for sending a ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ActivePose <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.UseGravityCompensation">
            <summary>
            Apply gravity compensation.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ActivePoseHelper.AnimSource">
            <summary>
            Animation source.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ApplyImpulseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ApplyImpulseHelper for sending a ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ApplyImpulse <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.EqualizeAmount">
            <summary>
            0 means straight impulse, 1 means multiply by the mass (change in velocity).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.PartIndex">
            <summary>
            Index of part being hit. -1 apply impulse to COM.
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.Impulse">
            <summary>
            Impulse vector (impulse is change in momentum).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -4500.0f.
            Max value = 4500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.HitPoint">
            <summary>
            Optional point on part where hit. If not supplied then the impulse is applied at the part center.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.LocalHitPointInfo">
            <summary>
            Hit point in local coordinates of body part.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.LocalImpulseInfo">
            <summary>
            Impulse in local coordinates of body part.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyImpulseHelper.AngularImpulse">
            <summary>
            Impulse should be considered an angular impulse.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ApplyBulletImpulseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ApplyBulletImpulseHelper for sending a ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ApplyBulletImpulse <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.EqualizeAmount">
            <summary>
            0 means straight impulse, 1 means multiply by the mass (change in velocity).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.PartIndex">
            <summary>
            Index of part being hit.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.Impulse">
            <summary>
            Impulse vector (impulse is change in momentum).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1000.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.HitPoint">
            <summary>
            Optional point on part where hit.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.LocalHitPointInfo">
            <summary>
            True = hitPoint is in local coordinates of bodyPart, false = hit point is in world coordinates.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ApplyBulletImpulseHelper.ExtraShare">
            <summary>
            If not 0.0 then have an extra bullet applied to spine0 (approximates the COM).  Uses setup from configureBulletsExtra.  0-1 shared 0.0 = no extra bullet, 0.5 = impulse split equally between extra and bullet,  1.0 only extra bullet.  LT 0.0 then bullet + scaled extra bullet.  Eg.-0.5 = bullet + 0.5 impulse extra bullet.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.BodyRelaxHelper">
            <summary>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.BodyRelaxHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyRelaxHelper for sending a BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyRelax <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Set the amount of relaxation across the whole body; Used to collapse the character into a rag-doll-like state.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Relaxation">
            <summary>
            How relaxed the body becomes, in percentage relaxed. 100 being totally rag-dolled, 0 being very stiff and rigid.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Damping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.HoldPose">
            <summary>
            Automatically hold the current pose as the character relaxes - can be used to avoid relaxing into a t-pose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRelaxHelper.DisableJointDriving">
            <summary>
            Sets the drive state to free - this reduces drifting on the ground.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureBalanceHelper">
            <summary>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBalanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBalanceHelper for sending a ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBalance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure various parameters used on any behavior that uses the dynamic balance.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepHeight">
            <summary>
            Maximum height that character steps vertically (above 0.2 is high ... But OK underwater).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.4f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepHeightInc4Step">
            <summary>
            Added to stepHeight if going up steps.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.4f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsApartRestep">
            <summary>
            If the legs end up more than (legsApartRestep + hipwidth) apart even though balanced, take another step.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsTogetherRestep">
            <summary>
            Mmmm0.1 for drunk if the legs end up less than (hipwidth - legsTogetherRestep) apart even though balanced, take another step.  A value of 1 will turn off this feature and the max value is hipWidth = 0.23f by default but is model dependent.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegsApartMax">
            <summary>
            FRICTION WORKAROUND: if the legs end up more than (legsApartMax + hipwidth) apart when balanced, adjust the feet positions to slide back so they are legsApartMax + hipwidth apart.  Needs to be less than legsApartRestep to see any effect.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.TaperKneeStrength">
            <summary>
            Does the knee strength reduce with angle.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LegStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeftLegSwingDamping">
            <summary>
            Damping of left leg during swing phase (mmmmDrunk used 1.25 to slow legs movement).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.2f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.RightLegSwingDamping">
            <summary>
            Damping of right leg during swing phase (mmmmDrunk used 1.25 to slow legs movement).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.2f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.OpposeGravityLegs">
            <summary>
            Gravity opposition applied to hips and knees.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.OpposeGravityAnkles">
            <summary>
            Gravity opposition applied to ankles.  General balancer likes 1.0.  StaggerFall likes 0.1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAcc">
            <summary>
            Multiplier on the floorAcceleration added to the lean.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.HipLeanAcc">
            <summary>
            Multiplier on the floorAcceleration added to the leanHips.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAccMax">
            <summary>
            Max floorAcceleration allowed for lean and leanHips.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ResistAcc">
            <summary>
            Level of cheat force added to character to resist the effect of floorAcceleration (anti-Acceleration) - added to upperbody.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ResistAccMax">
            <summary>
            Max floorAcceleration allowed for anti-Acceleration. If  GT 20.0 then it is probably in a crash.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootSlipCompOnMovingFloor">
            <summary>
            This parameter will be removed when footSlipCompensation preserves the foot angle on a moving floor]. If the character detects a moving floor and footSlipCompOnMovingFloor is false then it will turn off footSlipCompensation - at footSlipCompensation preserves the global heading of the feet.  If footSlipCompensation is off then the character usually turns to the side in the end although when turning the vehicle turns it looks promising for a while.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AnkleEquilibrium">
            <summary>
            Ankle equilibrium angle used when static balancing.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraFeetApart">
            <summary>
            Additional feet apart setting.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DontStepTime">
            <summary>
            Amount of time at the start of a balance before the character is allowed to start stepping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceAbortThreshold">
            <summary>
            When the character gives up and goes into a fall.  Larger values mean that the balancer can lean more before failing.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpHeight">
            <summary>
            Height between lowest foot and COM below which balancer will give up.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepClampScale">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepClampScaleVariance">
            <summary>
            Variance in clamp scale every step. If negative only takes away from clampScale.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTimeHip">
            <summary>
            Amount of time (seconds) into the future that the character tries to move hip to (kind of).  Will be controlled by balancer in future but can help recover spine quicker from bending forwards to much.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTime">
            <summary>
            Amount of time (seconds) into the future that the character tries to step to. Bigger values try to recover with fewer, bigger steps. Smaller values recover with smaller steps, and generally recover less.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.PredictionTimeVariance">
            <summary>
            Variance in predictionTime every step. If negative only takes away from predictionTime.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MaxSteps">
            <summary>
            Maximum number of steps that the balancer will take.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MaxBalanceTime">
            <summary>
            Maximum time(seconds) that the balancer will balance for.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraSteps">
            <summary>
            Allow the balancer to take this many more steps before hitting maxSteps. If negative nothing happens(safe default).
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ExtraTime">
            <summary>
            Allow the balancer to balance for this many more seconds before hitting maxBalanceTime.  If negative nothing happens(safe default).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallType">
            <summary>
            How to fall after maxSteps or maxBalanceTime.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.FallType.RampDownStiffness"/>.
            If <see cref="F:GTA.NaturalMotion.FallType.Slump"/> BCR has to be active.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallMult">
            <summary>
            Multiply the rampDown of stiffness on falling by this amount ( GT 1 fall quicker).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FallReduceGravityComp">
            <summary>
            Reduce gravity compensation as the legs weaken on falling.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.RampHipPitchOnFail">
            <summary>
            Bend over when falling after maxBalanceTime.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StableLinSpeedThresh">
            <summary>
            Linear speed threshold for successful balance.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StableRotSpeedThresh">
            <summary>
            Rotational speed threshold for successful balance.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FailMustCollide">
            <summary>
            The upper body of the character must be colliding and other failure conditions met to fail.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.IgnoreFailure">
            <summary>
            Ignore maxSteps and maxBalanceTime and try to balance forever.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.ChangeStepTime">
            <summary>
            Time not in contact (airborne) before step is changed. If -ve don't change step.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceIndefinitely">
            <summary>
            Ignore maxSteps and maxBalanceTime and try to balance forever.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MovingFloor">
            <summary>
            Temporary variable to ignore movingFloor code that generally causes the character to fall over if the feet probe a moving object e.g. treading on a gun.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AirborneStep">
            <summary>
            When airborne try to step.  Set to false for e.g. shotGun reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.UseComDirTurnVelThresh">
            <summary>
            Velocity below which the balancer turns in the direction of the COM forward instead of the ComVel - for use with shot from running with high upright constraint use 1.9.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.MinKneeAngle">
            <summary>
            Minimum knee angle (-ve value will mean this functionality is not applied).  0.4 seems a good value.
            </summary>
            <remarks>
            Default value = -0.5f.
            Min value = -0.5f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FlatterSwingFeet">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FlatterStaticFeet">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidLeg">
            <summary>
            If true then balancer tries to avoid leg2leg collisions/avoid crossing legs. Avoid tries to not step across a line of the inside of the stance leg's foot.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidFootWidth">
            <summary>
            NB. Very sensitive. Avoid tries to not step across a line of the inside of the stance leg's foot. AvoidFootWidth = how much inwards from the ankle this line is in (m).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AvoidFeedback">
            <summary>
            NB. Very sensitive. Avoid tries to not step across a line of the inside of the stance leg's foot. Avoid doesn't allow the desired stepping foot to cross the line.  avoidFeedback = how much of the actual crossing of that line is fedback as an error.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanAgainstVelocity">
            <summary>
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepDecisionThreshold">
            <summary>
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StepIfInSupport">
            <summary>
            The balancer sometimes decides to step even if balanced.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.AlwaysStepWithFarthest">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.StandUp">
            <summary>
            Standup more with increased velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DepthFudge">
            <summary>
            Supposed to increase foot friction: Impact depth of a collision with the foot is changed when the balancer is running - impact.SetDepth(impact.GetDepth() - depthFudge).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.DepthFudgeStagger">
            <summary>
            Supposed to increase foot friction: Impact depth of a collision with the foot is changed when staggerFall is running - impact.SetDepth(impact.GetDepth() - depthFudgeStagger).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootFriction">
            <summary>
            Foot friction multiplier is multiplied by this amount if balancer is running.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.FootFrictionStagger">
            <summary>
            Foot friction multiplier is multiplied by this amount if staggerFall is running.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BackwardsLeanCutoff">
            <summary>
            Backwards lean threshold to cut off stay upright forces. 0.0 Vertical - 1.0 horizontal.  0.6 is a sensible value.  NB: the balancer does not fail in order to give stagger that extra step as it falls.  A backwards lean of GT 0.6 will generally mean the balancer will soon fail without stayUpright forces.
            </summary>
            <remarks>
            Default value = 1.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpHeightEnd">
            <summary>
            If this value is different from giveUpHeight, actual giveUpHeight will be ramped toward this value.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.BalanceAbortThresholdEnd">
            <summary>
            If this value is different from balanceAbortThreshold, actual balanceAbortThreshold will be ramped toward this value.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.GiveUpRampDuration">
            <summary>
            Duration of ramp from start of behavior for above two parameters. If smaller than 0, no ramp is applied.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBalanceHelper.LeanToAbort">
            <summary>
            Lean at which to send abort message when maxSteps or maxBalanceTime is reached.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureBalanceResetHelper">
            <summary>
            Reset the values configurable by the Configure Balance message to their defaults.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBalanceResetHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBalanceResetHelper for sending a ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBalanceReset <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Reset the values configurable by the Configure Balance message to their defaults.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper">
            <summary>
            This single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureSelfAvoidanceHelper for sending a ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureSelfAvoidance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows to configure self avoidance for the character.BBDD Self avoidance tech.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.UseSelfAvoidance">
            <summary>
            Enable or disable self avoidance tech.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.OverwriteDragReduction">
            <summary>
            Specify whether self avoidance tech should use original IK input target or the target that has been already modified by getStabilisedPos() tech i.e. function that compensates for rotational and linear velocity of shoulder/thigh.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.TorsoSwingFraction">
            <summary>
            Place the adjusted target this much along the arc between effector (wrist) and target, value in range [0,1].
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.MaxTorsoSwingAngleRad">
            <summary>
            Max value on the effector (wrist) to adjusted target offset.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.SelfAvoidIfInSpineBoundsOnly">
            <summary>
            Restrict self avoidance to operate on targets that are within character torso bounds only.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.SelfAvoidAmount">
            <summary>
            Amount of self avoidance offset applied when angle from effector (wrist) to target is greater then right angle i.e. when total offset is a blend between where effector currently is to value that is a product of total arm length and selfAvoidAmount. SelfAvoidAmount is in a range between [0, 1].
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.OverwriteTwist">
            <summary>
            Overwrite desired IK twist with self avoidance procedural twist.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.UsePolarPathAlgorithm">
            <summary>
            Use the alternative self avoidance algorithm that is based on linear and polar target blending. WARNING: It only requires "radius" in terms of parametrization.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSelfAvoidanceHelper.Radius">
            <summary>
            Self avoidance radius, measured out from the spine axis along the plane perpendicular to that axis. The closer is the proximity of reaching target to that radius, the more polar (curved) motion is used for offsetting the target. WARNING: Parameter only used by the alternative algorithm that is based on linear and polar target blending.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBulletsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBulletsHelper for sending a ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBullets <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpreadOverParts">
            <summary>
            Spreads impulse across parts. Currently only for spine parts, not limbs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseLeakageStrengthScaled">
            <summary>
            For weaker characters subsequent impulses remain strong.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulsePeriod">
            <summary>
            Duration that impulse is spread over (triangular shaped).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseTorqueScale">
            <summary>
            An impulse applied at a point on a body equivalent to an impulse at the center of the body and a torque.  This parameter scales the torque component. (The torque component seems to be excite the rage looseness bug which sends the character in a sometimes wildly different direction to an applied impulse).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.LoosenessFix">
            <summary>
            Fix the rage looseness bug by applying only the impulse at the center of the body unless it is a spine part then apply the twist component only of the torque as well.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseDelay">
            <summary>
            Time from hit before impulses are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseReductionPerShot">
            <summary>
            By how much are subsequent impulses reduced (e.g. 0.0: no reduction, 0.1: 10% reduction each new hit).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseRecovery">
            <summary>
            Recovery rate of impulse strength per second (impulse strength from 0.0:1.0).  At 60fps a impulseRecovery=60.0 will recover in 1 frame.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseMinLeakage">
            <summary>
            The minimum amount of impulse leakage allowed.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueMode.Disabled"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Proportional"/> - proportional to character strength, can reduce impulse amount.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Additive"/> - no reduction of impulse and not proportional to character strength.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueSpinMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueSpinMode.FromImpulse"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueSpinMode.Flipping"/> a burst effect is achieved.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueFilterMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueFilterMode.ApplyEveryBullet"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueAlwaysSpine3">
            <summary>
            Always apply torques to spine3 instead of actual part hit.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueDelay">
            <summary>
            Time from hit before torques are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorquePeriod">
            <summary>
            Duration of torque.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueGain">
            <summary>
            Multiplies impulse magnitude to arrive at torque that is applied.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueCutoff">
            <summary>
            Minimum ratio of impulse that remains after converting to torque (if in strength-proportional mode).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.TorqueReductionPerTick">
            <summary>
            Ratio of torque for next tick (e.g. 1.0: not reducing over time, 0.9: each tick torque is reduced by 10%).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.LiftGain">
            <summary>
            Amount of lift (directly multiplies torque axis to give lift force).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulseDelay">
            <summary>
            Time after impulse is applied that counter impulse is applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulseMag">
            <summary>
            Amount of the original impulse that is countered.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterAfterMagReached">
            <summary>
            Applies the counter impulse counterImpulseDelay(secs) after counterImpulseMag of the Impulse has been applied.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.DoCounterImpulse">
            <summary>
            Add a counter impulse to the pelvis.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.CounterImpulse2Hips">
            <summary>
            Amount of the counter impulse applied to hips - the rest is applied to the part originally hit.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseNoBalMult">
            <summary>
            Amount to scale impulse by if the dynamicBalance is not OK.  1.0 means this functionality is not applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabStart">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabEnd">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseBalStabMult">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngStart">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngEnd">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseSpineAngMult">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelStart">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelEnd">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseVelMult">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMult">
            <summary>
            Amount to scale impulse by if the character is airborne and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMultStart">
            <summary>
            If impulse is above this value scale it by impulseAirMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirMax">
            <summary>
            Amount to clamp impulse to if character is airborne  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseAirOn">
            <summary>
            Scale and/or clamp impulse if the character is airborne and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMult">
            <summary>
            Amount to scale impulse by if the character is contacting with one foot only and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMultStart">
            <summary>
            If impulse is above this value scale it by impulseOneLegMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegMax">
            <summary>
            Amount to clamp impulse to if character is contacting with one foot only  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.ImpulseOneLegOn">
            <summary>
            Scale and/or clamp impulse if the character is contacting with one leg only and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatio">
            <summary>
            0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbLowerShare">
            <summary>
            Rigid body response is shared between the upper and lower body (rbUpperShare = 1-rbLowerShare). RbLowerShare=0.5 gives upper and lower share scaled by mass.  i.e. if 70% ub mass and 30% lower mass then rbLowerShare=0.5 gives actualrbShare of 0.7ub and 0.3lb. rbLowerShare GT 0.5 scales the ub share down from 0.7 and the lb up from 0.3.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMoment">
            <summary>
            0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArm">
            <summary>
            Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArm">
            <summary>
            Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatioAirborne">
            <summary>
            If Airborne: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMomentAirborne">
            <summary>
            If Airborne: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArmAirborne">
            <summary>
            If Airborne: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArmAirborne">
            <summary>
            If Airborne: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbRatioOneLeg">
            <summary>
            If only one leg in contact: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMomentOneLeg">
            <summary>
            If only one leg in contact: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxTwistMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbMaxBroomMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbTwistAxis">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.RbTwistAxis.WorldUp"/>.
            </remarks>.
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsHelper.RbPivot">
            <summary>
            If false pivot around COM always, if true change pivot depending on foot contact:  to feet center if both feet in contact, or foot position if 1 foot in contact or COM position if no feet in contact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureBulletsExtraHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureBulletsExtraHelper for sending a ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureBulletsExtra <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpreadOverParts">
            <summary>
            Spreads impulse across parts. Currently only for spine parts, not limbs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulsePeriod">
            <summary>
            Duration that impulse is spread over (triangular shaped).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseTorqueScale">
            <summary>
            An impulse applied at a point on a body equivalent to an impulse at the center of the body and a torque.  This parameter scales the torque component. (The torque component seems to be excite the rage looseness bug which sends the character in a sometimes wildly different direction to an applied impulse).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.LoosenessFix">
            <summary>
            Fix the rage looseness bug by applying only the impulse at the center of the body unless it is a spine part then apply the twist component only of the torque as well.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseDelay">
            <summary>
            Time from hit before impulses are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueMode.Disabled"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Proportional"/> - proportional to character strength, can reduce impulse amount.
            If <see cref="F:GTA.NaturalMotion.TorqueMode.Additive"/> - no reduction of impulse and not proportional to character strength.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueSpinMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueSpinMode.FromImpulse"/>.
            If <see cref="F:GTA.NaturalMotion.TorqueSpinMode.Flipping"/> a burst effect is achieved.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueFilterMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TorqueFilterMode.ApplyEveryBullet"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueAlwaysSpine3">
            <summary>
            Always apply torques to spine3 instead of actual part hit.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueDelay">
            <summary>
            Time from hit before torques are being applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorquePeriod">
            <summary>
            Duration of torque.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueGain">
            <summary>
            Multiplies impulse magnitude to arrive at torque that is applied.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueCutoff">
            <summary>
            Minimum ratio of impulse that remains after converting to torque (if in strength-proportional mode).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.TorqueReductionPerTick">
            <summary>
            Ratio of torque for next tick (e.g. 1.0: not reducing over time, 0.9: each tick torque is reduced by 10%).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.LiftGain">
            <summary>
            Amount of lift (directly multiplies torque axis to give lift force).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulseDelay">
            <summary>
            Time after impulse is applied that counter impulse is applied.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulseMag">
            <summary>
            Amount of the original impulse that is countered.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterAfterMagReached">
            <summary>
            Applies the counter impulse counterImpulseDelay(secs) after counterImpulseMag of the Impulse has been applied.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.DoCounterImpulse">
            <summary>
            Add a counter impulse to the pelvis.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.CounterImpulse2Hips">
            <summary>
            Amount of the counter impulse applied to hips - the rest is applied to the part originally hit.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseNoBalMult">
            <summary>
            Amount to scale impulse by if the dynamicBalance is not OK.  1.0 means this functionality is not applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabStart">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabEnd">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseBalStabMult">
            <summary>
            100% LE Start to impulseBalStabMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngStart">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngEnd">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: Start GT End.  This the dot of hip2Head with up.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseSpineAngMult">
            <summary>
            100% GE Start to impulseSpineAngMult*100% LT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelStart">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelEnd">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: Start LT End.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseVelMult">
            <summary>
            100% LE Start to impulseVelMult*100% GT End. NB: leaving this as 1.0 means this functionality is not applied and Start and End have no effect.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMult">
            <summary>
            Amount to scale impulse by if the character is airborne and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMultStart">
            <summary>
            If impulse is above this value scale it by impulseAirMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirMax">
            <summary>
            Amount to clamp impulse to if character is airborne  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseAirOn">
            <summary>
            Scale and/or clamp impulse if the character is airborne and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMult">
            <summary>
            Amount to scale impulse by if the character is contacting with one foot only and dynamicBalance is OK and impulse is above impulseAirMultStart.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMultStart">
            <summary>
            If impulse is above this value scale it by impulseOneLegMult.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegMax">
            <summary>
            Amount to clamp impulse to if character is contacting with one foot only  and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegApplyAbove">
            <summary>
            If impulse is above this amount then do not scale/clamp just let it through as is - it's a shotgun or cannon.
            </summary>
            <remarks>
            Default value = 399.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.ImpulseOneLegOn">
            <summary>
            Scale and/or clamp impulse if the character is contacting with one leg only and dynamicBalance is OK.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatio">
            <summary>
            0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbLowerShare">
            <summary>
            Rigid body response is shared between the upper and lower body (rbUpperShare = 1-rbLowerShare). RbLowerShare=0.5 gives upper and lower share scaled by mass.  i.e. if 70% ub mass and 30% lower mass then rbLowerShare=0.5 gives actualrbShare of 0.7ub and 0.3lb. rbLowerShare GT 0.5 scales the ub share down from 0.7 and the lb up from 0.3.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMoment">
            <summary>
            0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArm">
            <summary>
            Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArm">
            <summary>
            Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatioAirborne">
            <summary>
            If Airborne: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMomentAirborne">
            <summary>
            If Airborne: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArmAirborne">
            <summary>
            If Airborne: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArmAirborne">
            <summary>
            If Airborne: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbRatioOneLeg">
            <summary>
            If only one leg in contact: 0.0 no rigidBody response, 0.5 half partForce half rigidBody, 1.0 = no partForce full rigidBody.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMomentOneLeg">
            <summary>
            If only one leg in contact: 0.0 only force, 0.5 = force and half the rigid body moment applied, 1.0 = force and full rigidBody moment.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxTwistMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum twist arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbMaxBroomMomentArmOneLeg">
            <summary>
            If only one leg in contact: Maximum broom((everything but the twist) arm moment of bullet applied.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbTwistAxis">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.RbTwistAxis.WorldUp"/>.
            </remarks>.
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureBulletsExtraHelper.RbPivot">
            <summary>
            If false pivot around COM always, if true change pivot depending on foot contact:  to feet center if both feet in contact, or foot position if 1 foot in contact or COM position if no feet in contact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureLimitsHelper">
            <summary>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureLimitsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureLimitsHelper for sending a ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureLimits <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Enable/disable/edit character limits in real time.  This adjusts limits in RAGE-native space and will *not* reorient the joint.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  for joint limits to configure. Ignored if index != -1.
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Enable">
            <summary>
            If false, disable (set all to PI, -PI) limits.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.ToDesired">
            <summary>
            If true, set limits to accommodate current desired angles.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Restore">
            <summary>
            Return to cached defaults?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.ToCurAnimation">
            <summary>
            If true, set limits to the current animated limits.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Index">
            <summary>
            Index of effector to configure.  Set to -1 to use mask.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Lean1">
            <summary>
            Custom limit values to use if not setting limits to desired. Limits are RAGE-native, not NM-wrapper-native.
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Lean2">
            <summary>
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Twist">
            <summary>
            </summary>
            <remarks>
            Default value = 1.6f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureLimitsHelper.Margin">
            <summary>
            Joint limit margin to add to current animation limits when using those to set runtime limits.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureSoftLimitHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureSoftLimitHelper for sending a ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureSoftLimit <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Index">
            <summary>
            Select limb that the soft limit is going to be applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Stiffness">
            <summary>
            Stiffness of the soft limit.
            Parameter is used to calculate spring term that contributes to the desired acceleration.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.Damping">
            <summary>
            Damping of the soft limit.
            Parameter is used to calculate damper term that contributes to the desired acceleration.
            To have the system critically dampened set it to 1.0.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.9f.
            Max value = 1.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.LimitAngle">
            <summary>
            Soft limit angle.
            Positive angle in RAD, measured relatively either from hard limit maxAngle (approach direction = -1) or minAngle (approach direction = 1).
            This angle will be clamped if outside the joint hard limit range.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.ApproachDirection">
            <summary>
            Limit angle can be measured relatively to joints hard limit minAngle or maxAngle.
            Set it to +1 to measure soft limit angle relatively to hard limit minAngle that corresponds to the maximum stretch of the elbow.
            Set it to -1 to measure soft limit angle relatively to hard limit maxAngle that corresponds to the maximum stretch of the knee.
            </summary>
            <remarks>
            Default value = 1.
            Min value = -1.
            Max value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureSoftLimitHelper.VelocityScaled">
            <summary>
            Scale stiffness based on character angular velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureShotInjuredArmHelper">
            <summary>
            This single message allows you to configure the injured arm reaction during shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureShotInjuredArmHelper for sending a ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureShotInjuredArm <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure the injured arm reaction during shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.InjuredArmTime">
            <summary>
            Length of the reaction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.HipYaw">
            <summary>
            Amount of hip twist.  (Negative values twist into bullet direction - probably not what is wanted).
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.HipRoll">
            <summary>
            Amount of hip roll.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.ForceStepExtraHeight">
            <summary>
            Additional height added to stepping foot.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.ForceStep">
            <summary>
            Force a step to be taken whether pushed out of balance or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.StepTurn">
            <summary>
            Turn the character using the balancer.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelMultiplierStart">
            <summary>
            Start velocity where parameters begin to be ramped down to zero linearly.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelMultiplierEnd">
            <summary>
            End velocity of ramp where parameters are scaled to zero.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 1.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelForceStep">
            <summary>
            Velocity above which a step is not forced.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelStepTurn">
            <summary>
            Velocity above which a stepTurn is not asked for.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredArmHelper.VelScales">
            <summary>
            Use the velocity scaling parameters.
            Tune for standing still then use velocity scaling to make sure a running character stays balanced (the turning tends to make the character fall over more at speed).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureShotInjuredLegHelper">
            <summary>
            This single message allows you to configure the injured leg reaction during shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureShotInjuredLegHelper for sending a ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureShotInjuredLeg <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            This single message allows you to configure the injured leg reaction during shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.TimeBeforeCollapseWoundLeg">
            <summary>
            Time before a wounded leg is set to be weak and cause the character to collapse.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryTime">
            <summary>
            Leg injury duration (reaction to being shot in leg).
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegForceStep">
            <summary>
            Force a step to be taken whether pushed out of balance or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegLimpBend">
            <summary>
            Bend the legs via the balancer by this amount if stepping on the injured leg.
            0.2 seems a good default.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegLiftTime">
            <summary>
            Leg lift duration (reaction to being shot in leg).
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjury">
            <summary>
            Leg injury - leg strength is reduced.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryHipPitch">
            <summary>
            Leg injury bend forwards amount when not lifting leg.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryLiftHipPitch">
            <summary>
            Leg injury bend forwards amount when lifting leg.
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjurySpineBend">
            <summary>
            Leg injury bend forwards amount when not lifting leg.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureShotInjuredLegHelper.LegInjuryLiftSpineBend">
            <summary>
            Leg injury bend forwards amount when lifting leg.
            (Lifting happens when not stepping with other leg).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.DefineAttachedObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the DefineAttachedObjectHelper for sending a DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the DefineAttachedObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.PartIndex">
            <summary>
            Index of part to attach to.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.ObjectMass">
            <summary>
            Mass of the attached object.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DefineAttachedObjectHelper.WorldPos">
            <summary>
            World position of attached object's center of mass. Must be updated each frame.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ForceToBodyPartHelper">
            <summary>
            Apply an impulse to a named body part.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ForceToBodyPartHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceToBodyPartHelper for sending a ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceToBodyPart <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Apply an impulse to a named body part.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.PartIndex">
            <summary>
            Part or link or bound index.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 28.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.Force">
            <summary>
            Force to apply.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -50.0f, 0.0f).
            Min value = -100000.0f.
            Max value = 100000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceToBodyPartHelper.ForceDefinedInPartSpace">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanInDirectionHelper for sending a LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanRandomHelper for sending a LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.ChangeTimeMin">
            <summary>
            Minimum time until changing direction.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanToPositionHelper for sending a LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.LeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the LeanTowardsObjectHelper for sending a LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the LeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to lean towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.LeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to lean towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanInDirectionHelper for sending a HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanRandomHelper for sending a HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.ChangeTimeMin">
            <summary>
            Min time until changing direction.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanToPositionHelper for sending a HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HipsLeanTowardsObjectHelper for sending a HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HipsLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to lean hips towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HipsLeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to lean hips towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanInDirectionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanInDirectionHelper for sending a ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanInDirection <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.Dir">
            <summary>
            Direction to lean in.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanInDirectionHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanRandomHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanRandomHelper for sending a ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanRandom <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.LeanAmountMin">
            <summary>
            Minimum amount of lean.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.LeanAmountMax">
            <summary>
            Maximum amount of lean.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.ChangeTimeMin">
            <summary>
            Min time until changing direction.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.ChangeTimeMax">
            <summary>
            Maximum time until changing direction.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanRandomHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanToPositionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanToPositionHelper for sending a ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanToPosition <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.Pos">
            <summary>
            Position to head towards.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanToPositionHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ForceLeanTowardsObjectHelper for sending a ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ForceLeanTowardsObject <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.LeanAmount">
            <summary>
            Amount of lean, 0 to about 0.5. -ve will move away from the target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.Offset">
            <summary>
            Offset from instance position added when calculating position to lean to.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.InstanceIndex">
            <summary>
            LevelIndex of object to move towards.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.BoundIndex">
            <summary>
            BoundIndex of object to move towards (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ForceLeanTowardsObjectHelper.BodyPart">
            <summary>
            Body part that the force is applied to.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetStiffnessHelper">
            <summary>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetStiffnessHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetStiffnessHelper for sending a SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetStiffness <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to manually set the body stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.BodyStiffness">
            <summary>
            Stiffness of whole character.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 2.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.Damping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetStiffnessHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetMuscleStiffnessHelper">
            <summary>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetMuscleStiffnessHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetMuscleStiffnessHelper for sending a SetMuscle stiffness <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetMuscle stiffness <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to manually set the muscle stiffness values -before using Active Pose to drive to an animated pose, for example.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetMuscleStiffnessHelper.MuscleStiffness">
            <summary>
            Muscle stiffness of joint/s.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetMuscleStiffnessHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetWeaponModeHelper">
            <summary>
            Use this message to set the character's weapon mode.  This is an alternativeto the setWeaponMode public function.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetWeaponModeHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetWeaponModeHelper for sending a SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetWeaponMode <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to set the character's weapon mode.  This is an alternativeto the setWeaponMode public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetWeaponModeHelper.WeaponMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.WeaponMode.PistolRight"/>.
            </remarks>.
        </member>
        <member name="T:GTA.NaturalMotion.RegisterWeaponHelper">
            <summary>
            Use this message to register weapon.  This is an alternativeto the registerWeapon public function.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.RegisterWeaponHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the RegisterWeaponHelper for sending a RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the RegisterWeapon <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Use this message to register weapon.  This is an alternativeto the registerWeapon public function.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.Hand">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Hand.Right"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.LevelIndex">
            <summary>
            Level index of the weapon.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.ConstraintHandle">
            <summary>
            Pointer to the hand-gun constraint handle.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandA">
            <summary>
            A vector of the gunToHand matrix.  The gunToHandMatrix is the desired gunToHandMatrix in the aimingPose. (The gunToHandMatrix when pointGun starts can be different so will be blended to this desired one).
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandB">
            <summary>
            B vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 1.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandC">
            <summary>
            C vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToHandD">
            <summary>
            D vector of the gunToHand matrix.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToMuzzleInGun">
            <summary>
            Gun center to muzzle expressed in gun co-ordinates.  To get the line of sight/barrel of the gun. Assumption: the muzzle direction is always along the same primary axis of the gun.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RegisterWeaponHelper.GunToButtInGun">
            <summary>
            Gun center to butt expressed in gun co-ordinates.  The gun pivots around this point when aiming.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotRelaxHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotRelaxHelper for sending a ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotRelax <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotRelaxHelper.RelaxPeriodUpper">
            <summary>
            Time over which to relax to full relaxation for upper body.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotRelaxHelper.RelaxPeriodLower">
            <summary>
            Time over which to relax to full relaxation for lower body.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.FireWeaponHelper">
            <summary>
            One shot message apply a force to the hand as we fire the gun that should be in this hand.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.FireWeaponHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the FireWeaponHelper for sending a FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the FireWeapon <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            One shot message apply a force to the hand as we fire the gun that should be in this hand.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.FiredWeaponStrength">
            <summary>
            The force of the gun.
            </summary>
            <remarks>
            Default value = 1000.0f.
            Min value = 0.0f.
            Max value = 10000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.GunHandEnum">
            <summary>
            Which hand is the gun in.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Hand.Left"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.ApplyFireGunForceAtClavicle">
            <summary>
            Should we apply some of the force at the shoulder. Force double handed weapons (Ak47 etc).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.InhibitTime">
            <summary>
            Minimum time before next fire impulse.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.Direction">
            <summary>
            Direction of impulse in gun frame.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FireWeaponHelper.Split">
            <summary>
            Split force between hand and clavicle when applyFireGunForceAtClavicle is true. 1 = all hand, 0 = all clavicle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ConfigureConstraintsHelper">
            <summary>
            One shot to give state of constraints on character and response to constraints.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ConfigureConstraintsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ConfigureConstraintsHelper for sending a ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ConfigureConstraints <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            One shot to give state of constraints on character and response to constraints.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.HandCuffs">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.HandCuffsBehindBack">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.LegCuffs">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.RightDominant">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.PassiveMode">
            <summary>
            0 setCurrent, 1= IK to dominant, (2=pointGunLikeIK //not implemented).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 5.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.BespokeBehavior">
            <summary>
            Not implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ConfigureConstraintsHelper.Blend2ZeroPose">
            <summary>
            Blend Arms to zero pose.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.StayUprightHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StayUprightHelper for sending a StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StayUpright <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.UseForces">
            <summary>
            Enable force based constraint.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.UseTorques">
            <summary>
            Enable torque based constraint.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandMode">
            <summary>
            Uses position/orientation control on the spine and drifts in the direction of bullets.  This ignores all other stayUpright settings.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandSinkRate">
            <summary>
            The sink rate (higher for a faster drop).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandHorizDamping">
            <summary>
            Higher values for more damping.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.LastStandMaxTime">
            <summary>
            Max time allowed in last stand mode.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TurnTowardsBullets">
            <summary>
            Use cheat torques to face the direction of bullets if not facing too far away.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.VelocityBased">
            <summary>
            Make strength of constraint function of COM velocity.  Uses -1 for forceDamping if the damping is positive.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueOnlyInAir">
            <summary>
            Only apply torque based constraint when airBorne.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceStrength">
            <summary>
            Strength of constraint.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceDamping">
            <summary>
            Damping in constraint: -1 makes it scale automagically with forceStrength.  Other negative values will scale this automagic damping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceFeetMult">
            <summary>
            Multiplier to the force applied to the feet.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceSpine3Share">
            <summary>
            Share of pelvis force applied to spine3.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceLeanReduction">
            <summary>
            How much the character lean is taken into account when reducing the force.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceInAirShare">
            <summary>
            Share of the feet force to the airborne foot.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceMin">
            <summary>
            When min and max are greater than 0 the constraint strength is determined from character strength, scaled into the range given by min and max.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceMax">
            <summary>
            See above.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceSaturationVel">
            <summary>
            When in velocityBased mode, the COM velocity at which constraint reaches maximum strength (forceStrength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.ForceThresholdVel">
            <summary>
            When in velocityBased mode, the COM velocity above which constraint starts applying forces.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueStrength">
            <summary>
            Strength of torque based constraint.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueDamping">
            <summary>
            Damping of torque based constraint.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueSaturationVel">
            <summary>
            When in velocityBased mode, the COM velocity at which constraint reaches maximum strength (torqueStrength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.TorqueThresholdVel">
            <summary>
            When in velocityBased mode, the COM velocity above which constraint starts applying torques.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.SupportPosition">
            <summary>
            Distance the foot is behind Com projection that is still considered able to generate the support for the upright constraint.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.NoSupportForceMult">
            <summary>
            Still apply this fraction of the upright constaint force if the foot is not in a position (defined by supportPosition) to generate the support for the upright constraint.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StepUpHelp">
            <summary>
            Strength of cheat force applied upwards to spine3 to help the character up steps/slopes.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StayUpAcc">
            <summary>
            How much the cheat force takes into account the acceleration of moving platforms.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StayUprightHelper.StayUpAccMax">
            <summary>
            The maximum floorAcceleration (of a moving platform) that the cheat force takes into account.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.StopAllBehaviorsHelper">
            <summary>
            Send this message to immediately stop all behaviors from executing.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.StopAllBehaviorsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StopAllBehaviorsHelper for sending a StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StopAllBehaviors <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Send this message to immediately stop all behaviors from executing.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterStrengthHelper">
            <summary>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1].
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterStrengthHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterStrengthHelper for sending a SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterStrength <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets character's strength on the dead-granny-to-healthy-terminator scale: [0..1].
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterStrengthHelper.CharacterStrength">
            <summary>
            Strength of character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterHealthHelper">
            <summary>
            Sets character's health on the dead-to-alive scale: [0..1].
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterHealthHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterHealthHelper for sending a SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterHealth <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets character's health on the dead-to-alive scale: [0..1].
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterHealthHelper.CharacterHealth">
            <summary>
            Health of character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetFallingReactionHelper">
            <summary>
            Sets the type of reaction if catchFall is called.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetFallingReactionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetFallingReactionHelper for sending a SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetFallingReaction <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets the type of reaction if catchFall is called.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HandsAndKnees">
            <summary>
            Set to true to get handsAndKnees catchFall if catchFall called. If true allows the dynBalancer to stay on during the catchfall and modifies the catch fall to give a more alive looking performance (hands and knees for front landing or sitting up for back landing).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.CallRDS">
            <summary>
            If true catchFall will call rollDownstairs if comVel GT comVelRDSThresh - prevents excessive sliding in catchFall.  Was previously only true for handsAndKnees.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ComVelRDSThresh">
            <summary>
            ComVel above which rollDownstairs will start - prevents excessive sliding in catchFall.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ResistRolling">
            <summary>
            For rds catchFall only: True to resist rolling motion (rolling motion is set off by ub contact and a sliding velocity), false to allow more of a continuous rolling  (rolling motion is set off at a sliding velocity).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ArmReduceSpeed">
            <summary>
            Strength is reduced in the catchFall when the arms contact the ground.  0.2 is good for handsAndKnees.  2.5 is good for normal catchFall, anything lower than 1.0 for normal catchFall may lead to bad catchFall poses.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ReachLengthMultiplier">
            <summary>
            Reach length multiplier that scales characters arm topological length, value in range from (0, 1 GT  where 1.0 means reach length is maximum.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.3f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.InhibitRollingTime">
            <summary>
            Time after hitting ground that the catchFall can call rds.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.ChangeFrictionTime">
            <summary>
            Time after hitting ground that the catchFall can change the friction of parts to inhibit sliding.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.GroundFriction">
            <summary>
            8.0 was used on yanked) Friction multiplier on body parts when on ground.  Character can look too slidy with groundFriction = 1.  Higher values give a more jerky reaction but this seems timestep dependent especially for dragged by the feet.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.FrictionMin">
            <summary>
            Min Friction of an impact with a body part (not head, hands or feet) - to increase friction of slippy environment to get character to roll better.  Applied in catchFall and rollUp(rollDownStairs).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.FrictionMax">
            <summary>
            Max Friction of an impact with a body part (not head, hands or feet) - to increase friction of slippy environment to get character to roll better.  Applied in catchFall and rollUp(rollDownStairs).
            </summary>
            <remarks>
            Default value = 9999.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StopOnSlopes">
            <summary>
            Apply tactics to help stop on slopes.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StopManual">
            <summary>
            Override slope value to manually force stopping on flat ground.  Encourages character to come to rest face down or face up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.StoppedStrengthDecay">
            <summary>
            Speed at which strength reduces when stopped.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.SpineLean1Offset">
            <summary>
            Bias spine post towards hunched (away from arched).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.RiflePose">
            <summary>
            Hold rifle in a safe position to reduce complications with collision.  Only applied if holding a rifle.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HkHeadAvoid">
            <summary>
            Enable head ground avoidance when handsAndKnees is true.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.AntiPropClav">
            <summary>
            Discourage the character getting stuck propped up by elbows when falling backwards - by inhibiting backwards moving clavicles (keeps the arms slightly wider).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.AntiPropWeak">
            <summary>
            Discourage the character getting stuck propped up by elbows when falling backwards - by weakening the arms as soon they hit the floor.  (Also stops the hands lifting up when flat on back).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.HeadAsWeakAsArms">
            <summary>
            Head weakens as arms weaken. If false and antiPropWeak when falls onto back doesn't loosen neck so early (matches bodyStrength instead).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFallingReactionHelper.SuccessStrength">
            <summary>
            When bodyStrength is less than successStrength send a success feedback - DO NOT GO OUTSIDE MIN/MAX PARAMETER VALUES OTHERWISE NO SUCCESS FEEDBACK WILL BE SENT.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.3f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterUnderwaterHelper">
            <summary>
            Sets viscosity applied to damping limbs.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterUnderwaterHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterUnderwaterHelper for sending a SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterUnderwater <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Sets viscosity applied to damping limbs.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Underwater">
            <summary>
            Is character underwater?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Viscosity">
            <summary>
            Viscosity applied to character's parts.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.GravityFactor">
            <summary>
            Gravity factor applied to character.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.Stroke">
            <summary>
            Swimming force applied to character as a function of handVelocity and footVelocity.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1000.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterUnderwaterHelper.LinearStroke">
            <summary>
            Swimming force (linearStroke=true,False) = (f(v),f(v*v)).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterCollisionsHelper">
            <summary>
            SetCharacterCollisions:.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterCollisionsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterCollisionsHelper for sending a SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterCollisions <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            SetCharacterCollisions:.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.Spin">
            <summary>
            Sliding friction turned into spin 80.0 (used in demo videos) good for rest of default params below.  If 0.0 then no collision enhancement.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.MaxVelocity">
            <summary>
            Torque = spin*(relative velocity) up to this maximum for relative velocity.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToAll">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToSpine">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToThighs">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToClavicles">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.ApplyToUpperArms">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.FootSlip">
            <summary>
            Allow foot slipping if collided.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterCollisionsHelper.VehicleClass">
            <summary>
            ClassType of the object against which to enhance the collision.  All character vehicle interaction (e.g. braceForImpact glancing spins) relies on this value so EDIT WISELY. If it is used for things other than vehicles then NM should be informed.
            </summary>
            <remarks>
            Default value = 15.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetCharacterDampingHelper">
            <summary>
            Damp out cartwheeling and somersaulting above a certain threshold.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetCharacterDampingHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetCharacterDampingHelper for sending a SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetCharacterDamping <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Damp out cartwheeling and somersaulting above a certain threshold.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.SomersaultThresh">
            <summary>
            Somersault AngularMomentum measure above which we start damping - try 34.0.  Falling over straight backwards gives 54 on hitting ground.
            </summary>
            <remarks>
            Default value = 34.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.SomersaultDamp">
            <summary>
            Amount to damp somersaulting by (spinning around left/right axis) - try 0.45.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.CartwheelThresh">
            <summary>
            Cartwheel AngularMomentum measure above which we start damping - try 27.0.
            </summary>
            <remarks>
            Default value = 27.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.CartwheelDamp">
            <summary>
            Amount to damp somersaulting by (spinning around front/back axis) - try 0.8.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.VehicleCollisionTime">
            <summary>
            Time after impact with a vehicle to apply characterDamping. -ve values mean always apply whether collided with vehicle or not. =0.0 never apply. =timestep apply for only that frame.  A typical roll from being hit by a car lasts about 4secs.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetCharacterDampingHelper.V2">
            <summary>
            If true damping is proportional to Angular momentum squared.  If false proportional to Angular momentum.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SetFrictionScaleHelper">
            <summary>
            SetFrictionScale:.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SetFrictionScaleHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SetFrictionScaleHelper for sending a SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SetFrictionScale <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            SetFrictionScale:.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.Scale">
            <summary>
            Friction scale to be applied to parts in mask.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.GlobalMin">
            <summary>
            Character-wide minimum impact friction. Affects all parts (not just those in mask).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1000000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.GlobalMax">
            <summary>
            Character-wide maximum impact friction. Affects all parts (not just those in mask).
            </summary>
            <remarks>
            Default value = 999999.0f.
            Min value = 0.0f.
            Max value = 1000000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SetFrictionScaleHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.AnimPoseHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the AnimPoseHelper for sending a AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the AnimPose <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffness">
            <summary>
            Muscle stiffness of masked joints. -values mean don't apply (just use defaults or ones applied by behaviors - safer if you are going to return to a behavior).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.Stiffness">
            <summary>
            Stiffness of masked joints. -ve values mean don't apply stiffness or damping (just use defaults or ones applied by behaviors).  If you are using animpose fullbody on its own then this gives the opprtunity to use setStffness and setMuscle stiffness messages to set up the character's muscles. Mmmmtodo get rid of this -ve.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.1f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.Damping">
            <summary>
            Damping of masked joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.EffectorMask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation).
            </summary>
            <remarks>
            Default value = "ub".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OverideHeadlook">
            <summary>
            Overide Headlook behavior (if animPose includes the head).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OveridePointArm">
            <summary>
            Overide PointArm behavior (if animPose includes the arm/arms).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.OveridePointGun">
            <summary>
            Overide PointGun behavior (if animPose includes the arm/arms)//mmmmtodo not used at moment.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.UseZMPGravityCompensation">
            <summary>
            If true then modify gravity compensation based on stance (can reduce gravity compensation to zero if cofm is outside of balance area).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravityCompensation">
            <summary>
            Gravity compensation applied to joints in the effectorMask. If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessLeftArm">
            <summary>
            Muscle stiffness applied to left arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessRightArm">
            <summary>
            Muscle stiffness applied to right arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessSpine">
            <summary>
            Muscle stiffness applied to spine (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessLeftLeg">
            <summary>
            Muscle stiffness applied to left leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.MuscleStiffnessRightLeg">
            <summary>
            Muscle stiffness applied to right leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessLeftArm">
            <summary>
            Stiffness  applied to left arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessRightArm">
            <summary>
            Stiffness applied to right arm (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessSpine">
            <summary>
            Stiffness applied to spine (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessLeftLeg">
            <summary>
            Stiffness applied to left leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.StiffnessRightLeg">
            <summary>
            Stiffness applied to right leg (applied after stiffness). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingLeftArm">
            <summary>
            Damping applied to left arm (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingRightArm">
            <summary>
            Damping applied to right arm (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingSpine">
            <summary>
            Damping applied to spine (applied after stiffness). If stiffness-ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingLeftLeg">
            <summary>
            Damping applied to left leg (applied after stiffness). If stiffness-ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampingRightLeg">
            <summary>
            Damping applied to right leg (applied after stiffness). If stiffness -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompLeftArm">
            <summary>
            Gravity compensation applied to left arm (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompRightArm">
            <summary>
            Gravity compensation applied to right arm (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompSpine">
            <summary>
            Gravity compensation applied to spine (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompLeftLeg">
            <summary>
            Gravity compensation applied to left leg (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.GravCompRightLeg">
            <summary>
            Gravity compensation applied to right leg (applied after gravityCompensation). If -ve then not applied (use current setting).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedLeftHand">
            <summary>
            Is the left hand constrained to the world/ an object: -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedRightHand">
            <summary>
            Is the right hand constrained to the world/ an object: -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = 0.
            Min value = -1.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedLeftFoot">
            <summary>
            Is the left foot constrained to the world/ an object: -2=do not set in animpose (e.g. let the balancer decide), -1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.ConnectedRightFoot">
            <summary>
            Is the right foot constrained to the world/ an object: -2=do not set in animpose (e.g. let the balancer decide),-1=auto decide by impact info, 0=no, 1=part fully constrained (not implemented:, 2=part point constraint, 3=line constraint).
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.AnimSource">
            <summary>
            </summary>
        </member>
        <member name="P:GTA.NaturalMotion.AnimPoseHelper.DampenSideMotionInstanceIndex">
            <summary>
            LevelIndex of object to dampen side motion relative to. -1 means not used.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ArmsWindmillHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ArmsWindmillHelper for sending a ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ArmsWindmill <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftPartID">
            <summary>
            ID of part that the circle uses as local space for positioning.
            </summary>
            <remarks>
            Default value = 10.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftRadius1">
            <summary>
            Radius for first axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftRadius2">
            <summary>
            Radius for second axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftSpeed">
            <summary>
            Speed of target around the circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftNormal">
            <summary>
            Euler Angles orientation of circle in space of part with part ID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.2f, 0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftCentre">
            <summary>
            Centre of circle in the space of partID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.5f, -0.1f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightPartID">
            <summary>
            ID of part that the circle uses as local space for positioning.
            </summary>
            <remarks>
            Default value = 10.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightRadius1">
            <summary>
            Radius for first axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightRadius2">
            <summary>
            Radius for second axis of ellipse.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightSpeed">
            <summary>
            Speed of target around the circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightNormal">
            <summary>
            Euler Angles orientation of circle in space of part with part ID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -0.2f, -0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightCentre">
            <summary>
            Centre of circle in the space of partID.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, -0.5f, -0.1f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ShoulderStiffness">
            <summary>
            Stiffness applied to the shoulders.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ShoulderDamping">
            <summary>
            Damping applied to the shoulders.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ElbowStiffness">
            <summary>
            Stiffness applied to the elbows.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 1.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ElbowDamping">
            <summary>
            Damping applied to the elbows.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.LeftElbowMin">
            <summary>
            Minimum left elbow bend.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.RightElbowMin">
            <summary>
            Minimum right elbow bend.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.7f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.PhaseOffset">
            <summary>
            Phase offset(degrees) when phase synchronization is turned on.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -360.0f.
            Max value = 360.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.DragReduction">
            <summary>
            How much to compensate for movement of character/target.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.IKtwist">
            <summary>
            Angle of elbow around twist axis ?.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AngVelThreshold">
            <summary>
            Value of character angular speed above which adaptive arm motion starts.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AngVelGain">
            <summary>
            Multiplies angular speed of character to get speed of arms.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.MirrorMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.MirrorMode.Mirrored"/>.
            If <see cref="F:GTA.NaturalMotion.MirrorMode.Parallel"/> leftArm parameters are used.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.AdaptiveMode">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.AdaptiveMode.NotAdaptive"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.ForceSync">
            <summary>
            Toggles phase synchronization.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.UseLeft">
            <summary>
            Use the left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.UseRight">
            <summary>
            Use the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillHelper.DisableOnImpact">
            <summary>
            If true, each arm will stop windmilling if it hits the ground.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ArmsWindmillAdaptiveHelper for sending a ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ArmsWindmillAdaptive <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.AngSpeed">
            <summary>
            Controls the speed of the windmilling.
            </summary>
            <remarks>
            Default value = 6.3f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BodyStiffness">
            <summary>
            Controls how stiff the rest of the body is.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Amplitude">
            <summary>
            Controls how large the motion is, higher values means the character waves his arms in a massive arc.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Phase">
            <summary>
            Set to a non-zero value to desynchronize the left and right arms motion.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -4.0f.
            Max value = 8.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ArmStiffness">
            <summary>
            How stiff the arms are controls how pronounced the windmilling motion appears.
            </summary>
            <remarks>
            Default value = 14.1f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.LeftElbowAngle">
            <summary>
            If not negative then left arm will blend to this angle.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.RightElbowAngle">
            <summary>
            If not negative then right arm will blend to this angle.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Lean1mult">
            <summary>
            0 arms go up and down at the side. 1 circles. 0..1 elipse.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Lean1offset">
            <summary>
            0.f center of circle at side.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -6.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ElbowRate">
            <summary>
            Rate at which elbow tries to match *ElbowAngle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 6.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.ArmDirection">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.ArmDirection.Adaptive"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.DisableOnImpact">
            <summary>
            If true, each arm will stop windmilling if it hits the ground.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.SetBackAngles">
            <summary>
            If true, back angles will be set to compliment arms windmill.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.UseAngMom">
            <summary>
            If true, use angular momentum about com to choose arm circling direction. Otherwise use com angular velocity.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BendLeftElbow">
            <summary>
            If true, bend the left elbow to give a stunt man type scramble look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.BendRightElbow">
            <summary>
            If true, bend the right elbow to give a stunt man type scramble look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ArmsWindmillAdaptiveHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "ub".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BalancerCollisionsReactionHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BalancerCollisionsReactionHelper for sending a BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BalancerCollisionsReaction <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.NumStepsTillSlump">
            <summary>
            Begin slump and stop stepping after this many steps.
            </summary>
            <remarks>
            Default value = 4.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.Stable2SlumpTime">
            <summary>
            Time after becoming stable leaning against a wall that slump starts.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ExclusionZone">
            <summary>
            Steps are ihibited to not go closer to the wall than this (after impact).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FootFrictionMultStart">
            <summary>
            Friction multiplier applied to feet when slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FootFrictionMultRate">
            <summary>
            Friction multiplier reduced by this amount every second after slump starts (only if character is not slumping).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BackFrictionMultStart">
            <summary>
            Friction multiplier applied to back when slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BackFrictionMultRate">
            <summary>
            Friction multiplier reduced by this amount every second after slump starts (only if character is not slumping).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactLegStiffReduction">
            <summary>
            Reduce the stiffness of the legs by this much as soon as an impact is detected.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpLegStiffReduction">
            <summary>
            Reduce the stiffness of the legs by this much as soon as slump starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpLegStiffRate">
            <summary>
            Rate at which the stiffness of the legs is reduced during slump.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 50.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReactTime">
            <summary>
            Time that the character reacts to the impact with ub flinch and writhe.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactExagTime">
            <summary>
            Time that the character exaggerates impact with spine.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinTime">
            <summary>
            Duration that the glance torque is applied for.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinMag">
            <summary>
            Magnitude of the glance torque.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.GlanceSpinDecayMult">
            <summary>
            Multiplier used when decaying torque spin over time.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColWithIndex">
            <summary>
            Used so impact with the character that is pushing you over doesn't set off the behavior.
            </summary>
            <remarks>
            Default value = -2.
            Min value = -2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SlumpMode">
            <summary>
            0=Normal slump(less movement then slump and movement LT small), 1=fast slump, 2=less movement then slump.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReboundMode">
            <summary>
            0=fall2knees/slump if shot not running, 1=stumble, 2=slump, 3=restart.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColMassBelow">
            <summary>
            Collisions with non-fixed objects with mass below this will not set this behavior off (e.g. ignore guns).
            </summary>
            <remarks>
            Default value = 20.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ForwardMode">
            <summary>
            0=slump, 1=fallToKnees if shot is running, otherwise slump.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.TimeToForward">
            <summary>
            Time after a forwards impact before forwardMode is called (leave sometime for a rebound or brace - the min of 0.1 is to ensure fallOverWall can start although it probably needs only 1or2 frames for the probes to return).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ReboundForce">
            <summary>
            If forwards impact only: cheat force to try to get the character away from the wall.  3 is a good value.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.BraceWall">
            <summary>
            Brace against wall if forwards impact(at the moment only if bodyBalance is running/in charge of arms).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.IgnoreColVolumeBelow">
            <summary>
            Collisions with non-fixed objects with volume below this will not set this behavior off.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FallOverWallDrape">
            <summary>
            Use fallOverWall as the main drape reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.FallOverHighWalls">
            <summary>
            Trigger fall over wall if hit up to spine2 else only if hit up to spine1.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.Snap">
            <summary>
            Add a Snap to when you hit a wall to emphasize the hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapMag">
            <summary>
            The magnitude of the snap reaction.
            </summary>
            <remarks>
            Default value = -0.6f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapDirectionRandomness">
            <summary>
            The character snaps in a prescribed way (decided by bullet direction) - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapLeftArm">
            <summary>
            Snap the leftArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapRightArm">
            <summary>
            Snap the rightArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapLeftLeg">
            <summary>
            Snap the leftLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapRightLeg">
            <summary>
            Snap the rightLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapSpine">
            <summary>
            Snap the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapNeck">
            <summary>
            Snap the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapPhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapHipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.UnSnapInterval">
            <summary>
            Interval before applying reverse snap.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.UnSnapRatio">
            <summary>
            The magnitude of the reverse snap.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.SnapUseTorques">
            <summary>
            Use torques to make the snap otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactWeaknessZeroDuration">
            <summary>
            Duration for which the character's upper body stays at minimum stiffness (not quite zero).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactWeaknessRampDuration">
            <summary>
            Duration of the ramp to bring the character's upper body stiffness back to normal levels.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ImpactLoosenessAmount">
            <summary>
            How loose the character is on impact. Between 0 and 1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictim">
            <summary>
            Detected an object behind a shot victim in the direction of a bullet?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictimPos">
            <summary>
            The intersection pos of a detected object behind a shot victim in the direction of a bullet.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BalancerCollisionsReactionHelper.ObjectBehindVictimNormal">
            <summary>
            The normal of a detected object behind a shot victim in the direction of a bullet.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyBalanceHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyBalanceHelper for sending a BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyBalance <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmStiffness">
            <summary>
            NB. WAS m_bodyStiffness ClaviclesStiffness=9.0f.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Elbow">
            <summary>
            How much the elbow swings based on the leg movement.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Shoulder">
            <summary>
            How much the shoulder(lean1) swings based on the leg movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmDamping">
            <summary>
            NB. WAS m_damping NeckDamping=1 ClaviclesDamping=1.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SpineStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SomersaultAngle">
            <summary>
            Multiplier of the somersault 'angle' (lean forward/back) for arms out (lean2).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SomersaultAngleThreshold">
            <summary>
            Amount of somersault 'angle' before m_somersaultAngle is used for ArmsOut. Unless drunk - DO NOT EXCEED 0.8.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SideSomersaultAngle">
            <summary>
            Amount of side somersault 'angle' before sideSomersault is used for ArmsOut. Unless drunk - DO NOT EXCEED 0.8.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SideSomersaultAngleThreshold">
            <summary>
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BackwardsAutoTurn">
            <summary>
            Automatically turn around if moving backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnWithBumpRadius">
            <summary>
            0.9 is a sensible value.  If pusher within this distance then turn to get out of the way of the pusher.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BackwardsArms">
            <summary>
            Bend elbows, relax shoulders and inhibit spine twist when moving backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BlendToZeroPose">
            <summary>
            Blend upper body to zero pose as the character comes to rest. If false blend to a stored pose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPush">
            <summary>
            Put arms out based on lean2 of legs, or angular velocity (lean or twist), or lean (front/back or side/side).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPushMultiplier">
            <summary>
            Arms out based on lean2 of the legs to simulate being pushed.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutOnPushTimeout">
            <summary>
            Number of seconds before turning off the armsOutOnPush response only for Arms out based on lean2 of the legs (NOT for the angle or angular velocity).
            </summary>
            <remarks>
            Default value = 1.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ReturningToBalanceArmsOut">
            <summary>
            Range 0:1 0 = don't raise arms if returning to upright position, 0.x = 0.x*raise arms based on angvel and 'angle' settings, 1 = raise arms based on angvel and 'angle' settings.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutStraightenElbows">
            <summary>
            Multiplier for straightening the elbows based on the amount of arms out(lean2) 0 = dont straighten elbows. Otherwise straighten elbows proportionately to armsOut.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ArmsOutMinLean2">
            <summary>
            Minimum desiredLean2 applied to shoulder (to stop arms going above shoulder height or not).
            </summary>
            <remarks>
            Default value = -9.9f.
            Min value = -10.0f.
            Max value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.SpineDamping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.UseBodyTurn">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ElbowAngleOnContact">
            <summary>
            On contact with upperbody the desired elbow angle is set to at least this value.
            </summary>
            <remarks>
            Default value = 1.9f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BendElbowsTime">
            <summary>
            Time after contact (with Upper body) that the min m_elbowAngleOnContact is applied.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BendElbowsGait">
            <summary>
            Minimum desired angle of elbow during non contact arm swing.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HipL2ArmL2">
            <summary>
            Mmmmdrunk = 0.2 multiplier of hip lean2 (star jump) to give shoulder lean2 (flapping).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderL2">
            <summary>
            Mmmmdrunk = 0.7 shoulder lean2 offset.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderL1">
            <summary>
            Mmmmdrunk 1.1 shoulder lean1 offset (+ve frankenstein).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ShoulderTwist">
            <summary>
            Mmmmdrunk = 0.0 shoulder twist.
            </summary>
            <remarks>
            Default value = -0.4f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnOffProb">
            <summary>
            Weighted probability that turn will be off. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Turn2VelProb">
            <summary>
            Weighted probability of turning towards velocity. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnAwayProb">
            <summary>
            Weighted probability of turning away from headLook target. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnLeftProb">
            <summary>
            Weighted probability of turning left. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TurnRightProb">
            <summary>
            Weighted probability of turning right. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.Turn2TargetProb">
            <summary>
            Weighted probability of turning towards headLook target. This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.AngVelMultiplier">
            <summary>
            Somersault, twist, sideSomersault) multiplier of the angular velocity  for arms out (lean2) (somersault, twist, sideSomersault).
            </summary>
            <remarks>
            Default value = Vector3(4.0f, 1.0f, 4.0f).
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.AngVelThreshold">
            <summary>
            Somersault, twist, sideSomersault) threshold above which angVel is used for arms out (lean2) Unless drunk - DO NOT EXCEED 7.0 for each component.
            </summary>
            <remarks>
            Default value = Vector3(1.2f, 3.0f, 1.2f).
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceDistance">
            <summary>
            If -ve then do not brace.  distance from object at which to raise hands to brace 0.5 good if newBrace=true - otherwise 0.65.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TargetPredictionTime">
            <summary>
            Time expected to get arms up from idle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.ReachAbsorbtionTime">
            <summary>
            Larger values and he absorbs the impact more.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceStiffness">
            <summary>
            Stiffness of character. Catch_fall stiffness scales with this too, with its defaults at this values default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MinBraceTime">
            <summary>
            Minimum bracing time so the character doesn't look twitchy.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.TimeToBackwardsBrace">
            <summary>
            Time before arm brace kicks in when hit from behind.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HandsDelayMin">
            <summary>
            If bracing with 2 hands delay one hand by at least this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.HandsDelayMax">
            <summary>
            If bracing with 2 hands delay one hand by at most this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.BraceOffset">
            <summary>
            BraceTarget is global headLookPos plus braceOffset m in the up direction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveRadius">
            <summary>
            If -ve don't move away from pusher unless moveWhenBracing is true and braceDistance  GT  0.0f.  if the pusher is closer than moveRadius then move away from it.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveAmount">
            <summary>
            Amount of leanForce applied away from pusher.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyBalanceHelper.MoveWhenBracing">
            <summary>
            Only move away from pusher when bracing against pusher.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyFoetalHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyFoetalHelper for sending a BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyFoetal <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Stiffness">
            <summary>
            The stiffness of the body determines how fast the character moves into the position, and how well that they hold it.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.DampingFactor">
            <summary>
            Sets damping value for the character joints.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Asymmetry">
            <summary>
            A value between 0-1 that controls how asymmetric the results are by varying stiffness across the body.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.RandomSeed">
            <summary>
            Random seed used to generate asymmetry values.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.BackTwist">
            <summary>
            Amount of random back twist to add.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyFoetalHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyRollUpHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyRollUpHelper for sending a BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyRollUp <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.Stiffness">
            <summary>
            Stiffness of whole body.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.UseArmToSlowDown">
            <summary>
            The degree to which the character will try to stop a barrel roll with his arms.
            </summary>
            <remarks>
            Default value = 1.3f.
            Min value = -2.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.ArmReachAmount">
            <summary>
            The likeliness of the character reaching for the ground with its arms.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.LegPush">
            <summary>
            Used to keep rolling down slope, 1 is full (kicks legs out when pointing upwards).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.AsymmetricalLegs">
            <summary>
            0 is no leg asymmetry in 'foetal' position.  greater than 0 a asymmetricalLegs-rand(30%), added/minus each joint of the legs in radians.  Random number changes about once every roll.  0.4 gives a lot of asymmetry.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -2.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.NoRollTimeBeforeSuccess">
            <summary>
            Time that roll velocity has to be lower than rollVelForSuccess, before success message is sent.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.RollVelForSuccess">
            <summary>
            Lower threshold for roll velocity at which success message can be sent.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.RollVelLinearContribution">
            <summary>
            Contribution of linear COM velocity to roll Velocity (if 0, roll velocity equal to COM angular velocity).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.VelocityScale">
            <summary>
            Scales perceived body velocity.  The higher this value gets, the more quickly the velocity measure saturates, resulting in a tighter roll at slower speeds. (NB: Set to 1 to match earlier behavior).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.VelocityOffset">
            <summary>
            Offsets perceived body velocity.  Increase to create larger "dead zone" around zero velocity where character will be less rolled. (NB: Reset to 0 to match earlier behavior).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyRollUpHelper.ApplyMinMaxFriction">
            <summary>
            Controls whether or not behavior enforces min/max friction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BodyWritheHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BodyWritheHelper for sending a BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BodyWrithe <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegStiffness">
            <summary>
            The stiffness of the character will determine how 'determined' a writhe this is - high values will make him thrash about wildly.
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegDamping">
            <summary>
            Damping amount, less is underdamped.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegPeriod">
            <summary>
            Controls how fast the writhe is executed, smaller values make faster motions.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ArmAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BackAmplitude">
            <summary>
            Scales the amount of writhe. 0 = no writhe.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.LegAmplitude">
            <summary>
            Scales the amount of writhe. 0 = no writhe.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ElbowAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.KneeAmplitude">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollOverFlag">
            <summary>
            Flag to set trying to rollOver.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendArms">
            <summary>
            Blend the writhe arms with the current desired arms (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendBack">
            <summary>
            Blend the writhe spine and neck with the current desired (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.BlendLegs">
            <summary>
            Blend the writhe legs with the current desired legs (0=don't apply any writhe, 1=only writhe).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ApplyStiffness">
            <summary>
            Use writhe stiffnesses if true. If false don't set any stiffnesses.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.OnFire">
            <summary>
            Extra shoulderBlend. Rolling:one way only, maxRollOverTime, rollOverRadius, doesn't reduce arm stiffness to help rolling. No shoulder twist.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ShoulderLean1">
            <summary>
            Blend writhe shoulder desired lean1 with this angle in RAD. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.ShoulderLean2">
            <summary>
            Blend writhe shoulder desired lean2 with this angle in RAD. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Lean1BlendFactor">
            <summary>
            Shoulder desired lean1 with shoulderLean1 angle blend factor. Set it to 0 to use original shoulder withe desired lean1 angle for shoulders. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.Lean2BlendFactor">
            <summary>
            Shoulder desired lean2 with shoulderLean2 angle blend factor. Set it to 0 to use original shoulder withe desired lean2 angle for shoulders. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollTorqueScale">
            <summary>
            Scale rolling torque that is applied to character spine.
            </summary>
            <remarks>
            Default value = 150.0f.
            Min value = 0.0f.
            Max value = 300.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.MaxRollOverTime">
            <summary>
            Rolling torque is ramped down over time. At this time in seconds torque value converges to zero. Use this parameter to restrict time the character is rolling. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BodyWritheHelper.RollOverRadius">
            <summary>
            Rolling torque is ramped down with distance measured from position where character hit the ground and started rolling. At this distance in meters torque value converges to zero. Use this parameter to restrict distance the character travels due to rolling. Note that onFire has to be set to true for this parameter to take any effect.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.BraceForImpactHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BraceForImpactHelper for sending a BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the BraceForImpact <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BraceDistance">
            <summary>
            Distance from object at which to raise hands to brace 0.5 good if newBrace=true - otherwise 0.65.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.TargetPredictionTime">
            <summary>
            Time epected to get arms up from idle.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.ReachAbsorbtionTime">
            <summary>
            Larger values and he absorbs the impact more.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.InstanceIndex">
            <summary>
            LevelIndex of object to brace.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BodyStiffness">
            <summary>
            Stiffness of character. Catch_fall stiffness scales with this too, with its defaults at this values default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabDontLetGo">
            <summary>
            Once a constraint is made, keep reaching with whatever hand is allowed.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabStrength">
            <summary>
            Strength in hands for grabbing (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = 40.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabDistance">
            <summary>
            Relative distance at which the grab starts.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabReachAngle">
            <summary>
            Angle from front at which the grab activates. If the point is outside this angle from front will not try to grab.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GrabHoldTimer">
            <summary>
            Amount of time, in seconds, before grab automatically bails.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MaxGrabCarVelocity">
            <summary>
            Don't try to grab a car moving above this speed mmmmtodo make this the relative velocity of car to character?.
            </summary>
            <remarks>
            Default value = 95.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.LegStiffness">
            <summary>
            Balancer leg stiffness mmmmtodo remove this parameter and use configureBalance?.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.TimeToBackwardsBrace">
            <summary>
            Time before arm brace kicks in when hit from behind.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Look">
            <summary>
            Position to look at, e.g. the driver.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Pos">
            <summary>
            Location of the front part of the object to brace against. This should be the center of where his hands should meet the object.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MinBraceTime">
            <summary>
            Minimum bracing time so the character doesn't look twitchy.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.HandsDelayMin">
            <summary>
            If bracing with 2 hands delay one hand by at least this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.HandsDelayMax">
            <summary>
            If bracing with 2 hands delay one hand by at most this amount of time to introduce some asymmetry.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAway">
            <summary>
            Move away from the car (if in reaching zone).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAwayAmount">
            <summary>
            ForceLean away amount (-ve is lean towards).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveAwayLean">
            <summary>
            Lean away amount (-ve is lean towards).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.MoveSideways">
            <summary>
            Amount of sideways movement if at the front or back of the car to add to the move away from car.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BbArms">
            <summary>
            Use bodyBalance arms for the default (non bracing) behavior if bodyBalance is active.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.NewBrace">
            <summary>
            Use the new brace prediction code.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.BraceOnImpact">
            <summary>
            If true then if a shin or thigh is in contact with the car then brace. NB: newBrace must be true.  For those situations where the car has pushed the ped backwards (at the same speed as the car) before the behavior has been started and so doesn't predict an impact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.Roll2Velocity">
            <summary>
            When rollDownStairs is running use roll2Velocity to control the helper torques (this only attempts to roll to the chaarcter's velocity not some default linear velocity mag.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.RollType">
            <summary>
            0 = original/roll off/stay on car:  Roll with character velocity, 1 = //Gentle: roll off/stay on car = use relative velocity of character to car to roll against, 2 = //roll over car:  Roll against character velocity.  i.e. roll against any velocity picked up by hitting car, 3 = //Gentle: roll over car:  use relative velocity of character to car to roll with.
            </summary>
            <remarks>
            Default value = 3.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapImpacts">
            <summary>
            Exaggerate impacts using snap.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapImpact">
            <summary>
            Exaggeration amount of the initial impact (legs).  +ve fold with car impact (as if pushed at hips in the car velocity direction).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = 7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapBonnet">
            <summary>
            Exaggeration amount of the secondary (torso) impact with bonnet. +ve fold with car impact (as if pushed at hips by the impact normal).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = -7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.SnapFloor">
            <summary>
            Exaggeration amount of the impact with the floor after falling off of car +ve fold with floor impact (as if pushed at hips in the impact normal direction).  -ve fold away from car impact.
            </summary>
            <remarks>
            Default value = 7.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampVel">
            <summary>
            Damp out excessive spin and upward velocity when on car.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampSpin">
            <summary>
            Amount to damp spinning by (cartwheeling and somersaulting).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampUpVel">
            <summary>
            Amount to damp upward velocity by to limit the amount of air above the car the character can get.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 40.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampSpinThresh">
            <summary>
            Angular velocity above which we start damping.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.DampUpVelThresh">
            <summary>
            Upward velocity above which we start damping.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsHelp">
            <summary>
            Enhance a glancing spin with the side of the car by modulating body friction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsEndMin">
            <summary>
            ID for glancing spin. Min depth to be considered from either end (front/rear) of a car (-ve is inside the car area).
            </summary>
            <remarks>
            Default value = -0.1f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsSideMin">
            <summary>
            ID for glancing spin. Min depth to be considered on the side of a car (-ve is inside the car area).
            </summary>
            <remarks>
            Default value = -0.2f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsSideMax">
            <summary>
            ID for glancing spin. Max depth to be considered on the side of a car (+ve is outside the car area).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -10.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsUpness">
            <summary>
            ID for glancing spin. Character has to be more upright than this value for it to be considered on the side of a car. Fully upright = 1, upsideDown = -1.  Max Angle from upright is acos(gsUpness).
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsCarVelMin">
            <summary>
            ID for glancing spin. Minimum car velocity.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsScale1Foot">
            <summary>
            Apply gsFricScale1 to the foot if colliding with car.  (Otherwise foot friction - with the ground - is determined by gsFricScale2 if it is in gsFricMask2).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricScale1">
            <summary>
            Glancing spin help. Friction scale applied when to the side of the car.  e.g. make the character spin more by upping the friction against the car.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricMask1">
            <summary>
            Glancing spin help. Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation). Note gsFricMask1 and gsFricMask2 are made independent by the code so you can have fb for gsFricMask1 but gsFricScale1 will not be applied to any body parts in gsFricMask2.
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricScale2">
            <summary>
            Glancing spin help. Friction scale applied when to the side of the car.  e.g. make the character spin more by lowering the feet friction. You could also lower the wrist friction here to stop the car pulling along the hands i.e. gsFricMask2 = la|uw.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BraceForImpactHelper.GsFricMask2">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see notes for explanation). Note gsFricMask1 and gsFricMask2 are made independent by the code so you can have fb for gsFricMask1 but gsFricScale1 will not be applied to any body parts in gsFricMask2.
            </summary>
            <remarks>
            Default value = la.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.BuoyancyHelper">
            <summary>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.BuoyancyHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the BuoyancyHelper for sending a Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Buoyancy <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Simple buoyancy model.  No character movement just fluid forces/torques added to parts.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.SurfacePoint">
            <summary>
            Arbitrary point on surface of water.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.SurfaceNormal">
            <summary>
            Normal to surface of water.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Buoyancy">
            <summary>
            Buoyancy multiplier.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.ChestBuoyancy">
            <summary>
            Buoyancy multiplier for spine2/3. Helps character float upright.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Damping">
            <summary>
            Damping for submerged parts.
            </summary>
            <remarks>
            Default value = 40.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.Righting">
            <summary>
            Use righting torque to being character face-up in water?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.RightingStrength">
            <summary>
            Strength of righting torque.
            </summary>
            <remarks>
            Default value = 25.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.BuoyancyHelper.RightingTime">
            <summary>
            How long to wait after chest hits water to begin righting torque.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.CatchFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the CatchFallHelper for sending a CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the CatchFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.TorsoStiffness">
            <summary>
            Stiffness of torso.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.LegsStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 6.0f.
            Min value = 4.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ArmsStiffness">
            <summary>
            Stiffness of arms.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.BackwardsMinArmOffset">
            <summary>
            0 will prop arms up near his shoulders. -0.3 will place hands nearer his behind.
            </summary>
            <remarks>
            Default value = -0.3f.
            Min value = -1.0f.
            Max value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ForwardMaxArmOffset">
            <summary>
            0 will point arms down with angled body, 0.45 will point arms forward a bit to catch nearer the head.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ZAxisSpinReduction">
            <summary>
            Tries to reduce the spin around the Z axis. Scale 0 - 1.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.ExtraSit">
            <summary>
            Scale extra-sit value 0..1. Setting to 0 helps with arched-back issues.  Set to 1 for a more alive-looking finish.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.UseHeadLook">
            <summary>
            Toggle to use the head look in this behavior.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.CatchFallHelper.Mask">
            <summary>
            Two character body-masking value, bitwise joint mask or bitwise logic string of two character body-masking value  (see Active Pose notes for possible values).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ElectrocuteHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ElectrocuteHelper for sending a Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Electrocute <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.StunMag">
            <summary>
            The magnitude of the reaction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.InitialMult">
            <summary>
            InitialMult*stunMag = The magnitude of the 1st snap reaction (other multipliers are applied after this).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMult">
            <summary>
            LargeMult*stunMag = The magnitude of a random large snap reaction (other multipliers are applied after this).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMinTime">
            <summary>
            Min time to next large random snap (about 14 snaps with stunInterval = 0.07s).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LargeMaxTime">
            <summary>
            Max time to next large random snap (about 28 snaps with stunInterval = 0.07s).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.MovingMult">
            <summary>
            MovingMult*stunMag = The magnitude of the reaction if moving(comVelMag) faster than movingThresh.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.BalancingMult">
            <summary>
            BalancingMult*stunMag = The magnitude of the reaction if balancing = (not lying on the floor/ not upper body not collided) and not airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.AirborneMult">
            <summary>
            AirborneMult*stunMag = The magnitude of the reaction if airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.MovingThresh">
            <summary>
            If moving(comVelMag) faster than movingThresh then mvingMult applied to stunMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.StunInterval">
            <summary>
            Direction flips every stunInterval.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.DirectionRandomness">
            <summary>
            The character vibrates in a prescribed way - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LeftArm">
            <summary>
            Vibrate the leftArm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.RightArm">
            <summary>
            Vibrate the rightArm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.LeftLeg">
            <summary>
            Vibrate the leftLeg.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.RightLeg">
            <summary>
            Vibrate the rightLeg.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.Spine">
            <summary>
            Vibrate the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.Neck">
            <summary>
            Vibrate the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.PhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.ApplyStiffness">
            <summary>
            Let electrocute apply a (higher generally) stiffness to the character whilst being vibrated.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.UseTorques">
            <summary>
            Use torques to make vibration otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ElectrocuteHelper.HipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.FallOverWallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the FallOverWallHelper for sending a FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the FallOverWall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BodyStiffness">
            <summary>
            Stiffness of the body, roll up stiffness scales with this and defaults at this default value.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.Damping">
            <summary>
            Damping in the effectors.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MagOfForce">
            <summary>
            Magnitude of the falloverWall helper force.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxDistanceFromPelToHitPoint">
            <summary>
            The maximum distance away from the pelvis that hit points will be registered.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxForceDist">
            <summary>
            Maximum distance between hitPoint and body part at which forces are applied to part.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.StepExclusionZone">
            <summary>
            Specifies extent of area in front of the wall in which balancer won't try to take another step.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MinLegHeight">
            <summary>
            Minimum height of pelvis above feet at which fallOverWall is attempted.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BodyTwist">
            <summary>
            Amount of twist to apply to the spine as the character tries to fling himself over the wall, provides more of a believable roll but increases the amount of lateral space the character needs to successfully flip.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxTwist">
            <summary>
            Max angle the character can twist before twsit helper torques are turned off.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.FallOverWallEndA">
            <summary>
            One end of the wall to try to fall over.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.FallOverWallEndB">
            <summary>
            One end of the wall over which we are trying to fall over.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ForceAngleAbort">
            <summary>
            The angle abort threshold.
            </summary>
            <remarks>
            Default value = -0.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ForceTimeOut">
            <summary>
            The force time out.
            </summary>
            <remarks>
            Default value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MoveArms">
            <summary>
            Lift the arms up if true.  Do nothing with the arms if false (eg when using catchfall arms or brace etc).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MoveLegs">
            <summary>
            Move the legs if true.  Do nothing with the legs if false (eg when using dynamicBalancer etc).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.BendSpine">
            <summary>
            Bend spine to help falloverwall if true.  Do nothing with the spine if false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AngleDirWithWallNormal">
            <summary>
            Maximum angle in degrees (between the direction of the velocity of the COM and the wall normal) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = 180.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.LeaningAngleThreshold">
            <summary>
            Maximum angle in degrees (between the vertical vector and a vector from pelvis to lower neck) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = 180.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxAngVel">
            <summary>
            If the angular velocity is higher than maxAngVel, the torques and forces are not applied.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -1.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AdaptForcesToLowWall">
            <summary>
            Will reduce the magnitude of the forces applied to the character to help him to fall over wall.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MaxWallHeight">
            <summary>
            Maximum height (from the lowest foot) to start to apply forces and torques to fall over the wall.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.DistanceToSendSuccessMessage">
            <summary>
            Minimum distance between the pelvis and the wall to send the success message. If negative doesn't take this parameter into account when sending feedback.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.RollingBackThr">
            <summary>
            Value of the angular velocity about the wallEgde above which the character is considered as rolling backwards i.e. goes in to fow_RollingBack state.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.RollingPotential">
            <summary>
            On impact with the wall if the rollingPotential(calculated from the characters linear velocity w.r.t the wall) is greater than this value the character will try to go over the wall otherwise it won't try (fow_Aborted).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.UseArmIK">
            <summary>
            Try to reach the wallEdge. To configure the IK : use limitAngleBack, limitAngleFront and limitAngleTotallyBack.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.ReachDistanceFromHitPoint">
            <summary>
            Distance from predicted hitpoint where each hands will try to reach the wall.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.MinReachDistanceFromHitPoint">
            <summary>
            Minimal distance from predicted hitpoint where each hands will try to reach the wall. Used if the hand target is outside the wall Edge.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.FallOverWallHelper.AngleTotallyBack">
            <summary>
            Max angle in degrees (between 1.the vector between two hips and 2. WallEdge) to try to reach the wall just behind his pelvis with his arms when the character is back to the wall.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.GrabHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the GrabHelper for sending a Grab <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Grab <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseLeft">
            <summary>
            Flag to toggle use of left hand.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseRight">
            <summary>
            Flag to toggle the use of the Right hand.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DropWeaponIfNecessary">
            <summary>
            If hasn't grabbed when weapon carrying hand is close to target, grab anyway.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DropWeaponDistance">
            <summary>
            Distance below which a weapon carrying hand will request weapon to be dropped.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabStrength">
            <summary>
            Strength in hands for grabbing (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.StickyHands">
            <summary>
            Strength of cheat force on hands to pull towards target and stick to target ("cleverHandIK" strength).
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.TurnToTarget">
            <summary>
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.TurnType.ToTarget"/>.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabHoldMaxTimer">
            <summary>
            Amount of time, in seconds, before grab automatically bails.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpTime">
            <summary>
            Time to reach the full pullup strength.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpStrengthRight">
            <summary>
            Strength to pull up with the right arm. 0 = no pull up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PullUpStrengthLeft">
            <summary>
            Strength to pull up with the left arm. 0 = no pull up.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos1">
            <summary>
            Grab pos1, right hand if not using line or surface grab.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos2">
            <summary>
            Grab pos2, left hand if not using line or surface grab.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos3">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Pos4">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalR">
            <summary>
            Normal for the right grab point.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalL">
            <summary>
            Normal for the left grab point.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalR2">
            <summary>
            Normal for the 2nd right grab point (if pointsX4grab=true).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.NormalL2">
            <summary>
            Normal for the 3rd left grab point (if pointsX4grab=true).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.HandsCollide">
            <summary>
            Hand collisions on when grabbing (false turns off hand collisions making grab more stable esp. To grab points slightly inside geometry).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.JustBrace">
            <summary>
            Flag to toggle between grabbing and bracing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseLineGrab">
            <summary>
            Use the line grab, Grab along the line (x-x2).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.PointsX4grab">
            <summary>
            Use 2 point.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.FromEA">
            <summary>
            Use 2 point.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.SurfaceGrab">
            <summary>
            Toggle surface grab on. Requires pos1,pos2,pos3 and pos4 to be specified.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.InstanceIndex">
            <summary>
            LevelIndex of instance to grab (-1 = world coordinates).
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.InstancePartIndex">
            <summary>
            BoundIndex of part on instance to grab (0 = just use instance coordinates).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.DontLetGo">
            <summary>
            Once a constraint is made, keep reaching with whatever hand is allowed - no matter what the angle/distance and whether or not the constraint has broken due to constraintForce  GT  grabStrength.  mmmtodo this is a badly named parameter.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.BodyStiffness">
            <summary>
            Stiffness of upper body. Scales the arm grab such that the armStiffness is default when this is at default value.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.ReachAngle">
            <summary>
            Angle from front at which the grab activates. If the point is outside this angle from front will not try to grab.
            </summary>
            <remarks>
            Default value = 2.8f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.OneSideReachAngle">
            <summary>
            Angle at which we will only reach with one hand.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.GrabDistance">
            <summary>
            Relative distance at which the grab starts.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.Move2Radius">
            <summary>
            Relative distance (additional to grabDistance - doesn't try to move inside grabDistance)at which the grab tries to use the balancer to move to the grab point.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 14.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.ArmStiffness">
            <summary>
            Stiffness of the arm.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.MaxReachDistance">
            <summary>
            Distance to reach out towards the grab point.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.OrientationConstraintScale">
            <summary>
            Scale torque used to rotate hands to face normals.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.MaxWristAngle">
            <summary>
            When we are grabbing the max angle the wrist ccan be at before we break the grab.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 3.2f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.UseHeadLookToTarget">
            <summary>
            If true, the character will look at targetForHeadLook after a hand grabs until the end of the behavior. (Before grabbing it looks at the grab target).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.LookAtGrab">
            <summary>
            If true, the character will look at the grab.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.GrabHelper.TargetForHeadLook">
            <summary>
            Only used if useHeadLookToTarget is true, the target in world space to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HeadLookHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HeadLookHelper for sending a HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HeadLook <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Damping">
            <summary>
            Damping of the muscles.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Stiffness">
            <summary>
            Stiffness of the muscles.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.InstanceIndex">
            <summary>
            LevelIndex of object to be looked at. Vel parameters are ignored if this is non -1.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Vel">
            <summary>
            The velocity of the point being looked at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -100.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.Pos">
            <summary>
            The point being looked at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.AlwaysLook">
            <summary>
            Flag to force always to look.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.EyesHorizontal">
            <summary>
            Keep the eyes horizontal.  Use true for impact with cars.  Use false if you want better look at target accuracy when the character is on the floor or leaned over alot.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.AlwaysEyesHorizontal">
            <summary>
            Keep the eyes horizontal.  Use true for impact with cars.  Use false if you want better look at target accuracy when the character is on the floor or leaned over (when not leaned over the eyes are still kept horizontal if eyesHorizontal=true ) alot.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.KeepHeadAwayFromGround">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HeadLookHelper.TwistSpine">
            <summary>
            Allow head look to twist spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.HighFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the HighFallHelper for sending a HighFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the HighFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.BodyStiffness">
            <summary>
            Stiffness of body. Value feeds through to bodyBalance (synced with defaults), to armsWindmill (14 for this value at default ), legs pedal, head look and roll down stairs directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Bodydamping">
            <summary>
            The damping of the joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Catchfalltime">
            <summary>
            The length of time before the impact that the character transitions to the landing.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.CrashOrLandCutOff">
            <summary>
            0.52angle is 0.868 dot//A threshold for deciding how far away from upright the character needs to be before bailing out (going into a foetal) instead of trying to land (keeping stretched out).  NB: never does bailout if ignorWorldCollisions true.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.PdStrength">
            <summary>
            Strength of the controller to keep the character at angle aimAngleBase from vertical.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.PdDamping">
            <summary>
            Damping multiplier of the controller to keep the character at angle aimAngleBase from vertical.  The actual damping is pdDamping*pdStrength*constant*angVel.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmAngSpeed">
            <summary>
            Arm circling speed in armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmAmplitude">
            <summary>
            In armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmPhase">
            <summary>
            In armWindMillAdaptive 3.1 opposite for stuntman.
            1.0 old default. 0.0 in phase.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmBendElbows">
            <summary>
            In armWindMillAdaptive bend the elbows as a function of armAngle.
            For stunt man true otherwise false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegRadius">
            <summary>
            Radius of legs on pedal.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegAngSpeed">
            <summary>
            In pedal.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegAsymmetry">
            <summary>
            0.0 for stuntman.  Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Arms2LegsPhase">
            <summary>
            Phase angle between the arms and legs circling angle.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 6.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Arms2LegsSync">
            <summary>
            Syncs the arms angle to what the leg angle is.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            All speed/direction parameters of armswindmill are overwritten if = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            If <see cref="F:GTA.NaturalMotion.Synchroisation.SyncedAtStart"/> and you want synced arms/legs then armAngSpeed=legAngSpeed, legAsymmetry = 0.0 (to stop randomizations of the leg cicle speed).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.ArmsUp">
            <summary>
            Where to put the arms when preparing to land.
            Approx 1 = above head, 0 = head height, -1 = down.
            LT -2.0 use catchFall arms, LT -3.0 use prepare for landing pose if Agent is due to land vertically, feet first.
            </summary>
            <remarks>
            Default value = -3.1f.
            Min value = -4.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateBodyToFallDirection">
            <summary>
            Toggle to orientate to fall direction.
            i.e. orientate so that the character faces the horizontal velocity direction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateTwist">
            <summary>
            If false don't worry about the twist angle of the character when orientating the character.
            If false this allows the twist axis of the character to be free (You can get a nice twisting highFall like the one in dieHard 4 when the car goes into the helicopter).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.OrientateMax">
            <summary>
            DEVEL parameter - suggest you don't edit it.
            Maximum torque the orientation controller can apply.
            If 0 then no helper torques will be used.
            300 will orientate the character softly for all but extreme angles away from aimAngleBase.
            If abs (current -aimAngleBase) is getting near 3.0 then this can be reduced to give a softer feel.
            </summary>
            <remarks>
            Default value = 300.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AlanRickman">
            <summary>
            If true then orientate the character to face the point from where it started falling.
            High fall like the one in "Die Hard" with Alan Rickman.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardRoll">
            <summary>
            Try to execute a forward Roll on landing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.UseZeroPose_withFowardRoll">
            <summary>
            Blend to a zero pose when forward roll is attempted.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AimAngleBase">
            <summary>
            Angle from vertical the pdController is driving to (positive = forwards).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardVelRotation">
            <summary>
            Scale to add/subtract from aimAngle based on forward speed (Internal).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FootVelCompScale">
            <summary>
            Scale to change to amount of vel that is added to the foot ik from the velocity (Internal).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.SideD">
            <summary>
            Side offset for the feet during prepareForLanding. +ve = right.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.FowardOffsetOfLegIK">
            <summary>
            Forward offset for the feet during prepareForLanding.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegL">
            <summary>
            Leg Length for ik (Internal)//unused.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.CatchFallCutOff">
            <summary>
            0.5angle is 0.878 dot. Cutoff to go to the catchFall ( internal) //mmmtodo do like crashOrLandCutOff.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LegStrength">
            <summary>
            Strength of the legs at landing.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Balance">
            <summary>
            If true have enough strength to balance.  If false not enough strength in legs to balance (even though bodyBlance called).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.IgnorWorldCollisions">
            <summary>
            Never go into bailout (foetal).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.AdaptiveCircling">
            <summary>
            Stunt man type fall.
            Arm and legs circling direction controlled by angmom and orientation.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.Hula">
            <summary>
            With stunt man type fall.
            Hula reaction if can't see floor and not rotating fast.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.MaxSpeedForRecoverableFall">
            <summary>
            Character needs to be moving less than this speed to consider fall as a recoverable one.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.MinSpeedForBrace">
            <summary>
            Character needs to be moving at least this fast horizontally to start bracing for impact if there is an object along its trajectory.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.HighFallHelper.LandingNormal">
            <summary>
            Ray-cast normal doted with up direction has to be greater than this number to consider object flat enough to land on it.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.IncomingTransformsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the IncomingTransformsHelper for sending a IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the IncomingTransforms <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="T:GTA.NaturalMotion.InjuredOnGroundHelper">
            <summary>
            InjuredOnGround.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.InjuredOnGroundHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the InjuredOnGroundHelper for sending a InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the InjuredOnGround <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            InjuredOnGround.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.NumInjuries">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1Component">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2Component">
            <summary>
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1LocalPosition">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2LocalPosition">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury1LocalNormal">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.Injury2LocalNormal">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.AttackerPos">
            <summary>
            </summary>
            <remarks>
            Default value = Vector3(1.0f, 0.0f, 0.0f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.DontReachWithLeft">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.DontReachWithRight">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.InjuredOnGroundHelper.StrongRollForce">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.CarriedHelper">
            <summary>
            Carried.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.CarriedHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the CarriedHelper for sending a Carried <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Carried <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Carried.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.DangleHelper">
            <summary>
            Dangle.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.DangleHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the DangleHelper for sending a Dangle <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Dangle <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Dangle.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DangleHelper.DoGrab">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.DangleHelper.GrabFrequency">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.OnFireHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the OnFireHelper for sending a OnFire <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the OnFire <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StaggerTime">
            <summary>
            Max time for stumbling around before falling to ground.
            </summary>
            <remarks>
            Default value = 2.5f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StaggerLeanRate">
            <summary>
            How quickly the character leans hips when staggering.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StumbleMaxLeanBack">
            <summary>
            Max the character leans hips back when staggering.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.StumbleMaxLeanForward">
            <summary>
            Max the character leans hips forwards when staggering.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.ArmsWindmillWritheBlend">
            <summary>
            Blend armsWindmill with the bodyWrithe arms when character is upright.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.SpineStumbleWritheBlend">
            <summary>
            Blend spine stumble with the bodyWrithe spine when character is upright.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.LegsStumbleWritheBlend">
            <summary>
            Blend legs stumble with the bodyWrithe legs when character is upright.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.ArmsPoseWritheBlend">
            <summary>
            Blend the bodyWrithe arms with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.SpinePoseWritheBlend">
            <summary>
            Blend the bodyWrithe back with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.LegsPoseWritheBlend">
            <summary>
            Blend the bodyWrithe legs with the current desired pose from on fire behavior when character is on the floor.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollOverFlag">
            <summary>
            Flag to set bodyWrithe trying to rollOver.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollTorqueScale">
            <summary>
            Scale rolling torque that is applied to character spine by bodyWrithe. Torque magnitude is calculated with the following formula: m_rollOverDirection*rollOverPhase*rollTorqueScale.
            </summary>
            <remarks>
            Default value = 25.0f.
            Min value = 0.0f.
            Max value = 300.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.PredictTime">
            <summary>
            Character pose depends on character facing direction that is evaluated from its COMTM orientation.
            Set this value to 0 to use no orientation prediction i.e. current character COMTM orientation will be used to determine character facing direction and finally the pose bodyWrithe is blending to.
            Set this value to  GT  0 to predict character COMTM orientation this amount of time in seconds to the future.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.MaxRollOverTime">
            <summary>
            Rolling torque is ramped down over time. At this time in seconds torque value converges to zero. Use this parameter to restrict time the character is rolling.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 60.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.OnFireHelper.RollOverRadius">
            <summary>
            Rolling torque is ramped down with distance measured from position where character hit the ground and started rolling. At this distance in meters torque value converges to zero. Use this parameter to restrict distance the character travels due to rolling.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.PedalLegsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PedalLegsHelper for sending a PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PedalLegs <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalLeftLeg">
            <summary>
            Pedal with this leg or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalRightLeg">
            <summary>
            Pedal with this leg or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.BackPedal">
            <summary>
            Pedal forwards or backwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Radius">
            <summary>
            Base radius of pedal action.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AngularSpeed">
            <summary>
            Rate of pedaling. If adaptivePedal4Dragging is true then the legsAngularSpeed calculated to match the linear speed of the character can have a maximum value of angularSpeed (this max used to be hard coded to 13.0).
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.LegStiffness">
            <summary>
            Stiffness of legs.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.PedalOffset">
            <summary>
            Move the center of the pedal for the left leg up by this amount, the right leg down by this amount.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.RandomSeed">
            <summary>
            Random seed used to generate speed changes.
            </summary>
            <remarks>
            Default value = 100.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.SpeedAsymmetry">
            <summary>
            Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AdaptivePedal4Dragging">
            <summary>
            Will pedal in the direction of travel (if backPedal = false, against travel if backPedal = true) and with an angular velocity relative to speed upto a maximum of 13(rads/sec).  Use when being dragged by a car.  Overrides angularSpeed.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.AngSpeedMultiplier4Dragging">
            <summary>
            NewAngularSpeed = Clamp(angSpeedMultiplier4Dragging * linear_speed/pedalRadius, 0.0, angularSpeed).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.RadiusVariance">
            <summary>
            0-1 value used to add variance to the radius value while pedalling, to desynchonize the legs' movement and provide some variety.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.LegAngleVariance">
            <summary>
            0-1 value used to vary the angle of the legs from the hips during the pedal.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreSideways">
            <summary>
            Move the center of the pedal for both legs sideways (+ve = right).  NB: not applied to hula.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreForwards">
            <summary>
            Move the center of the pedal for both legs forward (or backward -ve).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.CentreUp">
            <summary>
            Move the center of the pedal for both legs up (or down -ve).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Ellipse">
            <summary>
            Turn the circle into an ellipse.  Ellipse has horizontal radius a and vertical radius b.  If ellipse is +ve then a=radius*ellipse and b=radius.  If ellipse is -ve then a=radius and b = radius*ellipse.  0.0 = vertical line of length 2*radius, 0.0:1.0 circle squashed horizontally (vertical radius = radius), 1.0=circle.  -0.001 = horizontal line of length 2*radius, -0.0:-1.0 circle squashed vertically (horizontal radius = radius), -1.0 = circle.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.DragReduction">
            <summary>
            How much to account for the target moving through space rather than being static.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Spread">
            <summary>
            Spread legs.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PedalLegsHelper.Hula">
            <summary>
            If true circle the legs in a hula motion.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.PointArmHelper">
            <summary>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to override body parts: Arms (useLeftArm, useRightArm).
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.PointArmHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointArmHelper for sending a PointArm <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointArm <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            BEHAVIOURS REFERENCED: AnimPose - allows animPose to override body parts: Arms (useLeftArm, useRightArm).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TargetLeft">
            <summary>
            Point to point to (in world space).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TwistLeft">
            <summary>
            Twist of the arm around point direction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStraightnessLeft">
            <summary>
            Values less than 1 can give the arm a more bent look.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseLeftArm">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStiffnessLeft">
            <summary>
            Stiffness of arm.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmDampingLeft">
            <summary>
            Damping value for arm used to point.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.InstanceIndexLeft">
            <summary>
            Level index of thing to point at, or -1 for none. if -1, target is specified in world space, otherwise it is an offset from the object specified by this index.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.PointSwingLimitLeft">
            <summary>
            Swing limit.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseZeroPoseWhenNotPointingLeft">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TargetRight">
            <summary>
            Point to point to (in world space).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.TwistRight">
            <summary>
            Twist of the arm around point direction.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStraightnessRight">
            <summary>
            Values less than 1 can give the arm a more bent look.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseRightArm">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmStiffnessRight">
            <summary>
            Stiffness of arm.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.ArmDampingRight">
            <summary>
            Damping value for arm used to point.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.InstanceIndexRight">
            <summary>
            Level index of thing to point at, or -1 for none. if -1, target is specified in world space, otherwise it is an offset from the object specified by this index.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.PointSwingLimitRight">
            <summary>
            Swing limit.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointArmHelper.UseZeroPoseWhenNotPointingRight">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.PointGunHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointGunHelper for sending a PointGun <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointGun <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.EnableRight">
            <summary>
            Allow right hand to point/support?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.EnableLeft">
            <summary>
            Allow right hand to point/support?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandTarget">
            <summary>
            Target for the left Hand.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandTargetIndex">
            <summary>
            Index of the object that the left hand target is specified in, -1 is world space.
            </summary>
            <remarks>
            Default value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandTarget">
            <summary>
            Target for the right Hand.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandTargetIndex">
            <summary>
            Index of the object that the right hand target is specified in, -1 is world space.
            </summary>
            <remarks>
            Default value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeadTarget">
            <summary>
            NB: Only Applied to single handed weapons (some more work is required to have this tech on two handed weapons). Amount to lead target based on target velocity relative to the chest.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmStiffness">
            <summary>
            Stiffness of the arm.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 2.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmStiffnessDetSupport">
            <summary>
            Stiffness of the arm on pointing arm when a support arm is detached from a two-handed weapon.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 2.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ArmDamping">
            <summary>
            Damping.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.GravityOpposition">
            <summary>
            Amount of gravity opposition on pointing arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.GravOppDetachedSupport">
            <summary>
            Amount of gravity opposition on pointing arm when a support arm is detached from a two-handed weapon.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MassMultDetachedSupport">
            <summary>
            Amount of mass of weapon taken into account by gravity opposition on pointing arm when a support arm is detached from a two-handed weapon.  The lower the value the more the character doesn't know about the weapon mass and therefore is more affected by it.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AllowShotLooseness">
            <summary>
            Allow shot to set a lower arm muscleStiffness than pointGun normally would.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ClavicleBlend">
            <summary>
            How much of blend should come from incoming transforms 0(all IK) .. 1(all ITMs)   For pointing arms only.  (Support arm uses the IK solution as is for clavicles).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ElbowAttitude">
            <summary>
            Controls arm twist. (except in pistolIK).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.SupportConstraint">
            <summary>
            Type of constraint between the support hand and gun.  0=no constraint, 1=hard distance constraint, 2=Force based constraint, 3=hard spherical constraint.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConstraintMinDistance">
            <summary>
            For supportConstraint = 1: Support hand constraint distance will be slowly reduced until it hits this value.  This is for stability and also allows the pointing arm to lead a little.  Don't set lower than NM_MIN_STABLE_DISTANCECONSTRAINT_DISTANCE 0.001f.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 0.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MakeConstraintDistance">
            <summary>
            For supportConstraint = 1:  Minimum distance within which support hand constraint will be made.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ReduceConstraintLengthVel">
            <summary>
            For supportConstraint = 1:  Velocity at which to reduce the support hand constraint length.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BreakingStrength">
            <summary>
            For supportConstraint = 1: strength of the supporting hands constraint (kg m/s), -1 to ignore/disable.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BrokenSupportTime">
            <summary>
            Once constraint is broken then do not try to reconnect/support for this amount of time.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.BrokenToSideProb">
            <summary>
            Probability that the when a constraint is broken that during brokenSupportTime a side pose will be selected.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConnectAfter">
            <summary>
            If gunArm has been controlled by other behaviors for this time when it could have been pointing but couldn't due to pointing only allowed if connected, change gunArm pose to something that could connect for connectFor seconds.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConnectFor">
            <summary>
            Time to try to reconnect for.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.OneHandedPointing">
            <summary>
            0 = don't allow, 1= allow for kPistol(two handed pistol) only, 2 = allow for kRifle only, 3 = allow for kPistol and kRifle. Allow one handed pointing - no constraint if cant be supported .  If not allowed then gunHand does not try to point at target if it cannot be supported - the constraint will be controlled by always support.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AlwaysSupport">
            <summary>
            Support a non pointing gunHand i.e. if in zero pose (constrain as well  if constraint possible).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedGunArm">
            <summary>
            Apply neutral pose when a gun arm isn't in use.  NB: at the moment Rifle hand is always controlled by pointGun.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedSupportArm">
            <summary>
            Apply neutral pose when a support arm isn't in use.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PoseUnusedOtherArm">
            <summary>
            Apply neutral pose to the non-gun arm (otherwise it is always under the control of other behaviors or not set). If the non-gun hand is a supporting hand it is not controlled by this parameter but by poseUnusedSupportArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MaxAngleAcross">
            <summary>
            Max aiming angle(deg) sideways across body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MaxAngleAway">
            <summary>
            Max aiming angle(deg) sideways away from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingLimits">
            <summary>
            0= don't apply limits.  1=apply the limits below only when the character is falling.  2 =  always apply these limits (instead of applying maxAngleAcross and maxAngleAway which only limits the horizontal angle but implicity limits the updown (the limit shape is a vertical hinge).
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AcrossLimit">
            <summary>
            Max aiming angle(deg) sideways across body midline measured from chest forward that the character will try to point.  i.e. for rightHanded gun this is the angle left of the midline.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.AwayLimit">
            <summary>
            Max aiming angle(deg) sideways away from body midline measured from chest forward that the character will try to point.  i.e. for rightHanded gun this is the angle right of the midline.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UpLimit">
            <summary>
            Max aiming angle(deg) upwards from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DownLimit">
            <summary>
            Max aiming angle(deg) downwards from body midline measured from chest forward that the character will try to point.
            </summary>
            <remarks>
            Default value = 45.0f.
            Min value = 0.0f.
            Max value = 180.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RifleFall">
            <summary>
            Pose the rifle hand to reduce complications with collisions. 0 = false, 1 = always when falling, 2 = when falling except if falling backwards.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingSupport">
            <summary>
            Allow supporting of a rifle(or two handed pistol) when falling. 0 = false, 1 = support if allowed, 2 = support until constraint not active (don't allow support to restart), 3 = support until constraint not effective (support hand to support distance must be less than 0.15 - don't allow support to restart).
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FallingTypeSupport">
            <summary>
            What is considered a fall by fallingSupport). Apply fallingSupport 0=never(will support if allowed), 1 = falling, 2 = falling except if falling backwards, 3 = falling and collided, 4 = falling and collided except if falling backwards, 5 = falling except if falling backwards until collided.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 5.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PistolNeutralType">
            <summary>
            0 = byFace, 1=acrossFront, 2=bySide.  NB: bySide is not connectible so be careful if combined with kPistol and oneHandedPointing = 0 or 2.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.NeutralPoint4Pistols">
            <summary>
            NOT IMPLEMENTED YET KEEP=false - use pointing for neutral targets in pistol modes.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.NeutralPoint4Rifle">
            <summary>
            Use pointing for neutral targets in rifle mode.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.CheckNeutralPoint">
            <summary>
            Check the neutral pointing is pointable, if it isn't then choose a neutral pose instead.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Point2Side">
            <summary>
            Side, up, back) side is left for left arm, right for right arm mmmmtodo.
            </summary>
            <remarks>
            Default value = Vector3(5.0f, -5.0f, -2.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Add2WeaponDistSide">
            <summary>
            Add to weaponDistance for point2Side neutral pointing (to straighten the arm).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Point2Connect">
            <summary>
            Side, up, back) side is left for left arm, right for rght arm mmmmtodo.
            </summary>
            <remarks>
            Default value = Vector3(-1.0f, -0.9f, -0.2f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.Add2WeaponDistConnect">
            <summary>
            Add to weaponDistance for point2Connect neutral pointing (to straighten the arm).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UsePistolIK">
            <summary>
            Enable new ik for pistol pointing.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseSpineTwist">
            <summary>
            Use spine twist to orient chest?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseTurnToTarget">
            <summary>
            Turn balancer to help gun point at target.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseHeadLook">
            <summary>
            Use head look to drive head?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ErrorThreshold">
            <summary>
            Angular difference between pointing direction and target direction above which feedback will be generated.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxTime">
            <summary>
            Duration of arms relax following firing weapon.  NB:This is clamped (0,5) in pointGun.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxAmount">
            <summary>
            Relax multiplier following firing weapon. Recovers over relaxTime.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.FireWeaponRelaxDistance">
            <summary>
            Range of motion for ik-based recoil.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.UseIncomingTransforms">
            <summary>
            Use the incoming transforms to inform the pointGun of the primaryWeaponDistance, poleVector for the arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.MeasureParentOffset">
            <summary>
            If useIncomingTransforms = true and measureParentOffset=true then measure the Pointing-from offset from parent effector, using itms - this should point the barrel of the gun to the target.  This is added to the rightHandParentOffset. NB NOT used if rightHandParentEffector LT 0.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandParentOffset">
            <summary>
            Pointing-from offset from parent effector, expressed in spine3's frame, x = back/forward, y = right/left, z = up/down.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.LeftHandParentEffector">
            <summary>
            1 = Use leftShoulder. Effector from which the left hand pointing originates. Ie, point from this part to the target. -1 causes default offset for active weapon mode to be applied.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandParentOffset">
            <summary>
            Pointing-from offset from parent effector, expressed in spine3's frame, x = back/forward, y = right/left, z = up/down. This is added to the measured one if useIncomingTransforms=true and measureParentOffset=true.  NB NOT used if rightHandParentEffector LT 0.  Pistol(0,0,0) Rifle(0.0032, 0.0, -0.0).
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RightHandParentEffector">
            <summary>
            1 = Use rightShoulder.. Effector from which the right hand pointing originates. Ie, point from this part to the target. -1 causes default offset for active weapon mode to be applied.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.PrimaryHandWeaponDistance">
            <summary>
            Distance from the shoulder to hold the weapon. If -1 and useIncomingTransforms then weaponDistance is read from ITMs. WeaponDistance=primaryHandWeaponDistance clamped [0.2f:m_maxArmReach=0.65] if useIncomingTransforms = false. pistol 0.60383, rifle 0.336.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.ConstrainRifle">
            <summary>
            Use hard constraint to keep rifle stock against shoulder?.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.RifleConstraintMinDistance">
            <summary>
            Rifle constraint distance. Deliberately kept large to create a flat constraint surface where rifle meets the shoulder.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DisableArmCollisions">
            <summary>
            Disable collisions between right hand/forearm and the torso/legs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunHelper.DisableRifleCollisions">
            <summary>
            Disable collisions between right hand/forearm and spine3/spine2 if in rifle mode.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.PointGunExtraHelper">
            <summary>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.PointGunExtraHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the PointGunExtraHelper for sending a PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the PointGunExtra <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Seldom set parameters for pointGun - just to keep number of parameters in any message less than or equal to 64.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.ConstraintStrength">
            <summary>
            For supportConstraint = 2: force constraint strength of the supporting hands - it gets shaky at about 4.0.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.ConstraintThresh">
            <summary>
            For supportConstraint = 2:  Like makeConstraintDistance. Force starts acting when the hands are  LT  3.0*thresh apart but is maximum strength  LT  thresh. For comparison: 0.1 is used for reachForWound in shot, 0.25 is used in grab.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.WeaponMask">
            <summary>
            Currently unused - no intoWorldTest. RAGE bit mask to exclude weapons from ray probe - currently defaults to MP3 weapon flag.
            </summary>
            <remarks>
            Default value = 1024.
            Min value = 0.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.TimeWarpActive">
            <summary>
            Is timeWarpActive enabled?.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.TimeWarpStrengthScale">
            <summary>
            Scale for arm and helper strength when timewarp is enabled. 1 = normal compensation.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.OriStiff">
            <summary>
            Hand stabilization controller stiffness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.OriDamp">
            <summary>
            Hand stabilization controller damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.PosStiff">
            <summary>
            Hand stabilization controller stiffness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.PointGunExtraHelper.PosDamp">
            <summary>
            Hand stabilization controller damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.RollDownStairsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the RollDownStairsHelper for sending a RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the RollDownStairs <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Stiffness">
            <summary>
            Effector Stiffness. Value feeds through to rollUp directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Damping">
            <summary>
            Effector  Damping.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.Forcemag">
            <summary>
            Helper force strength.  Do not go above 1 for a rollDownStairs/roll along ground reaction.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_useArmToSlowDown">
            <summary>
            The degree to which the character will try to stop a barrel roll with his arms.
            </summary>
            <remarks>
            Default value = -1.9f.
            Min value = -3.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseZeroPose">
            <summary>
            Blends between a zeroPose and the Rollup, Faster the character is rotating the less the zeroPose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.SpinWhenInAir">
            <summary>
            Applied cheat forces to spin the character when in the air, the forces are 40% of the forces applied when touching the ground.  Be careful little bunny rabbits, the character could spin unnaturally in the air.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_armReachAmount">
            <summary>
            How much the character reaches with his arms to brace against the ground.
            </summary>
            <remarks>
            Default value = 1.4f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.M_legPush">
            <summary>
            Amount that the legs push outwards when tumbling.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TryToAvoidHeadButtingGround">
            <summary>
            Blends between a zeroPose and the Rollup, Faster the character is rotating the less the zeroPose.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ArmReachLength">
            <summary>
            The length that the arm reaches and so how much it straightens.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.CustomRollDir">
            <summary>
            Pass in a custom direction in to have the character try and roll in that direction.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 1.0f).
            Min value = 1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseCustomRollDir">
            <summary>
            Pass in true to use the customRollDir parameter.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.StiffnessDecayTarget">
            <summary>
            The target linear velocity used to start the rolling.
            </summary>
            <remarks>
            Default value = 9.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.StiffnessDecayTime">
            <summary>
            Time, in seconds, to decay stiffness down to the stiffnessDecayTarget value (or -1 to disable).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.AsymmetricalLegs">
            <summary>
            0 is no leg asymmetry in 'foetal' position.  greater than 0 a asymmetricalLegs-rand(30%), added/minus each joint of the legs in radians.  Random number changes about once every roll.  0.4 gives a lot of asymmetry.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ZAxisSpinReduction">
            <summary>
            Tries to reduce the spin around the z axis. Scale 0 - 1.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TargetLinearVelocityDecayTime">
            <summary>
            Time for the targetlinearVelocity to decay to zero.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.TargetLinearVelocity">
            <summary>
            Helper torques are applied to match the spin of the character to the max of targetLinearVelocity and COMVelMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.OnlyApplyHelperForces">
            <summary>
            Don't use rollup if true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseVelocityOfObjectBelow">
            <summary>
            Scale applied cheat forces/torques to (zero) if object underneath character has velocity greater than 1.f.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.UseRelativeVelocity">
            <summary>
            UseVelocityOfObjectBelow uses a relative velocity of the character to the object underneath.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyFoetalToLegs">
            <summary>
            If true, use rollup for upper body and a kind of foetal behavior for legs.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MovementLegsInFoetalPosition">
            <summary>
            Only used if applyFoetalToLegs = true : define the variation of angles for the joints of the legs.
            </summary>
            <remarks>
            Default value = 1.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MaxAngVelAroundFrontwardAxis">
            <summary>
            Only used if applyNewRollingCheatingTorques or applyHelPerTorqueToAlign defined to true : maximal angular velocity around frontward axis of the pelvis to apply cheating torques.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = -1.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MinAngVel">
            <summary>
            Only used if applyNewRollingCheatingTorques or applyHelPerTorqueToAlign defined to true : minimal angular velocity of the roll to apply cheating torques.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyNewRollingCheatingTorques">
            <summary>
            If true will use the new way to apply cheating torques (like in fallOverWall), otherwise will use the old way.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MaxAngVel">
            <summary>
            Only used if applyNewRollingCheatingTorques defined to true : maximal angular velocity of the roll to apply cheating torque.
            </summary>
            <remarks>
            Default value = 5.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MagOfTorqueToRoll">
            <summary>
            Only used if applyNewRollingCheatingTorques defined to true : magnitude of the torque to roll down the stairs.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyHelPerTorqueToAlign">
            <summary>
            Apply torque to align the body orthogonally to the direction of the roll.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.DelayToAlignBody">
            <summary>
            Only used if applyHelPerTorqueToAlign defined to true : delay to start to apply torques.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.MagOfTorqueToAlign">
            <summary>
            Only used if applyHelPerTorqueToAlign defined to true : magnitude of the torque to align orthogonally the body.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 500.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.AirborneReduction">
            <summary>
            Ordinarily keep at 0.85.  Make this lower if you want spinning in the air.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.ApplyMinMaxFriction">
            <summary>
            Pass-through to Roll Up. Controls whether or not behavior enforces min/max friction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.RollDownStairsHelper.LimitSpinReduction">
            <summary>
            Scale zAxisSpinReduction back when rotating end-over-end (somersault) to give the body a chance to align with the axis of rotation.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotHelper for sending a Shot <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Shot <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.BodyStiffness">
            <summary>
            Stiffness of body. Feeds through to roll_up.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineDamping">
            <summary>
            Stiffness of body. Feeds through to roll_up.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ArmStiffness">
            <summary>
            Arm stiffness.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckStiffness">
            <summary>
            Initial stiffness of neck after being shot.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 3.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckDamping">
            <summary>
            Intial damping of neck after being shot.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.NeckStiffness">
            <summary>
            Stiffness of neck.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 3.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.NeckDamping">
            <summary>
            Damping of neck.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.KMultOnLoose">
            <summary>
            How much to add to upperbody stiffness dependent on looseness.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.KMult4Legs">
            <summary>
            How much to add to leg stiffnesses dependent on looseness.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.LoosenessAmount">
            <summary>
            How loose the character is made by a newBullet. Between 0 and 1.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Looseness4Fall">
            <summary>
            How loose the character is made by a newBullet if falling.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Looseness4Stagger">
            <summary>
            How loose the upperBody of the character is made by a newBullet if staggerFall is running (and not falling).  Note atm the neck ramp values are ignored in staggerFall.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.MinArmsLooseness">
            <summary>
            Minimum looseness to apply to the arms.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.MinLegsLooseness">
            <summary>
            Minimum looseness to apply to the Legs.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.GrabHoldTime">
            <summary>
            How long to hold for before returning to relaxed arm position.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineBlendExagCPain">
            <summary>
            True: spine is blended with zero pose, false: spine is blended with zero pose if not setting exag or cpain.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.SpineBlendZero">
            <summary>
            Spine is always blended with zero pose this much and up to 1 as the character become stationary.  If negative no blend is ever applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.BulletProofVest">
            <summary>
            Looseness applied to spine is different if bulletProofVest is true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AlwaysResetLooseness">
            <summary>
            Looseness always reset on shotNewBullet even if previous looseness ramp still running.  Except for the neck which has it's own ramp.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AlwaysResetNeckLooseness">
            <summary>
            Neck looseness always reset on shotNewBullet even if previous looseness ramp still running.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AngVelScale">
            <summary>
            How much to scale the angular velocity coming in from animation of a part if it is in angVelScaleMask (otherwise scale by 1.0).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AngVelScaleMask">
            <summary>
            Parts to scale the initial angular velocity by angVelScale (otherwize scale by 1.0).
            </summary>
            <remarks>
            Default value = "fb".
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FlingWidth">
            <summary>
            Width of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FlingTime">
            <summary>
            Duration of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.TimeBeforeReachForWound">
            <summary>
            Time, in seconds, before the character begins to grab for the wound on the first hit.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagDuration">
            <summary>
            Exaggerate bullet duration (at exagMag/exagTwistMag).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagMag">
            <summary>
            Exaggerate bullet spine Lean magnitude.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagTwistMag">
            <summary>
            Exaggerate bullet spine Twist magnitude.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagSmooth2Zero">
            <summary>
            Exaggerate bullet duration ramping to zero after exagDuration.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ExagZeroTime">
            <summary>
            Exaggerate bullet time spent at 0 spine lean/twist after exagDuration + exagSmooth2Zero.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainSmooth2Time">
            <summary>
            Conscious pain duration ramping from zero to cpainMag/cpainTwistMag.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainDuration">
            <summary>
            Conscious pain duration at cpainMag/cpainTwistMag after cpainSmooth2Time.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainMag">
            <summary>
            Conscious pain spine Lean(back/Forward) magnitude (Replaces spinePainMultiplier).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainTwistMag">
            <summary>
            Conscious pain spine Twist/Lean2Side magnitude Replaces spinePainTwistMultiplier).
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CpainSmooth2Zero">
            <summary>
            Conscious pain ramping to zero after cpainSmooth2Time + cpainDuration (Replaces spinePainTime).
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Crouching">
            <summary>
            Is the guy crouching or not.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ChickenArms">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.ReachForWound">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Fling">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredArm">
            <summary>
            Injured arm code runs if arm hit (turns and steps and bends injured arm).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredLeg">
            <summary>
            When false injured leg is not bent and character does not bend to reach it.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredLowerLegReach">
            <summary>
            When false don't try to reach for injured Lower Legs (shins/feet).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.AllowInjuredThighReach">
            <summary>
            When false don't try to reach for injured Thighs.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.StableHandsAndNeck">
            <summary>
            Additional stability for hands and neck (less loose).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.Melee">
            <summary>
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.FallingReaction">
            <summary>
            0=Rollup, 1=Catchfall, 2=rollDownStairs, 3=smartFall.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.UseExtendedCatchFall">
            <summary>
            Keep the character active instead of relaxing at the end of the catch fall.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialWeaknessZeroDuration">
            <summary>
            Duration for which the character's upper body stays at minimum stiffness (not quite zero).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialWeaknessRampDuration">
            <summary>
            Duration of the ramp to bring the character's upper body stiffness back to normal levels.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckDuration">
            <summary>
            Duration for which the neck stays at intial stiffness/damping.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.InitialNeckRampDuration">
            <summary>
            Duration of the ramp to bring the neck stiffness/damping back to normal levels.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.UseCStrModulation">
            <summary>
            If enabled upper and lower body strength scales with character strength, using the range given by parameters below.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrUpperMin">
            <summary>
            Proportions to what the strength would be normally.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrUpperMax">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrLowerMin">
            <summary>
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.CStrLowerMax">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHelper.DeathTime">
            <summary>
            Time to death (HACK for underwater). If -ve don't ever die.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotNewBulletHelper">
            <summary>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotNewBulletHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotNewBulletHelper for sending a ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotNewBullet <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Send new wound information to the shot.  Can cause shot to restart it's performance in part or in whole.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.BodyPart">
            <summary>
            Part ID on the body where the bullet hit.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 21.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.LocalHitPointInfo">
            <summary>
            If true then normal and hitPoint should be supplied in local coordinates of bodyPart.  If false then normal and hitPoint should be supplied in World coordinates.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.Normal">
            <summary>
            Normal coming out of impact point on character.  Can be local or global depending on localHitPointInfo.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, -1.0f).
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.HitPoint">
            <summary>
            Position of impact on character. Can be local or global depending on localHitPointInfo.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotNewBulletHelper.BulletVel">
            <summary>
            Bullet velocity in world coordinates.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            Min value = -2000.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotSnapHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotSnapHelper for sending a ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotSnap <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.Snap">
            <summary>
            Add a Snap to shot.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMag">
            <summary>
            The magnitude of the reaction.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMovingMult">
            <summary>
            MovingMult*snapMag = The magnitude of the reaction if moving(comVelMag) faster than movingThresh.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapBalancingMult">
            <summary>
            BalancingMult*snapMag = The magnitude of the reaction if balancing = (not lying on the floor/ not upper body not collided) and not airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapAirborneMult">
            <summary>
            AirborneMult*snapMag = The magnitude of the reaction if airborne.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapMovingThresh">
            <summary>
            If moving(comVelMag) faster than movingThresh then mvingMult applied to stunMag.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapDirectionRandomness">
            <summary>
            The character snaps in a prescribed way (decided by bullet direction) - Higher the value the more random this direction is.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapLeftArm">
            <summary>
            Snap the leftArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapRightArm">
            <summary>
            Snap the rightArm.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapLeftLeg">
            <summary>
            Snap the leftLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapRightLeg">
            <summary>
            Snap the rightLeg.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapSpine">
            <summary>
            Snap the spine.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapNeck">
            <summary>
            Snap the neck.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapPhasedLegs">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapHipType">
            <summary>
            Type of hip reaction 0=none, 1=side2side 2=steplike.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapUseBulletDir">
            <summary>
            Legs are either in phase with each other or not.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapHitPart">
            <summary>
            Snap only around the wounded part//mmmmtodo check whether bodyPart doesn't have to be remembered for unSnap.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.UnSnapInterval">
            <summary>
            Interval before applying reverse snap.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.UnSnapRatio">
            <summary>
            The magnitude of the reverse snap.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotSnapHelper.SnapUseTorques">
            <summary>
            Use torques to make the snap otherwise use a change in the parts angular velocity.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotShockSpinHelper">
            <summary>
            Configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotShockSpinHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotShockSpinHelper for sending a ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotShockSpin <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shockSpin effect in shot.  Spin/Lift the character using cheat torques/forces.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.AddShockSpin">
            <summary>
            If enabled, add a short 'shock' of torque to the character's spine to exaggerate bullet impact.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.RandomizeShockSpinDirection">
            <summary>
            For use with close-range shotgun blasts, or similar.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.AlwaysAddShockSpin">
            <summary>
            If true, apply the shock spin no matter which body component was hit. Otherwise only apply if the spine or clavicles get hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMin">
            <summary>
            Minimum amount of torque to add if using shock-spin feature.
            </summary>
            <remarks>
            Default value = 50.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMax">
            <summary>
            Maximum amount of torque to add if using shock-spin feature.
            </summary>
            <remarks>
            Default value = 90.0f.
            Min value = 0.0f.
            Max value = 1000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinLiftForceMult">
            <summary>
            If greater than 0, apply a force to lift the character up while the torque is applied, trying to produce a dramatic spun/twist shotgun-to-the-chest effect. This is a scale of the torque applied, so 8.0 or so would give a reasonable amount of lift.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinDecayMult">
            <summary>
            Multiplier used when decaying torque spin over time.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinScalePerComponent">
            <summary>
            Torque applied is scaled by this amount across the spine components - spine2 recieving the full amount, then 3 and 1 and finally 0. Each time, this value is used to scale it down. 0.5 means half the torque each time.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinMaxTwistVel">
            <summary>
            Shock spin ends when twist velocity is greater than this value (try 6.0).  If set to -1 does not stop.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 200.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinScaleByLeverArm">
            <summary>
            Shock spin scales by lever arm of bullet i.e. bullet impact point to center line.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinAirMult">
            <summary>
            ShockSpin's torque is multipied by this value when both the character's feet are not in contact.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpin1FootMult">
            <summary>
            ShockSpin's torque is multipied by this value when the one of the character's feet are not in contact.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.ShockSpinFootGripMult">
            <summary>
            ShockSpin scales the torques applied to the feet by footSlipCompensation.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotShockSpinHelper.BracedSideSpinMult">
            <summary>
            If shot on a side with a forward foot and both feet are on the ground and balanced, increase the shockspin to compensate for the balancer naturally resisting spin to that side.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotFallToKneesHelper">
            <summary>
            Configure the fall to knees shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotFallToKneesHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotFallToKneesHelper for sending a ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotFallToKnees <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the fall to knees shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FallToKnees">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkAlwaysChangeFall">
            <summary>
            Always change fall behavior.  If false only change when falling forward.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBalanceTime">
            <summary>
            How long the balancer runs for before fallToKnees starts.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHelperForce">
            <summary>
            Hip helper force magnitude - to help character lean over balance point of line between toes.
            </summary>
            <remarks>
            Default value = 200.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHelperForceOnSpine">
            <summary>
            Helper force applied to spine3 as well.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkLeanHelp">
            <summary>
            Help balancer lean amount - to help character lean over balance point of line between toes.
            Half of this is also applied as hipLean.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkSpineBend">
            <summary>
            Bend applied to spine when falling from knees. (+ve forward - try -0.1) (only if rds called).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -0.2f.
            Max value = 0.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkStiffSpine">
            <summary>
            Stiffen spine when falling from knees (only if rds called).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkImpactLooseness">
            <summary>
            Looseness (muscleStiffness = 1.01f - m_parameters.ftkImpactLooseness) applied to upperBody on knee impacts.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkImpactLoosenessTime">
            <summary>
            Time that looseness is applied after knee impacts.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBendRate">
            <summary>
            Rate at which the legs are bent to go from standing to on knees.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHipBlend">
            <summary>
            Blend from current hip to balancing on knees hip angle.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkLungeProb">
            <summary>
            Probability that a lunge reaction will be allowed.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkKneeSpin">
            <summary>
            When on knees allow some spinning of the character.
            If false then the balancers' footSlipCompensation remains on and tends to keep the character facing the same way as when it was balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFricMult">
            <summary>
            Multiplier on the reduction of friction for the feet based on angle away from horizontal - helps the character fall to knees quicker.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkHipAngleFall">
            <summary>
            Apply this hip angle when the character starts to fall backwards when on knees.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkPitchForwards">
            <summary>
            Hip pitch applied (+ve forward, -ve backwards) if character is falling forwards on way down to it's knees.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkPitchBackwards">
            <summary>
            Hip pitch applied (+ve forward, -ve backwards) if character is falling backwards on way down to it's knees.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -0.5f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFallBelowStab">
            <summary>
            Balancer instability below which the character starts to bend legs even if it isn't going to fall on to it's knees (i.e. if going backwards).
            0.3 almost ensures a fall to knees but means the character will keep stepping backward until it slows down enough.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkBalanceAbortThreshold">
            <summary>
            When the character gives up and goes into a fall.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkOnKneesArmType">
            <summary>
            Type of arm response when on knees falling forward 0=useFallArms (from RollDownstairs or catchFall), 1= armsIn, 2=armsOut.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReleaseReachForWound">
            <summary>
            Release the reachForWound this amount of time after the knees have hit.
            If LT 0.0 then keep reaching for wound regardless of fall/onground state.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReachForWound">
            <summary>
            True = Keep reaching for wound regardless of fall/onground state.
            false = respect the shotConfigureArms params: reachFalling, reachFallingWithOneHand, reachOnFloor.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkReleasePointGun">
            <summary>
            Override the pointGun when knees hit.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFallToKneesHelper.FtkFailMustCollide">
            <summary>
            The upper body of the character must be colliding and other failure conditions met to fail.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotFromBehindHelper">
            <summary>
            Configure the shot from behind reaction.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotFromBehindHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotFromBehindHelper for sending a ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotFromBehind <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shot from behind reaction.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.ShotFromBehind">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbSpineAmount">
            <summary>
            SpineBend.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbNeckAmount">
            <summary>
            Neck Bend.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbHipAmount">
            <summary>
            Hip Pitch.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbKneeAmount">
            <summary>
            Knee bend.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbPeriod">
            <summary>
            ShotFromBehind reaction period after being shot.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbForceBalancePeriod">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbArmsOnset">
            <summary>
            Amount of time before applying spread out arms pose.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbKneesOnset">
            <summary>
            Amount of time before bending knees a bit.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbNoiseGain">
            <summary>
            Controls additional independent randomized bending of left/right elbows.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotFromBehindHelper.SfbIgnoreFail">
            <summary>
            0 = balancer fails as normal,
            1 = ignore backArchedBack and leanedTooFarBack balancer failures,
            2 = ignore backArchedBack balancer failure only,
            3 = ignore leanedTooFarBack balancer failure only.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotInGutsHelper">
            <summary>
            Configure the shot in guts reaction.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotInGutsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotInGutsHelper for sending a ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotInGuts <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the shot in guts reaction.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.ShotInGuts">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigSpineAmount">
            <summary>
            SpineBend.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigNeckAmount">
            <summary>
            Neck Bend.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigHipAmount">
            <summary>
            Hip Pitch.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigKneeAmount">
            <summary>
            Knee bend.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigPeriod">
            <summary>
            Active time after being shot.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigForceBalancePeriod">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotInGutsHelper.SigKneesOnset">
            <summary>
            Amount of time not taking a step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.ShotHeadLookHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotHeadLookHelper for sending a ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotHeadLook <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.UseHeadLook">
            <summary>
            Use head look.
            Default: looks at provided target or if this is zero - looks forward or in velocity direction.
            If reachForWound is enabled, switches between looking at the wound and at the default target.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLook">
            <summary>
            Position to look at with headlook flag.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtWoundMinTimer">
            <summary>
            Min time to look at wound.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtWoundMaxTimer">
            <summary>
            Max time to look at wound.
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtHeadPosMaxTimer">
            <summary>
            Min time to look headLook or if zero - forward or in velocity direction.
            </summary>
            <remarks>
            Default value = 1.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotHeadLookHelper.HeadLookAtHeadPosMinTimer">
            <summary>
            Max time to look headLook or if zero - forward or in velocity direction.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.ShotConfigureArmsHelper">
            <summary>
            Configure the arm reactions in shot.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.ShotConfigureArmsHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the ShotConfigureArmsHelper for sending a ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the ShotConfigureArms <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Configure the arm reactions in shot.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Brace">
            <summary>
            Blind brace with arms if appropriate.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.PointGun">
            <summary>
            Point gun if appropriate.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.UseArmsWindmill">
            <summary>
            ArmsWindmill if going backwards fast enough.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReleaseWound">
            <summary>
            Release wound if going sideways/forward fast enough.
            0 = don't.
            1 = only if bracing.
            2 = any default arm reaction.
            </summary>
            <remarks>
            Default value = 1.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachFalling">
            <summary>
            Reach for wound when falling.
            0 = false,
            1 = true,
            2 = once per shot performance.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachFallingWithOneHand">
            <summary>
            Force character to reach for wound with only one hand when falling or fallen.
            0 = allow two-handed reach,
            1 = left only if two-handed possible,
            2 = right only if two-handed possible,
            3 = one handed but automatic (allows switching of hands).
            </summary>
            <remarks>
            Default value = 3.
            Min value = 0.
            Max value = 3.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachOnFloor">
            <summary>
            ReachForWound when on floor - 0 = false, 1 = true, 2 = once per shot performance.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AlwaysReachTime">
            <summary>
            Inhibit arms brace for this amount of time after reachForWound has begun.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWSpeedMult">
            <summary>
            For armsWindmill, multiplier on character speed - increase of speed of circling is proportional to character speed (max speed of circliing increase = 1.5). Eg. lowering the value increases the range of velocity that the 0-1.5 is applied over.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWRadiusMult">
            <summary>
            For armsWindmill, multiplier on character speed - increase of radii is proportional to character speed (max radius increase = 0.45).
            E.g. lowering the value increases the range of velocity that the 0-0.45 is applied over.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AWStiffnessAdd">
            <summary>
            For armsWindmill, added arm stiffness ranges from 0 to AWStiffnessAdd.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.ReachWithOneHand">
            <summary>
            Force character to reach for wound with only one hand.
            0 = allow two-handed reach,
            1 = left only if two-handed possible,
            2 = right only if two-handed possible.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AllowLeftPistolRFW">
            <summary>
            Allow character to reach for wound with left hand if holding a pistol.
            It never will for a rifle.
            If pointGun is running this will only happen if the hand cannot point and pointGun:poseUnusedGunArm = false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.AllowRightPistolRFW">
            <summary>
            Allow character to reach for wound with right hand if holding a pistol.
            It never will for a rifle.
            If pointGun is running this will only happen if the hand cannot point and pointGun:poseUnusedGunArm = false.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.RfwWithPistol">
            <summary>
            Override pointGun and reachForWound if desired if holding a pistol.
            It never will for a rifle.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2">
            <summary>
            Type of reaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Left">
            <summary>
            Fling the left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Right">
            <summary>
            Fling the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2OverrideStagger">
            <summary>
            Override stagger arms even if staggerFall:m_upperBodyReaction = true.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2TimeBefore">
            <summary>
            Time after hit that the fling will start (allows for a bit of loose arm movement from bullet impact.snap etc).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2Time">
            <summary>
            Duration of the fling behavior.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2MStiffL">
            <summary>
            Muscle stiffness of the left arm.
            If negative then uses the shots underlying muscle stiffness from controlStiffness (i.e. respects looseness).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2MStiffR">
            <summary>
            Muscle stiffness of the right arm.
            If negative then uses the shots underlying muscle stiffness from controlStiffness (i.e. respects looseness).
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2RelaxTimeL">
            <summary>
            Maximum time before the left arm relaxes in the fling.
            It will relax automatically when the arm has completed it's bent arm fling.
            This is what causes the arm to straighten.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2RelaxTimeR">
            <summary>
            Maximum time before the right arm relaxes in the fling.
            It will relax automatically when the arm has completed it's bent arm fling.
            This is what causes the arm to straighten.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMinL">
            <summary>
            Minimum fling angle for left arm.
            Fling angle is random in the range fling2AngleMin:fling2AngleMax.
            Angle of fling in radians measured from the body horizontal sideways from shoulder.
            Positive is up, 0 shoulder level, negative down.
            </summary>
            <remarks>
            Default value = -1.5f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMaxL">
            <summary>
            Maximum fling angle for left arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMinR">
            <summary>
            Minimum fling angle for right arm.
            </summary>
            <remarks>
            Default value = -1.5f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2AngleMaxR">
            <summary>
            Maximum fling angle for right arm.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.5f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMinL">
            <summary>
            Minimum left arm length.
            Arm length is random in the range fling2LengthMin:fling2LengthMax.
            Arm length maps one to one with elbow angle.
            These values are scaled internally for the female character.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMaxL">
            <summary>
            Maximum left arm length.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMinR">
            <summary>
            Min right arm length.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Fling2LengthMaxR">
            <summary>
            Max right arm length.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.3f.
            Max value = 0.6f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.Bust">
            <summary>
            Has the character got a bust.
            If so then cupBust (move bust reach targets below bust) or bustElbowLift and cupSize (stop upperArm penetrating bust and move bust targets to surface of bust) are implemented.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.BustElbowLift">
            <summary>
            Lift the elbows up this much extra to avoid upper arm penetrating the bust (when target hits spine2 or spine3).
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.CupSize">
            <summary>
            Amount reach target to bust (spine2) will be offset forward by.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.ShotConfigureArmsHelper.CupBust">
            <summary>
            All reach targets above or on the bust will cause a reach below the bust.
            (specifically moves spine3 and spine2 targets to spine1).
            BustElbowLift and cupSize are ignored.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.SmartFallHelper">
            <summary>
            Clone of High Fall with a wider range of operating conditions.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.SmartFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the SmartFallHelper for sending a SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the SmartFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Clone of High Fall with a wider range of operating conditions.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.BodyStiffness">
            <summary>
            Stiffness of body.
            Value feeds through to bodyBalance (synced with defaults), to armsWindmill (14 for this value at default ), legs pedal, head look and roll down stairs directly.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Bodydamping">
            <summary>
            The damping of the joints.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 3.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Catchfalltime">
            <summary>
            The length of time before the impact that the character transitions to the landing.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CrashOrLandCutOff">
            <summary>
            0.52angle is 0.868 dot//A threshold for deciding how far away from upright the character needs to be before bailing out (going into a foetal) instead of trying to land (keeping stretched out).
            NB: never does bailout if ignorWorldCollisions true.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.PdStrength">
            <summary>
            Strength of the controller to keep the character at angle aimAngleBase from vertical.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.PdDamping">
            <summary>
            Damping multiplier of the controller to keep the character at angle aimAngleBase from vertical.
            The actual damping is pdDamping*pdStrength*constant*angVel.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmAngSpeed">
            <summary>
            Arm circling speed in armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmAmplitude">
            <summary>
            In armWindMillAdaptive.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmPhase">
            <summary>
            In armWindMillAdaptive 3.1 opposite for stuntman.
            1.0 old default. 0.0 in phase.
            </summary>
            <remarks>
            Default value = 3.1f.
            Min value = 0.0f.
            Max value = 6.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmBendElbows">
            <summary>
            In armWindMillAdaptive bend the elbows as a function of armAngle.
            For stunt man true otherwise false.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegRadius">
            <summary>
            Radius of legs on pedal.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 0.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegAngSpeed">
            <summary>
            In pedal.
            </summary>
            <remarks>
            Default value = 7.9f.
            Min value = 0.0f.
            Max value = 15.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegAsymmetry">
            <summary>
            0.0 for stunt man.
            Random offset applied per leg to the angular speed to desynchronize the pedaling - set to 0 to disable, otherwise should be set to less than the angularSpeed value.
            </summary>
            <remarks>
            Default value = 4.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Arms2LegsPhase">
            <summary>
            Phase angle between the arms and legs circling angle.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 6.5f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Arms2LegsSync">
            <summary>
            Syncs the arms angle to what the leg angle is.
            </summary>
            <remarks>
            Default value = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            All speed/direction parameters of armswindmill are overwritten if = <see cref="F:GTA.NaturalMotion.Synchroisation.AlwaysSynced"/>.
            If <see cref="F:GTA.NaturalMotion.Synchroisation.SyncedAtStart"/> and you want synced arms/legs then armAngSpeed=legAngSpeed, legAsymmetry = 0.0 (to stop randomizations of the leg cicle speed).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ArmsUp">
            <summary>
            Where to put the arms when preparing to land.
            Approx 1 = above head, 0 = head height, -1 = down.
            LT -2.0 use catchFall arms, LT -3.0 use prepare for landing pose if Agent is due to land vertically, feet first.
            </summary>
            <remarks>
            Default value = -3.1f.
            Min value = -4.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateBodyToFallDirection">
            <summary>
            Toggle to orientate to fall direction.  i.e. orientate so that the character faces the horizontal velocity direction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateTwist">
            <summary>
            If false don't worry about the twist angle of the character when orientating the character.
            If false this allows the twist axis of the character to be free (You can get a nice twisting highFall like the one in dieHard 4 when the car goes into the helicopter).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.OrientateMax">
            <summary>
            DEVEL parameter - suggest you don't edit it.  Maximum torque the orientation controller can apply.
            If 0 then no helper torques will be used.
            300 will orientate the character softly for all but extreme angles away from aimAngleBase.
            If abs (current -aimAngleBase) is getting near 3.0 then this can be reduced to give a softer feel.
            </summary>
            <remarks>
            Default value = 300.0f.
            Min value = 0.0f.
            Max value = 2000.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AlanRickman">
            <summary>
            If true then orientate the character to face the point from where it started falling.
            High fall like the one in "Die Hard" with Alan Rickman.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardRoll">
            <summary>
            Try to execute a forward Roll on landing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.UseZeroPose_withFowardRoll">
            <summary>
            Blend to a zero pose when forward roll is attempted.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AimAngleBase">
            <summary>
            Angle from vertical the pdController is driving to (positive = forwards).
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -3.1f.
            Max value = 3.1f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardVelRotation">
            <summary>
            Scale to add/subtract from aimAngle based on forward speed (Internal).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FootVelCompScale">
            <summary>
            Scale to change to amount of vel that is added to the foot ik from the velocity (Internal).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SideD">
            <summary>
            Sideoffset for the feet during prepareForLanding. +ve = right.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.FowardOffsetOfLegIK">
            <summary>
            Forward offset for the feet during prepareForLanding.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegL">
            <summary>
            Leg Length for ik (Internal)//unused.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CatchFallCutOff">
            <summary>
            0.5angle is 0.878 dot. Cutoff to go to the catchFall (internal) //mmmtodo do like crashOrLandCutOff.
            </summary>
            <remarks>
            Default value = 0.9f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LegStrength">
            <summary>
            Strength of the legs at landing.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Balance">
            <summary>
            If true have enough strength to balance.
            If false not enough strength in legs to balance (even though bodyBlance called).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.IgnorWorldCollisions">
            <summary>
            Never go into bailout (foetal).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.AdaptiveCircling">
            <summary>
            Stunt man type fall.  Arm and legs circling direction controlled by angmom and orientation.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Hula">
            <summary>
            With stunt man type fall.  Hula reaction if can't see floor and not rotating fast.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.MaxSpeedForRecoverableFall">
            <summary>
            Character needs to be moving less than this speed to consider fall as a recoverable one.
            </summary>
            <remarks>
            Default value = 15.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.MinSpeedForBrace">
            <summary>
            Character needs to be moving at least this fast horizontally to start bracing for impact if there is an object along its trajectory.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.LandingNormal">
            <summary>
            Ray-cast normal doted with up direction has to be greater than this number to consider object flat enough to land on it.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsForceMag">
            <summary>
            </summary>
            <remarks>
            Default value = 0.8f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsTargetLinVeDecayTime">
            <summary>
            RDS: Time for the targetlinearVelocity to decay to zero.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsTargetLinearVelocity">
            <summary>
            RDS: Helper torques are applied to match the spin of the character to the max of targetLinearVelocity and COMVelMag.
            -1 to use initial character velocity.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 30.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsUseStartingFriction">
            <summary>
            Start Catch Fall/RDS state with specified friction.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsStartingFriction">
            <summary>
            Catch Fall/RDS starting friction.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsStartingFrictionMin">
            <summary>
            Catch Fall/RDS starting friction minimum.
            Catch fall will overwrite based on setFallingReaction.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.RdsForceVelThreshold">
            <summary>
            Velocity threshold under which RDS force mag will be applied.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.InitialState">
            <summary>
            Force initial state (used in vehicle bail out to start SF_CatchFall (6) earlier.
            </summary>
            <remarks>
            Default value = 0.
            Min value = 0.
            Max value = 7.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ChangeExtremityFriction">
            <summary>
            Allow friction changes to be applied to the hands and feet.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.Teeter">
            <summary>
            Set up an immediate teeter in the direction of trave if initial state is SF_Balance.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.TeeterOffset">
            <summary>
            Offset the default Teeter edge in the direction of travel.
            Will need to be tweaked depending on how close to the real edge AI tends to trigger the behavior.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.StopRollingTime">
            <summary>
            Time in seconds before ped should start actively trying to stop rolling.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ReboundScale">
            <summary>
            Scale for rebound assistance.
            0 = off,
            1 = very bouncy,
            2 = jbone crazy.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ReboundMask">
            <summary>
            Part mask to apply rebound assistance.
            </summary>
            <remarks>
            Default value = uk.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.ForceHeadAvoid">
            <summary>
            Force head avoid to be active during Catch Fall even when character is not on the ground.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.CfZAxisSpinReduction">
            <summary>
            Pass-through parameter for Catch Fall spin reduction.  Increase to stop more spin. 0..1.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SplatWhenStopped">
            <summary>
            Transition to splat state when com vel is below value, regardless of character health or fall velocity.
            Set to zero to disable.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.BlendHeadWhenStopped">
            <summary>
            Blend head to neutral pose com vel approaches zero.
            Linear between zero and value.
            Set to zero to disable.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.SmartFallHelper.SpreadLegs">
            <summary>
            Spread legs amount for pedal during fall.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.StaggerFallHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the StaggerFallHelper for sending a StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the StaggerFall <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmStiffness">
            <summary>
            Stiffness of arms. Catch_fall's stiffness scales with this value, but has default values when this is default.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmDamping">
            <summary>
            Sets damping value for the arms.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineDamping">
            <summary>
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineStiffness">
            <summary>
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmStiffnessStart">
            <summary>
            ArmStiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.ArmDampingStart">
            <summary>
            ArmDamping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineDampingStart">
            <summary>
            SpineDamping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineStiffnessStart">
            <summary>
            SpineStiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TimeAtStartValues">
            <summary>
            Time spent with Start values for arms and spine stiffness and damping i.e. for whiplash effect.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.RampTimeFromStartValues">
            <summary>
            Time spent ramping from Start to end values for arms and spine stiffness and damping i.e. for whiplash effect (occurs after timeAtStartValues).
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.StaggerStepProb">
            <summary>
            Probability per step of time spent in a stagger step.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.StepsTillStartEnd">
            <summary>
            Steps taken before lowerBodyStiffness starts ramping down by perStepReduction1.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TimeStartEnd">
            <summary>
            Time from start of behavior before lowerBodyStiffness starts ramping down for rampTimeToEndValues to endValues.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.RampTimeToEndValues">
            <summary>
            Time spent ramping from lowerBodyStiffness to lowerBodyStiffnessEnd.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LowerBodyStiffness">
            <summary>
            LowerBodyStiffness should be 12.
            </summary>
            <remarks>
            Default value = 13.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LowerBodyStiffnessEnd">
            <summary>
            LowerBodyStiffness at end.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PredictionTime">
            <summary>
            Amount of time (seconds) into the future that the character tries to step to.
            Bigger values try to recover with fewer, bigger steps.
            Smaller values recover with smaller steps, and generally recover less.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PerStepReduction1">
            <summary>
            LowerBody stiffness will be reduced every step to make the character fallover.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirRate">
            <summary>
            LeanInDirection will be increased from 0 to leanInDirMax linearly at this rate.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirMaxF">
            <summary>
            Max of leanInDirection magnitude when going forwards.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanInDirMaxB">
            <summary>
            Max of leanInDirection magnitude when going backwards.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanHipsMaxF">
            <summary>
            Max of leanInDirectionHips magnitude when going forwards.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.LeanHipsMaxB">
            <summary>
            Max of leanInDirectionHips magnitude when going backwards.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Lean2multF">
            <summary>
            Lean of spine to side in side velocity direction when going forwards.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Lean2multB">
            <summary>
            Lean of spine to side in side velocity direction when going backwards.
            </summary>
            <remarks>
            Default value = -2.0f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.PushOffDist">
            <summary>
            Amount stance foot is behind com in the direction of velocity before the leg tries to pushOff to increase momentum.
            Increase to lower the probability of the pushOff making the character bouncy.
            </summary>
            <remarks>
            Default value = 0.2f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.MaxPushoffVel">
            <summary>
            Stance leg will only pushOff to increase momentum if the vertical hip velocity is less than this value. 0.4 seems like a good value.
            The higher it is the less this functionality is applied.
            If it is very low or negative this can stop the pushOff altogether.
            </summary>
            <remarks>
            Default value = 20.0f.
            Min value = -20.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HipBendMult">
            <summary>
            HipBend scaled with velocity.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.AlwaysBendForwards">
            <summary>
            Bend forwards at the hip (hipBendMult) whether moving backwards or forwards.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.SpineBendMult">
            <summary>
            Spine bend scaled with velocity.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = -10.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing, balancer default is 0.2.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnOffProb">
            <summary>
            Weighted probability that turn will be off.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Turn2TargetProb">
            <summary>
            Weighted probability of turning towards headLook target.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.Turn2VelProb">
            <summary>
            Weighted probability of turning towards velocity.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnAwayProb">
            <summary>
            Weighted probability of turning away from headLook target.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnLeftProb">
            <summary>
            Weighted probability of turning left.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.TurnRightProb">
            <summary>
            Weighted probability of turning right.
            This is one of six turn type weights.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UseBodyTurn">
            <summary>
            Enable and provide a positive bodyTurnTimeout and provide a look-at target to make the character turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.StaggerFallHelper.UpperBodyReaction">
            <summary>
            Enable upper body reaction i.e. blindBrace and armswindmill.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.TeeterHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the TeeterHelper for sending a Teeter <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Teeter <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.EdgeLeft">
            <summary>
            Defines the left edge point (left of character facing edge).
            </summary>
            <remarks>
            Default value = Vector3(39.5f, 38.9f, 21.1f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.EdgeRight">
            <summary>
            Defines the right edge point (right of character facing edge).
            </summary>
            <remarks>
            Default value = Vector3(39.5f, 39.9f, 21.1f).
            Min value = 0.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.UseExclusionZone">
            <summary>
            Stop stepping across the line defined by edgeLeft and edgeRight.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.UseHeadLook">
            <summary>
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.CallHighFall">
            <summary>
            Call highFall if fallen over the edge.
            If false just call blended writhe (to go over the top of the fall behavior of the underlying behavior e.g. bodyBalance).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAway">
            <summary>
            Lean away from the edge based on velocity towards the edge (if closer than 2m from edge).
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.PreTeeterTime">
            <summary>
            Time-to-edge threshold to start pre-teeter (windmilling, etc).
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAwayTime">
            <summary>
            Time-to-edge threshold to start leaning away from a potential fall.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.LeanAwayScale">
            <summary>
            Scales stay upright lean and hip pitch.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.TeeterHelper.TeeterTime">
            <summary>
            Time-to-edge threshold to start full-on teeter (more aggressive lean, drop-and-twist, etc).
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.UpperBodyFlinchHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the UpperBodyFlinchHelper for sending a UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the UpperBodyFlinch <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceLeftRight">
            <summary>
            Left-Right distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceFrontBack">
            <summary>
            Front-Back distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HandDistanceVertical">
            <summary>
            Vertical distance between the hands.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BodyStiffness">
            <summary>
            Stiffness of body. Value carries over to head look, spine twist.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BodyDamping">
            <summary>
            Damping value used for upper body.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.BackBendAmount">
            <summary>
            Amount to bend the back during the flinch.
            </summary>
            <remarks>
            Default value = -0.6f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseRightArm">
            <summary>
            Toggle to use the right arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseLeftArm">
            <summary>
            Toggle to Use the Left arm.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.NoiseScale">
            <summary>
            Amplitude of the perlin noise applied to the arms positions in the flinch to the front part of the behavior.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.NewHit">
            <summary>
            Relaxes the character for 1 frame if set.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.ProtectHeadToggle">
            <summary>
            Always protect head.
            Note if false then character flinches if target is in front, protects head if target is behind.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.DontBraceHead">
            <summary>
            Don't protect head only brace from front. Turned on by bcr.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.ApplyStiffness">
            <summary>
            Turned of by bcr.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.HeadLookAwayFromTarget">
            <summary>
            Look away from target (unless protecting head then look between feet).
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.UseHeadLook">
            <summary>
            Use headlook.
            </summary>
            <remarks>
            Default value = True.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.TurnTowards">
            <summary>
            Ve balancer turn Towards, negative balancer turn Away, 0 balancer won't turn.
            There is a 50% chance that the character will not turn even if this parameter is set to turn.
            </summary>
            <remarks>
            Default value = 1.
            Min value = -2.
            Max value = 2.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.UpperBodyFlinchHelper.Pos">
            <summary>
            Position in world-space of object to flinch from.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.YankedHelper.#ctor(GTA.Ped)">
            <summary>
            Creates a new Instance of the YankedHelper for sending a Yanked <see cref="T:GTA.NaturalMotion.Message"/> to a given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to send the Yanked <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmStiffness">
            <summary>
            Stiffness of arms when upright.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmDamping">
            <summary>
            Sets damping value for the arms when upright.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineDamping">
            <summary>
            Spine damping when upright.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineStiffness">
            <summary>
            Spine stiffness when upright.
            </summary>
            <remarks>
            Default value = 10.0f.
            Min value = 6.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmStiffnessStart">
            <summary>
            Arm stiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ArmDampingStart">
            <summary>
            Arm damping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineDampingStart">
            <summary>
            Spine damping during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineStiffnessStart">
            <summary>
            Spine stiffness during the yanked timescale i.e. timeAtStartValues.
            </summary>
            <remarks>
            Default value = 3.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TimeAtStartValues">
            <summary>
            Time spent with Start values for arms and spine stiffness and damping i.e. for whiplash effect.
            </summary>
            <remarks>
            Default value = 0.4f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RampTimeFromStartValues">
            <summary>
            Time spent ramping from Start to end values for arms and spine stiffness and damping i.e. for whiplash effect (occurs after timeAtStartValues).
            </summary>
            <remarks>
            Default value = 0.1f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.StepsTillStartEnd">
            <summary>
            Steps taken before lowerBodyStiffness starts ramping down.
            </summary>
            <remarks>
            Default value = 2.
            Min value = 0.
            Max value = 100.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TimeStartEnd">
            <summary>
            Time from start of behavior before lowerBodyStiffness starts ramping down by perStepReduction1.
            </summary>
            <remarks>
            Default value = 100.0f.
            Min value = 0.0f.
            Max value = 100.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RampTimeToEndValues">
            <summary>
            Time spent ramping from lowerBodyStiffness to lowerBodyStiffnessEnd.
            </summary>
            <remarks>
            Default value = 0.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.LowerBodyStiffness">
            <summary>
            LowerBodyStiffness should be 12.
            </summary>
            <remarks>
            Default value = 12.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.LowerBodyStiffnessEnd">
            <summary>
            LowerBodyStiffness at end.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.PerStepReduction">
            <summary>
            LowerBody stiffness will be reduced every step to make the character fallover.
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipPitchForward">
            <summary>
            Amount to bend forward at the hips (+ve forward, -ve backwards).
            Behavior switches between hipPitchForward and hipPitchBack.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -1.3f.
            Max value = 1.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipPitchBack">
            <summary>
            Amount to bend backwards at the hips (+ve backwards, -ve forwards).
            Behavior switches between hipPitchForward and hipPitchBack.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = -1.3f.
            Max value = 1.3f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineBend">
            <summary>
            Bend/Twist the spine amount.
            </summary>
            <remarks>
            Default value = 0.7f.
            Min value = 0.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.FootFriction">
            <summary>
            Foot friction when standing/stepping.  0.5 gives a good slide sometimes.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TurnThresholdMin">
            <summary>
            Min angle at which the turn with toggle to the other direction (actual toggle angle is chosen randomly in range min to max).
            If it is 1 then it will never toggle.
            If negative then no turn is applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.TurnThresholdMax">
            <summary>
            Max angle at which the turn with toggle to the other direction (actual toggle angle is chosen randomly in range min to max).
            If it is 1 then it will never toggle.
            If negative then no turn is applied.
            </summary>
            <remarks>
            Default value = 0.6f.
            Min value = -0.1f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.UseHeadLook">
            <summary>
            Enable and provide a look-at target to make the character's head turn to face it while balancing.
            </summary>
            <remarks>
            Default value = False.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookPos">
            <summary>
            Position of thing to look at.
            </summary>
            <remarks>
            Default value = Vector3(0.0f, 0.0f, 0.0f).
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookInstanceIndex">
            <summary>
            Level index of thing to look at.
            </summary>
            <remarks>
            Default value = -1.
            Min value = -1.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HeadLookAtVelProb">
            <summary>
            Probability [0-1] that headLook will be looking in the direction of velocity when stepping.
            </summary>
            <remarks>
            Default value = -1.0f.
            Min value = -1.0f.
            Max value = 1.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.ComVelRDSThresh">
            <summary>
            For handsAndKnees catchfall ONLY: comVel above which rollDownstairs will start.
            </summary>
            <remarks>
            Default value = 2.0f.
            Min value = 0.0f.
            Max value = 20.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HulaPeriod">
            <summary>
            0.25 A complete wiggle will take 4*hulaPeriod.
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.HipAmplitude">
            <summary>
            Amount of hip movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.SpineAmplitude">
            <summary>
            Amount of spine movement.
            </summary>
            <remarks>
            Default value = 1.0f.
            Min value = 0.0f.
            Max value = 4.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.MinRelaxPeriod">
            <summary>
            Wriggle relaxes for a minimum of minRelaxPeriod (if it is negative it is a multiplier on the time previously spent wriggling).
            </summary>
            <remarks>
            Default value = 0.3f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.MaxRelaxPeriod">
            <summary>
            Wriggle relaxes for a maximum of maxRelaxPeriod (if it is negative it is a multiplier on the time previously spent wriggling).
            </summary>
            <remarks>
            Default value = 1.5f.
            Min value = -5.0f.
            Max value = 5.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.RollHelp">
            <summary>
            Amount of cheat torque applied to turn the character over.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundLegStiffness">
            <summary>
            Leg Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundArmStiffness">
            <summary>
            Arm Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 11.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundSpineStiffness">
            <summary>
            Spine Stiffness when on the ground.
            </summary>
            <remarks>
            Default value = 14.0f.
            Min value = 0.0f.
            Max value = 16.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundLegDamping">
            <summary>
            Leg Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundArmDamping">
            <summary>
            Arm Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundSpineDamping">
            <summary>
            Spine Damping when on the ground.
            </summary>
            <remarks>
            Default value = 0.5f.
            Min value = 0.0f.
            Max value = 2.0f.
            </remarks>
        </member>
        <member name="P:GTA.NaturalMotion.YankedHelper.GroundFriction">
            <summary>
            Friction multiplier on body parts when on ground.
            Character can look too slidy with groundFriction = 1.
            Higher values give a more jerky reaction but this seems timestep dependent especially for dragged by the feet.
            </summary>
            <remarks>
            Default value = 8.0f.
            Min value = 0.0f.
            Max value = 10.0f.
            </remarks>
        </member>
        <member name="T:GTA.NaturalMotion.Message">
            <summary>
            A base class for manually building a NaturalMotion Euphoria message.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.#ctor(System.String)">
            <summary>
            Creates a class to manually build a NaturalMotion Euphoria message that can be sent to any <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="message">The name of the message.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.Abort(GTA.Ped)">
            <summary>
            Stops this behavior on the given <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to stop the behavior on.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped)">
            <summary>
            Sends the message for this behavior to the given <see cref="T:GTA.Ped"/>. Will not start it unless the <c>"start"</c> argument is set.
            Starts a <c>CTaskNMControl</c> task if the <see cref="T:GTA.Ped"/> has no such task and loops it until manually aborted.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to send the <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <remarks>
            Although it is technically possible to send NM messages to peds that are running a NM task other than <c>CTaskNMControl</c> without starting a <c>CTaskNMControl</c> task, this method will always start a <c>CTaskNMControl</c> task.
            </remarks>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SendTo(GTA.Ped,System.Int32)">
            <summary>
            Starts this behavior on the given <see cref="T:GTA.Ped"/> for a specified duration.
            Always starts a new ragdoll task, making it impossible to stack multiple behaviors on the <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Ped"/> to send the <see cref="T:GTA.NaturalMotion.Message"/> to.</param>
            <param name="duration">How long to apply the behavior for (-1 for looped).</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Boolean)">
            <summary>
            Sets an argument to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Int32)">
            <summary>
            Sets an argument to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.Single)">
            <summary>
            Sets an argument to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,System.String)">
            <summary>
            Sets an argument to a <see cref="T:System.String"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.SetArgument(System.String,GTA.Math.Vector3)">
            <summary>
            Sets an argument to a <see cref="T:GTA.Math.Vector3"/> value.
            </summary>
            <param name="argName">The argument name.</param>
            <param name="value">The value to set the argument to.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.RemoveArgument(System.String)">
            <summary>
            Removes an argument.
            </summary>
            <param name="argName">The argument name.</param>
        </member>
        <member name="M:GTA.NaturalMotion.Message.ResetArguments">
            <summary>
            Resets all arguments to their default values.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.CreateBoolIntFloatArgDictIfNotCreated">
            <summary>
            This method is called from internal methods of ScriptHookVDotNet and is
            not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.CreateStringVector3ArrayArgDictIfNotCreated">
            <summary>
            This method is called from internal methods of ScriptHookVDotNet and is
            not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:GTA.NaturalMotion.Message.ToString">
            <summary>
            Returns the internal message name.
            </summary>
        </member>
        <member name="T:GTA.UI.Alignment">
            <summary>
            An enumeration of all the possible text alignment types for script text draw commands.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.ContainerElement.Color"/> used to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.Color,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.ContainerElement"/> class used for grouping items on screen.
            </summary>
            <param name="position">Set the <see cref="P:GTA.UI.ContainerElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="size">Set the <see cref="P:GTA.UI.ContainerElement.Size"/> of the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.ContainerElement.Color"/> used to draw the <see cref="T:GTA.UI.ContainerElement"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.ContainerElement"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.ContainerElement.Centered"/>.</param>
        </member>
        <member name="P:GTA.UI.ContainerElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.ContainerElement"/> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.ContainerElement"/>.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.ContainerElement"/>.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ContainerElement.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.ContainerElement"/>
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ContainerElement.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.ContainerElement"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.ContainerElement.Items">
            <summary>
            The <see cref="T:GTA.UI.IElement"/>s Contained inside this <see cref="T:GTA.UI.ContainerElement"/>
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement" /> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.ContainerElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.WorldDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement"/> this frame in the specified <see cref="T:GTA.Math.Vector3"/> position.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.ContainerElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.WorldDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.ContainerElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.WorldScaledDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.ContainerElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.ContainerElement.WorldScaledDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.ContainerElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.ContainerElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.ContainerElement"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="T:GTA.UI.CursorSprite">
            <summary>
            An enumeration of all possible cursor sprites.
            </summary>
        </member>
        <member name="T:GTA.UI.CustomSprite">
            <summary>
            A sprite element using a custom image texture.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="M:GTA.UI.CustomSprite.#ctor(System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.CustomSprite"/> class used for drawing external textures on the screen.
            </summary>
            <param name="filename">Full path to location of the <see cref="T:GTA.UI.CustomSprite"/> on the disc.</param>
            <param name="size">Set the <see cref="P:GTA.UI.CustomSprite.Size"/> of the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.CustomSprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.CustomSprite.Color"/> used to draw the <see cref="T:GTA.UI.CustomSprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.CustomSprite.Rotation"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.CustomSprite"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.CustomSprite.Centered"/>.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the specified file doesn't exist</exception>
        </member>
        <member name="P:GTA.UI.CustomSprite.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.CustomSprite.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.CustomSprite" />
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.CustomSprite.Rotation">
            <summary>
            Gets or sets the rotation to draw this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="P:GTA.UI.CustomSprite.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.CustomSprite"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.CustomSprite.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" />.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.CustomSprite.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.CustomSprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.WorldDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite"/> this frame in the specified <see cref="T:GTA.Math.Vector3"/> position.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.CustomSprite"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.WorldDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.CustomSprite"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.CustomSprite"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.WorldScaledDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.CustomSprite"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.CustomSprite.WorldScaledDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.CustomSprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.CustomSprite"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.CustomSprite"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="T:GTA.UI.Font">
            <summary>
            An enumeration of all the font styles that script text draw commands support.
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletLondon">
            <summary>
            <para>This font is for the standard font.</para>
            <para>
            Chalet London 1960 by House Industries will be used when the game language is set to a non-CJK language.
            The game will use an alternative standard font that contains appropriate CJK characters when the game
            language is set to a CJK language.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.HouseScript">
            <summary>
            <para>This font is for the cursive font.</para>
            <para>
            Sign Painter House Brush by House Industries will be used when the game language is set to a non-CJK
            language.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is
            set to a CJK language unless the player have custom font files installed.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.RockstarTag">
            <summary>
            <para>This font contains upper ASCII characters and some other shapes for crew tags in GTA Online.</para>
            <para>
            This font style has a subset of the glyphs of <see cref="F:GTA.UI.Font.ChaletComprimeCologne"/> unless the player have
            custom font files installed.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Leaderboard">
            <summary>
            <para>This font contains only Chevron arrows, some shield symbols, and hexagons.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletComprimeCologne">
            <summary>
            <para>
            This font is for the condensed font for gamer tags or the distance info on the radar.
            You should use <see cref="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName"/> if you want to draw strings with condensed
            font if possible but they can contain some CJK characters (e.g. localized strings from gxt files).
            </para>
            <para>
            The native functions for text drawing will use the condensed font Chalet Comprimé Cologne 1960 regardless
            of the game language setting.
            The natives will draw strings that contain only non-CJK characters without any trouble, but without having
            custom font files installed, the natives will draw rectangles (a.k.a. tofus) instead of CJK characters
            because Chalet Comprimé Cologne 1960 doesn't contain any CJK characters.
            </para>
            <para>This font style specifies the same font unless the player have custom font files installed.</para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.FixedWidthNumbersStyle">
            <summary>
            <para>
            This font contains only glyphs of numbers (0 to 9), dollar sign, asterisk, plus sign, colon, semicolon,
            equals sign, slash, and backslash in ASCII.
            </para>
            <para>
            This font style has a subset of the glyphs of <see cref="F:GTA.UI.Font.ChaletLondon"/> unless the player have custom font
            files installed.
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName">
            <summary>
            <para>
            This font is for the condensed font for generic uses.
            Consider using <see cref="F:GTA.UI.Font.ChaletComprimeCologne"/> instead when the texts you want to draw does not contain
            any CJK characters.
            </para>
            <para>
            The native functions for text drawing will use the condensed font Chalet Comprimé Cologne 1960 when
            the game language is set to a non-CJK language. When the game language is set to a CJK language, they will
            use the standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/> (unless the player have custom font
            files installed).
            </para>
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Pricedown">
            <summary>
            Pricedown will be used when the game language is set to a non-CJK language.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is
            set to a CJK language unless the player have custom font files installed.
            </summary>
        </member>
        <member name="F:GTA.UI.Font.Taxi">
            <summary>
            The font for taxi will be used when the game language is set to a non-CJK language.
            The font does contain invisible glyphs for lower characters.
            The standard font, which is the same as <see cref="F:GTA.UI.Font.ChaletLondon"/>, will be used when the game language is
            set to a CJK language unless the player have custom font files installed.
            </summary>
        </member>
        <member name="T:GTA.UI.Hud">
            <summary>
            Methods to manipulate the HUD (heads-up-display) of the game.
            </summary>
        </member>
        <member name="M:GTA.UI.Hud.IsComponentActive(GTA.UI.HudComponent)">
            <summary>
            Determines whether a given <see cref="T:GTA.UI.HudComponent"/> is active.
            </summary>
            <param name="component">The <see cref="T:GTA.UI.HudComponent"/> to check</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.UI.HudComponent"/> is active; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.UI.Hud.ShowComponentThisFrame(GTA.UI.HudComponent)">
             <summary>
             Draws the specified <see cref="T:GTA.UI.HudComponent"/> this frame.
             </summary>
             <param name="component">The <see cref="T:GTA.UI.HudComponent"/></param>
            <remarks>This will only draw the <see cref="T:GTA.UI.HudComponent"/> if the <see cref="T:GTA.UI.HudComponent"/> can be drawn</remarks>
        </member>
        <member name="M:GTA.UI.Hud.HideComponentThisFrame(GTA.UI.HudComponent)">
            <summary>
            Hides the specified <see cref="T:GTA.UI.HudComponent"/> this frame.
            </summary>
            <param name="component">The <see cref="T:GTA.UI.HudComponent"/> to hide.</param>
        </member>
        <member name="M:GTA.UI.Hud.ShowCursorThisFrame">
            <summary>
            Shows the mouse cursor this frame.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.CursorSprite">
            <summary>
            Gets or sets the sprite the cursor should used when drawn
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.IsVisible">
            <summary>
            Gets or sets a value indicating whether any HUD components should be rendered.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.IsRadarVisible">
            <summary>
            Gets or sets a value indicating whether the radar is visible.
            </summary>
        </member>
        <member name="M:GTA.UI.Hud.LockRadarDirection(System.Int32)">
            <summary>
            Locks the minimap at the specified angle relative to the main map layout.
            If a value less than 0 or greater than 360 is used, the minimap angle will become unlocked.
            </summary>
            <param name="angle">The angle in degrees from 0-360 to lock the minimap to.</param>
        </member>
        <member name="M:GTA.UI.Hud.UnlockRadarDirection">
            <summary>
            Unlocks the minimap direction if locked.
            </summary>
        </member>
        <member name="M:GTA.UI.Hud.LockRadarPosition(GTA.Math.Vector2)">
            <summary>
            Locks the minimap at the specified position in the game world.
            </summary>
            <param name="position">The world coordinates to lock the minimap to.</param>
        </member>
        <member name="M:GTA.UI.Hud.UnlockRadarPosition">
            <summary>
            Unlocks the minimap position if it has been locked.
            </summary>
        </member>
        <member name="P:GTA.UI.Hud.RadarZoom">
            <summary>
            Sets how far the minimap should be zoomed in.
            </summary>
            <value>
            The radar zoom; accepts values from 0 to 200.
            </value>
        </member>
        <member name="T:GTA.UI.HudComponent">
            <summary>
            An enumeration of all possible component of the HUD.
            </summary>
        </member>
        <member name="P:GTA.UI.IElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement"/> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.IElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.IElement"/>.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.IElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.IElement"/>.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.IElement.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.IElement"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.IElement.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.IElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.IElement.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
        </member>
        <member name="M:GTA.UI.IElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IElement"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="P:GTA.UI.ISpriteElement.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.ISpriteElement"/>
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </remarks>
        </member>
        <member name="P:GTA.UI.ISpriteElement.Rotation">
            <summary>
            Gets or sets the rotation to draw this <see cref="T:GTA.UI.ISpriteElement"/>.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="M:GTA.UI.IWorldDrawableElement.WorldDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.IWorldDrawableElement"/> this frame in the specified <see cref="T:GTA.Math.Vector3"/> position.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.IWorldDrawableElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.IWorldDrawableElement.WorldDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IWorldDrawableElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.IWorldDrawableElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IWorldDrawableElement"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.IWorldDrawableElement.WorldScaledDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.IWorldDrawableElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.IWorldDrawableElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.IWorldDrawableElement.WorldScaledDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.IElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.IWorldDrawableElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.IWorldDrawableElement"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="T:GTA.UI.LoadingPrompt">
            <summary>
            Methods to manage the display of a loading spinner prompt.
            </summary>
        </member>
        <member name="P:GTA.UI.LoadingPrompt.IsActive">
            <summary>
            Gets a value indicating whether the Loading Prompt is currently being displayed
            </summary>
        </member>
        <member name="M:GTA.UI.LoadingPrompt.Show(System.String,GTA.UI.LoadingSpinnerType)">
            <summary>
            Creates a loading prompt at the bottom right of the screen with the given text and spinner type
            </summary>
            <param name="loadingText">The text to display next to the spinner</param>
            <param name="spinnerType">The style of spinner to draw</param>
            <remarks>
            <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise1"/>, <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise2"/>, <see cref="F:GTA.UI.LoadingSpinnerType.Clockwise3"/> and <see cref="F:GTA.UI.LoadingSpinnerType.RegularClockwise"/> all see to be the same.
            But Rockstar apparently always uses <see cref="F:GTA.UI.LoadingSpinnerType.RegularClockwise"/> in their scripts.
            </remarks>
        </member>
        <member name="M:GTA.UI.LoadingPrompt.Hide">
            <summary>
            Remove the loading prompt at the bottom right of the screen
            </summary>
        </member>
        <member name="T:GTA.UI.LoadingSpinnerType">
            <summary>
            An enumeration of possible loading spinner styles.
            </summary>
        </member>
        <member name="T:GTA.UI.Notification">
            <summary>
            Methods to manage the display of notifications.
            </summary>
        </member>
        <member name="M:GTA.UI.Notification.PostTicker(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displays the ticker message string above the top left of the minimap.
            </summary>
            <param name="message">
            The message body.
            </param>
            <param name="isImportant">
            If set to <see langword="true"/>, the message will flash and may have a custom background color
            or vibrate the controller.
            </param>
            <param name="cacheMessage">
            If set to <see langword="true"/>, the message will be cached in the pause menu.
            </param>
            <returns>
            A <see cref="T:GTA.FeedPost"/> if successfully posted a feed item; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Notification.PostTickerForced(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displays the ticker message string above the top left of the minimap even if feed is paused.
            </summary>
            <inheritdoc cref="M:GTA.UI.Notification.PostTicker(System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.UI.Notification.PostTickerWithTokens(System.String,System.Boolean,System.Boolean)">
            <summary>
            Displays the ticker message string above the top left of the minimap
            containing tokens (i.e. <c>~BLIP_INFO_ICON~</c>).
            </summary>
            <inheritdoc cref="M:GTA.UI.Notification.PostTicker(System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.UI.Notification.PostMessageText(System.String,GTA.Graphics.TextureAsset,System.Boolean,GTA.UI.FeedTextIcon,System.String,System.String)">
            <summary>
            Displays the text message contact image and localised text message string above the top left of the minimap.
            </summary>
            <param name="message">
            The message body.
            </param>
            <param name="texAsset">
            The <see cref="T:GTA.Graphics.TextureAsset"/> for the contact image used in the text.
            message.
            </param>
            <param name="isImportant">
            If set to <see langword="true"/>, the message will flash and may have a custom background color
            or vibrate the controller.
            </param>
            <param name="icon">
            The icon type.
            </param>
            <param name="characterName">
            The character name, that is to say the sender.
            </param>
            <param name="subtitle">
            The subtitle (subject) of the text message.
            </param>
            <returns>
            A <see cref="T:GTA.FeedPost"/> if successfully posted a feed item; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Notification.PostUnlock(System.String,System.String,GTA.UI.FeedUnlockIcon)">
            <inheritdoc cref="M:GTA.UI.Notification.PostUnlockTitleUpdateWithColor(System.String,System.String,GTA.UI.FeedUnlockIcon,System.Boolean,GTA.UI.HudColor,System.Boolean)"/>
        </member>
        <member name="M:GTA.UI.Notification.PostUnlockTitleUpdate(System.String,System.String,GTA.UI.FeedUnlockIcon,System.Boolean)">
            <inheritdoc cref="M:GTA.UI.Notification.PostUnlockTitleUpdateWithColor(System.String,System.String,GTA.UI.FeedUnlockIcon,System.Boolean,GTA.UI.HudColor,System.Boolean)"/>
        </member>
        <member name="M:GTA.UI.Notification.PostUnlockTitleUpdateWithColor(System.String,System.String,GTA.UI.FeedUnlockIcon,System.Boolean,GTA.UI.HudColor,System.Boolean)">
            <summary>
            Displays the unlock component.
            </summary>
            <param name="message">
            The message body.
            </param>
            <param name="title">
            The unlock title.
            </param>
            <param name="iconType">
            The icon type.
            </param>
            <param name="isImportant">
            If set to <see langword="true"/>, the message will flash and may have a custom background color
            or vibrate the controller.
            </param>
            <param name="titleColor">
            The text color of <paramref name="title"/>.
            </param>
            <param name="titleIsLiteral">
            If set to <see langword="true"/>, the title string will be marked as the literal string,
            which is the same as in <see cref="M:GTA.UI.Notification.PostUnlock(System.String,System.String,GTA.UI.FeedUnlockIcon)"/> and
            <see cref="M:GTA.UI.Notification.PostUnlockTitleUpdate(System.String,System.String,GTA.UI.FeedUnlockIcon,System.Boolean)"/>.
            </param>
            <returns>
            A <see cref="T:GTA.FeedPost"/> if successfully posted a feed item; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Notification.PostVersusTitleUpdate(GTA.Graphics.TextureAsset,System.Int32,GTA.Graphics.TextureAsset,System.Int32,GTA.UI.HudColor,GTA.UI.HudColor)">
            <summary>
            Displays the MP Versus feed component used when you die in multiplayer.
            </summary>
            <param name="char1TexAsset">
            The <see cref="T:GTA.Graphics.TextureAsset"/> for the character 1 (left side).
            </param>
            <param name="val1">The integral value for the character 1 (left side).</param>
            <param name="char2TexAsset">
            The <see cref="T:GTA.Graphics.TextureAsset"/> for the character 2 (right side).
            </param>
            <param name="val2">The integral value for the character 2 (right side).</param>
            <param name="customColor1">
            The custom color for the character 1 (left side) if set to a valid HUD color.
            </param>
            <param name="customColor2">
            The custom color for the character 2 (right side) if set to a valid HUD color.
            </param>
            <returns>
            A <see cref="T:GTA.FeedPost"/> if successfully posted a feed item; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Notification.PostAward(System.String,GTA.Graphics.TextureAsset,System.Int32,GTA.UI.HudColor,System.String)">
            <summary>
            Displays the award component.
            </summary>
            <param name="message">
            The message body.
            </param>
            <param name="texAsset">
            The <see cref="T:GTA.Graphics.TextureAsset"/> for the icon on the left.
            </param>
            <param name="xp">
            The gained "RP" amount that will be displayed on the right side of the feed item.
            </param>
            <param name="awardColor">
            The award color. Specifies the text color and filters the texture.
            </param>
            <param name="title">
            The text label that will be displayed at the top of the feed item (title).
            Note that long text will not expand the space vertically and color tokens such as <c>~r~</c> will be
            shown as HTML tags.
            </param>
            <returns>
            A <see cref="T:GTA.FeedPost"/> if successfully posted a feed item; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Notification.Show(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:GTA.UI.Notification"/> above the minimap with the given message.
            </summary>
            <param name="message">The message in the notification.</param>
            <param name="blinking">if set to <see langword="true" /> the notification will blink.</param>
            <returns>The handle of the <see cref="T:GTA.UI.Notification"/> which can be used to hide it using <see cref="M:GTA.UI.Notification.Hide(System.Int32)"/>.</returns>
        </member>
        <member name="M:GTA.UI.Notification.Show(GTA.UI.NotificationIcon,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a more advanced (SMS-alike) <see cref="T:GTA.UI.Notification"/> above the minimap showing a sender icon, subject and the message.
            </summary>
            <param name="icon">
            The notification icon.
            Although you can use any pair of a texture dictionary (txd) and a texture as long as the txd is loaded
            and the txd contains the texture in <c>END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT</c>, you can only specify
            the textures chosen for <see cref="T:GTA.UI.NotificationIcon"/> in this overload.
            </param>
            <param name="sender">The sender name.</param>
            <param name="subject">The subject line.</param>
            <param name="message">The message itself.</param>
            <param name="fadeIn">If <see langword="true" /> the message will fade in.</param>
            <param name="blinking">if set to <see langword="true" /> the notification will blink.</param>
            <returns>The handle of the <see cref="T:GTA.UI.Notification"/> which can be used to hide it using <see cref="M:GTA.UI.Notification.Hide(System.Int32)"/>.</returns>
        </member>
        <member name="M:GTA.UI.Notification.Hide(System.Int32)">
            <summary>
            Hides a <see cref="T:GTA.UI.Notification"/> instantly.
            </summary>
            <param name="handle">The handle of the <see cref="T:GTA.UI.Notification"/> to hide.</param>
        </member>
        <member name="T:GTA.UI.NotificationIcon">
            <summary>
            An enumeration of selected notification icons for
            <see cref="M:GTA.UI.Notification.Show(GTA.UI.NotificationIcon,System.String,System.String,System.String,System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
            Although you can use any pair of a texture dictionary (txd) and a texture as long as the txd is loaded
            and the txd contains the texture in native functions for creating feed posts, you can only specify
            one of the defined values of this enum in <see cref="M:GTA.UI.Notification.Show(GTA.UI.NotificationIcon,System.String,System.String,System.String,System.Boolean,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:GTA.UI.Screen">
            <summary>
            Methods to handle UI actions that affect the whole screen.
            </summary>
        </member>
        <member name="F:GTA.UI.Screen.Width">
            <summary>
            The base width of the screen used for all UI Calculations, unless ScaledDraw is used
            </summary>
        </member>
        <member name="F:GTA.UI.Screen.Height">
            <summary>
            The base height of the screen used for all UI Calculations
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.Resolution">
            <summary>
            Gets the actual/physical screen resolution the game is being rendered at.
            In 3x1 modes, non-main windows are also considered.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.MainWindowResolution">
            <summary>
            Gets the main window screen resolution the game is being rendered at.
            In 3x1 modes, non-main windows are not considered.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.AspectRatio">
            <summary>
            Gets the current screen aspect ratio of the main window.
            </summary>
            <remarks>
            Takes into account custom overrides from the settings menu, so this property will return an appropriate
            constant value if the aspect ratio is overridden.
            </remarks>
        </member>
        <member name="P:GTA.UI.Screen.PhysicalAspectRatio">
            <summary>
            Gets the physical aspect ratio of the game window (Useful for 3x1 modes).
            </summary>
            <remarks>
            Takes into account custom overrides from the settings menu, so this property will return an appropriate
            constant value if the aspect ratio is overridden.
            </remarks>
        </member>
        <member name="P:GTA.UI.Screen.ScaledWidth">
            <summary>
            Gets the screen width scaled against a 720pixel height base.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.SafeZoneSizeProfile">
            <summary>
            Gets the chosen safe zone value from the menu.
            </summary>
            <returns>
            <para>
            <see langword="0" /> - if the safe zone is set to its maximum value.
            </para>
            <para>
            <see langword="10" /> - if the safe zone is set to its minimum value.
            </para>
            </returns>
        </member>
        <member name="P:GTA.UI.Screen.IsFadedIn">
            <summary>
            Gets a value indicating whether the screen is faded in.
            </summary>
            <value>
            <see langword="true" /> if the screen is faded in; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadedOut">
            <summary>
            Gets a value indicating whether the screen is faded out.
            </summary>
            <value>
            <see langword="true" /> if the screen is faded out; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadingIn">
            <summary>
            Gets a value indicating whether the screen is fading in.
            </summary>
            <value>
            <see langword="true" /> if the screen is fading in; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Screen.IsFadingOut">
            <summary>
            Gets a value indicating whether the screen is fading out.
            </summary>
            <value>
            <see langword="true" /> if the screen is fading out; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Screen.FadeIn(System.Int32)">
            <summary>
            Fades the screen in over a specific time, useful for transitioning.
            </summary>
            <param name="time">The time for the fade in to take.</param>
        </member>
        <member name="M:GTA.UI.Screen.FadeOut(System.Int32)">
            <summary>
            Fades the screen out over a specific time, useful for transitioning.
            </summary>
            <param name="time">The time for the fade out to take.</param>
        </member>
        <member name="P:GTA.UI.Screen.AreScreenKillEffectsEnabled">
            <summary>
            Gets a value indicating whether screen kill effects are enabled.
            </summary>
            <value>
            <see langword="true" /> if screen kill effects are enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Screen.IsEffectActive(GTA.UI.ScreenEffect)">
            <summary>
            Gets a value indicating whether the specific screen effect is running.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to check.</param>
            <returns><see langword="true" /> if the screen effect is active; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.UI.Screen.StartEffect(GTA.UI.ScreenEffect,System.Int32,System.Boolean)">
            <summary>
            Starts applying the specified effect to the screen.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to start playing.</param>
            <param name="duration">The duration of the effect in milliseconds or zero to use the default length.</param>
            <param name="looped">If <see langword="true" /> the effect won't stop until <see cref="M:GTA.UI.Screen.StopEffect(GTA.UI.ScreenEffect)"/> is called.</param>
        </member>
        <member name="M:GTA.UI.Screen.StopEffect(GTA.UI.ScreenEffect)">
            <summary>
            Stops applying the specified effect to the screen.
            </summary>
            <param name="effectName">The <see cref="T:GTA.UI.ScreenEffect"/> to stop playing.</param>
        </member>
        <member name="M:GTA.UI.Screen.StopEffects">
            <summary>
            Stops all currently running effects.
            </summary>
        </member>
        <member name="P:GTA.UI.Screen.IsHelpTextDisplayed">
            <summary>
            Gets a value indicating whether a help message is currently displayed.
            </summary>
        </member>
        <member name="M:GTA.UI.Screen.ShowSubtitle(System.String,System.Int32)">
            <summary>
            Shows a subtitle at the bottom of the screen for a given time
            </summary>
            <param name="message">The message to display.</param>
            <param name="duration">The duration to display the subtitle in milliseconds.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowSubtitle(System.String,System.Int32,System.Boolean)">
            <summary>
            Shows a subtitle at the bottom of the screen for a given time
            </summary>
            <param name="message">The message to display.</param>
            <param name="duration">The duration to display the subtitle in milliseconds.</param>
            <param name="drawImmediately">Whether to draw immediately or draw after all the queued subtitles have finished.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpTextThisFrame(System.String)">
            <summary>
            Displays a help message in the top corner of the screen this frame. Beeping sound will be played.
            </summary>
            <param name="helpText">The text to display.</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpTextThisFrame(System.String,System.Boolean)">
            <summary>
            Displays a help message in the top corner of the screen this frame. Specify whether beeping sound plays.
            </summary>
            <param name="helpText">The text to display.</param>
            <param name="beep">Whether to play beeping sound</param>
        </member>
        <member name="M:GTA.UI.Screen.ShowHelpText(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Displays a help message in the top corner of the screen infinitely.
            </summary>
            <param name="helpText">The text to display.</param>
            <param name="duration">
            The duration how long the help text will be displayed in real time (not in game time which is influenced by game speed).
            if the value is not positive, the help text will be displayed for 7.5 seconds.
            </param>
            <param name="beep">Whether to play beeping sound.</param>
            <param name="looped">Whether to show this help message forever.</param>
        </member>
        <member name="M:GTA.UI.Screen.ClearHelpText">
            <summary>
            Clears a help message immediately.
            </summary>
        </member>
        <member name="M:GTA.UI.Screen.IsSphereVisible(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the value that indicates whether the sphere created with supplied arguments is visible
            in the global viewport (<c>CViewportGame</c> instance).
            </summary>
            <param name="position">The center position of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>
            <see langword="true"/> if the sphere is visible in the global viewport; otherwise,<see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.UI.Screen.WorldToScreen(GTA.Math.Vector3,System.Boolean)">
            <summary>
            Translates a point in WorldSpace to its given Coordinates on the <see cref="T:GTA.UI.Screen"/>
            </summary>
            <param name="position">The position in the World.</param>
            <param name="scaleWidth">if set to <see langword="true" /> Returns the screen position scaled by <see cref="P:GTA.UI.Screen.ScaledWidth"/>; otherwise, returns the screen position scaled by <see cref="F:GTA.UI.Screen.Width"/>.</param>
            <returns></returns>
        </member>
        <member name="T:GTA.UI.ScreenEffect">
            <summary>
            An enumeration of possible screen effects.
            </summary>
        </member>
        <member name="T:GTA.UI.Sprite">
            <summary>
            A sprite element using a built-in texture.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation"/>.</param>
        </member>
        <member name="M:GTA.UI.Sprite.#ctor(System.String,System.String,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.Sprite"/> class used for drawing in game textures on the screen.
            </summary>
            <param name="textureDict">The Texture dictionary where the <see cref="T:GTA.UI.Sprite"/> is stored (the *.ytd file).</param>
            <param name="textureName">Name of the <see cref="T:GTA.UI.Sprite"/> inside the Texture dictionary.</param>
            <param name="size">Set the <see cref="P:GTA.UI.Sprite.Size"/> of the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="position">Set the <see cref="P:GTA.UI.Sprite.Position"/> on screen where to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="color">Set the <see cref="P:GTA.UI.Sprite.Color"/> used to draw the <see cref="T:GTA.UI.Sprite"/>.</param>
            <param name="rotation">Set the rotation to draw the sprite, measured in degrees, see also <seealso cref="P:GTA.UI.Sprite.Rotation"/>.</param>
            <param name="centered">Position the <see cref="T:GTA.UI.Sprite"/> based on its center instead of top left corner, see also <seealso cref="P:GTA.UI.Sprite.Centered"/>.</param>
        </member>
        <member name="F:GTA.UI.Sprite.s_activeTextures">
            <summary>
            The dictionary to count how many instances use the same texture dictionary.
            Using hashes for texture dictionary names should do the job since the game uses hashes for those names in the fwTxdStore.
            </summary>
        </member>
        <member name="P:GTA.UI.Sprite.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.Sprite.TextureCoordinates">
            <summary>
            Gets or sets the texture coordinates of this <see cref="T:GTA.UI.Sprite" />.
            Currently only supports in v1.0.1868.0 or later game versions, but may support all game version in the future
            since there is the function that DRAW_SPRITE_ARX_WITH_UV eventually calls in all game versions.
            </summary>
            <value>
            The texture coordinates allows to specify the coordinates (measured in percentage: 1f = 100%), used to draw the sprite.
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Size">
            <summary>
            Gets or sets the size to draw the <see cref="T:GTA.UI.Sprite" />
            </summary>
            <value>
            The size on a 1280*720 pixel base
            </value>
            <remarks>
            If ScaledDraw is called, the size will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.Sprite.Rotation">
            <summary>
            Gets or sets the rotation to draw this <see cref="T:GTA.UI.Sprite" />.
            </summary>
            <value>
            The rotation measured in degrees, clockwise increasing, 0.0 at vertical
            </value>
        </member>
        <member name="P:GTA.UI.Sprite.Centered">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.Sprite"/> should be positioned based on its center or top left corner
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.UI.Sprite.Draw">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite" />.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.Sprite.ScaledDraw">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite" /> using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.Sprite.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.Sprite" /> at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:GTA.UI.Sprite.WorldDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite"/> this frame in the specified <see cref="T:GTA.Math.Vector3"/> position.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.Sprite"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.Sprite.WorldDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.Sprite"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Sprite"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.Sprite.WorldScaledDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.Sprite"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.Sprite.WorldScaledDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.Sprite"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.Sprite"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.Sprite"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
            <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with a <see cref="P:GTA.UI.TextElement.Shadow"/> effect.</param>
            <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with an <see cref="P:GTA.UI.TextElement.Outline"/> around the letters.</param>
        </member>
        <member name="M:GTA.UI.TextElement.#ctor(System.String,System.Drawing.PointF,System.Single,System.Drawing.Color,GTA.UI.Font,GTA.UI.Alignment,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.UI.TextElement"/> class used for drawing text on the screen.
            </summary>
            <param name="caption">The <see cref="T:GTA.UI.TextElement"/> to draw.</param>
            <param name="position">Set the <see cref="P:GTA.UI.TextElement.Position"/> on screen where to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="scale">Sets a <see cref="P:GTA.UI.TextElement.Scale"/> used to increase of decrease the size of the <see cref="T:GTA.UI.TextElement"/>, for no scaling use 1.0f.</param>
            <param name="color">Set the <see cref="P:GTA.UI.TextElement.Color"/> used to draw the <see cref="T:GTA.UI.TextElement"/>.</param>
            <param name="font">Sets the <see cref="P:GTA.UI.TextElement.Font"/> used when drawing the text.</param>
            <param name="alignment">Sets the <see cref="P:GTA.UI.TextElement.Alignment"/> used when drawing the text, <see cref="F:GTA.UI.Alignment.Left"/>,<see cref="F:GTA.UI.Alignment.Center"/> or <see cref="F:GTA.UI.Alignment.Right"/>.</param>
            <param name="shadow">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with a <see cref="P:GTA.UI.TextElement.Shadow"/> effect.</param>
            <param name="outline">Sets whether or not to draw the <see cref="T:GTA.UI.TextElement"/> with an <see cref="P:GTA.UI.TextElement.Outline"/> around the letters.</param>
            <param name="wrapWidth">Sets how many horizontal pixel to draw before wrapping the <see cref="T:GTA.UI.TextElement"/> on the next line down.</param>
        </member>
        <member name="P:GTA.UI.TextElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement" /> will be drawn.
            </summary>
            <value>
              <see langword="true" /> if enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.UI.TextElement" />.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.UI.TextElement" />.
            </summary>
            <value>
            The position scaled on a 1280*720 pixel base.
            </value>
            <remarks>
            If ScaledDraw is called, the position will be scaled by the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </remarks>
        </member>
        <member name="P:GTA.UI.TextElement.Scale">
            <summary>
            Gets or sets the scale of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The scale usually a value between ~0.5 and 3.0, Default = 1.0
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Font">
            <summary>
            Gets or sets the font of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The GTA Font use when drawing.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Caption">
            <summary>
            Gets or sets the text to draw in this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Alignment">
            <summary>
            Gets or sets the alignment of this <see cref="T:GTA.UI.TextElement"/>.
            </summary>
            <value>
            The alignment:<c>Left</c>, <c>Center</c>, <c>Right</c> Justify
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Shadow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement"/> is drawn with a shadow effect.
            </summary>
            <value>
              <see langword="true" /> if shadow; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Outline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.UI.TextElement"/> is drawn with an outline.
            </summary>
            <value>
              <see langword="true" /> if outline; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.WrapWidth">
            <summary>
            Gets or sets the maximum size of the <see cref="T:GTA.UI.TextElement"/> before it wraps to a new line.
            </summary>
            <value>
            The width of the <see cref="T:GTA.UI.TextElement"/>.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Centered">
            <summary>
            Gets or sets a value indicating whether the alignment of this <see cref="T:GTA.UI.TextElement" /> is centered.
            See <see cref="P:GTA.UI.TextElement.Alignment"/>
            </summary>
            <value>
              <see langword="true" /> if centered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.UI.TextElement.Width">
            <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.TextElement"/> will use when drawn	against a 1280 pixel base
            </summary>
        </member>
        <member name="P:GTA.UI.TextElement.ScaledWidth">
            <summary>
            Measures how many pixels in the horizontal axis this <see cref="T:GTA.UI.TextElement"/> will use when drawn against a <see cref="P:GTA.UI.TextElement.ScaledWidth"/> pixel base
            </summary>
        </member>
        <member name="P:GTA.UI.TextElement.LineCount">
            <summary>
            Measures how many lines the text string will use when drawn on screen against a <see cref="F:GTA.UI.Screen.Width"/> pixel base.
            </summary>
        </member>
        <member name="P:GTA.UI.TextElement.ScaledLineCount">
            <summary>
            Measures how many lines the text string will use when drawn on screen against a <see cref="P:GTA.UI.Screen.ScaledWidth"/> pixel base.
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.GetStringWidth(System.String,GTA.UI.Font,System.Single)">
            <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
            <param name="text">The string of text to measure.</param>
            <param name="font">The <see cref="T:GTA.UI.Font"/> of the texture to measure.</param>
            <param name="scale">Sets a scale value for increasing or decreasing the size of the text, default value 1.0f - no scaling.</param>
            <returns>
            The amount of pixels scaled on a 1280 pixel width base
            </returns>
        </member>
        <member name="M:GTA.UI.TextElement.GetScaledStringWidth(System.String,GTA.UI.Font,System.Single)">
            <summary>
            Measures how many pixels in the horizontal axis the string will use when drawn
            </summary>
            <param name="text">The string of text to measure.</param>
            <param name="font">The <see cref="T:GTA.UI.Font"/> of the texture to measure.</param>
            <param name="scale">Sets a scale value for increasing or decreasing the size of the text, default value 1.0f - no scaling.</param>
            <returns>
            The amount of pixels scaled by the pixel width base return in <see cref="P:GTA.UI.Screen.ScaledWidth"/>
            </returns>
        </member>
        <member name="M:GTA.UI.TextElement.Draw">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame.
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.Draw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame at the specified offset.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement" /> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.TextElement.ScaledDraw">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
        </member>
        <member name="M:GTA.UI.TextElement.ScaledDraw(System.Drawing.SizeF)">
            <summary>
            Draws the <see cref="T:GTA.UI.TextElement" /> this frame at the specified offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth" />.
            </summary>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement" /> using a <see cref="P:GTA.UI.Screen.ScaledWidth" />*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.TextElement.WorldDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.TextElement"/> this frame in the specified <see cref="T:GTA.Math.Vector3"/> position.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.TextElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.TextElement.WorldDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.TextElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.TextElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement"/> using a 1280*720 pixel base.</param>
        </member>
        <member name="M:GTA.UI.TextElement.WorldScaledDraw(GTA.Math.Vector3)">
            <summary>
            Draws this <see cref="T:GTA.UI.TextElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.TextElement"/> to be drawn</param>
        </member>
        <member name="M:GTA.UI.TextElement.WorldScaledDraw(GTA.Math.Vector3,System.Drawing.SizeF)">
            <summary>
            Draws this <see cref="T:GTA.UI.TextElement"/> this frame at the specified <see cref="T:GTA.Math.Vector3"/> position and offset using the width returned in <see cref="P:GTA.UI.Screen.ScaledWidth"/>.
            </summary>
            <param name="position">Position in the world where you want the <see cref="T:GTA.UI.TextElement"/> to be drawn</param>
            <param name="offset">The offset to shift the draw position of this <see cref="T:GTA.UI.TextElement"/> using a <see cref="P:GTA.UI.Screen.ScaledWidth"/>*720 pixel base.</param>
        </member>
        <member name="T:GTA.FeedPost">
            <summary>
            Represents a feed post (for the gameStream).
            </summary>
            <remarks>
            Feed posts internally interact to <c>CGameStream::gstPost</c>, and the global <c>CGameStream</c> instance
            manages up to 32 <c>CGameStream::gstPost</c>s (the name of <c>CGameStream</c> and <c>CGameStream::gstPost</c>
            cannot be seen in production game builds).
            </remarks>
        </member>
        <member name="P:GTA.FeedPost.Handle">
            <summary>
            Gets the feed item handle.
            </summary>
        </member>
        <member name="M:GTA.FeedPost.Delete">
            <summary>
            Deletes this <see cref="T:GTA.FeedPost"/> if it still exists.
            </summary>
        </member>
        <member name="M:GTA.FeedPost.op_Implicit(GTA.FeedPost)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.FeedPost"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.AnimationBlendDelta">
            <summary>
            Represents an animation blend delta that determines the rate at which the animation task will blend in or out.
            The blend duration in seconds is equal to <c>1.0f / (the blend delta value)</c>.
            Positive values are used for blending in, while negative values are used for blending out.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.Value">
            <summary>
            Returns the raw value.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.WalkBlendIn">
            <summary>
            The slowest predefined value for blend out.
            Returns the same struct as <c>new AnimationBlendDelta(1.5f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.VerySlowBlendIn">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(2.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.SlowBlendIn">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(4.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.NormalBlendIn">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(8.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.FastBlendIn">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(16.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.InstantBlendIn">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(1000.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.WalkBlendOut">
            <summary>
            The slowest predefined value for blend out.
            Returns the same struct as <c>new AnimationBlendDelta(-1.5f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.VerySlowBlendOut">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(-2.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.SlowBlendOut">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(-4.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.NormalBlendOut">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(-8.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.FastBlendOut">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(-16.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDelta.InstantBlendOut">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(-1000.0f)</c>.
            </summary>
        </member>
        <member name="M:GTA.AnimationBlendDelta.op_Equality(GTA.AnimationBlendDelta,GTA.AnimationBlendDelta)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimationBlendDelta.op_Inequality(GTA.AnimationBlendDelta,GTA.AnimationBlendDelta)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimationBlendDelta.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.AnimationBlendDelta.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:GTA.AnimationBlendDuration">
            <summary>
            Represents an animation blend duration in seconds.
            </summary>
            <remarks>
            This struct does not accept negative values as they do not make sense as blend duration values, though
            `<c>CMoveNetworkHelper</c>`s of subclasses of `<c>CTaskMotionBase</c>` would adjust negative values to zero
            when they are passed as blend duration values.
            </remarks>
        </member>
        <member name="P:GTA.AnimationBlendDuration.Value">
            <summary>
            Returns the raw value.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.Instant">
            <summary>
            The slowest predefined value for blend out.
            Returns the same struct as <c>new AnimationBlendDelta(0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.Fast">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(0.0625f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.Normal">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(0.125f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.Slow">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(0.25f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.ReallySlow">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(0.5f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.SuperSlow">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(1.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.AnimationBlendDuration.MigrateSlow">
            <summary>
            Returns the same struct as <c>new AnimationBlendDelta(1.0f)</c>.
            </summary>
        </member>
        <member name="M:GTA.AnimationBlendDuration.op_Equality(GTA.AnimationBlendDuration,GTA.AnimationBlendDuration)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> has the same value as <paramref name="right"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AnimationBlendDuration.op_Inequality(GTA.AnimationBlendDuration,GTA.AnimationBlendDuration)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> has a different value than <paramref name="right"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AnimationBlendDuration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.AnimationBlendDuration.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:GTA.AtHashValue">
            <summary>
            Represents a jenkins-one-at-a-time hash value for common cases.
            Can be directly passed as an argument of native functions via <see cref="T:GTA.Native.Function"/>.
            </summary>
            <remarks>
            The following conversions are supposed to be performed before hashing the original string:
            <list type="bullet">
            <item>
            <description>
            Map ASCII uppercase letters to lowercase.
            </description>
            </item>
            <item>
            <description>
            Extract the substring within the first two double quotes if the first character/byte is a double quote
            (hashes to the end of sequence if there is only one double quote).
            </description>
            </item>
            <item>
            <description>
            Convert backslashes to forward slashes so that the has is more useful for filenames.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:GTA.AtHashValue.Null">
            <summary>
            Gets the null value of <see cref="T:GTA.AtHashValue"/>, whose hash is zero.
            </summary>
        </member>
        <member name="P:GTA.AtHashValue.IsNull">
            <summary>
            Returns a value that indicates whether this instance is the null <see cref="T:GTA.AtHashValue"/>, whose hash is
            zero.
            </summary>
        </member>
        <member name="M:GTA.AtHashValue.FromString(System.String)">
            <summary>
            Computes an <see cref="T:GTA.AtHashValue"/> from a <see cref="T:System.String"/> that contains only ASCII characters.
            </summary>
            <param name="input">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
            <returns>An <see cref="T:GTA.AtHashValue"/> that contains the calculated hash.</returns>
            <remarks>
            This method only expects ASCII characters in <paramref name="input"/>.
            This is because the lookup table used by the joaat hash function used in <c>GET_HASH_KEY</c> expects
            only ASCII characters, and the table contains values for non-ASCII characters only to guarantee correctness
            even if "weird" european characters "sneak in" (are included in the string).
            If you need to pass a string that contains non-ASCII characters, use <see cref="M:GTA.AtHashValue.FromStringUtf8(System.String)"/>
            instead.
            </remarks>
        </member>
        <member name="M:GTA.AtHashValue.FromBytes(System.Byte[])">
            <summary>
            Computes an <see cref="T:GTA.AtHashValue"/> from an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="input">An array of <see cref="T:System.Byte"/>.</param>
            <returns>An <see cref="T:GTA.AtHashValue"/> that contains the calculated hash.</returns>
        </member>
        <member name="M:GTA.AtHashValue.FromStringUtf8(System.String)">
            <summary>
            Computes an <see cref="T:GTA.AtHashValue"/> from a <see cref="T:System.String"/>.
            <paramref name="input"/> will be converted to a UTF-8 sequence before hashing.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> to hash. Will be converted to a UTF-8 sequence before hashing.
            </param>
            <returns>An <see cref="T:GTA.AtHashValue"/> that contains the calculated hash.</returns>
        </member>
        <member name="M:GTA.AtHashValue.ComputeHash(System.String)">
            <summary>
            Computes a joaat hash as an <see langword="uint"/> from a <see cref="T:System.String"/> that contains only ASCII
            characters.
            </summary>
            <param name="value">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
            <returns>The calculated joaat hash.</returns>
            <remarks>
            This method only expects ASCII characters in <paramref name="value"/>.
            This is because the lookup table used by the joaat hash function used in <c>GET_HASH_KEY</c> expects
            only ASCII characters, and the table contains values for non-ASCII characters only to guarantee correctness
            even if "weird" european characters "sneak in" (are included in the string).
            If you need to pass a string that contains non-ASCII characters, use <see cref="M:GTA.AtHashValue.ComputeHashUtf8(System.String)"/>
            instead.
            </remarks>
        </member>
        <member name="M:GTA.AtHashValue.ComputeHash(System.Byte[])">
            <summary>
            Computes a joaat hash <see cref="T:GTA.AtLiteralHashValue"/> from an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">An array of <see cref="T:System.Byte"/>.</param>
            <returns>The calculated joaat hash.</returns>
        </member>
        <member name="M:GTA.AtHashValue.ComputeHashUtf8(System.String)">
            <summary>
            Computes a joaat hash as an <see langword="uint"/> from a <see cref="T:System.String"/>.
            Converts the string to UTF-8 (which the game uses for localized strings) before hashing.
            </summary>
            <param name="value">A <see cref="T:System.String"/>.</param>
            <returns>The calculated joaat hash.</returns>
        </member>
        <member name="M:GTA.AtHashValue.Equals(GTA.AtHashValue)">
            <summary>
            Compares this instance for equality with <paramref name="other"/>.
            </summary>
            <param name="other">
            A struct that represents a jenkins-one-at-a-time hash to compare to this instance, where certain ASCII
            characters of the original string are converted to other characters in a certain manner.
            </param>
            <returns>
            <see langword="true"/> if the current object is equal to <paramref name="other"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AtHashValue.op_Equality(GTA.AtHashValue,GTA.AtHashValue)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:GTA.AtHashValue"/> values are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> <paramref name="left"/> and <paramref name="right"/> are equal; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AtHashValue.op_Inequality(GTA.AtHashValue,GTA.AtHashValue)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:GTA.AtLiteralHashValue"/> values are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GTA.AtLiteralHashValue">
            <summary>
            Represents a jenkins-one-at-a-time (joaat) hash value for special cases, where no character conversions are
            performed before hashing.
            </summary>
            <remarks>
            Cannot be directly passed as an argument of native functions via <see cref="T:GTA.Native.Function"/>
            as none of them expect joaat hashes with no character conversions applied.
            </remarks>
        </member>
        <member name="P:GTA.AtLiteralHashValue.Null">
            <summary>
            Gets the null value of <see cref="T:GTA.AtLiteralHashValue"/>, whose hash is zero.
            </summary>
        </member>
        <member name="P:GTA.AtLiteralHashValue.IsNull">
            <summary>
            Returns a value that indicates whether this instance is the null <see cref="T:GTA.AtLiteralHashValue"/>,
            whose hash is zero.
            </summary>
        </member>
        <member name="M:GTA.AtLiteralHashValue.FromString(System.String)">
            <summary>
            Computes an <see cref="T:GTA.AtLiteralHashValue"/> from a <see cref="T:System.String"/> that contains only ASCII
            characters.
            </summary>
            <param name="input">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
            <returns>An <see cref="T:GTA.AtLiteralHashValue"/> that contains the calculated hash.</returns>
            <remarks>
            This method only expects ASCII characters in <paramref name="input"/>.
            This is because the lookup table used by the joaat hash function used in <c>GET_HASH_KEY</c> expects
            only ASCII characters, and the table contains values for non-ASCII characters only to guarantee correctness
            even if "weird" european characters "sneak in" (are included in the string).
            If you need to pass a string that contains non-ASCII characters, use <see cref="M:GTA.AtLiteralHashValue.FromStringUtf8(System.String)"/>
            instead.
            </remarks>
        </member>
        <member name="M:GTA.AtLiteralHashValue.FromBytes(System.Byte[])">
            <summary>
            Computes an <see cref="T:GTA.AtLiteralHashValue"/> from an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="input">An array of <see cref="T:System.Byte"/>.</param>
            <returns>An <see cref="T:GTA.AtLiteralHashValue"/> that contains the calculated hash.</returns>
        </member>
        <member name="M:GTA.AtLiteralHashValue.FromStringUtf8(System.String)">
            <summary>
            Computes an <see cref="T:GTA.AtLiteralHashValue"/> from a <see cref="T:System.String"/>.
            <paramref name="input"/> will be converted to a UTF-8 sequence before hashing.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> to hash. Will be converted to a UTF-8 sequence before hashing.
            </param>
            <returns>An <see cref="T:GTA.AtLiteralHashValue"/> that contains the calculated hash.</returns>
        </member>
        <member name="M:GTA.AtLiteralHashValue.Equals(GTA.AtLiteralHashValue)">
            <summary>
            Compares this instance for equality with <paramref name="other"/>.
            </summary>
            <param name="other">
            A struct that represents a jenkins-one-at-a-time hash with no character conversion applied to compare to
            this instance.
            </param>
            <returns>
            <see langword="true"/> if the current object is equal to <paramref name="other"/>; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AtLiteralHashValue.op_Equality(GTA.AtLiteralHashValue,GTA.AtLiteralHashValue)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:GTA.AtLiteralHashValue"/> values are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> <paramref name="left"/> and <paramref name="right"/> are equal; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.AtLiteralHashValue.op_Inequality(GTA.AtLiteralHashValue,GTA.AtLiteralHashValue)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:GTA.AtLiteralHashValue"/> values are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <see langword="true"/> <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GTA.Audio">
            <summary>
            Methods to manipulate audio.
            </summary>
        </member>
        <member name="M:GTA.Audio.PlayMusic(System.String)">
            <summary>
            Plays music from the game's music files.
            </summary>
            <param name="musicFile">The music file to play.</param>
        </member>
        <member name="M:GTA.Audio.StopMusic(System.String)">
            <summary>
            Cancels playing a music file.
            </summary>
            <param name="musicFile">The music file to stop.</param>
        </member>
        <member name="M:GTA.Audio.GetSoundId">
            <summary>
            Gets a <see cref="T:GTA.ScriptSound"/> instance of a triggered sound.
            This method returns a new <see cref="T:GTA.ScriptSound"/>, which is used for keeping track of sounds after they've been triggered -
            use this if you need to control a sound after it's been started, for instance to stop a looping sound, or to change a sound's pitch midway through playback.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            SoundIds can be reused, without needing to release them and grab a new one. If a sound's finished playing,
            you can reuse its <see cref="T:GTA.ScriptSound"/> to kick off another one. If the sound's not finished playing,
            it'll be stopped first (fading out or whatever is set up in RAVE by the sound designer), and the new one kicked off;
            usually it is safer to just get a new <see cref="T:GTA.ScriptSound"/>.
            </para>
            <para>
            Identifiers of <see cref="T:GTA.ScriptSound"/> are always integral values greater than or equal to zero;
            if a playback function has a SoundId field but the sound doesn't need to be altered after triggering
            then call the forget method variants in <see cref="T:GTA.Audio"/> class, rather than getting a <see cref="T:GTA.ScriptSound"/>.
            </para>
            <para>
            Scripted sound can be reserved up to 100 in the <c>audScriptAudioEntity</c> instance.
            The limit is shared among all scripts.
            </para>
            </remarks>
            <returns>
            A <see cref="T:GTA.ScriptSound"/> instance with the assigned id in the range of from 0 to 100 if the method successfully found a free id/index;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAndForget(System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound with the name <paramref name="soundName"/>, but do not track of sounds.
            If this is used to play a sound for which no pan or speakermask is set by the sound designer, then the sound will play from the map's origin -
            therefore this should only be used to play frontend sounds like menu bleeps or other artificially panned effects.
            </summary>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="enableOnReplay"><inheritdoc cref="M:GTA.ScriptSound.PlaySoundFrontend(System.String,System.String,System.Boolean)" path="/param[@name='enableOnReplay']"/></param>.
        </member>
        <member name="M:GTA.Audio.PlaySoundFrontendAndForget(System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound "frontend" - at full volume, panned centrally, but do not track of sounds.
            </summary>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="enableOnReplay"><inheritdoc cref="M:GTA.ScriptSound.PlaySoundFrontend(System.String,System.String,System.Boolean)" path="/param[@name='enableOnReplay']"/></param>.
            <remarks>
            If the sound has a Pan or a SpeakerMask set by the sound designer then the it will play using these settings,
            otherwise it will play from dead ahead (0°).
            </remarks>
        </member>
        <member name="M:GTA.Audio.PlaySoundFromEntityAndForget(GTA.Entity,System.String,System.String)">
            <summary>
            Plays back a sound from an <see cref="T:GTA.Entity"/>'s location, but do not track of sounds.
            The sound's position will track the <see cref="T:GTA.Entity"/>'s position as it moves.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to play the sound from.</param>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
        </member>
        <member name="M:GTA.Audio.PlaySoundFromPositionAndForget(GTA.Math.Vector3,System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound from an absolute position, but do not track of sounds.
            </summary>
            <param name="position">The world coordinates to play the sound from.</param>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="isExteriorLoc">
            If <see langword="true"/>, the sound will use a portal occlusion environmentGroup.
            Only use this if the sound is playing outside and needs occlusion.
            </param>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Entity,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Entity,System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Math.Vector3,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="position"/>.
            </summary>
            <param name="position">The world coordinates to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundAt(GTA.Math.Vector3,System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files at the specified <paramref name="position"/>.
            </summary>
            <param name="position">The world coordinates to play the sound at.</param>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundFrontend(System.String)">
            <summary>
            Plays a sound from the game's sound files without transformation.
            </summary>
            <param name="soundFile">The sound file to play.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.PlaySoundFrontend(System.String,System.String)">
            <summary>
            Plays a sound from the game's sound files without transformation.
            </summary>
            <param name="soundFile">The sound file to play.</param>
            <param name="soundSet">The name of the sound inside the file.</param>
            <returns>The identifier of the active sound effect instance.</returns>
        </member>
        <member name="M:GTA.Audio.StopSound(System.Int32)">
            <summary>
            Cancels playing the specified sound instance.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.ReleaseSound(System.Int32)">
            <summary>
            Releases the specified sound instance. Call this for every sound effect started.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.HasSoundFinished(System.Int32)">
            <summary>
            Gets a boolean indicating whether the specified sound instance has completed playing.
            </summary>
            <param name="id">The identifier of the active sound effect instance.</param>
        </member>
        <member name="M:GTA.Audio.SetAudioFlag(GTA.AudioFlags,System.Boolean)">
            <summary>
            Sets an audio flag to modify subsequent sounds.
            </summary>
            <param name="flag"></param>
            <param name="toggle"></param>
        </member>
        <member name="T:GTA.AudioFlags">
            <summary>
            An enumeration of all possible audio flags.
            </summary>
        </member>
        <member name="P:GTA.Blip.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Entity"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Blip.Type">
            <summary>
            Gets the type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.DisplayType">
            <summary>
            Gets or sets the display type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.CategoryType">
            <summary>
            Gets or sets the category type of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Alpha">
            <summary>
            Gets or sets the alpha of this <see cref="T:GTA.Blip"/> on the map.
            The value is up to 255.
            </summary>
        </member>
        <member name="P:GTA.Blip.Priority">
            <summary>
            Gets or sets the priority of this <see cref="T:GTA.Blip"/>.
            Overlapping <see cref="T:GTA.Blip"/>s with a higher priority cover those with a smaller one.
            The value is up to 255.
            </summary>
        </member>
        <member name="P:GTA.Blip.NumberLabel">
            <summary>
            Gets or sets this <see cref="T:GTA.Blip"/>s label to the given number.
            </summary>
            <remarks>returns <c>-1</c> if the internal value of this property value is between <c>0x80</c> to <c>0xFF</c>.</remarks>
        </member>
        <member name="M:GTA.Blip.RemoveNumberLabel">
            <summary>
            Removes the number label from this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.SecondaryColor">
            <summary>
            Gets or sets the secondary color of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Sprite">
            <summary>
            Gets or sets the sprite of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Name">
            <summary>
            Get or sets the custom name of this <see cref="T:GTA.Blip"/>.
            The custom name will appear in the legends list on the map after a string is set via this property.
            </summary>
            <remarks>
            Returns <see langword="null" /> if the <see cref="T:GTA.Blip"/> does not exist.
            Setting <see cref="P:GTA.Blip.Sprite"/> will clear this name.
            </remarks>
            <seealso cref="P:GTA.Blip.DisplayNameHash"/>
        </member>
        <member name="P:GTA.Blip.DisplayNameHash">
            <summary>
            Get or sets this <see cref="T:GTA.Blip"/>s display name hash.
            When <see cref="P:GTA.Blip.Name"/> is not set, the game will show the localized <see cref="T:System.String"/> from the games language files with a specified GXT key hash.
            </summary>
            <remarks>Setting <see cref="P:GTA.Blip.Sprite"/> will reset this value.</remarks>
        </member>
        <member name="P:GTA.Blip.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="P:GTA.Blip.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Blip"/> on the map as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The rotation as an <see cref="T:System.Int32"/>.
            </value>
            <remarks>
            Use <see cref="P:GTA.Blip.RotationFloat"/> instead if you need to get or set the value precisely,
            since a rotation value of a <see cref="T:GTA.Blip"/> are stored as a <see cref="T:System.Single"/> in v1.0.944.2 or later versions.
            </remarks>
            <seealso cref="P:GTA.Blip.RotationFloat"/>
        </member>
        <member name="P:GTA.Blip.RotationFloat">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Blip"/> on the map as a <see cref="T:System.Single"/>.
            The value does not have any decimal places in v1.0.877.1 or earlier versions because the value is stored as <see cref="T:System.UInt16"/> in these versions.
            </summary>
            <value>
            The rotation as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Blip.Scale">
            <summary>
            Sets the scale of this <see cref="T:GTA.Blip"/> on the map.
            </summary>
        </member>
        <member name="P:GTA.Blip.ScaleX">
            <summary>
            Gets or sets the x-axis scale of this <see cref="T:GTA.Blip"/> on the map.
            The value is the same as <see cref="P:GTA.Blip.ScaleY"/> in v1.0.393.4 or earlier versions.
            </summary>
        </member>
        <member name="P:GTA.Blip.ScaleY">
            <summary>
            Gets or sets the y-axis scale of this <see cref="T:GTA.Blip"/> on the map.
            The value is the same as <see cref="P:GTA.Blip.ScaleX"/> in v1.0.393.4 or earlier versions.
            </summary>
        </member>
        <member name="P:GTA.Blip.FlashInterval">
            <summary>
            Gets or sets the interval in ms between each blip flashing.
            The value is up to 65535.
            </summary>
        </member>
        <member name="P:GTA.Blip.FlashTimeLeft">
            <summary>
            Gets or sets the flash time left in ms before this <see cref="T:GTA.Blip"/> stops flashing.
            The max value is up to 65534.
            Set <c>-1</c> to let the <see cref="T:GTA.Blip"/> flash forever.
            </summary>
            <remarks>returns <c>-1</c> if the internal value of this property value is set to <c>65535</c>, which indicates that the flash timer is explicitly not set.</remarks>
        </member>
        <member name="P:GTA.Blip.Entity">
            <summary>
            Gets the <see cref="P:GTA.Blip.Entity"/> this <see cref="T:GTA.Blip"/> is attached to.
            </summary>
        </member>
        <member name="P:GTA.Blip.ShowRoute">
            <summary>
            Gets or sets a value indicating whether the route to this <see cref="T:GTA.Blip"/> should be shown on the map.
            </summary>
            <value>
              <see langword="true" /> to show the route; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsDollarSign">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows the dollar sign at the top left corner of the <see cref="T:GTA.Blip"/>.
            </summary>
            <value>
              <see langword="true" /> to show the dollar sign; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsHeadingIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows the heading indicator used for normal players in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show the heading indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsOutlineIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows outline.
            The outline color can be changed by setting <see cref="P:GTA.Blip.SecondaryColor"/>.
            </summary>
            <value>
              <see langword="true" /> to show outline; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsFriendIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows friend indicator, which highlights the <see cref="T:GTA.Blip"/> by a right half cyan circle.
            The right half cyan circle indicator is used to indicate friends in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show friend indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.ShowsCrewIndicator">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> shows crew member indicator, which highlights the <see cref="T:GTA.Blip"/> by a left half cyan circle.
            The right half cyan circle indicator is used to indicate crew members in GTA: Online.
            </summary>
            <value>
              <see langword="true" /> to show crew member indicator; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsFriendly">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Blip"/> is friendly.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is friendly; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsFlashing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is flashing.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is flashing; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsOnMinimap">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Blip"/> is on minimap.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is on minimap; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsShortRange">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is short range.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is short range; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Blip.IsHiddenOnLegend">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Blip"/> is hidden on the map legend.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Blip"/> is hidden on the map legend; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Blip.GetAppropriateName">
            <summary>
            Gets the appropriate name of this <see cref="T:GTA.Blip"/> in the same way the game does.
            </summary>
            <value>
            The same <see cref="T:System.String"/> as <see cref="P:GTA.Blip.Name"/> if the custom string is set;
            otherwise, the localized <see cref="T:System.String"/> from the games language files with the same GXT key hash as <see cref="P:GTA.Blip.DisplayNameHash"/>.
            </value>
            Returns <see langword="null" /> if the <see cref="T:GTA.Blip"/> does not exist.
        </member>
        <member name="M:GTA.Blip.ResetName">
            <summary>
            Sets the name of this <see cref="T:GTA.Blip"/> based on its current <see cref="P:GTA.Blip.Sprite"/>.
            </summary>
        </member>
        <member name="M:GTA.Blip.Delete">
            <summary>
            Removes this <see cref="T:GTA.Blip"/>.
            </summary>
        </member>
        <member name="M:GTA.Blip.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Blip"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Blip"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same blip as this <see cref="T:GTA.Blip"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same blip as this <see cref="T:GTA.Blip"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Equality(GTA.Blip,GTA.Blip)">
            <summary>
            Determines if two <see cref="T:GTA.Blip"/>s refer to the same blip.
            </summary>
            <param name="left">The left <see cref="T:GTA.Blip"/>.</param>
            <param name="right">The right <see cref="T:GTA.Blip"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same blip as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Inequality(GTA.Blip,GTA.Blip)">
            <summary>
            Determines if two <see cref="T:GTA.Blip"/>s don't refer to the same blip.
            </summary>
            <param name="left">The left <see cref="T:GTA.Blip"/>.</param>
            <param name="right">The right <see cref="T:GTA.Blip"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same blip as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Blip.op_Implicit(GTA.Blip)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Blip"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.OtherPlayers">
            <summary>
            <para>Blips will show under the "Other Players" category listing in the map legend, regardless of name. Also shows distance in the map legend.</para>
            <para>the blip name will show with <see cref="F:GTA.UI.Font.ChaletComprimeCologneNotGamerName"/>.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.Property">
            <summary>
            <para>Blips will show under the "Property" category listing in the map legend, regardless of name.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipCategoryType.OwnedProperty">
            <summary>
            <para>Blips will show under the "Owned Property" category listing in the map legend, regardless of name.</para>
            </summary>
        </member>
        <member name="F:GTA.BlipColor.White">
            <summary>
            The default RGB value of this color is the same as HUD_COLOUR_PURE_WHITE, whose default RGB value is #FFFFFF.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.WhiteNotPure">
            <summary>
            The default RGB value of this color is the same as HUD_COLOUR_WHITE, whose default RGB value is #F0F0F0.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Michael">
            <summary>
            This color is usually #65B4D4 sky blue, which is similar to <see cref="P:System.Drawing.Color.SkyBlue"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Franklin">
            <summary>
            This color is usually #ABEDAB light green, which is very similar to <see cref="P:System.Drawing.Color.LightGreen"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Trevor">
            <summary>
            This color is usually #ABEDAB orange, which is very similar to <see cref="P:System.Drawing.Color.SandyBrown"></see>.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue3">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Green2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Green"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow5">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.White2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.White"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Yellow6">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Yellow"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue5">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Red4">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Red"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue6">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.BlueDark2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.BlueDark"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.RedDark2">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.RedDark"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipColor.Blue7">
            <summary>
            This color is always the same as <see cref="F:GTA.BlipColor.Blue"></see>, the only difference is color index.
            </summary>
        </member>
        <member name="F:GTA.BlipDisplayType.Default">
            <summary>
            The default value on blip creation. Works in the same way as <see cref="F:GTA.BlipDisplayType.BothMapSelectable"/>.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Standard">
            <summary>
            The default English text for this value is "Destination".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.BigBlip">
            <summary>
            The default English text for this value is "Destination".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceOfficer">
            <summary>The default English text for this value is "Police".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceArea">
            <summary>
            When this value is set, the blip will flash. The default English text for this value is "Objective".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Square">
            <summary>The sprite shape is square and the default English text for this value is "Objective".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Jet">
            <summary>
            The default English text for this value is "Police Plane".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Lift">
            <summary>
            The default English text for this value is "Cable Car".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceOfficer2">
            <summary>
            The default English text for this value is "Police".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PoliceCarDot">
            <summary>
            The default English text for this value is "Police Chase".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.ChatBubble">
            <summary>
            The default English text for this value is "Snitch".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Garage2">
            <summary>
            The default English text for this value is "Criminal Carsteal".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Drugs">
            <summary>
            The default English text for this value is "Criminal Drugs".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Store">
            <summary>
            The default English text for this value is "Criminal Holdups".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Clothes">
            <summary>
            The default English text for this value is "Clothes Store".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Dart">
            <summary>
            The default English text for this value is "Darts".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DollarSign">
            <summary>
            The default English text for this value is "Devin".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.OffRoadRaceFinish">
            <summary>
            The default English text for this value is "Off Road Racing".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Key">
            <summary>
            The default English text for this value is "Criminal Cuff Keys".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Music">
            <summary>
            The default English text for this value is "Music Venue".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Marijuana">
            <summary>
            The default English text for this value is "Stash".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Link">
            <summary>
            The default English text for this value is "Gang Police Partner".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Castle">
            <summary>
            The default English text for this value is "Property Takeover".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Handcuffs">
            <summary>
            The default English text for this value is "Biker Handcuffs Closed".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PersonalVehicleCar">
            <summary>
            The default English text for this value is "Gang Vehicle".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PersonalVehicleBike">
            <summary>
            The default English text for this value is "Gang Vehicle Bikers".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Hooker">
            <summary>
            The default English text for this value is "Drop Off Hooker".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOMission">
            <summary>
            The default English text for this value is "UGC Mission".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOSurvival">
            <summary>
            The default English text for this value is "Horde".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceCar">
            <summary>
            The default English text for this value is "Street Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceSea">
            <summary>
            The default English text for this value is "Sea Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.SafehouseForSale">
            <summary>
            The default English text for this value is "Property For Sale".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Package">
            <summary>
            The default English text for this value is "Gang Attack Package".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Masks">
            <summary>
            The default English text for this value is "Masks Store".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PickupSpawn">
            <summary>
            The default English text for this value is "Spawn Point Pickup".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Rockets">
            <summary>
            The default English text for this value is "Missiles".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.MarinaForSale">
            <summary>
            The default English text for this value is "Dock For Sale".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceBike">
            <summary>
            The default English text for this value is "Bike Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.RaceFoot">
            <summary>
            The default English text for this value is "Foot Race".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Crosshair">
            <summary>
            The default English text for this value is "Aim".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Testosterone">
            <summary>
            The default English text for this value is "Raging".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Invisible">
            <summary>
            This blip sprite is invisible and the default English text for this value is "Invisible".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GTAOPlayerSafehouseDead">
            <summary>
            In GTA Online, when some player is a bounty and is in a safehouse, a blip with this sprite will be attached.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Plane">
            <summary>
            The sprite is the same as <see cref="F:GTA.BlipSprite.Jet"></see> has, but the default English text for this value is "Jet".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.PlayerNoColor">
            <summary>
            This enum is wrongly named. The sprite doesn't have outline, but you can change the color.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.GunCar">
            <summary>
            The default English text for this value is "Insurgent".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.King">
            <summary>
            The default English text for this value is "Player King".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Loading">
            <summary>
            The default English text for this value is "Zoned".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Flip">
            <summary>
            The default English text for this value is "Flipped".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Shield">
            <summary>
            The sprite image is a shield, but the default English text for this value is "Beast".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Weed">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Cocaine">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.IdentityCard">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Meth">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DollarBill">
            <summary>
            The default English text for this value is "Weed Production".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Package2">
            <summary>
            The default English text for this value is "Package", whose label text hash is used in Biker Business missions in GTA Online.
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.DrugPackage">
            <summary>
            The default English text for this value is "Drugs Package".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Motorcycle">
            <summary>
            The default English text for this value is "Deadline".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Document">
            <summary>
            The default English text for this value is "Registration Papers".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.SteeringWheel">
            <summary>
            The default English text for this value is "Special Vehicle Race Series".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Cup">
            <summary>
            The default English text for this value is "Challenge Series".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.Rocket">
            <summary>
            The default English text for this value is "Homing Rocket".
            </summary>
        </member>
        <member name="F:GTA.BlipSprite.WeaponizedTrailer">
            <summary>
            The default English text for this value is "Anti-Aircraft Trailer".
            </summary>
        </member>
        <member name="T:GTA.CamAnimationFlags">
            <summary>
            An enumeration of all the animation flags used in <see cref="M:GTA.Camera.PlayAnim(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,GTA.CamAnimationFlags,GTA.EulerRotationOrder)"/>.
            </summary>
        </member>
        <member name="F:GTA.CamAnimationFlags.Looping">
            <summary>
            Repeat the animation.
            </summary>
        </member>
        <member name="T:GTA.Camera">
            <summary>
            Represents a scripted camera.
            </summary>
        </member>
        <member name="M:GTA.Camera.Create(GTA.ScriptedCameraNameHash,System.Boolean)">
            <inheritdoc cref="M:GTA.Camera.Create(GTA.ScriptedCameraNameHash,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.EulerRotationOrder)"/>
        </member>
        <member name="M:GTA.Camera.Create(System.String,System.Boolean)">
            <inheritdoc cref="M:GTA.Camera.Create(System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.EulerRotationOrder)"/>
        </member>
        <member name="M:GTA.Camera.Create(GTA.ScriptedCameraNameHash,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Creates a scripted <see cref="T:GTA.Camera"/> of a given name hash.
            </summary>
            <param name="cameraNameHash">
            The camera name hash.
            Passing a invalid name hash will result in the <see langword="null"/> return value.
            It would result in some unintended behaviors such as the camera position not being able to change
            if you pass a camera name hash whose metadata is not designed for scripted cameras.
            </param>
            <param name="position">The position of the camera.</param>
            <param name="rotation">The rotation of the camera.</param>
            <param name="fov">The field of view of the camera.</param>
            <param name="startActivated">
            If <see langword="true"/>, the created camera will be activated upon creation.
            </param>
            <param name="rotOrder">The rotation order in world space.</param>
            <returns>
            A new <see cref="T:GTA.Camera"/> instance if the method successfully created a new <see cref="T:GTA.Camera"/>;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            The method will fail to create a scripted <see cref="T:GTA.Camera"/> if the passed camera name is invalid
            or the camera pool is full. The method will return <see langword="null"/> in said conditions.
            </remarks>
        </member>
        <member name="M:GTA.Camera.Create(System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Creates a scripted <see cref="T:GTA.Camera"/> of a given name.
            </summary>
            <param name="cameraName">
            The camera name.
            Passing a invalid name will result in the <see langword="null"/> return value.
            It would result in some unintended behaviors such as the camera position not being able to change
            if you pass a camera name hash whose metadata is not designed for scripted cameras.
            </param>
            <param name="position">The position of the camera.</param>
            <param name="rotation">The rotation of the camera.</param>
            <param name="fov">The field of view of the camera.</param>
            <param name="startActivated">
            If <see langword="true"/>, the created camera will be activated upon creation.
            </param>
            <param name="rotOrder">The rotation order in world space.</param>
            <returns>
            A new <see cref="T:GTA.Camera"/> instance if the method successfully created a new <see cref="T:GTA.Camera"/>;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            The method will fail to create a scripted <see cref="T:GTA.Camera"/> if the passed camera name is invalid
            or the camera pool is full. The method will return <see langword="null"/> in said conditions.
            </remarks>
        </member>
        <member name="P:GTA.Camera.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.MatrixAddress">
            <summary>
            Gets the memory address of the matrix for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.IsActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Camera"/> is active.
            Returning <see langword="false"/> means this <see cref="T:GTA.Camera"/> is not rendering to the game screen,
            but returning <see langword="true"/> does not mean it's rendering to the screen.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Camera"/> is active; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Camera.Matrix">
            <summary>
            Gets the matrix of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Camera"/>.
            </summary>
            <value>
            The yaw, pitch and roll rotations measured in degrees.
            </value>
        </member>
        <member name="P:GTA.Camera.Direction">
            <summary>
            Gets or sets the direction this <see cref="T:GTA.Camera"/> is pointing in.
            </summary>
        </member>
        <member name="P:GTA.Camera.UpVector">
            <summary>
            Gets the up vector of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.RightVector">
            <summary>
            Gets the right vector of this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.ForwardVector">
            <summary>
            Gets the forward vector of this <see cref="T:GTA.Camera"/>, see also <seealso cref="P:GTA.Camera.Direction"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative to this <see cref="T:GTA.Camera"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.Camera"/>.</param>
        </member>
        <member name="M:GTA.Camera.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.Camera"/> from a world coordinates position
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="M:GTA.Camera.SetCamFrameParameters(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.CamFrameInterpolatorCurveType,GTA.CamFrameInterpolatorCurveType,GTA.EulerRotationOrder)">
            <summary>
            Sets the camera frame of this <see cref="T:GTA.Camera"/> to specified parameters.
            </summary>
            <param name="position">The target position.</param>
            <param name="rotation">The target rotation.</param>
            <param name="fov">The target field of view.</param>
            <param name="graphTypePos">The camera graph type for position transition.</param>
            <param name="graphTypeRot">The camera graph type for rotation transition.</param>
            <param name="rotOrder">The rotation order in world space.</param>
            <remarks>The <see cref="T:GTA.Camera"/> stops any existing interpolation.</remarks>
        </member>
        <member name="M:GTA.Camera.InterpolateToNewCamFrame(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.UInt32,GTA.CamFrameInterpolatorCurveType,GTA.CamFrameInterpolatorCurveType,GTA.EulerRotationOrder)">
            <summary>
            Interpolates this <see cref="T:GTA.Camera"/> to a cam frame consisted of specified camera frame parameters.
            The <see cref="T:GTA.Camera"/> must be active for this method to work, or it will not interpolate (unless
            <paramref name="duration"/> is zero).
            </summary>
            <param name="position">The target position.</param>
            <param name="rotation">The target rotation.</param>
            <param name="fov">The target field of view.</param>
            <param name="duration">
            The duration of the interpolation in milliseconds.
            Setting to zero will make the method set the cam frame parameters immediately as how
            <see cref="M:GTA.Camera.SetCamFrameParameters(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.CamFrameInterpolatorCurveType,GTA.CamFrameInterpolatorCurveType,GTA.EulerRotationOrder)"/>
            works.
            </param>
            <param name="graphTypePos">The camera graph type for position transition.</param>
            <param name="graphTypeRot">The camera graph type for rotation transition.</param>
            <param name="rotOrder">The rotation order in world space.</param>
            <remarks>
            This method fails to interpolate if there is no space for a new camera so the method cannot add a new
            camera cloned from this camera, which gets deleted on completion of the interpolation (unless
            <paramref name="duration"/> is zero).
            The camera will be deactivated if this method successfully starts an camera interpolation.
            </remarks>
        </member>
        <member name="P:GTA.Camera.FarClip">
            <summary>
            Gets or sets the far clip distance of this <see cref="T:GTA.Camera"/> in meters.
            </summary>
        </member>
        <member name="P:GTA.Camera.NearClip">
            <summary>
            Gets or sets the near clip distance of this <see cref="T:GTA.Camera"/> in meters.
            </summary>
        </member>
        <member name="P:GTA.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view of this <see cref="T:GTA.Camera"/> in degrees.
            </summary>
        </member>
        <member name="P:GTA.Camera.FarDepthOfField">
            <summary>
            Gets or sets the far depth of field distance of this <see cref="T:GTA.Camera"/> in meters.
            </summary>
        </member>
        <member name="P:GTA.Camera.NearDepthOfField">
            <summary>
            Sets the near depth of field distance for this <see cref="T:GTA.Camera"/> in meters.
            </summary>
        </member>
        <member name="P:GTA.Camera.MotionBlurStrength">
            <summary>
            Sets the strength of the motion blur for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.DepthOfFieldStrength">
            <summary>
            Sets the depth of field strength for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.Shake(GTA.CameraShake,System.Single)">
            <summary>
            Apples a predefined shake to the camera.
            </summary>
            <param name="shakeType">Type of the shake to apply.</param>
            <param name="amplitude">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.Camera.Shake(System.String,System.Single)">
            <summary>
            Apples a predefined shake to the camera.
            </summary>
            <param name="shakeName">
            The shake name to apply.
            You can find shake names in cameras.ymt, search for <c>camShakeMetadata</c>.
            </param>
            <param name="amplitudeScalar">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.Camera.StopShaking">
            <summary>
            Immediately stops shaking this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.StopShaking(System.Boolean)">
            <summary>
            Stops shaking this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="stopImmediately">
            If <see langword="true"/>, the shake will stop immediately, otherwise it will enter its release phase and fade out.
            </param>
        </member>
        <member name="P:GTA.Camera.IsShaking">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Camera"/> is shaking.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Camera"/> is shaking; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Camera.ShakeAmplitude">
            <summary>
            Sets the shake amplitude for this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.Entity"/> to point at.</param>
            <param name="offset">The offset from the <paramref name="target"/> to point at.</param>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.PedBone,GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified <see cref="T:GTA.PedBone"/>.
            </summary>
            <param name="target">The <see cref="T:GTA.PedBone"/> to point at.</param>
            <param name="offset">The offset from the <paramref name="target"/> to point at</param>
        </member>
        <member name="M:GTA.Camera.PointAt(GTA.Math.Vector3)">
            <summary>
            Points this <see cref="T:GTA.Camera"/> at a specified position.
            </summary>
            <param name="target">The position to point at.</param>
        </member>
        <member name="M:GTA.Camera.StopPointing">
            <summary>
            Stops this <see cref="T:GTA.Camera"/> pointing at a specific target.
            </summary>
        </member>
        <member name="M:GTA.Camera.InterpTo(GTA.Camera,System.Int32,GTA.CamFrameInterpolatorCurveType,GTA.CamFrameInterpolatorCurveType,GTA.EulerRotationOrder)">
            <summary>
            Sets a cam active which will be interpolated too from this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="destinationCam">The <see cref="T:GTA.Camera"/> that will be interpolated to.</param>
            <param name="duration">The duration of any interpolation in milliseconds.</param>
            <param name="graphTypePos">The camera graph type for position transition.</param>
            <param name="graphTypeRot">The camera graph type for rotation transition.</param>
            <param name="rotOrder">The rotation order in world space.</param>
        </member>
        <member name="M:GTA.Camera.InterpTo(GTA.Camera,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a cam active which will be interpolated too from this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="P:GTA.Camera.IsInterpolating">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Camera"/> is interpolating.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Camera"/> is interpolating; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Camera.AttachTo(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to attach to.</param>
            <param name="offset">The relative offset from the <paramref name="entity"/> to attach to.</param>
        </member>
        <member name="M:GTA.Camera.AttachTo(GTA.PedBone,GTA.Math.Vector3)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific <see cref="T:GTA.PedBone"/>.
            </summary>
            <param name="pedBone">The <see cref="T:GTA.PedBone"/> to attach to.</param>
            <param name="offset">The relative offset from the <paramref name="pedBone"/> to attach to.</param>
        </member>
        <member name="M:GTA.Camera.AttachToVehicleBone(GTA.EntityBone,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific bone on a specific <see cref="T:GTA.Vehicle"/>.
            the camera will only copy translation components of the transformation matrix of
            <paramref name="vehicleBone"/>.
            </summary>
            <param name="vehicleBone">The <see cref="T:GTA.Vehicle"/> bone to attach the camera to.</param>
            <param name="positionOffset">The additional offset to be applied from the attach position.</param>
            <param name="offsetIsRelative">
            If true, <paramref name="positionOffset"/> are applied relative to the transform of the attached
            <see cref="T:GTA.Vehicle"/> (not the bone), rather than in world-space. Effective as long as the
            <see cref="T:GTA.Camera"/> is attached.
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">Thrown when called in v1.0.1290.1 or earlier game versions.</exception>
        </member>
        <member name="M:GTA.Camera.HardAttachToVehicleBone(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Attaches this <see cref="T:GTA.Camera"/> to a specific bone on a specific <see cref="T:GTA.Vehicle"/>.
            The camera will have both translation and rotation vector components of its transformation matrix match
            that of <paramref name="vehicleBone"/>.
            </summary>
            <param name="vehicleBone">The <see cref="T:GTA.Vehicle"/> bone to attach the camera to.</param>
            <param name="rotationOffset">
            An additional rotational offset to be applied from the attach bone rotation (x=yaw, y=pitch, z=roll).
            </param>
            <param name="positionOffset">The additional offset to be applied from the attach position.</param>
            <param name="offsetIsRelative">
            If true, <paramref name="positionOffset"/> are applied relative to the transform of the attached
            <see cref="T:GTA.Vehicle"/> (not the bone), rather than in world-space. Effective as long as the
            <see cref="T:GTA.Camera"/> is attached. <paramref name="rotationOffset"/> is always relative to the transform of
            the bone even if this parameter is set to <see langword="true"/>.
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">Thrown when called in v1.0.1290.1 or earlier game versions.</exception>
        </member>
        <member name="M:GTA.Camera.Detach">
            <summary>
            Detaches this <see cref="T:GTA.Camera"/> from any <see cref="T:GTA.Entity"/> or <see cref="T:GTA.PedBone"/> it may be attached to.
            </summary>
        </member>
        <member name="M:GTA.Camera.PlayAnim(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,GTA.CamAnimationFlags,GTA.EulerRotationOrder)">
            <summary>
            Plays a camera animation on this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="anim">
            The animation clip to play. Must be loaded before this method can start playing the anim.
            </param>
            <param name="originPosition">
            The position of the origin in world coordinates to playback the anim from.
            Any local scene origin/offset specified in the animation clip will be applied in addition to this.
            </param>
            <param name="originRotation">
            The rotation of the origin in degrees to playback the anim from.
            Any local scene origin/offset specified in the animation clip will be applied in addition to this.
            </param>
            <param name="animFlags">The animation flags to be used for playback.</param>
            <param name="rotOrder">
            The rotation order to be used when composing a matrix from the Euler angles specified in
            <paramref name="originRotation"/>.
            </param>
            <returns>
            <see langword="true"/> if the method successfully starts the animation; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The <see cref="T:GTA.Camera"/> must have been created using the camera name hash
            <see cref="F:GTA.ScriptedCameraNameHash.DefaultAnimatedCamera"/> or the camera name
            `<c>DEFAULT_ANIMATED_CAMERA</c>` (both specify the same camera metadata). Otherwise, the method will fail
            to start the animation.
            </remarks>
        </member>
        <member name="M:GTA.Camera.PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset)">
            <summary>
            Plays a camera animation on this <see cref="T:GTA.Camera"/> attached to the specified
            <see cref="T:GTA.FwSyncedScene"/>.
            </summary>
            <param name="scene">The <see cref="T:GTA.FwSyncedScene"/> to attach this camera to.</param>
            <param name="anim">
            The animation clip to play. Must be loaded before this method can start playing the anim.
            </param>
            <returns>
            <see langword="true"/> if the method successfully starts the animation; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <inheritdoc cref="M:GTA.Camera.PlayAnim(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,GTA.CamAnimationFlags,GTA.EulerRotationOrder)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.Camera.IsPlayingAnim(GTA.CrClipAsset)">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Camera"/> is currently playing the animation specified
            by a <see cref="T:GTA.CrClipAsset"/>.
            </summary>
            <param name="anim">The animation clip to be queried on the <see cref="T:GTA.Camera"/>.</param>
            <remarks>
            The <see cref="T:GTA.Camera"/> must have been created using the camera name hash
            <see cref="F:GTA.ScriptedCameraNameHash.DefaultAnimatedCamera"/> or the camera name
            `<c>DEFAULT_ANIMATED_CAMERA</c>` (both specify the same camera metadata).
            </remarks>
        </member>
        <member name="P:GTA.Camera.AnimPhase">
            <summary>
            Gets or sets the phase of the animation that is currently playing on this <see cref="T:GTA.Camera"/>.
            </summary>
            <remarks>
            The <see cref="T:GTA.Camera"/> must have been created using the camera name hash
            <see cref="F:GTA.ScriptedCameraNameHash.DefaultAnimatedCamera"/> or the camera name
            `<c>DEFAULT_ANIMATED_CAMERA</c>` (both specify the same camera metadata).
            </remarks>
        </member>
        <member name="M:GTA.Camera.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Camera"/>.
            </summary>
        </member>
        <member name="M:GTA.Camera.Delete(System.Boolean)">
            <summary>
            Destroys this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="shouldApplyAcrossAllThreads">
            If <see langword="true"/>, a request to stop rendering will be enforced irrespective of whether other
            script threads (<c>GtaThread</c>s) expect rendering to be active.
            Note that this can result in conflicts between concurrent script threads, so this must be used with caution.
            </param>
        </member>
        <member name="M:GTA.Camera.DeleteAllCameras(System.Boolean)">
            <summary>
            Destroys all scripted <see cref="T:GTA.Camera"/>s.
            </summary>
            <param name="shouldApplyAcrossAllThreads">
            If <see langword="true"/>, a request to stop rendering will be enforced irrespective of whether other
            script threads (<c>GtaThread</c>s) expect rendering to be active.
            Note that this can result in conflicts between concurrent script threads, so this must be used with caution.
            </param>
        </member>
        <member name="M:GTA.Camera.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Camera"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Camera"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same camera as this <see cref="T:GTA.Camera"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same camera as this <see cref="T:GTA.Camera"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Equality(GTA.Camera,GTA.Camera)">
            <summary>
            Determines if two <see cref="T:GTA.Camera"/>s refer to the same camera.
            </summary>
            <param name="left">The left <see cref="T:GTA.Camera"/>.</param>
            <param name="right">The right <see cref="T:GTA.Camera"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same camera as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Inequality(GTA.Camera,GTA.Camera)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s don't refer to the same camera.
            </summary>
            <param name="left">The left <see cref="T:GTA.Camera"/>.</param>
            <param name="right">The right <see cref="T:GTA.Camera"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same camera as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Camera.op_Implicit(GTA.Camera)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Camera"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.CameraHintHelperNameHash">
            <summary>
            An enumeration of hashes of cam hint helper names.
            </summary>
            <remarks>
            You can find name hashes for camHintHelperMetadata in <c>cameras.ymt</c>
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.None">
            <summary>
            The gameplay director will use the hint helper set to the current hint metadata
            if this value is specified for <see cref="M:GTA.GameplayCamera.SetCoordHint(GTA.Math.Vector3,System.Int32,System.Int32,System.Int32,GTA.CameraHintHelperNameHash)"/> or
            <see cref="M:GTA.GameplayCamera.SetEntityHint(GTA.Entity,GTA.Math.Vector3,System.Boolean,System.Int32,System.Int32,System.Int32,GTA.CameraHintHelperNameHash)"/>.
            </summary>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.DefaultHintHelper">
            <remarks>
            The original name is <c>DEFAULT_HINT_HELPER</c>, which does not appear in ysc scripts.
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.SkyDivingHintHelper">
            <remarks>
            The original name is <c>SKY_DIVING_HINT_HELPER</c>, which does not appear in ysc scripts.
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.VehicleHintHelper">
            <remarks>
            The original name is <c>VEHICLE_HINT_HELPER</c>, which does not appear in ysc scripts.
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.Arm3VehicleHintHelper">
            <remarks>
            "arm3" or "armenian3" means the mission "Complications".
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.AgencyHeist3BSkyDivingHintHelper">
            <remarks>
            "agency heist3b" means the mission "The Bureau Raid".
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.Family3HouseVehicleHintHelper">
            <remarks>
            "family3" means the mission "Marriage Counseling".
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.Arm2Mcs6VehicleHintHelper">
            <remarks>
            "arm2" or "armenian2" means the mission "Repossession".
            "mcs6" eventually specifies the final cutscene for said mission.
            </remarks>
        </member>
        <member name="F:GTA.CameraHintHelperNameHash.Family3CoachOnBalconyVehicleHintHelper">
            <remarks>
            "family3" means the mission "Marriage Counseling".
            </remarks>
        </member>
        <member name="T:GTA.CamFrameInterpolatorCurveType">
            <summary>
            An enumeration of all the curve types of camera frame interpolation, where the enum members specify how to
            scale base blend level (from <c>0f</c> to <c>1f</c>) of a camera frame interpolator.
            Corresponds to what <c>camFrameInterpolator::eCurveTypes</c> in the game code defines.
            </summary>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.Linear">
            <summary>
            Does not scale the blend Level.
            </summary>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.SinAccelDecel">
            <summary>
            The interpolator works the same with this type as how they works with <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowInOut"/>.
            </summary>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.Accel">
            <summary>
            The interpolator works the same with this type as how they works with <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowIn"/>.
            </summary>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.Decel">
            <summary>
            The interpolator works the same with this type as how they works with <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowOut"/>.
            </summary>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.SlowIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in curve function once.
            </summary>
            <remarks>
            The sign ease-in curve function can be defined as the below code:
            <code>
            static float SlowIn(float t)
            {
                return 1.0f-dSlowOut(t);
            }
            </code>
            where <c>dSlowOut</c> can be defined as the below code:
            <code>
            static float dSlowOut (float t)
            {
                if (t&gt;0.0f)
                {
                    if (t&lt;1.0f)
                    {
                        return (float)Math.Sin(t * (float)Math.PI * 0.5f);
                    }
                    return 0.0f;
                }
                return 1.0f;
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.SlowOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-out curve function once.
            </summary>
            <remarks>
            The sign ease-out curve function can be defined as the below code:
            <code>
            static float SlowOut (float t)
            {
                if (t&gt;0.0f)
                {
                    if (t&lt;1.0f)
                    {
                        return (float)Math.Sin(t * (float)MathF.PI * 0.5f);
                    }
                    return 0.0f;
                }
                return 1.0f;
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.SlowInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in-out curve function once.
            </summary>
            <remarks>
            The sign ease-in-out curve function can be defined as the below code:
            <code>
            static float SlowInOut (float t)
            {
                return 0.5f*(1.0f-dSlowInOut(t));
            }
            </code>
            where <c>dSlowInOut</c> can be defined as the below code:
            <code>
            static float dSlowInOut (float t)
            {
                if (t&gt;0.0f)
                {
                    if (t&lt;1.0f)
                    {
                        return (float)Math.Cos(t * (float)MathF.PI);
                    }
                    return -1.0f;
                }
                return 1.0f;
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.VerySlowIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in curve function twice.
            </summary>
            <remarks>
            See the <c>remarks</c> of <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowIn"/> to view how the sign ease-in function can be defined.
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.VerySlowOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-out curve function twice.
            </summary>
            <remarks>
            See the <c>remarks</c> of <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowOut"/> to view how the sign ease-out function can be defined.
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.VerySlowInSlowOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in-out curve function once
            then applying the sine ease-in curve function once.
            </summary>
            <remarks>
            See the <c>remarks</c> tags of <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowInOut"/> and <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowIn"/> to view how
            the sine ease-in-out and sign-in function can be defined respectively.
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.SlowInVerySlowOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in-out curve function once
            then applying the sine ease-out curve function once.
            </summary>
            <remarks>
            See the <c>remarks</c> tags of <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowInOut"/> and <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowOut"/> to view how
            the sine ease-in-out and sign ease-out function can be defined respectively.
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.VerySlowInVerySlowOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the sine ease-in-out curve function twice.
            </summary>
            <remarks>
            See the <c>remarks</c> tags of <see cref="F:GTA.CamFrameInterpolatorCurveType.SlowInOut"/> to view how the sine ease-in-out function can be
            defined.
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuadraticEaseIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quadratic ease-in curve function
            once.
            </summary>
            <remarks>
            The quadratic ease-in function can be defined like `<c>var QuadraticEaseIn = (float t) => t * t;</c>`, in the range
            of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuadraticEaseOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quadratic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quadratic ease-out function can be defined like `<c>var QuadraticEaseOut = (float t) => 1.0f - QuadraticEaseIn(1.0f - t);</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuadraticEaseInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quadratic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quadratic ease-in-out function can be defined as the below code:
            <code>
            static float QuadraticEaseInOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                if (t&lt;0.5)
                {
                    return QuadraticEaseIn(2.0f * t)/2.0f;
                }
                else
                {
                    return 1.0f - QuadraticEaseIn((1.0f - t)*2.0f) /2.0f;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CubicEaseIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the cubic ease-in curve function
            once.
            </summary>
            <remarks>
            The cubic ease-in function can be defined like `<c>var CubicEaseIn = (float t) => t * t * t;</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CubicEaseOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the cubic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The cubic ease-out function can be defined like `<c>var CubicEaseOut = (float t) => 1.0f - CubicEaseIn(1.0f - t);</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CubicEaseInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the cubic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The ease-in-out function can be defined as the below code:
            <code>
            static float CubicEaseInOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                if (t&lt;0.5)
                {
                    return CubicEaseIn(2.0f * t)/2.0f;
                }
                else
                {
                    return 1.0f - CubicEaseIn((1.0f - t)*2.0f) /2.0f;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuarticEaseIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quartic ease-in curve function
            once.
            </summary>
            <remarks>
            The quartic ease-in function can be defined like `<c>var QuarticEaseIn = (float t) => t * t * t * t;</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuarticEaseOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quartic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quartic ease-out function can be defined like `<c>var QuarticEaseOut = (float t) => 1.0f - QuarticEaseIn(1.0f - t);</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuarticEaseInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quartic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quartic ease-in-out function can be defined as the below code:
            <code>
            static float QuarticEaseInOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                if (t&lt;0.5)
                {
                    return QuarticEaseIn(2.0f * t)/2.0f;
                }
                else
                {
                    return 1.0f - QuarticEaseIn((1.0f - t)*2.0f) /2.0f;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuinticEaseIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quintic ease-in curve function
            once.
            </summary>
            <remarks>
            The quintic ease-in function can be defined like `<c>var QuinticEaseIn = (float t) => t * t * t * t * t;</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuinticEaseOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quintic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quintic ease-out function can be defined like `<c>var QuinticEaseOut = (float t) => 1.0f - QuinticEaseIn(1.0f - t);</c>`,
            in the range of [0f, 1f].
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.QuinticEaseInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the quintic ease-in-out curve function
            once.
            </summary>
            <remarks>
            The quintic ease-in-out function can be defined as the below code:
            <code>
            static float QuinticEaseInOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                if (t&lt;0.5)
                {
                    return QuinticEaseIn(2.0f * t)/2.0f;
                }
                else
                {
                    return 1.0f - QuinticEaseIn((1.0f - t)*2.0f) /2.0f;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CircularEaseIn">
            <summary>
            The interpolator scales the blend Level for lerping by applying the circular ease-in curve function
            once.
            </summary>
            <remarks>
            The circular ease-in function can be defined as the below code:
            <code>
            static float CircularEaseIn (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                return 1.0f - (float)Math.Sqrt(1.0f - (t * t));
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CircularEaseOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the circular ease-out curve function
            once.
            </summary>
            <remarks>
            The circular ease-out function can be defined as the below code:
            <code>
            static float CircularEaseOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                float oneMinusT = 1.0f - t;
                return (float)Math.Sqrt(1.0f - (oneMinusT*oneMinusT));
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamFrameInterpolatorCurveType.CircularEaseInOut">
            <summary>
            The interpolator scales the blend Level for lerping by applying the circular ease-in-out curve function
            once.
            </summary>
            <remarks>
            The circular ease-in-out function can be defined as the below code:
            <code>
            static float CircularEaseInOut (float t)
            {
                // `[A function that asserts if the passed value is between 0f and 1f]`
                if (t&lt;0.5)
                {
                    return CircularEaseIn(2.0f * t)/2.0f;
                }
                else
                {
                    return 1.0f - CircularEaseIn((1.0f - t)*2.0f) /2.0f;
                }
            }
            </code>
            </remarks>
        </member>
        <member name="F:GTA.CamInVehicleState.EnteringVehicle">
            <summary>
            Gameplay camera in interpolating to the follow vehicle camera.
            </summary>
        </member>
        <member name="F:GTA.CamInVehicleState.InsideVehicle">
            <summary>
            Gameplay camera is running the follow vehicle camera.
            </summary>
        </member>
        <member name="F:GTA.CamInVehicleState.ExitingVehicle">
            <summary>
            Gameplay camera is interpolating from the follow vehicle camera to the follow ped camera.
            </summary>
        </member>
        <member name="F:GTA.CamInVehicleState.OutsideVehicle">
            <summary>
            Gameplay camera is fully running the follow ped camera,
            do not need to specify a <see cref="T:GTA.Vehicle"/> when specifying this value.
            </summary>
        </member>
        <member name="T:GTA.CamSplineSmoothingMode">
            <summary>
            An enumeration of camera spline smoothing mode.
            </summary>
        </member>
        <member name="F:GTA.CamSplineSmoothingMode.NoSmooth">
            <summary>
            No smoothing just moves at a constant rate.
            </summary>
        </member>
        <member name="F:GTA.CamSplineSmoothingMode.SlowInSmooth">
            <summary>
            Decelerates when approaching a node.
            </summary>
        </member>
        <member name="F:GTA.CamSplineSmoothingMode.SlowOutSmooth">
            <summary>
            Accelerates slowly when leaving a node.
            </summary>
        </member>
        <member name="F:GTA.CamSplineSmoothingMode.SlowInOutSmooth">
            <summary>
            Decelerates when approaching a node and accelerates slowly when leaving a node.
            </summary>
        </member>
        <member name="T:GTA.CinematicCameraDirector">
            <summary>
            Represents the cinematic camera director.
            The cinematic director is responsible for idle, vehicle cinematic, vehicle first person, and nose cameras.
            </summary>
        </member>
        <member name="M:GTA.CinematicCameraDirector.InvalidateIdleCam">
            <summary>
            Invalidates the cinematic idle camera, restarting the associated idle counter.
            </summary>
        </member>
        <member name="M:GTA.CinematicCameraDirector.InvalidateVehicleIdleMode">
            <summary>
            Invalidates the vehicle cinematic idle mode, restarting the associated idle counter.
            </summary>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsRenderingPointOfViewCam">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.CinematicCameraDirector"/> is rendering a cinematic point
            of view camera (used as a first person vehicle interior cam).
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:GTA.CinematicCameraDirector"/> is rendering a cinematic point of view
            camera; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsRenderingMountedCam">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.CinematicCameraDirector"/> is rendering a cinematic mounted
            camera (used as a vehicle bonnet cam).
            For example, this will return true if using the weapon cam on the Hydra.
            Only available in v1.0.372.2 or later versions.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:GTA.CinematicCameraDirector"/> is a cinematic mounted camera;
            otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in game versions earlier than v1.0.372.2.
            </exception>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsRendering">
            <summary>
            Gets a value indicating whether any cinematic camera is rendering.
            Note that this will also return <see langword="true"/> if in first-person view while inside a vehicle.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:GTA.CinematicCameraDirector"/> is a cinematic camera; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsRenderingIdleCam">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.CinematicCameraDirector"/> is rendering an idle cinematic
            camera.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:GTA.CinematicCameraDirector"/> is rendering an idle cinematic camera;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsCinematicCamInputActive">
            <summary>
            Gets a value indicating whether the cinematic camera mode switch is active.
            Currently only available in v1.0.1493.0 or later game versions.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.CinematicCameraDirector"/> mode switch is active; otherwise, <see langword="false" />.
            </value>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in game versions earlier than v1.0.1493.0.
            </exception>
        </member>
        <member name="M:GTA.CinematicCameraDirector.Shake(GTA.CameraShake,System.Single)">
            <summary>
            Shakes the <see cref="T:GTA.CinematicCameraDirector"/>'s active camera.
            </summary>
            <param name="shakeType">Type of the shake to apply.</param>
            <param name="amplitude">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.CinematicCameraDirector.StopShaking(System.Boolean)">
            <summary>
            Stops shaking the <see cref="T:GTA.CinematicCameraDirector"/>'s active camera.
            </summary>
            <param name="stopImmediately">Whether to stop shaking immediately; defaults to <see langword="false"/></param>
        </member>
        <member name="P:GTA.CinematicCameraDirector.IsShaking">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.CinematicCameraDirector"/>'s active camera is shaking.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.CinematicCameraDirector"/>'s active camera is shaking; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.CinematicCameraDirector.ShakeAmplitude">
            <summary>
            Sets the overall amplitude scaling for an active cinematic camera shake.
            </summary>
        </member>
        <member name="T:GTA.GameplayCamera">
            <summary>
            Represents the gameplay camera director.
            The gameplay director is responsible for the follow and aim cameras.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.MemoryAddress">
            <summary>
            Gets the memory address of the gameplay camera director.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Matrix">
            <summary>
            Gets the matrix of the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Position">
            <summary>
            Gets the position of the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.Rotation">
            <summary>
            Gets the rotation of the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
            <value>
            The yaw, pitch and roll rotations measured in degrees.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.Direction">
            <summary>
            Gets the direction of the <see cref="T:GTA.GameplayCamera"/> director is pointing in.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.UpVector">
            <summary>
            Gets the up vector of the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.RightVector">
            <summary>
            Gets the right vector of the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.ForwardVector">
            <summary>
            Gets the forward vector of the <see cref="T:GTA.GameplayCamera"/> director, see also <seealso cref="P:GTA.GameplayCamera.Direction"/>.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative to the <see cref="T:GTA.GameplayCamera"/> director.
            </summary>
            <param name="offset">The offset from the <see cref="T:GTA.GameplayCamera"/>.</param>
        </member>
        <member name="M:GTA.GameplayCamera.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of the <see cref="T:GTA.GameplayCamera"/> director from a world coordinates position.
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="M:GTA.GameplayCamera.SetThirdPersonCameraRelativeHeadingLimitsThisUpdate(System.Single,System.Single)">
            <summary>
            Forces the active third person camera using the specified heading limits only for this update.
            </summary>
            <param name="minRelativeHeading">The minimum yaw value.</param>
            <param name="maxRelativeHeading">The maximum yaw value.</param>
        </member>
        <member name="M:GTA.GameplayCamera.SetThirdPersonCameraRelativePitchLimitsThisUpdate(System.Single,System.Single)">
            <summary>
            Forces the active third person camera using the specified pitch limits only for this update.
            </summary>
            <param name="minRelativePitch">The minimum pitch value.</param>
            <param name="maxRelativePitch">The maximum pitch value.</param>
        </member>
        <member name="M:GTA.GameplayCamera.SetThirdPersonCameraOrbitDistanceLimitsThisUpdate(System.Single,System.Single)">
            <summary>
            Forces the active third person camera using the specified pitch limits only for this update.
            </summary>
            <param name="minDistance">The minimum distance in meters.</param>
            <param name="maxDistance">The maximum distance in meters.</param>
        </member>
        <member name="P:GTA.GameplayCamera.RelativePitch">
            <summary>
            Gets the <see cref="T:GTA.GameplayCamera"/>'s pitch relative to the target entity (ped or vehicle) in degrees.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.SetRelativePitch(System.Single,System.Single)">
            <summary>
            Sets the gameplay camera's pitch relative to the target entity (<see cref="T:GTA.Ped"/> or <see cref="T:GTA.Vehicle"/>).
            </summary>
            <param name="pitch">The relative pitch to set in degrees.</param>
            <param name="smoothRate">
            The rate at which the relative pitch should be attained. 1.0f is instant, 0.0f is infinite.
            </param>
        </member>
        <member name="P:GTA.GameplayCamera.RelativeHeading">
            <summary>
            Gets the <see cref="T:GTA.GameplayCamera"/>'s heading relative to the target entity (ped or vehicle) in degrees.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.ForceRelativeHeadingAndPitch(System.Single,System.Single,System.Single)">
            <summary>
            Sets the gameplay camera's pitch relative to the target entity (<see cref="T:GTA.Ped"/> or <see cref="T:GTA.Vehicle"/>).
            </summary>
            <param name="heading">The relative heading to set in degrees.</param>
            <param name="pitch">The relative pitch to set in degrees.</param>
            <param name="smoothRate">
            The rate at which the relative pitch should be attained. 1.0f is instant, 0.0f is infinite.
            </param>
        </member>
        <member name="P:GTA.GameplayCamera.IsFollowPedCamActive">
            <summary>
            Gets the value that indicates a follow-ped camera is active.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.FollowPedCamViewMode">
            <summary>
            Gets the global view mode used by all follow-ped cameras.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.IsFollowVehicleCamActive">
            <summary>
            Gets the value that indicates a follow-vehicle camera is active.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.FollowVehicleCamViewMode">
            <summary>
            Gets or sets the view mode used by the follow-vehicle and vehicle-aim cameras associated with classes of vehicles
            that are not handled specially, such as cars.
            Use <see cref="M:GTA.GameplayCamera.GetCamViewModeForContext(GTA.CamViewModeContext)"/> or <see cref="M:GTA.GameplayCamera.SetCamViewModeForContext(GTA.CamViewModeContext,GTA.CamViewMode)"/>
            to query the view mode applied for other classes of vehicle.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.GetCamViewModeForContext(GTA.CamViewModeContext)">
            <summary>
             Gets the camera view mode for the specified context.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.SetCamViewModeForContext(GTA.CamViewModeContext,GTA.CamViewMode)">
            <summary>
            Sets the camera view mode for the specified context.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.ActiveViewModeContext">
            <summary>
            Returns the view mode context for the active gameplay camera.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.SetCoordHint(GTA.Math.Vector3,System.Int32,System.Int32,System.Int32,GTA.CameraHintHelperNameHash)">
            <summary>
            Sets the gameplay to hint a coord.
            </summary>
            <param name="coord">The coordinate to hint (point at).</param>
            <param name="dwellTime">How long cam looks at the coordinate.</param>
            <param name="interpTo">How long the interp to the hint is.</param>
            <param name="interpFrom">How long the interp is from the interp.</param>
            <param name="overriddenHintType">The overridden hint type.</param>
        </member>
        <member name="M:GTA.GameplayCamera.SetEntityHint(GTA.Entity,GTA.Math.Vector3,System.Boolean,System.Int32,System.Int32,System.Int32,GTA.CameraHintHelperNameHash)">
            <summary>
            Sets the gameplay to hint an <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to hint (point at).</param>
            <param name="offset">The offset from the <see cref="T:GTA.Entity"/>.</param>
            <param name="relativeOffset">Specifies whether the offset is relative to the <see cref="T:GTA.Entity"/>.</param>
            <param name="dwellTime">How long cam looks at the coordinate.</param>
            <param name="interpTo">How long the interp to the hint is.</param>
            <param name="interpFrom">How long the interp is from the interp.</param>
            <param name="overriddenHintType">The overridden hint type.</param>
        </member>
        <member name="P:GTA.GameplayCamera.IsHintActive">
            <summary>
            Gets the value that indicates whether a hint is running.
            In other words, the return value indicates whether the gameplay camera is zooming to
            some <see cref="T:GTA.Entity"/> or coordinate.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.HintFollowDistanceScalar">
            <summary>
            Scales the cameras orbit distance between the camera and its attach <see cref="T:GTA.Entity"/> or coordinate.
            </summary>
            <remarks>
            <para>
            Call at the start of the hint to avoid pops.
            This value will be cleared after a hint is finished.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.GameplayCamera.HintBaseOrbitPitchOffset">
            <summary>
            Adjusts the pitch of camera relative to its attach parent.
            </summary>
            <remarks>
            <para>
            Call at the start of the hint to avoid pops.
            This value will be cleared after a hint is finished.
            </para>
            <para>
            Changes nothing if the passed value is not in the range of [1f, 130f].
            </para>
            </remarks>
        </member>
        <member name="P:GTA.GameplayCamera.HintCameraRelativeSideOffset">
            <summary>
            Sets an side offset relative attach parent in meters.
            </summary>
            <remarks>
            <para>
            Call at the start of the hint to avoid pops.
            This value will be cleared after a hint is finished.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.GameplayCamera.HintCameraRelativeVerticalOffset">
            <summary>
            Sets an vertical offset relative attach parent in meters.
            </summary>
            <remarks>
            <para>
            Call at the start of the hint to avoid pops.
            This value will be cleared after a hint is finished.
            </para>
            <para>
            This will cause the camera to pull back to frame the player correctly,
            may need to use in conjunction with the <see cref="P:GTA.GameplayCamera.HintFollowDistanceScalar"/>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.GameplayCamera.HintFovOverride">
            <summary>
            Sets the hint field of view override.
            </summary>
            <remarks>
            <para>
            Call at the start of the hint to avoid pops.
            This value will be cleared after a hint is finished.
            </para>
            <para>
            Changes nothing if the passed value is not in the range of [1f, 130f].
            </para>
            </remarks>
        </member>
        <member name="M:GTA.GameplayCamera.StopGameplayHint(System.Boolean)">
            <summary>
            Stops the hint cam running except if its a code gameplay hint.
            </summary>
            <param name="stopImmediately">
            If <see langword="true"/>, the hint camera will stop immediately,
            otherwise it will enter its release phase.
            </param>
        </member>
        <member name="M:GTA.GameplayCamera.StopCodeGameplayHint(System.Boolean)">
            <summary>
             Stops any active code gameplay hint.
            </summary>
            <param name="stopImmediately">
            If <see langword="true"/>, the hint camera will stop immediately,
            otherwise it will enter its release phase.
            </param>
        </member>
        <member name="P:GTA.GameplayCamera.IsCodeHintActive">
            <summary>
            Gets the value that indicates whether that a code gameplay hint is active.
            </summary>
            <remarks>
            A code gameplay hint is a hint activated by the game code (not by some script).
            Hints are based on a first come, fist served basis.
            </remarks>
        </member>
        <member name="M:GTA.GameplayCamera.SetInVehicleCameraStateThisUpdate(GTA.Vehicle,GTA.CamInVehicleState)">
            <summary>
            Sets the camera exit/enter state for <see cref="T:GTA.Vehicle"/>s which defines
            if the follow vehicle or follow ped camera runs.
            You can use this method to get the camera to interpolate between the follow ped and follow vehicle cameras
            the intermediate states have to be called.
            </summary>
            <param name="vehicle">
            The vehicle for follow vehicle camera.
            You can pass <see langword="null"/> or a invalid <see cref="T:GTA.Vehicle"/>
            if <paramref name="inVehicleState"/> is set to <see cref="F:GTA.CamInVehicleState.OutsideVehicle"/>,
            since this value will not be used for <see cref="F:GTA.CamInVehicleState.OutsideVehicle"/>.
            </param>
            <param name="inVehicleState">The in vehicle camera state enum.</param>
        </member>
        <member name="M:GTA.GameplayCamera.DisableOnFootFirstPersonViewThisUpdate">
            <summary>
            Disables on foot first person view, must be called every update.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.DisableFirstPersonFlashEffectThisUpdate">
            <summary>
            Disables flash effects from first person transitions, must be called every update.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.FirstPersonAimCamZoomFactor">
            <summary>
            Gets or sets the first-person ped aim zoom factor associated with equipped sniper scoped weapon,
            or the mobile phone camera, if active.
            </summary>
            <remarks>
            The specified zoom factor will be clamped to between 1.0 and the maximum zoom factor supported by the
            specific weapon/camera. The zoom factor will also automatically reset to 1.0 if the follow
            <see cref="T:GTA.Ped"/>'s equipped weapon changes or the mobile phone camera toggles on or off.
            </remarks>
        </member>
        <member name="P:GTA.GameplayCamera.Zoom">
            <summary>
            Gets the first-person ped aim zoom factor associated with equipped sniper scoped weapon,
            or the mobile phone camera, if active.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.FieldOfView">
            <summary>
            Gets the field of view of the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
        </member>
        <member name="P:GTA.GameplayCamera.IsRendering">
            <summary>
            Gets a value indicating whether the gameplay director is the dominant rendering director.
            The gameplay director is responsible for the follow and aim cameras.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> is rendering; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsAimCamActive">
            <summary>
            Gets a value indicating whether an aim camera is active.
            </summary>
            <value>
            <see langword="true" /> if an aim camera is rendering; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsFirstPersonAimCamActive">
            <summary>
            Gets a value indicating whether a first person ped aim camera is active,
            which can be activated by using a sniper rifle scope or mobile phone camera (strictly checks if the gameplay
            director use a <c>camFirstPersonPedAimCamera</c> instance).
            Do not confuse with a first person shooter camera (<c>camFirstPersonShooterCamera</c>),
            which can be activated by switching the camera mode.
            </summary>
            <value>
            <see langword="true" /> if a first person ped aim camera is active; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.IsLookingBehind">
            <summary>
            Gets a value indicating whether the active gameplay camera is looking behind.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> director is looking behind; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.GameplayCamera.Shake(GTA.CameraShake,System.Single)">
            <summary>
            Shakes the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="shakeType">Type of the shake to apply.</param>
            <param name="amplitude">The amplitude of the shaking.</param>
        </member>
        <member name="M:GTA.GameplayCamera.StopShaking">
            <summary>
            Stops shaking the <see cref="T:GTA.GameplayCamera"/> immediately.
            </summary>
        </member>
        <member name="M:GTA.GameplayCamera.StopShaking(System.Boolean)">
            <summary>
            Stops shaking the <see cref="T:GTA.GameplayCamera"/>.
            </summary>
            <param name="stopImmediately">
            <see langword="true"/> to stop shaking immediately; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="P:GTA.GameplayCamera.IsShaking">
            <summary>
            Gets a value indicating whether the <see cref="T:GTA.GameplayCamera"/> is shaking.
            </summary>
            <value>
            <see langword="true" /> if the <see cref="T:GTA.GameplayCamera"/> is shaking; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.GameplayCamera.ShakeAmplitude">
            <summary>
            Sets the overall amplitude scaling for an active gameplay camera shake.
            </summary>
        </member>
        <member name="T:GTA.ScriptCameraDirector">
            <summary>
            Represents the script camera director (<c>camScriptDirector</c> in the exe).
            The script camera director is responsible for managing scripted cameras.
            </summary>
        </member>
        <member name="P:GTA.ScriptCameraDirector.RenderingCam">
            <summary>
            Gets the camera currently rendering to the game screen.
            </summary>
            <remarks>
            This property will return <see langword="null"/> if no scripted camera is rendering to the game screen,
            where the current rendering camera (<c>camBaseCamera</c>) does not match any scripted cameras this scripted
            camera director (<c>camScriptDirector</c>) is managing.
            </remarks>
        </member>
        <member name="M:GTA.ScriptCameraDirector.StartRendering">
            <summary>
            Starts rendering a scripted camera without interpolation.
            Tells the game that script thread of the SHVDN runtime (<c>GtaThread</c>, not individual SHVDN scripts)
            wants to enable rendering of scripted cameras.
            </summary>
            <remarks>
            <inheritdoc cref="M:GTA.ScriptCameraDirector.StopRenderingWithInterp(System.Int32,System.Boolean,System.Boolean)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.ScriptCameraDirector.StartRenderingWithInterp(System.Int32,System.Boolean)">
            <summary>
            Starts rendering a scripted camera while interpolating from the gameplay camera
            that the gameplay camera director (<c>camGameplayDirector</c>) is using to a scripted camera.
            Tells the game that script thread of the SHVDN runtime (<c>GtaThread</c>, not individual SHVDN scripts)
            wants to enable rendering of scripted cameras.
            </summary>
            <param name="interpDuration">
            The interpolation duration in milliseconds.
            If zero, this method will behave the same as <see cref="M:GTA.ScriptCameraDirector.StartRendering"/> and
            <paramref name="shouldLockInterpolationSourceFrame"/> will not have effect.
            </param>
            <param name="shouldLockInterpolationSourceFrame">
            <inheritdoc cref="M:GTA.ScriptCameraDirector.StopRenderingWithInterp(System.Int32,System.Boolean,System.Boolean)" path="/param[@name='shouldLockInterpolationSourceFrame']"/>
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.ScriptCameraDirector.StopRenderingWithInterp(System.Int32,System.Boolean,System.Boolean)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.ScriptCameraDirector.StopRendering(System.Boolean)">
            <summary>
            Stops rendering a scripted camera without interpolation.
            Tells the game that script thread of the SHVDN runtime (<c>GtaThread</c>, not individual SHVDN scripts)
            wants to disable rendering of scripted cameras.
            </summary>
            <inheritdoc cref="M:GTA.ScriptCameraDirector.StopRenderingWithInterp(System.Int32,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.ScriptCameraDirector.StopRenderingWithInterp(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stops rendering a scripted camera while interpolating from the previously rendered scripted camera to
            the gameplay camera that the gameplay camera director (<c>camGameplayDirector</c>) is using.
            Tells the game that script thread of the SHVDN runtime (<c>GtaThread</c>, not individual SHVDN scripts)
            wants to disable rendering of scripted cameras.
            </summary>
            <param name="interpDuration">
            The interpolation duration in milliseconds.
            If zero, this method will behave the same as <see cref="M:GTA.ScriptCameraDirector.StopRendering(System.Boolean)"/> and
            <paramref name="shouldLockInterpolationSourceFrame"/> will not have effect.
            </param>
            <param name="shouldLockInterpolationSourceFrame">
            <para>
            If <see langword="false"/>, the source camera frame is updated throughout the interpolation,
            allowing for fully dynamic interpolation that can reduce the appearance of 'lag' when the source frame is
            not static. For example, when the Z coordinates of the source scripted camera and a destination gameplay
            camera are the same at the time when the interpolation starts but the Z coordinate of the source scripted
            camera are added after the interpolation starts, that of the moving camera (frame) should be greater than
            that of the destination gameplay camera.
            </para>
            <para>
            Does not have any effect if <paramref name="interpDuration"/> is zero.
            </para>
            </param>
            <param name="shouldApplyAcrossAllThreads">
            If <see langword="true"/>, a request to stop rendering will be enforced irrespective of whether other
            script threads (<c>GtaThread</c>s) expect rendering to be active.
            Note that this can result in conflicts between concurrent script threads, so this must be used with caution.
            </param>
            <remarks>
            At least one of the scripts loaded by SHVDN must have created a <see cref="T:GTA.Camera"/> that can be rendered,
            thus you would want to set <see cref="P:GTA.Camera.IsActive"/> to <see langword="true"/> on your
            <see cref="T:GTA.Camera"/>.
            Note that rendering is typically not stopped if other script threads (<c>GtaThread</c>) other than
            the SHVDN runtime still expect it to be active (see <paramref name="shouldApplyAcrossAllThreads"/>.)
            </remarks>
        </member>
        <member name="M:GTA.ScriptCameraDirector.StopRenderingUsingCatchUp(System.Boolean,System.Single,GTA.CamSplineSmoothingMode)">
            <summary>
            Stops rendering a scripted camera and force gameplay camera to blend from scripted camera to gameplay
            camera.
            Tells the game that script thread of the SHVDN runtime (<c>GtaThread</c>, not individual SHVDN scripts)
            wants to disable rendering of scripted cameras.
            </summary>
            <param name="shouldApplyAcrossAllThreads">
            If <see langword="true"/>, a request to stop rendering will be enforced irrespective of whether other
            script threads (<c>GtaThread</c>s) expect rendering to be active.
            Note that this can result in conflicts between concurrent script threads, so this must be used with caution.
            </param>
            <param name="distanceToBlend">
            Overrides the distance over which the catch up blend occurs in the <see cref="T:GTA.GameplayCamera"/>
            (<c>camGameplayDirector</c>).
            If zero is specified, default blend distance will be used.
            </param>
            <param name="blendType">
            The blend type to use in the <see cref="T:GTA.GameplayCamera"/> (<c>camGameplayDirector</c>).
            </param>
            <remarks>
            At least one of the scripts loaded by SHVDN must have created a <see cref="T:GTA.Camera"/> that can be rendered,
            so you would want to set <see cref="P:GTA.Camera.IsActive"/> to <see langword="true"/> on your
            <see cref="T:GTA.Camera"/>.
            Note that rendering is typically not stopped if another script thread (<c>GtaThread</c>) other than
            the SHVDN runtime still expects it to be active (see <paramref name="shouldApplyAcrossAllThreads"/>.)
            </remarks>
        </member>
        <member name="P:GTA.ScriptCameraDirector.IsInterpolatingFromScriptCam">
            <summary>
            Gets a value that indicates whether an interpolation is occuring from a script cam to a gameplay cam.
            </summary>
            <remarks>
            Returns <see langword="true"/> if the interpolating state matches the specific value on the
            <see cref="T:GTA.ScriptCameraDirector"/>.
            </remarks>
        </member>
        <member name="P:GTA.ScriptCameraDirector.IsInterpolatingToScriptCam">
            <summary>
            Gets a value that indicates whether an interpolation is occurring to a script cam from a gameplay cam.
            </summary>
            <remarks>
            Returns <see langword="true"/> if the interpolating state matches the specific value on the
            <see cref="T:GTA.ScriptCameraDirector"/>.
            </remarks>
        </member>
        <member name="T:GTA.ScriptedCameraNameHash">
            <summary>
            An enumeration of hashes of camera names where you can safely use with
            <see cref="M:GTA.Camera.Create(GTA.ScriptedCameraNameHash,System.Boolean)"/> out of all camera metadata in <c>cameras.ymt</c>.
            </summary>
            <remarks>
            You can find name hashes for camera metadata in <c>cameras.ymt</c>.
            </remarks>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.DefaultScriptedFlyCamera">
            <summary>
            An in-game fly camera designed for use in the mission creator.
            </summary>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.DefaultSplineCamera">
            <summary>
            Smoothed and velocity constrained spline, not continuous velocity.
            </summary>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.TimedSplineCamera">
            <summary>
            Smoothed and velocity constrained spline, not continuous velocity.
            </summary>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.RoundedSplineCamera">
            <summary>
            Rounded spline with continuous velocity.
            </summary>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.SmoothedSplineCamera">
            <summary>
            Smoothed spline with continuous velocity.
            </summary>
        </member>
        <member name="F:GTA.ScriptedCameraNameHash.CustomTimedSplineCamera">
            <summary>
            Smoothed and velocity constrained spline, not continuous velocity, custom speeds can be set.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.TargetPosition">
            <summary>
            Gets or sets the position where this <see cref="T:GTA.Checkpoint"/> points to.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Icon">
            <summary>
            Gets or sets the icon drawn in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CustomIcon">
            <summary>
            Gets or sets a custom icon to be drawn in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Radius">
            <summary>
            Gets or sets the radius of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.Color">
            <summary>
            Gets or sets the color of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.IconColor">
            <summary>
            Gets or sets the color of the icon in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderRadius">
            <summary>
            Gets or sets the radius of the cylinder in this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderNearHeight">
            <summary>
            Gets or sets the near height of the cylinder of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="P:GTA.Checkpoint.CylinderFarHeight">
            <summary>
            Gets or sets the far height of the cylinder of this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="M:GTA.Checkpoint.Delete">
            <summary>
            Removes this <see cref="T:GTA.Checkpoint"/>.
            </summary>
        </member>
        <member name="M:GTA.Checkpoint.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Checkpoint"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Checkpoint"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same checkpoint as this <see cref="T:GTA.Checkpoint"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same checkpoint as this <see cref="T:GTA.Checkpoint"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Equality(GTA.Checkpoint,GTA.Checkpoint)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s refer to the same checkpoint.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same checkpoint as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Inequality(GTA.Checkpoint,GTA.Checkpoint)">
            <summary>
            Determines if two <see cref="T:GTA.Checkpoint"/>s don't refer to the same checkpoint.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same checkpoint as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Checkpoint.op_Implicit(GTA.Checkpoint)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Checkpoint"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.CheckpointCustomIcon.#ctor(GTA.CheckpointCustomIconStyle,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.CheckpointCustomIcon" /> struct.
            </summary>
            <param name="iconStyle">The icon style.</param>
            <param name="iconNumber">The icon number,
            if <paramref name="iconStyle"/> is <see cref="F:GTA.CheckpointCustomIconStyle.Number"/> allowed range is 0 - 99
            otherwise allowed range is 0 - 9. </param>
        </member>
        <member name="P:GTA.CheckpointCustomIcon.Number">
            <summary>
            Gets or sets the number to display inside the icon.
            </summary>
            <value>
            If <see cref="P:GTA.CheckpointCustomIcon.Style"/> is <see cref="F:GTA.CheckpointCustomIconStyle.Number"/>, allowed range is 0 - 99; otherwise allowed range is 0 - 9.
            </value>
        </member>
        <member name="P:GTA.CheckpointCustomIcon.Style">
            <summary>
            Gets or sets the icon style.
            </summary>
        </member>
        <member name="M:GTA.CheckpointCustomIcon.op_Implicit(GTA.CheckpointCustomIcon)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.CheckpointCustomIcon"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.CheckpointIcon.Cyclinder">
            <remarks>
            Should have been <c>Cylinder</c> but the name is kept for compatibility reasons.
            </remarks>
        </member>
        <member name="F:GTA.CheckpointIcon.Cyclinder2">
            <remarks>
            Should have been <c>Cylinder2</c> but the name is kept for compatibility reasons.
            </remarks>
        </member>
        <member name="F:GTA.CheckpointIcon.Cyclinder3">
            <remarks>
            Should have been <c>Cylinder3</c> but the name is kept for compatibility reasons.
            </remarks>
        </member>
        <member name="F:GTA.ClearPropsFlags.ForceRespawnAmbientProps">
            <summary>
            Force to respawn new ambient <see cref="T:GTA.Prop"/>s even if the player is too close for them to respawn without possible collision with the player.
            </summary>
        </member>
        <member name="F:GTA.ClearPropsFlags.IncludeDoors">
            <summary>
            Clears door <see cref="T:GTA.Prop"/>s that are managed by native door system.
            </summary>
            <remarks>
            Strictly, this flag lets <see cref="M:GTA.World.ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)"/> clear <see cref="T:GTA.Prop"/>s that uses the <c>CDoor</c> class (a subclass of <c>CObject</c>) that are managed by native door system.
            Door <see cref="T:GTA.Prop"/>s created as a regular <c>CObject</c> can be deleted without this flag.
            </remarks>
        </member>
        <member name="F:GTA.ClearPropsFlags.IncludePropsWithScriptBrains">
            <summary>
            Clears props with brain ysc scripts, which can be attached with <c>REGISTER_OBJECT_SCRIPT_BRAIN</c>.
            For example, register props can be cleared if this flag is set.
            </summary>
        </member>
        <member name="F:GTA.ClearPropsFlags.ExcludeLadder">
            <summary>
            Does not clear ladders.
            </summary>
        </member>
        <member name="T:GTA.ClipSet">
            <summary>
            Represents a dictionary struct for a clip/animation set, which should represent a key name for <c>fwClipSet</c>.
            Clip/Animation sets are defined in <c>clip_sets.ymt</c> (compiled file of <c>clip_sets.pso.meta</c> according to
            the official scripting headers) or <c>clip_sets.xml</c> files.
            Note that clip/animation sets are different from clip/animation dictionaries, which is created from <c>ycd</c>
            files (you can request clip sets with <see cref="T:GTA.CrClipDictionary"/>).
            </summary>
        </member>
        <member name="P:GTA.ClipSet.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:GTA.ClipSet.HashName">
            <summary>
            Computes the hash of <see cref="P:GTA.ClipSet.Name"/> in the same way as how the game calculates hashes for clip sets to
            store in the global <c>rage::fwClipSetManager</c> and as how
            <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> calculates.
            May be useful when you want to get the identifier in the same way as how the game handles clip sets or when
            you investigate game memory to see how clip sets (<c>rage::fwClipSet</c>) are stored in the
            <c>rage::fwClipSetManager</c>.
            </summary>
            <returns>The hash value calculated from <see cref="P:GTA.ClipSet.Name"/>.</returns>
        </member>
        <member name="P:GTA.ClipSet.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.ClipSet"/> is loaded
            so the animations of this <see cref="T:GTA.ClipSet"/> are ready to use.
            </summary>
        </member>
        <member name="M:GTA.ClipSet.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.ClipSet"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.ClipSet.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.ClipSet"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.ClipSet"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.ClipSet"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ClipSet.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.ClipSet"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="T:GTA.Control">
            <summary>
            An enumeration of control input types.
            </summary>
            <remarks>
            The corresponding enum name in the exe is <c>rage__InputType</c>. The joaat hash value is 0xCE566A0F, where
            the original name is <c>rage::InputType</c> but ':' characters are replaced with '_'. You can find the enum
            name hash by searching for the hash value in the exe.
            </remarks>
        </member>
        <member name="T:GTA.CrClipAsset">
            <summary>
            Represents a struct that contains a <see cref="T:GTA.CrClipDictionary"/> and a animation clip name
            <see cref="T:System.String"/> so you can find a animation clip (an instance of a subclass of <c>rage::crClip</c>, which
            is an abstract one).
            </summary>
            <remarks>
            <para>
            This struct does not specify an target subclass out of all 3 subclasses <c>rage::crClip</c>, which are,
            <c>rage::crClipAnimation</c>, <c>rage::crClipAnimations</c>, and <c>rage::crClipAnimationExpression</c>
            (the one that is presumed to not be used), as the internal function
            <c>fwAnimManager::GetClipIfExistsByDictIndex</c>, which gets a <c>rage::crClip</c> by an index for a clip
            dictionary and an animation hash, does not distinguish animation types, and thus how animation natives accept
            any of <c>rage::crClip</c> subclasses.
            </para>
            <para>
            You should not use the default constructor. The fallback behavior can be changed from filling in the 2 values
            with <see langword="null"/> after the codebase of SHVDN starts to use C# 10 or later C# version.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.CrClipAsset.ClipDictionary">
            <summary>
            Gets the <see cref="T:GTA.CrClipDictionary"/> struct of clip/animation dictionary name.
            </summary>
        </member>
        <member name="P:GTA.CrClipAsset.ClipName">
            <summary>
            Gets the clip name. Do not confuse with animation names, where a clip can contain multiple animations if
            the clip class is <c>rage::crClipAnimations</c>.
            </summary>
        </member>
        <member name="M:GTA.CrClipAsset.HashClipName">
            <summary>
            Computes the hash of <see cref="P:GTA.CrClipAsset.ClipName"/> in the same way as how the game calculates hashes for clip
            names to store in a <c>rage::crClipDictionary</c> and as how
            <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> calculates.
            May be useful when you want to get the identifier in the same way as how the game handles texture
            dictionaries or when you investigate game memory to see how clips are stored in the clip dictionary.
            </summary>
            <returns>A <see cref="T:GTA.AtHashValue"/> that has the calculated hash.</returns>
        </member>
        <member name="M:GTA.CrClipAsset.Equals(GTA.CrClipAsset)">
            <summary>
            Returns <see langword="true"/> if the Jenkins-one-at-a-time (joaat) hash values of both
            <see cref="P:GTA.CrClipAsset.ClipDictionary"/> and <see cref="P:GTA.CrClipAsset.ClipName"/> match those of <paramref name="other"/>,
            as the game uses joaat hashes as identifiers of clip dictionaries and clip names.
            </summary>
        </member>
        <member name="T:GTA.CrClipDictionary">
            <summary>
            Represents a dictionary struct for an creature clip/animation dictionary, which is created from a ycd file.
            Note that clip/animation dictionaries are different from clip sets, which is defined in
            <c>clip_sets.ymt</c> or <c>clip_sets.xml</c> files (you can request clip sets with <see cref="T:GTA.ClipSet"/>).
            </summary>
            <remarks>
            Although some natives have the string "ANIM_DICT" but there's no ones that have "CLIP_DICT" on the other hand,
            GTA V doesn't have game classes for animation dictionaries different from clip dictionaries
            while the exe has <c>rage::crClipDictionary</c> and <c>rage::fwClipDictionaryStore</c> classes.
            </remarks>
        </member>
        <member name="P:GTA.CrClipDictionary.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:GTA.CrClipDictionary.HashName">
            <summary>
            Computes the hash of <see cref="P:GTA.CrClipDictionary.Name"/> in the same way as how the game calculates hashes for clip
            dictionaries to store in the global <c>rage::fwClipDictionaryStore</c> and as how
            <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> calculates.
            May be useful when you want to get the identifier in the same way as how the game handles texture
            dictionaries or when you investigate game memory to see how clips are stored in clip dictionaries.
            </summary>
            <returns>The hash value calculated from <see cref="P:GTA.CrClipDictionary.Name"/>.</returns>
        </member>
        <member name="P:GTA.CrClipDictionary.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.CrClipDictionary"/> exists
            in the <c>fwClipDictionaryStore</c> pool.
            </summary>
        </member>
        <member name="P:GTA.CrClipDictionary.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.CrClipDictionary"/> is loaded
            so the animations of this <see cref="T:GTA.CrClipDictionary"/> are ready to use.
            </summary>
        </member>
        <member name="M:GTA.CrClipDictionary.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.CrClipDictionary"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.CrClipDictionary.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.CrClipDictionary"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.CrClipDictionary"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.CrClipDictionary"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.CrClipDictionary.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.CrClipDictionary"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="M:GTA.CrClipDictionary.Equals(GTA.CrClipDictionary)">
            <summary>
            Returns <see langword="true"/> if the Jenkins-one-at-a-time (joaat) hash value of <see cref="P:GTA.CrClipDictionary.Name"/>
            matches that of <paramref name="other"/>, as the game uses joaat hashes as identifiers of clip dictionaries.
            </summary>
        </member>
        <member name="F:GTA.CrimeType.PossessionGun">
            <remarks>
            <para>Does not increase the crime value without providing a custom crime value.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.RunRedLight">
            <remarks>
            <para>Will increase the crime value by 5 when a custom crime value is not provided.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.RecklessDriving">
            <remarks>
            <para>Will increase the crime value by 5 when a custom crime value is not provided.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.Speeding">
            <remarks>
            Increases the crime value by 5 when a custom crime value is not provided.
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.DriveAgainstTraffic">
            <remarks>
            <para>Does not increase the crime value without providing a custom crime value.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.RidingBikeWithoutHelmet">
            <remarks>
            <para>Does not increase the crime value without providing a custom crime value.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.StealVehicle">
            <summary>The crime for stealing vehicles but not grand theft auto (car theft).</summary>
            <remarks>
            <para>Will increase the crime value by 15 when a custom crime value is not provided.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.StealCar">
            <summary>The crime for grand theft auto (car theft).</summary>
            <remarks>
            <para>Will increase the crime value by 15 when a custom crime value is not provided.</para>
            <para>Does not refocus the search area.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.BlockPoliceCar">
            <remarks>Will increase the crime value by 3 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.StandOnPoliceCar">
            <remarks>Will increase the crime value by 3 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.HitPed">
            <summary>The crime for hitting regular <see cref="T:GTA.Ped"/>s with melee attacks.</summary>
            <remarks>Will increase the crime value by 5 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.HitCop">
            <summary>The crime for hitting law enforcement officers with melee attacks.</summary>
            <remarks>Will increase the crime value by 20 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootPed">
            <remarks>Will increase the crime value by 35 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootCop">
            <remarks>Will increase the crime value by 80 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.RunOverPed">
            <remarks>Will increase the crime value by 18 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.RunOverCop">
            <remarks>Will increase the crime value by 80 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.DestroyHeli">
            <remarks>Will increase the crime value by 400 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.PedSetOnFire">
            <remarks>Will increase the crime value by 20 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.CopSetOnFire">
            <remarks>Will increase the crime value by 80 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.CarSetOnFire">
            <remarks>Will increase the crime value by 20 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.DestroyPlane">
            <remarks>Will increase the crime value by 400 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.CauseExplosion">
            <remarks>Will increase the crime value by 25 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.StabPed">
            <summary>The crime for stabbing regular <see cref="T:GTA.Ped"/>s with sharp melee weapons, which have the <c>MeleeBlade</c> flag in the <c>weapons.meta</c>.</summary>
            <remarks>Will increase the crime value by 35 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.StabCop">
            <summary>The crime for stabbing law enforcement officers with sharp melee weapons, which have the <c>MeleeBlade</c> flag in the <c>weapons.meta</c>.</summary>
            <remarks>Will increase the crime value by 100 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.DestroyVehicle">
            <remarks>Will increase the crime value by 70 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.DamageToProperty">
            <remarks>Will increase the crime value by 2 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.TargetCop">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.FirearmDischarge">
            <remarks>Will increase the crime value by 10 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ResistArrest">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.Molotov">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootNonLethalPed">
            <remarks>Will increase the crime value by 15 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootNonLethalCop">
            <remarks>Will increase the crime value by 60 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.KillCop">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootAtCop">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootVehicle">
            <remarks>Will increase the crime value by 15 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.TerroristActivity">
            <remarks>Will increase the crime value by 25 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.Hassle">
            <summary>An unknown crime whose name is based on the intended name <c>CRIME_HASSLE</c>.</summary>
            <remarks>
            <para>Will increase the crime value by 55 when a custom crime value is not provided.</para>
            <para>The game does not use police radios for this crime.</para>
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.ThrowGrenade">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.VehicleExplosion">
            <remarks>Will increase the crime value by 25 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.KillPed">
            <remarks>Will increase the crime value by 20 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.StealthKillCop">
            <remarks>
            if a custom crime value is not provided, this value will set the crime value by 551 if the current wanted level is less than 3
            (regardless of the current crime value even if it is 550 or more) and will increase the crime value by 20 if the current wanted level is 3 or more.
            </remarks>
        </member>
        <member name="F:GTA.CrimeType.Suicide">
            <remarks>Does not increase the crime value without providing a custom crime value.</remarks>
        </member>
        <member name="F:GTA.CrimeType.Disturbance">
            <remarks>Will increase the crime value by 5 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.CivilianNeedsAssistance">
            <remarks>Will increase the crime value by 5 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.StealthKillPed">
            <remarks>Will increase the crime value by 20 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ShootPedSuppressed">
            <remarks>Will increase the crime value by 35 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.JackDeadPed">
            <remarks>Will increase the crime value by 15 when a custom crime value is not provided.</remarks>
        </member>
        <member name="F:GTA.CrimeType.ChainExplosion">
            <remarks>Will increase the crime value by 5 when a custom crime value is not provided.</remarks>
        </member>
        <member name="T:GTA.DecoratorInterface">
            <summary>
            Represents the global decorator interface (internally <c>CDecoratorInterface</c>) where variables can be accessed across scripts.
            </summary>
            <remarks>
            <para>
            Decorator names are hashed in the same way as <see cref="M:GTA.StringHash.AtStringHashUtf8(System.String,System.UInt32)"/> before being used.
            </para>
            <para>
            Despite get/set methods only accepts <see cref="T:GTA.Entity"/>s at the moment in this class, the relevant native functions 
            take any values associated to guids (e.g. entity handles).
            </para>
            </remarks>
        </member>
        <member name="P:GTA.DecoratorInterface.IsLocked">
            <summary>
            Gets or sets the value that indicates whether the decorator interface is lock so no more decorators can be registered.
            You can set one of the registered decorators on a <see cref="T:GTA.Entity"/> even if the interface is locked.
            Should be locked when SHVDN starts scripts for them unless some other script mod unlocks the decorator interface.
            </summary>
        </member>
        <member name="M:GTA.DecoratorInterface.SetTime(GTA.Entity,System.String,System.Int32)">
            <summary>
            Adds or updates a time decorator on the <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false"/>.
            Does not check if <paramref name="decoratorName"/> is registered.
            </returns>
        </member>
        <member name="M:GTA.DecoratorInterface.SetBool(GTA.Entity,System.String,System.Boolean)">
            <summary>
            Adds or updates a bool decorator on the <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false"/>.
            Does not check if <paramref name="decoratorName"/> is registered.
            </returns>
        </member>
        <member name="M:GTA.DecoratorInterface.SetFloat(GTA.Entity,System.String,System.Single)">
            <summary>
            Adds or updates a float decorator on the <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false"/>.
            Does not check if <paramref name="decoratorName"/> is registered.
            </returns>
        </member>
        <member name="M:GTA.DecoratorInterface.SetInt(GTA.Entity,System.String,System.Int32)">
            <summary>
            Adds or updates an int decorator on the <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false"/>.
            Does not check if <paramref name="decoratorName"/> is registered.
            </returns>
        </member>
        <member name="M:GTA.DecoratorInterface.GetBool(GTA.Entity,System.String)">
            <summary>
            Gets the value of a bool decorator.
            </summary>
            <returns>The bool value of the decorator.</returns>
        </member>
        <member name="M:GTA.DecoratorInterface.GetFloat(GTA.Entity,System.String)">
            <summary>
            Gets the value of a float decorator.
            </summary>
            <returns>The float value of the decorator.</returns>
        </member>
        <member name="M:GTA.DecoratorInterface.GetInt(GTA.Entity,System.String)">
            <summary>
            Gets the value of a int decorator.
            </summary>
            <returns>The int value of the decorator.</returns>
        </member>
        <member name="M:GTA.DecoratorInterface.ExistsOn(GTA.Entity,System.String)">
            <summary>
            Queries to see if an <see cref="T:GTA.Entity"/> has the decorator applied to it.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:GTA.Entity"/> has the decorator; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.DecoratorInterface.Remove(GTA.Entity,System.String)">
            <summary>
            Removes a decorator from an <see cref="T:GTA.Entity"/>.
            </summary>
            <returns><see langword="true"/> if the decorator exists; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.DecoratorInterface.Register(System.String,GTA.DecoratorType)">
            <summary>
            Registers a decorator to be used as a specific type.
            You will need to unlock the decorator interface via <see cref="P:GTA.DecoratorInterface.IsLocked"/> before you can actually register new decorators.
            </summary>
        </member>
        <member name="M:GTA.DecoratorInterface.IsRegisteredAsType(System.String,GTA.DecoratorType)">
            <summary>
            Queries to see if a registered decorator is of an expected type.
            </summary>
            <returns><see langword="true"/> if the decorator is registered as the specified type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="F:GTA.DecoratorType.String">
            <remarks>
            The relevant native functions do not appear in production builds.
            </remarks>
        </member>
        <member name="T:GTA.AnimatedBuilding">
            <summary>
            Represents a interior proxy, which is for <c>CAnimatedBuilding</c>.
            </summary>
        </member>
        <member name="M:GTA.AnimatedBuilding.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.AnimatedBuilding"/> from the given handle.
            </summary>
            <param name="handle">The building handle.</param>
            <returns>
            Returns a <see cref="T:GTA.AnimatedBuilding"/> if this handle corresponds to a <see cref="T:GTA.AnimatedBuilding"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.AnimatedBuilding"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.AnimatedBuilding.Handle">
            <summary>
            The handle of this <see cref="T:GTA.AnimatedBuilding"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.AnimatedBuilding"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Matrix">
            <summary>
            Gets this <see cref="T:GTA.AnimatedBuilding"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Rotation">
            <summary>
            Gets the rotation of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.AnimatedBuilding.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
        </member>
        <member name="P:GTA.AnimatedBuilding.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="M:GTA.AnimatedBuilding.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Building"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Building"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.AnimatedBuilding"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.op_Equality(GTA.AnimatedBuilding,GTA.AnimatedBuilding)">
            <summary>
            Determines if two <see cref="T:GTA.AnimatedBuilding"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <param name="right">The right <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.AnimatedBuilding.op_Inequality(GTA.AnimatedBuilding,GTA.AnimatedBuilding)">
            <summary>
            Determines if two <see cref="T:GTA.AnimatedBuilding"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <param name="right">The right <see cref="T:GTA.AnimatedBuilding"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:GTA.Building">
            <summary>
            Represents a static building, which is for <c>CBuilding</c>.
            </summary>
        </member>
        <member name="M:GTA.Building.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.Building"/> from the given handle.
            </summary>
            <param name="handle">The building handle.</param>
            <returns>
            Returns a <see cref="T:GTA.Building"/> if this handle corresponds to a <see cref="T:GTA.Building"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.Building"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.Building.Handle">
            <summary>
            The handle of this <see cref="T:GTA.Building"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.Building.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Building"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Building.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.Building"/>.
            </summary>
        </member>
        <member name="P:GTA.Building.Matrix">
            <summary>
            Gets this <see cref="T:GTA.Building"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.Building.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Building"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.Building.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.Building"/>.
            </summary>
        </member>
        <member name="P:GTA.Building.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Building"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="M:GTA.Building.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Building"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Building"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.Building"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.Building"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.op_Equality(GTA.Building,GTA.Building)">
            <summary>
            Determines if two <see cref="T:GTA.Building"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Building"/>.</param>
            <param name="right">The right <see cref="T:GTA.Building"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Building.op_Inequality(GTA.Building,GTA.Building)">
            <summary>
            Determines if two <see cref="T:GTA.Building"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Building"/>.</param>
            <param name="right">The right <see cref="T:GTA.Building"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:GTA.Entity">
            <summary>
            Represents a physical entity.
            </summary>
            <remarks>
            Although there are natives that can work with any `<c>CEntity</c>`s including non-`<c>CPhysical</c>` instances,
            such as `<c>DOES_ENTITY_EXIST</c>`, `<c>HAS_ENTITY_CLEAR_LOS_TO_ENTITY</c>`, this type can safely handle only
            for `<c>CPhysical</c>`s due to historical reasons. Despite the name, this class also has methods and properties
            that can work only with physical entities (`<c>CPhysical</c>`s) but not with non-physical entities such as
            buildings (`<c>CBuilding</c>`s).
            </remarks>
        </member>
        <member name="M:GTA.Entity.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.Entity"/> from the given handle.
            </summary>
            <param name="handle">The entity handle.</param>
            <returns>
            Returns a <see cref="T:GTA.Ped"/> if this handle corresponds to a <see cref="T:GTA.Ped"/> (`<c>CPed</c>`).
            Returns a <see cref="T:GTA.Vehicle"/> if this handle corresponds to a <see cref="T:GTA.Vehicle"/> (`<c>CVehicle</c>`).
            Returns a <see cref="T:GTA.Prop"/> if this handle corresponds to a <see cref="T:GTA.Prop"/> (`<c>CProp</c>`).
            Returns <see langword="null"/> if no <see cref="T:GTA.Entity"/> associated with <paramref name="handle"/> exists,
            or if there is a `<c>CEntity</c>` associated with <paramref name="handle"/> but it is not `<c>CPed</c>`,
            `<c>CVehicle</c>`, or `<c>CProp</c>`.
            </returns>
        </member>
        <member name="P:GTA.Entity.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.Entity"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.Entity.EntityType">
            <summary>
            Gets the type of the current <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.PopulationType">
            <summary>
            Gets or sets the population type of the current <see cref="T:GTA.Entity"/>.
            This property can also be used to add or remove <see cref="T:GTA.Entity"/> persistence.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsDead">
            <summary>
            <para>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is dead or does not exist.
            </para>
            <para>
            For <see cref="T:GTA.Ped"/>s, use <see cref="P:GTA.Ped.IsInjured"/> unless you specifically need to know they are dead
            since this property does not guarantee whether if the <see cref="T:GTA.Ped"/> can start scripted tasks.
            </para>
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is dead or does not exist; otherwise, <see langword="false" />.
            </value>
            <seealso cref="M:GTA.Entity.Exists"/>
            <seealso cref="P:GTA.Ped.IsInjured"/>
        </member>
        <member name="P:GTA.Entity.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> exists and is alive.
            </summary>
            <para>
            For <see cref="T:GTA.Ped"/>s, use <see cref="P:GTA.Ped.IsInjured"/> unless you specifically need to know they are alive at all
            since this property does not guarantee whether if the <see cref="T:GTA.Ped"/> can start scripted tasks.
            </para>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> exists and is alive; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.HasDrawable">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> has a drawable object.
            <see cref="M:GTA.Entity.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)"/>
            and <c>PLAY_SYNCHRONIZED_ENTITY_ANIM</c> require the <see cref="T:GTA.Entity"/> to have a drawable.
            You can use this property to check that the entity has a drawable before attempting to play the anim.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> has a drawable object; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.HasSkeleton">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> has a skeleton.
            <see cref="M:GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)"/> requires the <see cref="T:GTA.Entity"/> to have a skeleton.
            You can use this property to check that the entity has a skeleton before calling that method.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> has a skeleton; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.HasAnimationDirector">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> has an animation director
            (<c>rage::fwAnimDirector</c>).
            <see cref="M:GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)"/> requires the <see cref="T:GTA.Entity"/> to have an animation director.
            You can use this property to check that the entity has an animation director before calling that method.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> has an animation director; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Although <c>DOES_ENTITY_HAVE_ANIM_DIRECTOR</c> is only available in v1.0.2699.0 or later, you can
            successfully call this property in all game versions.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsOwnedByShvdnScript">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> is owned by a SHVDN script including the console.
            When this property returns <see langword="true"/>, you can successfully call <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </summary>
            <remarks>
            Strictly speaking, this property returns true if the <c>CGameScriptHandler</c> associated with this
            <see cref="T:GTA.Entity"/> matches the one of the SHVDN runtime script. Although this property calls
            <c>DOES_ENTITY_BELONG_TO_THIS_SCRIPT</c>, ScriptHookVDotNet uses a shared <c>GtaThread</c> since
            and the SHVDN runtime script registers only one script via Script Hook V and thus the SHVDN runtime uses
            only one <c>CGameScriptHandler</c> instance for all SHVDN scripts (which is held by the <c>GtaThread</c>
            of SHVDN runtime script). This behavior is very similar to how RAGE Plugin Hook executes its plugins in how
            game resources are managed (not in how .NET assemblies are managed, however).
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsOwnedByAnyScript">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> is owned by a script including ysc scripts
            or external scripts other than SHVDN.
            </summary>
        </member>
        <member name="P:GTA.Entity.OwnerScriptName">
            <summary>
            Gets the script name of the <c>scrThread</c> that owns this <see cref="T:GTA.Entity"/>.
            Although you can get distinct names of ysc scripts with this property, you should not except that you can
            get a distinct name for external scripts, since both Script Hook V and RAGE Plugin Hook use shared script
            names for all scripts/plugins.
            </summary>
            <remarks>
            This property will return <see langword="null"/> if no script owns this <see cref="T:GTA.Entity"/>.
            If some Script Hook V script (including SHVDN) owns this <see cref="T:GTA.Entity"/>, this property should return
            "<c>audiotest</c>" (or "<c>AudioTest</c>").
            If some RAGE Plugin Hook plugin owns this <see cref="T:GTA.Entity"/>, this property should return
            "<c>RagePluginHook</c>".
            </remarks>
        </member>
        <member name="P:GTA.Entity.Model">
            <summary>
            Gets the model of the current <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.Opacity">
            <summary>
            Gets or sets how opaque this <see cref="T:GTA.Entity"/> is.
            </summary>
            <value>
            0 for completely see through, 255 for fully opaque.
            </value>
        </member>
        <member name="M:GTA.Entity.SetOpacity(System.Int32,System.Boolean)">
            <summary>
            Sets the <see cref="P:GTA.Entity.Opacity"/>.
            </summary>
            <param name="opacity">
            The opacity level in 0 to 255, where 0 (to 49) for completely see through, 255 for fully opaque.
            </param>
            <param name="useSmoothOpacity">
            <para>
            If <see langword="true"/> and this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Prop"/>,
            it will use smooth opacity/alpha rather than reduced polygons.
            </para>
            <para>
            This value is not properly supported on <see cref="T:GTA.Ped"/>s and <see cref="T:GTA.Vehicle"/>s.
            <see cref="T:GTA.Vehicle"/>s use smooth opacity regardless of this value.
            </para>
            </param>
        </member>
        <member name="M:GTA.Entity.ResetOpacity">
            <summary>
            Resets the <see cref="P:GTA.Entity.Opacity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.LodDistance">
            <summary>
            Gets or sets the level of detail distance of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsPersistent">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is persistent.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is persistent; otherwise, <see langword="false" />.
            </value>
            <remarks>
            If this <see cref="T:GTA.Entity"/> is <see cref="T:GTA.Ped"/>, setting to <see langword="true" /> can clear ambient tasks and setting to <see langword="false" /> will clear all tasks immediately.
            Set <see cref="P:GTA.Ped.KeepTaskWhenMarkedAsNoLongerNeeded"/> to <see langword="true"/> before calling this method or use <see cref="M:GTA.Ped.SetIsPersistentNoClearTask(System.Boolean)"/> instead if you need to keep assigned tasks.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsPositionFrozen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is frozen.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is position frozen; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.Bones">
            <summary>
            Gets a collection of the <see cref="T:GTA.EntityBone"/>s in this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.Health">
            <summary>
            Gets or sets the health of this <see cref="T:GTA.Entity"/> as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The health as an <see cref="T:System.Int32"/>.
            </value>
            <remarks>
            Use <see cref="P:GTA.Entity.HealthFloat"/> instead if you need to get or set the value precisely, since a health value of a <see cref="T:GTA.Entity"/> are stored as a <see cref="T:System.Single"/>.
            You should note <see cref="P:GTA.Entity.HealthFloat"/> does not care about the 16-bit unsigned integer value for the max health of the player ped(s) on <c>CPlayerInfo</c> even if the <see cref="T:GTA.Entity"/> is the player <see cref="T:GTA.Ped"/>s, however.
            </remarks>
            <seealso cref="P:GTA.Entity.HealthFloat"/>
        </member>
        <member name="P:GTA.Entity.MaxHealth">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Entity"/> as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The maximum health as a <see cref="T:System.Int32"/>.
            </value>
            <remarks>
            Use <see cref="P:GTA.Entity.MaxHealthFloat"/> instead if you need to get or set the value precisely, since a max health value of a <see cref="T:GTA.Entity"/> are stored as a <see cref="T:System.Single"/>.
            </remarks>
        </member>
        <member name="P:GTA.Entity.HealthFloat">
            <summary>
            Gets or sets the health of this <see cref="T:GTA.Entity"/> as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The health as a <see cref="T:System.Single"/>.
            </value>
            <remarks>
            This property does not check <see cref="P:GTA.Entity.MaxHealth"/> (for any <see cref="T:GTA.Entity"/>s that are not player <see cref="T:GTA.Ped"/>s) or <see cref="P:GTA.Player.MaxHealth"/> (for player <see cref="T:GTA.Ped"/>s) values.
            </remarks>
        </member>
        <member name="P:GTA.Entity.MaxHealthFloat">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Entity"/> as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The maximum health as a <see cref="T:System.Single"/>.
            </value>
            <remarks>
            <para>
            This method also set value to the 16-bit unsigned integer field for the max health of the player ped(s) on <c>CPlayerInfo</c> to prevent them from having inconsistent max health values.
            while the base implementation of <see cref="P:GTA.Entity.MaxHealth"/> does not care about it at all since there is <see cref="P:GTA.Ped.MaxHealth"/>, where the max health of the player ped(s) on <c>CPlayerInfo</c> is considered.
            </para>
            <para>
            You should not set a value larger than <c>65535.0</c> or a negative value for the player ped(s) as the game uses the 16-bit unsigned integer value for the max health of the player ped(s) on <c>CPlayerInfo</c>
            and it is used when respawning and in <c>SET_ENTITY_MAX_HEALTH</c> as the max limit.
            Setting a value larger than <c>65535.0</c> will result in the overflow of the 16-bit unsigned integer value for the max health of <c>CPlayerInfo</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.Matrix">
            <summary>
            Gets this <see cref="T:GTA.Entity"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.Entity.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            The position in world space.
            </value>
            <remarks>
            If the <see cref="T:GTA.Entity"/> is <see cref="T:GTA.Ped"/> and the <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.Vehicle"/>, the <see cref="T:GTA.Vehicle"/>'s position will be returned or changed.
            </remarks>
        </member>
        <member name="P:GTA.Entity.PositionNoOffset">
            <summary>
            Sets the position of this <see cref="T:GTA.Entity"/> without any offset.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.Entity.Rotation">
            <summary>
            Gets or sets the rotation of this <see cref="T:GTA.Entity"/> in degrees.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degrees, where roll represents X rotation, pitch represents Y rotation, yaw represents Z rotation.
            The rotation order is <see cref="F:GTA.EulerRotationOrder.YXZ"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.Heading">
            <summary>
            Gets or sets the heading of this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            The heading in degrees.
            </value>
        </member>
        <member name="P:GTA.Entity.SubmersionLevel">
            <summary>
            Gets a value indicating how submersed this <see cref="T:GTA.Entity"/> is, 1.0f means the whole entity is submerged.
            </summary>
        </member>
        <member name="P:GTA.Entity.HeightAboveGround">
            <summary>
            Gets how high above ground this <see cref="T:GTA.Entity"/> is.
            </summary>
        </member>
        <member name="P:GTA.Entity.Quaternion">
            <summary>
            Gets or sets the quaternion of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.UpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.ForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.LeftPosition">
            <summary>
            Gets a position directly to the left of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RightPosition">
            <summary>
            Gets a position directly to the right of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RearPosition">
            <summary>
            Gets a position directly behind this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.FrontPosition">
            <summary>
            Gets a position directly in front of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.AbovePosition">
            <summary>
            Gets a position directly above this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.BelowPosition">
            <summary>
            Gets a position directly below this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.Entity"/>.</param>
        </member>
        <member name="M:GTA.Entity.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.Entity"/> from a world coordinates position.
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="P:GTA.Entity.Speed">
            <summary>
            Gets or sets this <see cref="T:GTA.Entity"/>s speed.
            </summary>
            <value>
            The speed in m/s.
            </value>
        </member>
        <member name="P:GTA.Entity.MaxSpeed">
            <summary>
            Sets the maximum speed this <see cref="T:GTA.Entity"/> can move at.
            </summary>
        </member>
        <member name="M:GTA.Entity.GetSpeedVector(System.Boolean)">
            <summary>
            Gets the speed vector of this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="relativeToEntity"><see langword="true" /> to get the vector relative to this entity; <see langword="false" /> for relative to the world.</param>
        </member>
        <member name="P:GTA.Entity.Velocity">
            <summary>
            Gets or sets the velocity of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.RotationVelocity">
            <summary>
            Gets or sets the rotation velocity of this <see cref="T:GTA.Entity"/> in local space.
            </summary>
        </member>
        <member name="P:GTA.Entity.WorldRotationVelocity">
            <summary>
            Gets or sets the rotation velocity of this <see cref="T:GTA.Entity"/> in world space.
            </summary>
        </member>
        <member name="P:GTA.Entity.LocalRotationVelocity">
            <summary>
            Gets or sets the rotation velocity of this <see cref="T:GTA.Entity"/> in local space.
            </summary>
        </member>
        <member name="P:GTA.Entity.DamageRecords">
            <summary>
            Gets a collection of the <see cref="T:GTA.EntityDamageRecord"/>s in this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedBy(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by the specified <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedBy(GTA.WeaponHash)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by a specific weapon].
            </summary>
            <param name="weapon">The weapon to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by the specified weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedByAnyWeapon">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by any weapon.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by any weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasBeenDamagedByAnyMeleeWeapon">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has been damaged by any melee weapon.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has been damaged by any melee weapon; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.ClearLastWeaponDamage">
            <summary>
            Clears the last weapon damage this <see cref="T:GTA.Entity"/> received.
            </summary>
        </member>
        <member name="P:GTA.Entity.FragmentGroupCount">
            <summary>
            Returns the number of fragment group of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.IsFragmentObject">
            <summary>
            Determines if this <see cref="T:GTA.Entity"/> is a fragment object.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is a fragment object; otherwise, <see langword="false" />.
            This will return <see langword="true" /> if this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/> or a <see cref="T:GTA.Vehicle"/>.
            </returns>
        </member>
        <member name="M:GTA.Entity.DetachFragmentPart(System.Int32)">
            <summary>
            Detaches a fragment part of this <see cref="T:GTA.Entity"/>. Can create a new <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
              <para><see langword="true" /> if a new <see cref="T:GTA.Entity"/> is created; otherwise, <see langword="false" />.</para>
              <para>Returning <see langword="false" /> does not necessarily mean detaching the part did not change the <see cref="T:GTA.Entity"/> in any ways.
              For example, detaching <c>seat_f</c> for <see cref="T:GTA.Vehicle"/> will return <see langword="false" /> but the <see cref="T:GTA.Ped"/> on the front seat will not be able to sit properly.</para>
            </returns>
        </member>
        <member name="P:GTA.Entity.IsInWater">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is in water.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> is in water; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            For <see cref="T:GTA.Ped"/>s, this property returns <see langword="true"/> if;
            <list type="bullet">
            <item>
            <description>
            or the <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.Vehicle"/> and the <see cref="T:GTA.Vehicle"/> is drowning
            </description>
            </item>
            <item>
            <description>
            or the <see cref="T:GTA.Ped"/> is swimming where <see cref="F:GTA.PedConfigFlagToggles.IsSwimming"/> is set
            </description>
            </item>
            <item>
            <description>
            or the <see cref="T:GTA.Ped"/> is dead (where <see cref="P:GTA.Entity.IsDead"/> returns <see langword="true"/>, not
            <see cref="P:GTA.Ped.IsInjured"/>) or a network clone, and then `<c>CPED_RESET_FLAG_IsDrowning</c>` (the 3rd one,
            whose index is 2) is set
            </description>
            </item>
            <item>
            <description>
            or <see cref="P:GTA.Entity.IsInWaterStrict"/> returns <see langword="true"/>
            </description>
            </item>
            </list>
            `<c>IS_ENTITY_IN_WATER</c>` evaluates in the order listed above.
            </para>
            <para>
            For <see cref="T:GTA.Vehicle"/>s, this property returns <see langword="true"/> if;
            <list type="bullet">
            <item>
            <description>
            the vehicle type is <see cref="F:GTA.VehicleType.Boat"/> and the boat's boat handling instance has
            the "boat in water" flag set
            </description>
            </item>
            <item>
            <description>
            or the vehicle type inherits from <see cref="F:GTA.VehicleType.AmphibiousAutomobile"/> and the automobile's boat
            handling instance has the "boat in water" flag set
            </description>
            </item>
            <item>
            <description>
            or the vehicle type inherits from <see cref="F:GTA.VehicleType.Trailer"/>, and then <see cref="P:GTA.Entity.IsInWaterStrict"/>
            or <see cref="P:GTA.Entity.WasInWater"/> returns <see langword="true"/>
            </description>
            </item>
            <item>
            <description>
            or <see cref="P:GTA.Entity.IsInWaterStrict"/> returns <see langword="true"/>
            </description>
            </item>
            </list>
            `<c>IS_ENTITY_IN_WATER</c>` evaluates in the order listed above.
            </para>
            <para>
            For <see cref="T:GTA.Prop"/>s, always returns what <see cref="P:GTA.Entity.IsInWaterStrict"/> returns.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsInWaterStrict">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is in water by only testing a single specific
            flag of `<c>CPhysical</c>`, where the property would return <see langword="false"/> for <see cref="T:GTA.Ped"/>s
            in <see cref="T:GTA.Vehicle"/>s.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> has the "is in water" flag set in its
            `<c>CPhysical</c>` instance; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.WasInWater">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> was in water last frame.
            This property is exactly as strict as <see cref="P:GTA.Entity.IsInWaterStrict"/> but for last frame.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> was in water last frame; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.DontLoadCollision">
            <summary>
            Gets or sets a value indicating whether the game should not try to load collision for this
            <see cref="T:GTA.Entity"/>.
            Sets to <see langword="true"/> when <see cref="T:GTA.Entity"/>s created and when their mission state is cleaned
            up (e.g. by calling <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>).
            </summary>
            <value>
            <see langword="true"/> if the game should not try to load collision for this <see cref="T:GTA.Entity"/>; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Setting this property to <see langword="false"/> does not always make the game try to load collision for
            this <see cref="T:GTA.Entity"/>, as the game relies on the const virtual function
            `<c>CPhysical::ShouldLoadCollision()</c>`. `<c>CVehicle</c>`, which <see cref="T:GTA.Vehicle"/> is for, overrides
            it with a function where `<c>CVehicle::IsDummy()</c>` (which tests the vehicle's lod flags) must also return
            <see langword="false"/> before the overriding function can return <see langword="true"/>.
            </para>
            <para>
            When the const virtual function `<c>CPhysical::ShouldLoadCollision()</c>` returns <see langword="true"/> on
            the <see cref="T:GTA.Entity"/>, the 2 following effects can happen:
            <list type="bullet">
            <item>
            <description>
            <para>
            The game requests static bounds (mover) for mission <see cref="T:GTA.Entity"/>s.
            <see cref="P:GTA.Entity.IsPositionFrozen"/> must not return <see langword="true"/> before the game can request
            static bounds.
            For <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Ped"/>s, <see cref="P:GTA.Vehicle.IsConsideredDestroyed"/> or
            `<c>CPed::GetIsDeadOrDying()</c>` (which `<c>IS_PED_DEAD_OR_DYING</c>` native checks) must not return
            <see langword="true"/> respectively, either.
            </para>
            <para>
            `<c>CPhysical::ShouldLoadCollision()</c>` will be evaluated after static-casting to `<c>CPhysical</c>`,
            and any overridden functions will not be used. Despite the fact that static-cast will not be done for
            <see cref="T:GTA.Prop"/>s, `<c>CPhysical</c>` one will be used in that case as `<c>CObject</c>` does not have
            overriding one.
            </para>
            </description>
            </item>
            <item>
            <description>
            <para>
            A `<c>CPortalTracker</c>` instance can trigger activation of interiors mission <see cref="T:GTA.Entity"/>s,
            using `<c>CPhysical::ShouldLoadCollision()</c>` without upcasting.
            For <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Ped"/>s except for the local player <see cref="T:GTA.Ped"/>,
            <see cref="P:GTA.Entity.PopulationType"/> must also be <see cref="F:GTA.EntityPopulationType.Mission"/> before
            a `<c>CPortalTracker</c>` can trigger activation of interiors.
            For <see cref="T:GTA.Prop"/>s, they must also be owned by a script.
            </para>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.AllowsFreezeWaitingOnCollision">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> should be allowed to have its physics
            frozen if collision has not streamed in around its position.
            </summary>
            <value>
            <see langword="true"/> the <see cref="T:GTA.Entity"/> should be allowed to have its physics frozen if collision
            has not streamed in around its position; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            You should set vehicle fix/freeze properties via <see cref="M:GTA.Entity.SetShouldFreezeWaitingOnCollision(System.Boolean)"/> when
            you want to some <see cref="T:GTA.Vehicle"/>s to be allowed to have its physics frozen if collision has not
            streamed in around them. For <see cref="T:GTA.Ped"/>s and <see cref="T:GTA.Prop"/>s, setting a value via this property
            has the same visible effect as the said method.
            </remarks>
        </member>
        <member name="M:GTA.Entity.SetShouldFreezeWaitingOnCollision(System.Boolean)">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Entity"/> should be allowed to have its physics
            frozen if collision has not streamed in around its position. A specific vehicle flag is set if
            the <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Vehicle"/> to ensure that it should be fixed.
            </summary>
            <param name="shouldFreeze">
            Specifies whether this <see cref="T:GTA.Entity"/> should be allowed to have its physics frozen if collision has
            not streamed in around its position.
            </param>
            <remarks>
            if the <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Vehicle"/>, the method also changes
            `<c>CVehicle::VehicleFlags::bShouldFixIfNoCollision</c>`, which much more internal game functions for
            vehicles rely on than the bit field <see cref="P:GTA.Entity.AllowsFreezeWaitingOnCollision"/> and this method set.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsFireProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is fire proof.
            This <see cref="T:GTA.Entity"/> does not catch fire naturally and <see cref="T:GTA.Ped"/>s do not getting ragdolled
            for being burned when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is fire proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsMeleeProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is melee proof.
            <see cref="T:GTA.Ped"/>s are not susceptible to the reactions of melee attacks when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is melee proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsBulletProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is bullet proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is bullet proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsExplosionProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is explosion proof.
            Explosions cannot add force to this <see cref="T:GTA.Entity"/> and <see cref="T:GTA.Ped"/>s do not getting ragdolled with explosions when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is explosion proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsCollisionProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is collision proof.
            Setting this property to <see langword="true" /> only does not prevent this <see cref="T:GTA.Entity"/> from getting ragdolled when another <see cref="T:GTA.Entity"/> collide with this <see cref="T:GTA.Entity"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is collision proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsWaterCannonProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is water cannon proof.
            <see cref="T:GTA.Ped"/>s does not get ragdolled by the water jet from fire hydrants when this property is set to <see langword="true" />.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is water cannon proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsSteamProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is steam proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is steam proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsSmokeProof">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is smoke proof.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is smoke proof; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsInvincible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is invincible.
            Setting this property to <see langword="true" /> does not prevent <see cref="T:GTA.Ped"/>s from doing the
            reactions for getting hit with melee attacks.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is invincible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.BlocksAnyDamageButHasReactions">
            <summary>
            <para>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> will not take any damage but will react
            to any explosion/flame etc.
            </para>
            <para>
            Not available in any versions prior to v1.0.463.1, and the setter throws
            a <see cref="T:GTA.GameVersionNotSupportedException"/> if called in unsupported game version (the getter always
            returns false in unsupported game versions).
            </para>
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> is will not take any damage but will react
            to any explosion/flame etc; otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            The running game version is prior to v1.0.463.1. Can only be thrown from the setter.
            </exception>
            <remarks>
            This property reads or writes the same flag as the one that
            `<c>SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS</c>` changes.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsOnlyDamagedByPlayer">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> can only be damaged by <see cref="T:GTA.Player"/>s.
            <see cref="T:GTA.Ped"/>s are not susceptible to the reactions of melee attacks when this property is set to
            <see langword="true"/>, unlike <see cref="P:GTA.Entity.IsInvincible"/>.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> can only be damaged by <see cref="T:GTA.Player"/>s;
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.CanOnlyBeDamagedByRelGroup">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> can only be damaged by
            the <see cref="T:GTA.Ped"/>s in a specific relationship group, which is
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/>.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> can only be damaged by the <see cref="T:GTA.Ped"/>s in
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/>; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>
            This property should not be set to <see langword="true"/> when <see cref="P:GTA.Entity.BlocksDamageByRelGroup"/> is set
            to <see langword="true"/>, as both of them setting to <see langword="true"/> does not make any sense, which
            will result in the <see cref="T:GTA.Entity"/> rejecting to take any damage inflicted by any <see cref="T:GTA.Ped"/>s
            and any <see cref="T:GTA.Vehicle"/>s with drivers.
            </para>
            <para>
            This property does not make the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_DROWNING</c>`,
            `<c>WEAPON_DROWNING_IN_VEHICLE</c>`, or `<c>WEAPON_BLEEDING</c>` at all. It does not make
            the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_EXPLOSION</c>` or `<c>WEAPON_FIRE</c>` unless
            the inflictor exists and it is a <see cref="T:GTA.Ped"/>. This property does not prevent the <see cref="T:GTA.Entity"/>
            from catching fire at all.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.BlocksDamageByRelGroup">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> cannot be damaged by
            the <see cref="T:GTA.Ped"/>s in a specific relationship group, which is
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/>.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> cannot be damaged by the <see cref="T:GTA.Ped"/>s in
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/>; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>
            This property should not be set to <see langword="true"/> when <see cref="P:GTA.Entity.CanOnlyBeDamagedByRelGroup"/> is
            set to <see langword="true"/>, as both of them setting to <see langword="true"/> does not make any sense,
            which will result in the <see cref="T:GTA.Entity"/> rejecting to take any damage inflicted by any
            <see cref="T:GTA.Ped"/>s and any <see cref="T:GTA.Vehicle"/>s with drivers.
            </para>
            <para>
            This property does not make the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_DROWNING</c>`,
            `<c>WEAPON_EXPLOSION</c>`, `<c>WEAPON_DROWNING_IN_VEHICLE</c>`, `<c>WEAPON_BLEEDING</c>`, or
            `<c>WEAPON_FIRE</c>` at all. This property does not prevent the <see cref="T:GTA.Entity"/> from catching fire
            at all.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Entity.SetOnlyDamagedByRelGroup(GTA.RelationshipGroup)">
            <summary>
            Sets the relationship group that this <see cref="T:GTA.Entity"/> should take damage only by <see cref="T:GTA.Ped"/>s
            in.
            </summary>
            <param name="relGroup">
            The relationship group that the <see cref="T:GTA.Entity"/> should take damage inflicted only by
            <see cref="T:GTA.Ped"/>s in and by <see cref="T:GTA.Vehicle"/>s with drivers in.
            </param>
            <remarks>
            <para>
            This method will not do anything if <see cref="P:GTA.Entity.BlocksDamageByRelGroup"/> is set to <see langword="true"/>.
            In that case, you will need call <see cref="M:GTA.Entity.ClearNotDamagedByRelGroup"/> or change
            <see cref="P:GTA.Entity.BlocksDamageByRelGroup"/> to <see langword="false"/> before this method can have effects.
            </para>
            <para>
            Calling this method does not make the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_DROWNING</c>`,
            `<c>WEAPON_DROWNING_IN_VEHICLE</c>`, or `<c>WEAPON_BLEEDING</c>` at all. It does not make
            the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_EXPLOSION</c>` or `<c>WEAPON_FIRE</c>` unless
            the inflictor exists and it is a <see cref="T:GTA.Ped"/>. This property does not prevent the <see cref="T:GTA.Entity"/>
            from catching fire at all.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Entity.ClearOnlyDamagedByRelGroup">
            <summary>
            Clears the properties that makes this <see cref="T:GTA.Entity"/> take damage only by <see cref="T:GTA.Ped"/>s in
            the given relationship group.
            </summary>
            <remarks>
            This method sets <see cref="P:GTA.Entity.CanOnlyBeDamagedByRelGroup"/> to <see langword="false"/> and
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/> to zero.
            </remarks>
        </member>
        <member name="M:GTA.Entity.SetNotDamagedByRelGroup(GTA.RelationshipGroup)">
            <summary>
            Sets the relationship group that this <see cref="T:GTA.Entity"/> should not take damage by <see cref="T:GTA.Ped"/>s in.
            </summary>
            <param name="relGroup">
            The relationship group that the <see cref="T:GTA.Entity"/> should not take damage inflicted by
            <see cref="T:GTA.Ped"/>s in or by <see cref="T:GTA.Vehicle"/>s with drivers in.
            </param>
            <remarks>
            <para>
            This method will not do anything if <see cref="P:GTA.Entity.CanOnlyBeDamagedByRelGroup"/> is set to <see langword="true"/>.
            In that case, you will need call <see cref="M:GTA.Entity.ClearOnlyDamagedByRelGroup"/> or change
            <see cref="P:GTA.Entity.CanOnlyBeDamagedByRelGroup"/> to <see langword="false"/> before this method can have effects.
            </para>
            <para>
            Calling this method does not make the <see cref="T:GTA.Entity"/> block damage of `<c>WEAPON_DROWNING</c>`,
            `<c>WEAPON_EXPLOSION</c>`, `<c>WEAPON_DROWNING_IN_VEHICLE</c>`, `<c>WEAPON_BLEEDING</c>`, or
            `<c>WEAPON_FIRE</c>` at all. This property does not prevent the <see cref="T:GTA.Entity"/> from catching fire
            at all.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Entity.ClearNotDamagedByRelGroup">
            <summary>
            Clears the properties that makes this <see cref="T:GTA.Entity"/> not take damage by <see cref="T:GTA.Ped"/>s in
            the given relationship group.
            </summary>
            <remarks>
            This method sets <see cref="P:GTA.Entity.BlocksDamageByRelGroup"/> to <see langword="false"/> and
            <see cref="P:GTA.Entity.SpecificRelGroupForInflictorChecks"/> to zero.
            </remarks>
        </member>
        <member name="P:GTA.Entity.ShouldRenderScorched">
            <summary>
            Gets or sets the value that indicates whether this <see cref="T:GTA.Entity"/> should be rendered scorched.
            Only useful for <see cref="T:GTA.Ped"/>s for <see cref="T:GTA.Vehicle"/>s, and the setter will do nothing otherwise.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> should be rendered scorched; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            This property affects not only <see cref="T:GTA.Ped"/> and <see cref="T:GTA.Vehicle"/> shaders but also game logic.
            For example, <see cref="T:GTA.Ped"/>s with this property <see langword="true"/> do not catch fire, and
            <see cref="T:GTA.Vehicle"/> with this property <see langword="true"/> will never be marked to removed by AI
            <see cref="T:GTA.Ped"/>s.
            </remarks>
        </member>
        <member name="P:GTA.Entity.CanBeAutoVaulted">
            <summary>
            Gets or sets the value that indicates whether this <see cref="T:GTA.Entity"/> can be auto-vaulted.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> can be auto-vaulted; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.CanBeClimbed">
            <summary>
            Gets or sets the value that indicates whether this <see cref="T:GTA.Entity"/> can be climbed.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> can be climbed; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Entity.IsPickupByCargobobDisabled">
            <summary>
            <para>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is disabled being able to be picked up by
            the cargobob.
            </para>
            <para>
            Not available in any versions prior to v1.0.1180.2, and the setter throws
            a <see cref="T:GTA.GameVersionNotSupportedException"/> if called in unsupported game version (the getter always
            returns false in unsupported game versions).
            </para>
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is disabled being able to be picked up by
            the cargobob; otherwise, <see langword="false"/>.
            </value>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            The running game version is prior to v1.0.1180.2. Can only be thrown from the setter.
            </exception>
        </member>
        <member name="P:GTA.Entity.KeepsDamageFlagsOnCleanupMissionState">
            <summary>
            Gets or sets the value that indicates whether this <see cref="T:GTA.Entity"/> keeps damage flags rather
            than setting them to default when its mission state is cleaned up (e.g. by calling
            <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> keeps damage flags; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            <para>
            If set to <see langword="true"/>, the following properties will be kept when its mission state is cleaned
            up;
            <list type="bullet">
            <item>
            <description>
            <see cref="P:GTA.Entity.IsExplosionProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsOnlyDamagedByPlayer"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.CanOnlyBeDamagedByRelGroup"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.BlocksDamageByRelGroup"/>
            </description>
            </item>
            <item>
            <description>
            `<c>bOnlyDamagedWhenRunningScript</c>`, which does not have any effect in singleplayer (only read when
            `<c>NetworkInterface::IsGameInProgress()</c>` returns <see langword="true"/> in
            `<c>CPhysical::CanPhysicalBeDamaged</c>`)
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsBulletProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsFireProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsCollisionProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsMeleeProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsInvincible"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.BlocksAnyDamageButHasReactions"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsSteamProof"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:GTA.Entity.IsSmokeProof"/>
            </description>
            </item>
            </list>
            </para>
            <para>
            This property reads or writes the same flag as what `<c>SET_ENTITY_PROOFS</c>` sets and
            `<c>GET_ENTITY_PROOFS</c>` returns using the 8th argument.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.SpecificRelGroupForInflictorChecks">
            <summary>
            Gets or sets a <see cref="T:GTA.RelationshipGroup"/> in which this <see cref="T:GTA.Entity"/> can only be or cannot be
            damaged by the <see cref="T:GTA.Ped"/>s.
            </summary>
            <value>
            The relationship group if this <see cref="T:GTA.Entity"/> has the relation ship group hash for inflictor
            checks; otherwise, zero.
            </value>
        </member>
        <member name="P:GTA.Entity.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is visible.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is visible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOccluded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is occluded.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is occluded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsRendered">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is rendered.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is rendered; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOnFire">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is on fire.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is on fire; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsOnScreen">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is on screen.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is on screen; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsUpright">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is upright within 30f degrees.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is upright; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsUpsideDown">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is upside down.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is upside down; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsInAir">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> is in the air.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the air; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.UprightValue">
            <summary>
            Gets an upright value for this <see cref="T:GTA.Entity"/> between 1.0 being upright and -1.0 being upside down.
            </summary>
            <value>
            The upright value between 1.0 being upright and -1.0 being upside down.
            </value>
        </member>
        <member name="M:GTA.Entity.IsUprightWithin(System.Single)">
            <summary>
            Checks if this <see cref="T:GTA.Entity"/> is upright within a define angle limit.
            </summary>
        </member>
        <member name="P:GTA.Entity.HasGravity">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> has gravity.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has gravity; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Entity.RemoveParticleEffects">
            <summary>
            Stops all particle effects attached to this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.HasCollided">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> has collided with anything.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has collided; otherwise, <see langword="false" />.
            </value>
            <remarks><see cref="P:GTA.Entity.IsRecordingCollisions"/> must be <see langword="true" /> for this to work.</remarks>
        </member>
        <member name="P:GTA.Entity.HasCollidedWithBuildingOrAnimatedBuilding">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Entity"/> has collided with a <see cref="T:GTA.Building"/> or an <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has collided; otherwise, <see langword="false" />.
            </value>
            <remarks><see cref="P:GTA.Entity.IsRecordingCollisions"/> must be <see langword="true" /> for this to work.</remarks>
        </member>
        <member name="P:GTA.Entity.MaterialCollidingWith">
            <summary>
            Gets the material the entity of which this <see cref="T:GTA.Entity"/> is pushing up against with the largest
            accumulated impulse this frame.
            </summary>
            <value>
            A material hash if this <see cref = "T:GTA.Entity"/> has collision; otherwise, <see cref = "F:GTA.MaterialHash.None"/>.
            </value>
            <remarks>
            <para>
            Despite this property using <c>GET_LAST_MATERIAL_HIT_BY_ENTITY</c>, it returns the material of the entity
            that this <see cref="T:GTA.Entity"/> is pushing up against with the largest accumulated impulse this frame (among
            all of <c>CEntity</c>s that this <see cref="T:GTA.Entity"/> is pushing up).
            </para>
            <para>
            This returns <see cref = "F:GTA.MaterialHash.None"/> in some cases even if this entity is internally
            pushing up against something.
            For example, this returns <see cref = "F:GTA.MaterialHash.None"/> when this <see cref = "T:GTA.Entity"/> is
            a <see cref = "T:GTA.Ped"/> and the <see cref = "T:GTA.Entity"/> doesn't push none of the touching entities, including
            static or animated buildings, since the <see cref = "T:GTA.Entity"/> doesn't have any collision records at that
            time.
            However, this returns <see cref = "F:GTA.MaterialHash.None"/> when this <see cref = "T:GTA.Entity"/> touches any
            ragdolled ped with the largest accumulated impulse.
            </para>
            <para>
            Note that when this <see cref = "T:GTA.Entity"/> is a this <see cref = "T:GTA.Vehicle"/> and its wheels touch something
            but the <see cref = "T:GTA.Vehicle"/> does not, the game will consider the entity touching nothing and this
            returns <see cref = "F:GTA.MaterialHash.None"/>.</para>
            </remarks>
        </member>
        <member name="P:GTA.Entity.VehicleCollidingWith">
            <summary>
            Gets the <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Entity"/> has collided with.
            </summary>
        </member>
        <member name="P:GTA.Entity.PedCollidingWith">
            <summary>
            Gets the <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Entity"/> has collided with.
            </summary>
        </member>
        <member name="P:GTA.Entity.PropCollidingWith">
            <summary>
            Gets the <see cref="T:GTA.Prop"/> this <see cref="T:GTA.Entity"/> has collided with.
            </summary>
        </member>
        <member name="M:GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)">
            <summary>
            Gets the physical <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Entity"/> has collided with from the last collision record,
            where a <see cref="T:GTA.Building"/> or an <see cref="T:GTA.AnimatedBuilding"/> can be stored instead of a physical entity.
            </summary>
            <param name="entity">
            When this method returns, contains the physical <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Entity"/> has collided with,
            if the last collision record exists on this <see cref="T:GTA.Entity"/> and the collision record has a has a physical <see cref="T:GTA.Entity"/> address as a target;
            otherwise, <see langword="null"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the last collision record exists on this <see cref="T:GTA.Entity"/> and the collision record has a has a physical <see cref="T:GTA.Entity"/> address as a target;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Entity.IsCollisionEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> has collision.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> has collision; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Entity.IsRecordingCollisions">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Entity"/> is recording collisions.
            This value must be set to <see langword="true"/> before this <see cref="T:GTA.Entity"/> can record their collision records and you can properly fetch some of the records,
            via properties such as <see cref="P:GTA.Entity.HasCollided"/> and <see cref="M:GTA.Entity.TryGetPhysicalEntityFromLastCollisionRecord(GTA.Entity@)"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.SetNoCollision(GTA.Entity,System.Boolean)">
            <summary>
            Sets the collision between this <see cref="T:GTA.Entity"/> and another <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to set collision with</param>
            <param name="toggle">if set to <see langword="true" /> the 2 <see cref="T:GTA.Entity"/>s wont collide with each other.</param>
        </member>
        <member name="M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified area.
            </summary>
            <param name="minBounds">The minimum bounds.</param>
            <param name="maxBounds">The maximum bounds.</param>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified area; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            This overload tests with a 2D area defined in X and Y axes for compatibility built against v3.6.0 or earlier,
            while most tests of IS_ENTITY_IN_AREA are done with 3D areas in ysc scripts.
            When you test with a 3D area, you need to use <see cref="M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)"/>.
            </remarks>
        </member>
        <member name="M:GTA.Entity.IsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified area.
            </summary>
            <param name="minCoords">
            A coordinates that defines the axis aligned area to test along with <paramref name="maxCoords"/>.
            Despite the name, does not have to be lower than <paramref name="maxCoords"/> in all components.
            </param>
            <param name="maxCoords">
            A coordinates that defines the axis aligned area to test along with <paramref name="minCoords"/>.
            Despite the name, does not have to be higher than <paramref name="maxCoords"/> in all components.
            </param>
            <param name="do3DCheck">
            If set to <see langword="true"/>, the method will test if the <see cref="T:GTA.Entity"/> is in an 3D area,
            which means both coordinates will be also considered in z axis.
            If set to <see langword="false"/>, the method will only check if the point is in area in X and Y axes.
            </param>
            <param name="transportMode">
            The transport mode constraint so the test can be passed.
            </param>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified area; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified angled area.
            </summary>
            <param name="origin">The mid-point along a base edge of the rectangle.</param>
            <param name="edge">The mid-point of opposite base edge on the other Z.</param>
            <param name="angle">The width. Wrongly named parameter but is kept for existing script compatibilities.</param>
            <returns>
              <see langword="true"/> if this <see cref="T:GTA.Entity"/> is in the specified angled area; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)">
            <summary>
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/summary"
            />
            </summary>
            <param name="originEdge">
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/param[@name='originEdge']"
            />
            </param>
            <param name="extentEdge">
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/param[@name='extentEdge']"
            />
            </param>
            <param name="width">
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/param[@name='width']"
            />
            </param>
            <param name="includeZAxis">
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/param[@name='do3DCheck']"
            />
            </param>
            <returns>
            <inheritdoc
            cref="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)"
            path="/returns"
            />
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,GTA.PedTransportMode)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in a specified angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="do3DCheck">
            If set to <see langword="true"/>, the method will also check if the point is in area in Z axis as well as
            X and Y axes.
            If set to <see langword="false"/>, the method will only check if the point is in area in X and Y axes.
            </param>
            <param name="transportMode">
            The transport mode constraint so the test can be passed.
            </param>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in the specified angled area;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsInRange(GTA.Math.Vector3,System.Single)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is in range of a specified position
            </summary>
            <param name="position">The position.</param>
            <param name="range">The maximum range.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is in range of the <paramref name="position"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3)">
            <inheritdoc cref="M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)"/>
        </member>
        <member name="M:GTA.Entity.IsNearEntity(GTA.Entity,GTA.Math.Vector3,System.Boolean,GTA.PedTransportMode)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is near a specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <param name="bounds">The max displacement from the <paramref name="entity"/>.</param>
            <param name="do3DCheck">
            If set to <see langword="true"/>, the method will also check if the point is in area in Z axis as well as
            X and Y axes.
            If set to <see langword="false"/>, the method will only check if the point is in area in X and Y axes.
            </param>
            <param name="transportMode">
            The transport mode constraint so the test can be passed.
            </param>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is near the <paramref name="entity"/>;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsTouching(GTA.Model)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is touching an <see cref="T:GTA.Entity"/> with the <see cref="P:GTA.Entity.Model"/> <paramref name="model"/>.
            </summary>
            <param name="model">The <see cref="P:GTA.Entity.Model"/> to check</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is touching a <paramref name="model"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsTouching(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is touching the <see cref="T:GTA.Entity"/> <paramref name="entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is touching <paramref name="entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.AddBlip">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> on this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.Entity.AttachedBlip">
            <summary>
            Gets the <see cref="T:GTA.Blip"/> attached to this <see cref="T:GTA.Entity"/>.
            </summary>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Blip"/>s are attached to this <see cref="T:GTA.Entity"/></remarks>
        </member>
        <member name="P:GTA.Entity.AttachedBlips">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Blip"/>s attached to this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.Entity.Detach">
            <summary>
            Detaches this <see cref="T:GTA.Entity"/> from any <see cref="T:GTA.Entity"/> it may be attached to.
            </summary>
        </member>
        <member name="M:GTA.Entity.Detach(System.Boolean,System.Boolean)">
            <summary>
            Detaches this <see cref="T:GTA.Entity"/> from any <see cref="T:GTA.Entity"/> it may be attached to.
            </summary>
            <param name="applyVelocity">
            If <see langword="true"/> and this <see cref="T:GTA.Entity"/> is not a <see cref="T:GTA.Ped"/>,
            this <see cref="T:GTA.Entity"/> will detach while apply velocity of the parent <see cref="T:GTA.Entity"/>.
            </param>
            <param name="noCollisionUntilClear">
            If <see langword="true"/> and this <see cref="T:GTA.Entity"/> is not a <see cref="T:GTA.Vehicle"/>,
            this method will set states to disable collision between this <see cref="T:GTA.Entity"/> and the parent <see cref="T:GTA.Entity"/> until they are clear of one another.
            </param>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3)">
            <inheritdoc cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3)">
            <inheritdoc cref="M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)">
            <summary>
            Attaches this <see cref="T:GTA.Entity"/> to a different <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
            <param name="offset">
            The offset relative to the <paramref name="entity"/> to attach this <see cref="T:GTA.Entity"/> to.
            If <paramref name="attachOffsetIsRelative"/> is <see langword="true"/>, the offset will be used as offset
            in world space.
            </param>
            <param name="rotation">The rotation to apply to this <see cref="T:GTA.Entity"/> relative to the <paramref name="entity"/>.</param>
            <param name="detachWhenDead">
            If <see langword="true"/> and this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/>, the <see cref="T:GTA.Ped"/>
            will be detached when they are dead.
            </param>
            <param name="detachWhenRagdoll">
            If <see langword="true"/> and this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/>, the <see cref="T:GTA.Ped"/>
            will be detached when they ragdoll.
            </param>
            <param name="activeCollisions">
            Specifies whether the collision of this <see cref="T:GTA.Entity"/> will be left activated for other
            <see cref="T:GTA.Entity"/>s with colliders. This <see cref="T:GTA.Entity"/> will not collide with static collisions
            such as map collisions, which are part of <see cref="T:GTA.Building"/>s or <see cref="T:GTA.AnimatedBuilding"/>s, or
            those of <see cref="T:GTA.Entity"/>s with no working colliders.
            </param>
            <param name="useBasicAttachIfPed">
            If <see langword="true"/> this method forces a path, even for <see cref="T:GTA.Ped"/>s, that will use all three rotation components
            This parameter does not have effect if this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Vehicle"/> or <see cref="T:GTA.Prop"/>.
            </param>
            <param name="rotationOrder">The rotation order.</param>
            <param name="attachOffsetIsRelative">
            <para>
            Specifies whether <paramref name="offset"/> is in the local space of <paramref name="entity"/>
            rather than world space.
            </para>
            <para>
            Always set to <see langword="true"/> in all occurrences of <c>ATTACH_ENTITY_TO_ENTITY</c> in ysc scripts
            as of v1.0.2944.0.
            </para>
            </param>
            <param name="markAsNoLongerNeededWhenDetached">
            <para>
            If <see langword="true"/> and the game version is v1.0.1493.0 or later, the game marks as no longer
            needed when this <see cref="T:GTA.Entity"/> gets detached from <paramref name="entity"/>.
            This <see cref="T:GTA.Entity"/> must be owned by the SHVDN runtime to get marked as no longer needed
            when this <see cref="T:GTA.Entity"/> gets detached, or the <see cref="T:GTA.Entity"/> will just get detached.
            </para>
            <para>
            Always set to <see langword="false"/> in all occurrences of <c>ATTACH_ENTITY_TO_ENTITY</c> in ysc scripts
            as of v1.0.2944.0.
            </para>
            </param>
        </member>
        <member name="M:GTA.Entity.AttachTo(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)">
             <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.Entity"/> to.</param>
             <param name="offset">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='offset']"
             />
             </param>
             <param name="rotation">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='rotation']"
             />
             </param>
             <param name="detachWhenDead">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='detachWhenDead']"
             />
             </param>
             <param name="detachWhenRagdoll">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='detachWhenRagdoll']"
             />
             </param>
             <param name="activeCollisions">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='activeCollisions']"
             />
             </param>
             <param name="useBasicAttachIfPed">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='useBasicAttachIfPed']"
             />
             </param>
             <param name="rotationOrder">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='rotationOrder']"
             />
             </param>
             <param name="attachOffsetIsRelative">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='attachOffsetIsRelative']"
             />
             </param>
             <param name="markAsNoLongerNeededWhenDetached">
             <inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             path="/param[@name='markAsNoLongerNeededWhenDetached']"
             />
             </param>
            
            	<inheritdoc
             cref="M:GTA.Entity.AttachTo(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Boolean)"
             />
        </member>
        <member name="M:GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Attaches this <see cref="T:GTA.Entity"/> to the transformation matrix (physics capsule) of a different
            <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="secondEntity">
            The <see cref="T:GTA.Entity"/> to attach this <see cref="T:GTA.Entity"/> to.
            </param>
            <param name="secondEntityOffset">
            The attach point offset of <paramref name="secondEntity"/> in local space.
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
        </member>
        <member name="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Attaches this <see cref="T:GTA.Entity"/> to a bone of a different <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="boneOfSecondEntity">
            The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.Entity"/> to that belongs to second/another
            <see cref="T:GTA.Entity"/>.
            </param>
            <param name="secondEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntityOffset']"
            />
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <remarks>
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/remarks"
            />
            </remarks>
        </member>
        <member name="M:GTA.Entity.AttachToMatrixPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)">
            <summary>
            <para>
            Attaches this <see cref="T:GTA.Entity"/> to the transformation matrix (physics capsule) of a different
            <see cref="T:GTA.Entity"/> with custom override values of inverse mass scale for the two <see cref="T:GTA.Entity"/>s.
            </para>
            <para>
            Only available in v1.0.2944.0 or later game versions.
            </para>
            </summary>
            <param name="secondEntity">
            <inheritdoc
            cref="M:GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntity']"
            />
            </param>
            <param name="secondEntityOffset">
            <inheritdoc
            cref="M:GTA.Entity.AttachToMatrixPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntityOffset']"
            />
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <param name="invMassScaleA">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleA']"
            />
            </param>
            <param name="invMassScaleB">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleB']"
            />
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.2944.0.
            </exception>
        </member>
        <member name="M:GTA.Entity.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)">
            <summary>
            <para>
            Attaches this <see cref="T:GTA.Entity"/> to a bone of a different <see cref="T:GTA.Entity"/>. with custom override
            values of inverse mass scale for the two <see cref="T:GTA.Entity"/>s.
            </para>
            <para>
            Only available in v1.0.2944.0 or later game versions.
            </para>
            </summary>
            <param name="boneOfSecondEntity">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='boneOfSecondEntity']"
            />
            </param>
            <param name="secondEntityOffset">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntityOffset']"
            />
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <param name="invMassScaleA">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleA']"
            />
            </param>
            <param name="invMassScaleB">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleB']"
            />
            </param>
            <remarks>
            <inheritdoc
            cref="M:GTA.Entity.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/remarks"
            />
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.2944.0.
            </exception>
        </member>
        <member name="M:GTA.Entity.IsAttached">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to any other <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to another <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsAttachedTo(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to the specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check if this <see cref="T:GTA.Entity"/> is attached to.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to <paramref name="entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsAttachedToAnyProp">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Prop"/>.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Prop"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsAttachedToAnyPed">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Ped"/>.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Ped"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsAttachedToAnyVehicle">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Vehicle"/>.
            </summary>
            <returns>
            <see langword="true" /> if this <see cref="T:GTA.Entity"/> is attached to a <see cref="T:GTA.Vehicle"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.Entity.AttachedEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Entity"/> is attached to.
            <remarks>Returns <see langword="null" /> if this <see cref="T:GTA.Entity"/> isn't attached to any entity.</remarks>
            </summary>
        </member>
        <member name="M:GTA.Entity.ProcessEntityAttachments">
            <summary>
            Updates an <see cref="T:GTA.Entity"/>'s attachments immediately that is attached to something.
            Updates the position of an attached <see cref="T:GTA.Entity"/> (And all of its children) immediately,
            so that up to date entity and child entity positions can be grabbed.
            </summary>
            <remarks>
            Also updates the position of the <see cref="T:GTA.Entity"/> within a synchronized scene.
            </remarks>
        </member>
        <member name="P:GTA.Entity.HasPhysics">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> has physics (<c>rage::phInst</c>) so it can
            collide with <see cref="T:GTA.Entity"/>s.
            Before calling physics methods or properties such as <see cref="M:GTA.Entity.set_Velocity(GTA.Math.Vector3)"/>, you need to check that
            the entity has physics.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> has physics (<c>rage::phInst</c>); otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            Physics are streamed in separately from the drawable object, though <see cref="T:GTA.Entity"/> physics near
            the player are streamed.
            This property returns <see langword="true"/> when the <see cref="T:GTA.Entity"/> has <c>phInstGta</c>.
            </remarks>
        </member>
        <member name="M:GTA.Entity.ActivatePhysics">
            <summary>
            Activates the physics of this <see cref="T:GTA.Entity"/> by having a physics collider (<c>rage::phCollider</c>)
            for the <see cref="T:GTA.Entity"/>, which is needed to physically move in both linear and rotational motions (not
            needed for entity animations or any bones rotating).
            Needs <see cref="P:GTA.Entity.HasPhysics"/> to return <see langword="true"/> before calling this method can successfully
            have the <see cref="T:GTA.Entity"/> activate the physics.
            </summary>
            <seealso cref="P:GTA.Entity.HasPhysics"/>
            <remarks>
            This method is not appropriate to keep the <see cref="T:GTA.Entity"/> having its physics collider.
            Use <see cref="M:GTA.Entity.SetToRespondToPhysicsSystem"/> to keep it.
            </remarks>
        </member>
        <member name="M:GTA.Entity.DeactivatePhysics">
            <summary>
            Deactivates the physics of this <see cref="T:GTA.Entity"/> by destroying its <c>rage::phCollider</c> so the
            <see cref="T:GTA.Entity"/> can't physically move in both linear and rotational motions.
            Does not stop animations or any bones rotating, since they have nothing to do with <c>rage::phCollider</c>.
            </summary>
        </member>
        <member name="M:GTA.Entity.SetToRespondToPhysicsSystem">
            <summary>
            <para>
            Sets the entity to respond to the physics system. Needs <see cref="P:GTA.Entity.HasPhysics"/> to return
            <see langword="true"/> before calling this method has actual effects.
            </para>
            <para>
            Keeps this <see cref="T:GTA.Entity"/> having its physics collider (<c>rage::phCollider</c>) if the entity has a
            physics collider, where <see cref="P:GTA.Entity.IsStatic"/> returns <see langword="false"/>; otherwise, activates the
            physics of this <see cref="T:GTA.Entity"/> (same effect as <see cref="M:GTA.Entity.ActivatePhysics"/> in such case).
            </para>
            </summary>
            <remarks>
            You need to call this method as long as you want to keep this <see cref="T:GTA.Entity"/> having its physics
            collider, since this method only sets certain variables to certain values on its <c>rage::phCollider</c> so
            it will not be destroyed by game code in the next frame if the <see cref="T:GTA.Entity"/> is using a
            <c>rage::phCollider</c>.
            </remarks>
        </member>
        <member name="P:GTA.Entity.IsStatic">
            <summary>
            Checks if this <see cref="T:GTA.Entity"/> has no active physics collider so it cannot physically move in both
            linear and rotational motions (hence no linear velocity or angular velocity).
            Returning <see langword="true"/> does not mean that the <see cref="T:GTA.Entity"/> is not using animations or
            having some of its bones rotating.
            </summary>
            <returns>
            <see langword="true"/> if this <see cref="T:GTA.Entity"/> exists and no active physics collider;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This property returns <see langword="true"/> when the <see cref="T:GTA.Entity"/> exists and does not have
            a <c>rage::phCollider</c> instance.
            </remarks>
        </member>
        <member name="M:GTA.Entity.SetDamping(GTA.PhysicsDampingType,System.Single)">
            <summary>
            Sets a <see cref="T:GTA.Entity"/> damping.
            </summary>
        </member>
        <member name="P:GTA.Entity.CenterOfGravityOffset">
            <summary>
            Gets or sets the center of gravity offset.
            </summary>
        </member>
        <member name="M:GTA.Entity.SetCenterOfGravityAtBoundCenter">
            <summary>
            Sets center of gravity at bound center.
            </summary>
        </member>
        <member name="M:GTA.Entity.ApplyForce(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="direction">The direction to apply the force relative to world coordinates.</param>
            <param name="rotation">
            <para>The offset from the root component of this <see cref="T:GTA.Entity"/> where the force applies.</para>
            <para>Although "rotation" is an incorrectly named parameter, the name is retained for scripts that use the method with named parameters.</para>
            </param>
            <param name="forceType">Type of the force to apply.</param>
        </member>
        <member name="M:GTA.Entity.ApplyForceRelative(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="direction">The direction to apply the force relative to this <see cref="T:GTA.Entity"/>s rotation</param>
            <param name="rotation">The offset from the root component of this <see cref="T:GTA.Entity"/> where the force applies. "rotation" is incorrectly named parameter but is left for scripts that use the method with named parameters.</param>
            <param name="forceType">Type of the force to apply.</param>
        </member>
        <member name="M:GTA.Entity.ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to this <see cref="T:GTA.Entity"/> using world offset.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to this <see cref="T:GTA.Entity"/> using relative offset.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to this <see cref="T:GTA.Entity"/> using world offset.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to this <see cref="T:GTA.Entity"/> using relative offset.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="force">The force to be applied.</param>
            <param name="offset">The offset from center of entity at which to apply force.</param>
            <param name="forceType">Type of the force to apply.</param>
            <param name="relativeForce">
            Specifies whether the force vector passed in is in relative or world coordinates.
            Local coordinates (<see langword="true"/>) means the force will get automatically transformed into world space before being applied.
            </param>
            <param name="relativeOffset">Specifies whether the offset passed in is in relative or world coordinates.</param>
            <param name="scaleByMass">
            <para>Specifies whether to scale the force by mass.</para>
            <para>If <see langword="true"/>, force will be multiplied by mass. For example, force passed in is in fact an acceleration rate in <c>m/s*s</c> (force) or velocity change in <c>m/s</c> (impulse).</para>
            <para>If <see langword="false"/>, force will be applied directly and it's effect will depend on the mass of the entity. For example, force passed in is a proper force in Newtons (force) or a step change in momentum <c>kg*m/s</c> (impulse).</para>
            <para>
            In other words, scaling by mass is probably easier in most situations -
            if the mass of the object changes it's behaviour shouldn't, and it's easier to picture the effect because an acceleration rate of <c>10.0</c> is approximately the same as gravity (<c>9.81</c> to be more precise).
            </para>
            </param>
            <param name="triggerAudio">
            <para>Specifies whether to play audio events related to the force being applied. The sound will play only if the entity type is <see cref="T:GTA.Vehicle"/> and will play a suspension squeal depending on the magnitude of the force.</para>
            <para>The sound will play even if regardless of <see cref="T:GTA.ForceType"/> (even with a value other than between 0 to 5).</para>
            </param>
            <param name="scaleByTimeScale">
            <para>Specifies whether scale the force by the current time scale (max: <c>1.0f</c>).</para>
            <para>Only affects when <paramref name="forceType"/> is <see cref="F:GTA.ForceType.InternalImpulse"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.</para>
            </param>
        </member>
        <member name="M:GTA.Entity.ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <inheritdoc cref="M:GTA.Entity.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Entity.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <param name="force">The force to be applied.</param>
            <param name="forceType">Type of the force to apply.</param>
            <param name="relativeForce">
            Specifies whether the force vector passed in is in relative or world coordinates.
            Relative coordinates (<see langword="true"/>) means the force will get automatically transformed into world space before being applied.
            </param>
            <param name="scaleByMass">
            <para>Specifies whether to scale the force by mass.</para>
            <para>If <see langword="true"/>, force will be multiplied by mass. For example, force passed in is in fact an acceleration rate in <c>m/s*s</c> (force) or velocity change in <c>m/s</c> (impulse).</para>
            <para>If <see langword="false"/>, force will be applied directly and it's effect will depend on the mass of the entity. For example, force passed in is a proper force in Newtons (force) or a step change in momentum <c>kg*m/s</c> (impulse).</para>
            <para>
            In other words, scaling by mass is probably easier in most situations -
            if the mass of the object changes it's behaviour shouldn't, and it's easier to picture the effect because an acceleration rate of <c>10.0</c> is approximately the same as gravity (<c>9.81</c> to be more precise).
            </para>
            </param>
            <param name="applyToChildren">Specifies whether to apply force to children components as well as the specified component.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="forceType"/> is set to <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>, which is not supported by this method.</exception>
        </member>
        <member name="M:GTA.Entity.PlayAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.AnimationFlags)">
            <summary>
            Plays an <see cref="T:GTA.Entity"/> animation.
            </summary>
            <param name="crClipAsset">
            The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.
            </param>
            <param name="blendDelta">The blend delta.</param>
            <param name="loop">Specifies whether the animation should loop.</param>
            <param name="holdLastFrame">Specifies whether the <see cref="T:GTA.Entity"/> should hold on the last frame.</param>
            <param name="driveToPose">
            Enable drive-to-pose for the animation if <see langword="true"/> (object must be set up with articulation for this to work).
            </param>
            <param name="startPhase">The start phase between 0f to 1f.</param>
            <param name="animFlags">The animation flags.</param>
            <remarks>For <see cref="T:GTA.Ped"/>, use <see cref="M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)"/>.</remarks>
            <returns><see langword="true"/> if the animation has successfully started playing; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:GTA.Entity.StopAnimation(GTA.CrClipAsset,GTA.AnimationBlendDelta)">
            <summary>
            Stops an <see cref="T:GTA.Entity"/> animation.
            </summary>
            <returns>
            <see langword="true"/> if the animation has successfully stopped playing; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Entity.IsPlayingAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Entity"/> is playing the animation.
            </summary>
        </member>
        <member name="M:GTA.Entity.HasFinishedAnimation(GTA.CrClipAsset,GTA.EntityAnimationType)">
            <summary>
            Gets a value that indicates whether the animation specified is being held on the last frame for this <see cref="T:GTA.Entity"/>.
            </summary>
            <remarks>
            Will only ever return <see langword="true"/> for anims that hold at the end (i.e. anims that loop or end automatically will always return <see langword="false"/>).
            </remarks>
        </member>
        <member name="M:GTA.Entity.HasAnimationEventFired(GTA.AtHashValue)">
            <summary>
            Gets a value that indicates whether the animation event has been fired from an animation this <see cref="T:GTA.Entity"/> is playing.
            Use this to check if a particular event tag is present in an animation playing on the <see cref="T:GTA.Entity"/> this frame.
            Some events are instantaneous (so this will only return true once).
            Others may have duration, which means that this function may continuously return <see langword="true"/> for a range of values.
            </summary>
            <param name="eventHash">The event hash.
            Use <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> to convert the original event name to the hash.
            </param>
            <remarks>
            The event must have been tagged with the <c>VisibleToScript</c> attribute (joaat hash: <c>0xF301E135</c>) in the ycd animation file to make it detectable with this method.
            Events can include one or more attributes of different types that can be used to get data from the animation.
            </remarks>
        </member>
        <member name="M:GTA.Entity.SetAnimationSpeed(GTA.CrClipAsset,System.Single)">
            <summary>
            Sets the speed of the anim task matching the given <see cref="T:GTA.CrClipAsset"/> on the <see cref="T:GTA.Ped"/> to
            the given multiplier.
            </summary>
            <param name="crClipAsset">The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.</param>
            <param name="speedMultiplier">The amount to multiply the animation's normal playback speed by.</param>
        </member>
        <member name="M:GTA.Entity.SetAnimationCurrentTime(GTA.CrClipAsset,System.Single)">
            <summary>
            Sets the timestamp of the anim task matching the given <see cref="T:GTA.CrClipAsset"/> on the <see cref="T:GTA.Ped"/>
            to the given value.
            </summary>
            <param name="crClipAsset">The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.</param>
            <param name="newCurrentTime">The time in the animation to set the specified animation to.</param>
        </member>
        <member name="M:GTA.Entity.GetAnimationCurrentTime(GTA.CrClipAsset)">
            <summary>
            Gets a float value representing animation's current playtime with respect to its total playtime.
            This value increasing in a range from [0.0 to 1.0] and wrap back to 0.0 when it reach 1.0.
            The phase of the anim is between 0.0 and 1.0 regardless of the anim length.
            </summary>
        </member>
        <member name="M:GTA.Entity.GetAnimationTotalTime(GTA.CrClipAsset)">
            <summary>
            Gets the total animation time in milliseconds.
            </summary>
        </member>
        <member name="M:GTA.Entity.FindAnimationEventPhase(GTA.CrClipAsset,System.String,System.Single@,System.Single@)">
            <summary>
            Searches an animation for the start and end phase of an event.
            </summary>
            <param name="crClipAsset">
            The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.
            </param>
            <param name="eventName">
            The event name. Will be converted to a joaat hash internally since event name is stored as a hash.
            </param>
            <param name="startPhase">
            If the event tag is found, it's start phase will be filled.
            </param>
            <param name="endPhase">
            If the event tag is found, it's end phase will be filled.
            </param>
            <returns><see langword="true"/> if this method found an event tag in an animation playing; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.Entity.PlaySynchronizedAnim(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})">
            <summary>
            Plays a synchronized anim on this <see cref="T:GTA.Entity"/> using a synchronized scene.
            </summary>
            <param name="scene">The <see cref="T:GTA.FwSyncedScene"/> to start on.</param>
            <param name="anim">The clip asset to play. Must be loaded before calling this method.</param>
            <param name="blendIn">The rate at which the task will blend in.</param>
            <param name="blendOut">The rate at which the task will blend out.</param>
            <param name="flags">A set of flags allowing for different playback options.</param>
            <param name="moverBlendIn">
            Determines how fast the peds position will be interpolated into the synchronized scene
            (helps to remove pops, and to allow blending into scenes from a walk, etc.)
            If set to <see langword="null"/>, <see cref="P:GTA.AnimationBlendDelta.InstantBlendIn"/> will be used instead.
            </param>
            <returns>
            <see langword="true"/> if the method successfully starts the animation; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            as part of this process the entity's collision will be deactivated. To turn it back on again, use
            <see cref="P:GTA.Entity.IsCollisionEnabled"/> or pass <see langword="true"/> to the `<c>activateCollision</c>` parameter
            of <see cref="M:GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)"/>.
            </para>
            <para>
            Use <see cref="M:GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)"/> for <see cref="T:GTA.Ped"/>s, as this method will not start
            an animation if the <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/>.
            </para>
            <para>
            The entity must not be attached, and must have a drawable with a skeleton data when calling this method, or
            this method will fail to start an animation. The method will lazily create a skeleton and an anim director
            on the <see cref="T:GTA.Entity"/> if either of them does not exist, but the method will fail if the lazy creation
            fails.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Entity.StopSynchronizedAnim(GTA.AnimationBlendDelta,System.Boolean)">
            <summary>
            Stops a synchronized anim on this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="blendOut"></param>
            <param name="activateCollision"></param>
            <returns>
            <see langword="true"/> if the method successfully stops the animation; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            Use <see cref="M:GTA.TaskInvoker.ClearAll"/> for <see cref="T:GTA.Ped"/>s, as this method will not stop
            an animation if the <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/>.
            </para>
            <para>
            The entity must not be attached, must not be missing a drawable with a skeleton data, a skeleton, or
            an anim director. Otherwise, the method will fail.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Entity.PlaySynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,System.Nullable{GTA.AnimationBlendDelta},GTA.SyncedSceneFlags,System.Nullable{GTA.AnimationBlendDelta})">
            <summary>
            Plays a synchronized anim on the closest map <see cref="T:GTA.Prop"/> within a test sphere using a synchronized
            scene.
            </summary>
            <param name="newPos">The center position for the test sphere.</param>
            <param name="radius">The radius for the test sphere.</param>
            <param name="propModel">The prop model to consider.</param>
            <param name="scene">The <see cref="T:GTA.FwSyncedScene"/> to start on.</param>
            <param name="anim">The clip asset to play. Must be loaded before calling this method.</param>
            <param name="blendIn">The rate at which the animation will blend in.</param>
            <param name="blendOut">The rate at which the animation will blend out.</param>
            <param name="flags">A set of flags allowing for different playback options.</param>
            <param name="moverBlendIn">
            Determines how fast the peds position will be interpolated into the synchronized scene
            (helps to remove pops, and to allow blending into scenes from a walk, etc.)
            If set to <see langword="null"/>, <see cref="P:GTA.AnimationBlendDelta.InstantBlendIn"/> will be used instead.
            </param>
            <returns>
            <see langword="true"/> if the method successfully finds a <see cref="T:GTA.Prop"/> and starts the animation;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The entity must not be attached, and must have a drawable with a skeleton data when calling this method, or
            this method will fail to start an animation. The method will lazily create a skeleton and an anim director
            on the <see cref="T:GTA.Entity"/> if either of them does not exist, but the method will fail if the lazy creation
            fails.
            </remarks>
        </member>
        <member name="M:GTA.Entity.StopSynchronizedMapEntityAnim(GTA.Math.Vector3,System.Single,GTA.Model,GTA.AnimationBlendDelta)">
            <summary>
            Stops a synchronized anim on the closest map <see cref="T:GTA.Prop"/> within a test sphere.
            </summary>
            <param name="newPos">The center position for the test sphere.</param>
            <param name="radius">The radius for the test sphere.</param>
            <param name="propModel">The prop model to consider.</param>
            <param name="blendOut">The rate at which the animation will blend out.</param>
            <returns>
            <see langword="true"/> if the method successfully finds a <see cref="T:GTA.Prop"/> and stops the animation;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Entity.HasClearLineOfSightTo(GTA.Entity,GTA.IntersectFlags)">
            <summary>
            Checks if the entity has a clear line of sight to another <see cref="T:GTA.Entity"/>.
            If the 2 entities are <see cref="T:GTA.Ped"/>s then the LOS check is done between the heads of
            the 2 <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="M:GTA.Entity.HasClearLineOfSightToAdjustForCover(GTA.Entity,GTA.IntersectFlags)">
            <summary>
            Checks if the entity has a clear line of sight to another <see cref="T:GTA.Entity"/>.
            If the 2 entities are <see cref="T:GTA.Ped"/>s then the LOS check is done between the heads of
            the 2 <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="M:GTA.Entity.HasClearLineOfSightToInFront(GTA.Entity)">
            <summary>
            Checks if the entity has a clear line of sight to another <see cref="T:GTA.Entity"/>, and the second entity is
            in a 180 sphere in front of this <see cref="T:GTA.Entity"/>.
            If the 2 entities are <see cref="T:GTA.Ped"/>s then the LOS check is done between the heads of
            the 2 <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="P:GTA.Entity.CurrentInteriorProxy">
            <summary>
            Gets the current <see cref="T:GTA.InteriorProxy"/> associated with this <see cref="T:GTA.Entity"/>.
            </summary>
            <returns>
            The current <see cref="T:GTA.InteriorProxy"/> associated with this <see cref="T:GTA.Entity"/> if they are in an interior;
            otherwise, <see langword="null"/>
            </returns>
        </member>
        <member name="P:GTA.Entity.CurrentInteriorRoomKey">
            <summary>
            Gets a room key (name hash) from this <see cref="T:GTA.Entity"/> in that room.
            </summary>
            <returns>
            The name hash key of the room the <see cref="T:GTA.Entity"/> is in if it is in a <see cref="T:GTA.InteriorProxy"/>;
            otherwise, zero.
            </returns>
            <remarks>
            This method gets the name hash from the <see cref="T:GTA.InteriorInstance"/> of <see cref="T:GTA.InteriorProxy"/>
            associated with the <see cref="T:GTA.Entity"/>. The list of rooms are defined in a <c>CMloRoomDef</c> in a corresponding
            ytyp file, and this methods hashes the raw name before returning a value.
            </remarks>
        </member>
        <member name="M:GTA.Entity.MarkAsMissionEntity(System.Boolean)">
            <summary>
            Marks this <see cref="T:GTA.Entity"/> as a mission entity.
            </summary>
            <param name="grabFromOtherScript">
            If <see langword="true"/>, this <see cref="T:GTA.Entity"/> will be grabbed off any script that currently owns it even if the current owner script is not one of SHVDN scripts.
            If <see langword="false"/>, this method won't do anything if the script that owns this <see cref="T:GTA.Entity"/> is not one of SHVDN scripts (e.g. a ysc script).
            </param>
        </member>
        <member name="M:GTA.Entity.MarkAsNoLongerNeeded">
            <summary>
            Marks this <see cref="T:GTA.Entity"/> as no longer needed to keep and lets the game delete it when its too far away.
            You can still manipulate this <see cref="T:GTA.Entity"/> as long as the <see cref="T:GTA.Entity"/> exists.
            </summary>
        </member>
        <member name="M:GTA.Entity.Delete">
            <summary>
            <para>
            Destroys this <see cref="T:GTA.Entity"/> and sets <see cref="P:GTA.PoolObject.Handle"/> to 0.
            If this <see cref="T:GTA.Entity"/> is <see cref="T:GTA.Vehicle"/>, the occupants will not be deleted but their tasks will be cleared.
            </para>
            <para>
            If you need to remove this <see cref="T:GTA.Entity"/> from collections that use <see cref="M:System.Object.Equals(System.Object)"/> for equality comparison (e.g. <see cref="T:System.Collections.Generic.Dictionary`2"/>),
            remove this <see cref="T:GTA.Entity"/> element from these collections before calling this method.
            </para>
            </summary>
        </member>
        <member name="M:GTA.Entity.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Entity"/> exists.
            You should ensure <see cref="T:GTA.Entity"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Entity"/> exists; otherwise, <see langword="false" /></returns>.
            <seealso cref="P:GTA.Entity.IsDead"/>
        </member>
        <member name="M:GTA.Entity.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Equality(GTA.Entity,GTA.Entity)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Inequality(GTA.Entity,GTA.Entity)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Entity.op_Implicit(GTA.Entity)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.Entity"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.EntityAnimationType.Script">
            <summary>
            Includes scripted animations, such as anims initiated by <see cref="M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)"/>,
            <c>TASK_SCRIPTED_ANIMATION</c>, and <c>PLAY_ENTITY_ANIM</c>.
            </summary>
        </member>
        <member name="F:GTA.EntityAnimationType.SyncedScene">
            <summary>
            Include synced scene animations (<c>TASK_SYNCHRONIZED_SCENE</c> and <c>PLAY_SYNCHRONIZED_ENTITY_ANIM</c>).
            </summary>
        </member>
        <member name="F:GTA.EntityAnimationType.Default">
            <summary>
            Includes scripted and synchronized scene anims by default.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Index">
            <summary>
            Gets the bone index of this <see cref="T:GTA.EntityBone"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Tag">
            <summary>
            Gets the bone tag (identifier) of this <see cref="T:GTA.EntityBone"/>.
            If the bone does not exist, <c>-1</c> will be returned.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Owner">
            <summary>
            Gets the owner <see cref="T:GTA.Entity"/> this bone belongs to.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.NextSibling">
            <summary>
            Gets the next sibling bone of this <see cref="T:GTA.EntityBone"/>.
            To check existence of the next sibling bone, you can use <see cref="P:GTA.EntityBone.Index"/> or <see cref="P:GTA.EntityBone.Tag"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Parent">
            <summary>
            Gets the parent bone of this <see cref="T:GTA.EntityBone"/>.
            To check existence of the next sibling bone, you can use <see cref="P:GTA.EntityBone.Index"/> or <see cref="P:GTA.EntityBone.Tag"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Name">
            <summary>
            Gets the bone name of this <see cref="T:GTA.EntityBone"/>.
            If the bone does not exist, <see langword="null"/> will be returned.
            </summary>
            <remarks>
            This property return the bone name as registered in the yft file of corresponding model, but the hashed value of this string value may not match <see cref="P:GTA.EntityBone.Tag"/>.
            For example, <see cref="T:GTA.Ped"/>s have the bone in their skeletons whose name is <c>SKEL_Spine3</c> and whose ID is <c>24818</c>, which doesn't match the hashed value of <c>SKEL_Spine3</c> but matches that of <c>BONETAG_SPINE3</c>.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.IsValid">
            <summary>
            Determines if this <see cref="T:GTA.EntityBone"/> is valid.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.PoseMatrix">
            <summary>
            Gets or sets the dynamic <see cref="T:GTA.Math.Matrix"/> of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.RelativeMatrix">
            <summary>
            Gets the <see cref="T:GTA.Math.Matrix"/> of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.Pose">
            <summary>
            Gets or sets the current pose offset (dynamic position) of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.PoseQuaternion">
            <summary>
            Gets or sets the current pose quaternion of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            <para>
            While you can change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property.
            </para>
            <para>
            Remember to normalize the value you are going to set before setting it to this property as the setter does not normalize the value, just like <c>SET_ENTITY_QUATERNION</c> does not.
            Setting an unnormalized quaternion may result in unintended scale change if the <see cref="T:GTA.Entity"/> is not playing animations that affect this bone or not simulating physics for this bone.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.PoseRotation">
            <summary>
            Gets or sets the current pose rotation of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.Position">
            <summary>
            Gets the position of this <see cref="T:GTA.EntityBone"/> in world coordinates.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Quaternion">
            <summary>
            Gets the world quaternion of this <see cref="T:GTA.EntityBone"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.Rotation">
            <summary>
            Gets the world rotation of this <see cref="T:GTA.EntityBone"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativePosition">
            <summary>
            Gets the position of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.RelativeQuaternion">
            <summary>
            Gets or sets the quaternion of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of from <see cref="P:GTA.EntityBone.RelativeMatrix"/>.
            </summary>
            <remarks>
            <para>
            While you can change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property.
            </para>
            <para>
            Remember to normalize the value you are going to set before setting it to this property as the setter does not normalize the value, just like <c>SET_ENTITY_QUATERNION</c> does not.
            Setting an unnormalized quaternion may result in unintended scale change if the <see cref="T:GTA.Entity"/> is not playing animations that affect this bone or not simulating physics for this bone.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.RelativeRotation">
            <summary>
            Gets the rotation of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of from <see cref="P:GTA.EntityBone.RelativeMatrix"/>.
            </summary>
            <remarks>
            While you can change appearance for <see cref="T:GTA.Ped"/>s or <see cref="T:GTA.Prop"/>s by modifying this property,
            you cannot change appearance for <see cref="T:GTA.Vehicle"/>s by modifying this property.
            </remarks>
        </member>
        <member name="P:GTA.EntityBone.UpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.ForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.EntityBone"/> relative to the world.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeUpVector">
            <summary>
            Gets the vector that points above this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeRightVector">
            <summary>
            Gets the vector that points to the right of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.RelativeForwardVector">
            <summary>
            Gets the vector that points in front of this <see cref="T:GTA.EntityBone"/> relative to the <see cref="T:GTA.Entity"/> its part of.
            </summary>
        </member>
        <member name="P:GTA.EntityBone.FragmentGroupIndex">
            <summary>
            Gets the fragment group index of this <see cref="T:GTA.EntityBone"/>. -1 will be returned if the <see cref="T:GTA.Entity"/> does not exist or <see cref="P:GTA.EntityBone.Index"/> is invalid.
            </summary>
        </member>
        <member name="M:GTA.EntityBone.GetOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position in world coordinates of an offset relative this <see cref="T:GTA.EntityBone"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.EntityBone"/>.</param>
        </member>
        <member name="M:GTA.EntityBone.GetRelativeOffsetPosition(GTA.Math.Vector3)">
            <summary>
            Gets the position relative to the <see cref="T:GTA.Entity"/> of an offset relative this <see cref="T:GTA.EntityBone"/>
            </summary>
            <param name="offset">The offset from this <see cref="T:GTA.EntityBone"/>.</param>
        </member>
        <member name="M:GTA.EntityBone.GetPositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.EntityBone"/> from a world coordinates position
            </summary>
            <param name="worldCoords">The world coordinates.</param>
        </member>
        <member name="M:GTA.EntityBone.GetRelativePositionOffset(GTA.Math.Vector3)">
            <summary>
            Gets the relative offset of this <see cref="T:GTA.EntityBone"/> from an offset from the <see cref="T:GTA.Entity"/>
            </summary>
            <param name="entityOffset">The <see cref="T:GTA.Entity"/> offset.</param>
        </member>
        <member name="M:GTA.EntityBone.AttachToBone(GTA.EntityBone,System.Boolean,System.Boolean)">
            <summary>
            Attaches this <see cref="T:GTA.EntityBone"/> to a <see cref="T:GTA.EntityBone"/> of a different <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="boneOfSecondEntity">
            The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.EntityBone"/> to that belongs to another
            <see cref="T:GTA.Entity"/>.
            </param>
            <param name="activeCollisions">
            If <see langword="true"/> this <see cref="T:GTA.Entity"/> collide with other <see cref="T:GTA.Entity"/>s (does not
            collide with map collision or static <see cref="T:GTA.Prop"/>s that do not have physics/colliders).
            </param>
            <param name="useBasicAttachIfPed">
            Specifies whether the method forces a path, even for <see cref="T:GTA.Ped"/>s, that will use all three rotation
            components, just like how <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Prop"/>s will be placed.
            if <see langword="false"/>, pitch will not work and roll will only work on negative numbers for <see cref="T:GTA.Ped"/>s.
            If the owner <see cref="T:GTA.Entity"/> of this <see cref="T:GTA.EntityBone"/> is a <see cref="T:GTA.Vehicle"/>s or
            <see cref="T:GTA.Prop"/>, setting this parameter to <see langword="true"/> has no effect as they use all
            rotations by default.
            </param>
            <remarks>
            Both <see cref="T:GTA.Entity"/>s must have skeletons if they exist in the game. Otherwise, this method will throw
            a <see cref="T:System.InvalidOperationException"/> or <see cref="T:System.ArgumentException"/> so the method can prevent the
            game from getting crashed for trying to access the null <c>rage::crSkeleton</c> in a virtual function of
            <c>CEntity</c>.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.791.2.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if both of the entities exist but this <see cref="T:GTA.Entity"/> does not have a skeleton.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if both of the entities exist but the <see cref="T:GTA.Entity"/> of <paramref name="boneOfSecondEntity"/>
            does not have a skeleton.
            </exception>
        </member>
        <member name="M:GTA.EntityBone.AttachToBoneYForward(GTA.EntityBone,System.Boolean,System.Boolean)">
            <summary>
            Attaches this <see cref="T:GTA.EntityBone"/> to a <see cref="T:GTA.EntityBone"/> of a different <see cref="T:GTA.Entity"/>
            assuming that the bone is facing along the y axis.
            </summary>
            <param name="boneOfSecondEntity">
            The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.EntityBone"/> to that belongs to another
            <see cref="T:GTA.Entity"/>.
            </param>
            <param name="activeCollisions">
            If <see langword="true"/> this <see cref="T:GTA.Entity"/> collide with other <see cref="T:GTA.Entity"/>s (does not
            collide with map collision or static <see cref="T:GTA.Prop"/>s that do not have physics/colliders).
            </param>
            <param name="useBasicAttachIfPed">
            Specifies whether the method forces a path, even for <see cref="T:GTA.Ped"/>s, that will use all three rotation
            components, just like how <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Prop"/>s will be placed.
            if <see langword="false"/>, pitch will not work and roll will only work on negative numbers for <see cref="T:GTA.Ped"/>s.
            If the owner <see cref="T:GTA.Entity"/> of this <see cref="T:GTA.EntityBone"/> is a <see cref="T:GTA.Vehicle"/>s or
            <see cref="T:GTA.Prop"/>, setting this parameter to <see langword="true"/> has no effect as they use all
            rotations by default.
            </param>
            <remarks>
            Both <see cref="T:GTA.Entity"/>s must have skeletons if they exist in the game. Otherwise, this method will throw
            a <see cref="T:System.InvalidOperationException"/> or <see cref="T:System.ArgumentException"/> so the method can prevent the
            game from getting crashed for trying to access the null <c>rage::crSkeleton</c> in a virtual function of
            <c>CEntity</c>.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.791.2.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if both of the entities exist but this <see cref="T:GTA.Entity"/> does not have a skeleton.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if both of the entities exist but the <see cref="T:GTA.Entity"/> of <paramref name="boneOfSecondEntity"/>
            does not have a skeleton.
            </exception>
        </member>
        <member name="M:GTA.EntityBone.ThrowExceptionIfEitherOfEntityDoesNotHaveSkeleton(GTA.Entity)">
            <summary>
            This method is present since ATTACH_ENTITY_BONE_TO_ENTITY_BONE will crash the game if both entities exist but
            either of them does not have a skeleton.
            </summary>
        </member>
        <member name="M:GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Attaches this <see cref="T:GTA.EntityBone"/> to the transformation matrix (physics capsule) of a different
            <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="secondEntity">
            The <see cref="T:GTA.Entity"/> to attach this <see cref="T:GTA.EntityBone"/> to.
            </param>
            <param name="secondEntityOffset">
            The attach point offset of <paramref name="secondEntity"/> in local space.
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <remarks>
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/remarks"
            />
            </remarks>
        </member>
        <member name="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)">
            <summary>
            Attaches a bone of this <see cref="T:GTA.Entity"/> to a bone of a different <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="boneOfSecondEntity">
            The <see cref="T:GTA.EntityBone"/> to attach this <see cref="T:GTA.EntityBone"/> to that belongs to
            second/another <see cref="T:GTA.Entity"/>.
            </param>
            <param name="secondEntityOffset">
            The attach point offset of <paramref name="boneOfSecondEntity"/> in local space.
            </param>
            <param name="thisEntityOffset">
            The attach point offset of this <see cref="T:GTA.Entity"/> relative to this <see cref="T:GTA.EntityBone"/>.
            </param>
            <param name="rotation">
            The rotation to apply to this <see cref="T:GTA.Entity"/> relative to the <paramref name="rotation"/>.
            </param>
            <param name="physicalStrength">
            The physical strength. Should be in newton.
            Negative values mean that the attachment between the tho <see cref="T:GTA.Entity"/>s
            has the infinite physical strength.
            A medium strength value is 500.
            </param>
            <param name="constrainRotation">
            Specifies whether you wish to constrain rotation as well as position.
            In most cases the answer will be Yes. Unless you want to have a hanging/swinging thing.
            </param>
            <param name="doInitialWarp">
            <para>
            Specifies whether to warp this <see cref="T:GTA.Entity"/> to the specified attach point.
            If <see langword="true"/> or this <see cref="T:GTA.Entity"/> is a <see cref="T:GTA.Ped"/>,
            this method will warp this <see cref="T:GTA.Entity"/> to the specified attach point.
            </para>
            <para>
            Otherwise, If <paramref name="addInitialSeparation"/> is <see langword="true"/>,
            the initial separation will be used as an allowed give in the attachment (e.g. a rope length).
            If <paramref name="addInitialSeparation"/> is <see langword="false"/>,
            this <see cref="T:GTA.Entity"/> will not warp and instead the other one will warp to the attach point.
            </para>
            <para>
            Although setting this parameter to <see langword="true"/> does not make it prevent from warp
            this <see cref="T:GTA.Ped"/> to the specified attach point, you need to set this parameter to
            <see langword="false"/> if you want this <see cref="T:GTA.Entity"/> and the other <see cref="T:GTA.Entity"/> to allow
            separated as long as the initial separation.
            </para>
            </param>
            <param name="addInitialSeparation">
            If <see langword="true"/> and <paramref name="doInitialWarp"/> is <see langword="false"/>,
            this method will not warp either of the two <see cref="T:GTA.Entity"/>s they can get separated as long as
            the initial separation (where the attach point and the two offset determines how high the initial
            separation value is).
            </param>
            <param name="collideWithEntity">
            Specifies whether set of the two <see cref="T:GTA.Entity"/>s will collide with each other after attached.
            They will collide with other ones by default.
            </param>
            <param name="rotationOrder">The rotation order.</param>
            <remarks>
            If a bone index of a <see cref="T:GTA.Entity"/> is invalid, its attach point will fallback to its
            transformation matrix.
            </remarks>
        </member>
        <member name="M:GTA.EntityBone.AttachToEntityPhysicallyOverrideInverseMass(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)">
            <summary>
            <para>
            Attaches a bone of this <see cref="T:GTA.Entity"/> to the transformation matrix (physics capsule) of a different
            <see cref="T:GTA.Entity"/>  with custom override values of inverse mass scale for the two <see cref="T:GTA.Entity"/>s.
            </para>
            <para>
            Only available in v1.0.2944.0 or later game versions.
            </para>
            </summary>
            <param name="secondEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntity']"
            />
            </param>
            <param name="secondEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToEntityPhysically(GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntityOffset']"
            />
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <param name="invMassScaleA">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleA']"
            />
            </param>
            <param name="invMassScaleB">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)"
            path="/param[@name='invMassScaleB']"
            />
            </param>
            <remarks>
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/remarks"
            />
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.2944.0.
            </exception>
        </member>
        <member name="M:GTA.EntityBone.AttachToBonePhysicallyOverrideInverseMass(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Single,System.Single)">
            <summary>
            <para>
            Attaches a bone of this <see cref="T:GTA.Entity"/> to a bone of a different <see cref="T:GTA.Entity"/> with custom
            override values of inverse mass scale for the two <see cref="T:GTA.Entity"/>s.
            </para>
            <para>
            Only available in v1.0.2944.0 or later game versions.
            </para>
            </summary>
            <param name="boneOfSecondEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='boneOfSecondEntity']"
            />
            </param>
            <param name="secondEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='secondEntityOffset']"
            />
            </param>
            <param name="thisEntityOffset">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='thisEntityOffset']"
            />
            </param>
            <param name="rotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotation']"
            />
            </param>
            <param name="physicalStrength">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='physicalStrength']"
            />
            </param>
            <param name="constrainRotation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='constrainRotation']"
            />
            </param>
            <param name="doInitialWarp">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='doInitialWarp']"
            />
            </param>
            <param name="addInitialSeparation">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='addInitialSeparation']"
            />
            </param>
            <param name="collideWithEntity">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='collideWithEntity']"
            />
            </param>
            <param name="rotationOrder">
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/param[@name='rotationOrder']"
            />
            </param>
            <param name="invMassScaleA">
            The inverse mass scale of this <see cref="T:GTA.Entity"/> to multiply.
            </param>
            <param name="invMassScaleB">
            The inverse mass scale of the other <see cref="T:GTA.Entity"/> to multiply.
            </param>
            <remarks>
            <inheritdoc
            cref="M:GTA.EntityBone.AttachToBonePhysically(GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,GTA.EulerRotationOrder)"
            path="/remarks"
            />
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.2944.0.
            </exception>
        </member>
        <member name="M:GTA.EntityBone.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same bone as this <see cref="T:GTA.EntityBone"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same bone as this <see cref="T:GTA.EntityBone"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.EntityBone)">
            <summary>
            Determines if two <see cref="T:GTA.EntityBone"/>s refer to the same bone.
            </summary>
            <param name="left">The left <see cref="T:GTA.EntityBone"/>.</param>
            <param name="right">The right <see cref="T:GTA.EntityBone"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same bone as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.EntityBone)">
            <summary>
            Determines if two <see cref="T:GTA.EntityBone"/>s don't refer to the same bone.
            </summary>
            <param name="left">The left <see cref="T:GTA.EntityBone"/>.</param>
            <param name="right">The right <see cref="T:GTA.EntityBone"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same bone as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Equality(GTA.EntityBone,GTA.Bone)">
            <summary>
            Determines if an <see cref="T:GTA.EntityBone"/> refers to a specific bone.
            </summary>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to check.</param>
            <param name="boneId">The <see cref="T:GTA.Bone"/> ID to check against.</param>
            <returns><see langword="true" /> if <paramref name="entityBone"/> refers to the <paramref name="boneId"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Inequality(GTA.EntityBone,GTA.Bone)">
            <summary>
            Determines if an <see cref="T:GTA.EntityBone"/> doesn't refer to a specific bone.
            </summary>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> to check.</param>
            <param name="boneId">The <see cref="T:GTA.Bone"/> ID to check against.</param>
            <returns><see langword="true" /> if <paramref name="entityBone"/> does not refer to the <paramref name="boneId"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~System.Int32">
            <summary>
            Converts an <see cref="T:GTA.EntityBone"/> to a bone index.
            </summary>
        </member>
        <member name="M:GTA.EntityBone.op_Implicit(GTA.EntityBone)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.EntityBone"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.EntityBoneCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.EntityBone"/> at the specified bone index.
            </summary>
            <param name="boneIndex">The bone index.</param>
        </member>
        <member name="P:GTA.EntityBoneCollection.Item(System.String)">
            <summary>
            <para>
            Gets the <see cref="T:GTA.EntityBone"/> with the specified bone name.
            If the corresponding bone is not found, the <see cref="P:GTA.EntityBone.Index"/> of the returned instance will return <c>-1</c>.
            To access to the chassis bone of <see cref="T:GTA.Vehicle"/>, use <see cref="P:GTA.EntityBoneCollection.Item(System.Int32)"/> with the index <c>0</c> as the chassis bone index and ID will always be <c>0</c> (hardcoded to the exe).
            </para>
            <para>
            This method will try to find the corresponding bone by the hash calculated with <c>(ElfHashUppercased(string) % 0xFE8F + 0x170)</c>,
            where <c>ElfHashUppercased(string)</c> will convert ASCII lowercase characters to uppercase ones before hashing characters.
            </para>
            </summary>
            <param name="boneName">Name of the bone.</param>
            <remarks>
            Registered bone tag values (in the model) may be different from the calculated hashes from corresponding bone names.
            For example, <see cref="T:GTA.Ped"/>s have the bone in their skeletons whose name is <c>SKEL_Spine3</c> and whose ID is <c>24818</c>, which doesn't match the hashed value of <c>SKEL_Spine3</c> but matches that of <c>BONETAG_SPINE3</c>.
            </remarks>
        </member>
        <member name="P:GTA.EntityBoneCollection.Root">
            <summary>
            Gets the root bone of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityBoneCollection.Count">
            <summary>
            Gets the number of bones that this <see cref="T:GTA.Entity"/> has.
            </summary>
        </member>
        <member name="P:GTA.EntityBoneCollection.TransformMatrix">
            <summary>
            Gets the transform matrix that represents the same matrix as <see cref="P:GTA.Entity.Matrix"/> on this <see cref="T:GTA.Entity"/> unless this matrix is modified by some external programs.
            </summary>
            <remarks>
            The matrix that this property reads is used in <see cref="P:GTA.EntityBone.Position"/>, <see cref="P:GTA.EntityBone.Quaternion"/>, and <see cref="P:GTA.EntityBone.Rotation"/>.
            </remarks>
        </member>
        <member name="M:GTA.EntityBoneCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:GTA.Entity"/> has a bone with the specified bone name
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Entity"/> has a bone with the specified bone name; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.EntityBoneCollection.Core">
            <summary>
            Gets the core bone of this <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.Victim">
            <summary>
            Gets the victim <see cref="T:GTA.Entity" />.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.Attacker">
            <summary>
            Gets the attacker <see cref="T:GTA.Entity" />. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.GameTime">
            <summary>
            Gets the game time when the <see cref="P:GTA.EntityDamageRecord.Victim" /> took damage.
            </summary>
        </member>
        <member name="P:GTA.EntityDamageRecord.WeaponHash">
            <summary>
            Gets the weapon hash what the <see cref="P:GTA.EntityDamageRecord.Victim" /> took damage with.
            </summary>
        </member>
        <member name="M:GTA.EntityDamageRecord.Equals(GTA.EntityDamageRecord)">
            <summary>
            Determines if <paramref name="entityDamageRecord"/> has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>.
            </summary>
            <param name="entityDamageRecord">The <see cref="T:System.Object"/> to check.</param>
            <returns><c>true</c> if the <paramref name="entityDamageRecord"/> has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> is an <see cref="T:GTA.EntityDamageRecord"/> and has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><c>true</c> if the <paramref name="obj"/> is an <see cref="T:GTA.EntityDamageRecord"/> and has the same properties as this <see cref="T:GTA.EntityDamageRecord"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.op_Equality(GTA.EntityDamageRecord,GTA.EntityDamageRecord)">
            <summary>
            Determines if two <see cref="T:GTA.EntityDamageRecord"/>s have the same properties.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same properties as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecord.op_Inequality(GTA.EntityDamageRecord,GTA.EntityDamageRecord)">
            <summary>
            Determines if two <see cref="T:GTA.Entity"/>s do not have the same properties.
            </summary>
            <param name="left">The left <see cref="T:GTA.Entity"/>.</param>
            <param name="right">The right <see cref="T:GTA.Entity"/>.</param>
            <returns><c>true</c> if <paramref name="left"/> does not have the same properties as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GTA.EntityDamageRecordCollection.GetAllDamageRecords">
            <summary>
            Gets all the <see cref="T:GTA.EntityDamageRecord" /> at the moment.
            The return array can contain up to 3 <see cref="T:GTA.EntityDamageRecord" />s.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Unknown">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomPermanent">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomParked">
            <summary>
            This value is set when parked vehicles are created.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomScenario">
            <summary>
            This value is set when scenario peds are created.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.RandomAmbient">
            <summary>
            This value is set when ambient entities are created or when SET_ENTITY_AS_NO_LONGER_NEEDED is called.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Permanent">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Mission">
            <summary>
            This value is set when entities are created via native functions or when SET_ENTITY_AS_MISSION_ENTITY is called.
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="F:GTA.EntityPopulationType.Replay">
            <summary>
            The game does not automatically delete entities when this value is set.
            </summary>
        </member>
        <member name="T:GTA.InteriorInstance">
            <summary>
            Represents a interior instance, which is for <c>CInteriorInst</c> (a subclass of <c>CBuilding</c>) and is not used for native functions for interiors.
            </summary>
        </member>
        <member name="M:GTA.InteriorInstance.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.InteriorInstance"/> from the given handle.
            </summary>
            <param name="handle">The interior instance handle.</param>
            <returns>
            Returns a <see cref="T:GTA.InteriorInstance"/> if this handle corresponds to a <see cref="T:GTA.InteriorInstance"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.InteriorInstance"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.InteriorInstance.Handle">
            <summary>
            The handle of this <see cref="T:GTA.Building"/>. This property is provided mainly for safer instance handling, but this is also used for equality comparison.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.InteriorInstance"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Model">
            <summary>
            Gets the model of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Matrix">
            <summary>
            Gets this <see cref="T:GTA.InteriorInstance"/>s matrix which stores position and rotation information.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Rotation">
            <summary>
            Gets the rotation of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <value>
            The yaw, pitch, roll rotation values in degree.
            </value>
        </member>
        <member name="P:GTA.InteriorInstance.Quaternion">
            <summary>
            Gets the quaternion of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorInstance.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.InteriorInstance.InteriorProxy">
            <summary>
            Gets the <see cref="P:GTA.InteriorInstance.InteriorProxy"/> this <see cref="T:GTA.InteriorInstance"/> is loaded from.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.InteriorInstance"/> does not exist or SHVDN could not find the <see cref="P:GTA.InteriorInstance.InteriorProxy"/> pool for some reason.</remarks>
        </member>
        <member name="M:GTA.InteriorInstance.Exists">
            <summary>
            Determines if this <see cref="T:GTA.InteriorInstance"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.InteriorInstance"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same entity as this <see cref="T:GTA.InteriorInstance"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same entity as this <see cref="T:GTA.InteriorInstance"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.op_Equality(GTA.InteriorInstance,GTA.InteriorInstance)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorInstance"/>s refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorInstance"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorInstance"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorInstance.op_Inequality(GTA.InteriorInstance,GTA.InteriorInstance)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorInstance"/>s don't refer to the same entity.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorInstance"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorInstance"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same entity as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:GTA.Model.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.Model.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.Model.IsValid">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Model"/> exists.
            This property is practically the same as <see cref="P:GTA.Model.IsInCdImage"/> since an additional check this method does does not work in practice.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Model"/> is valid; otherwise, <see langword="false" />.
            </value>
            <remarks>
            You may want to use <see cref="P:GTA.Model.IsInCdImage"/> to avoid a redundant additional check,
            where <c>!(~(((modelIndex | 0xFFF0000) &amp; 0xEFFFFFFF) &lt;&lt; 28) &amp; 1)</c> is evaluated (but always evaluated as false in the range of uint32_t)
            after checking if the model index is not <c>0xFFFF</c> (which means the index could not found) just like <see cref="P:GTA.Model.IsInCdImage"/> does.
            </remarks>
        </member>
        <member name="P:GTA.Model.IsInCdImage">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Model"/> is in the CD image.
            This property is practically the same as <see cref="P:GTA.Model.IsValid"/> since its additional check does not work in practice.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is in the CD image; otherwise, <see langword="false" />.
            </value>
            <remarks>
            The hash of a streamed archetype might only be valid at certain locations on the map.
            </remarks>
        </member>
        <member name="P:GTA.Model.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is loaded so it can be spawned.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Model"/> is loaded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCollisionLoaded">
            <summary>
            Gets a value indicating whether the collision for this <see cref="T:GTA.Model"/> is loaded.
            </summary>
            <value>
            <see langword="true" /> if the collision is loaded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious quad bike.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious quad bike; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAmphibiousVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an amphibious vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an amphibious vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsAnimalPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a animal pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a animal pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBicycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a bicycle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a bicycle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBigVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a big vehicle whose vehicle flag has "FLAG_BIG".
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a big vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a bike (either a motorcycle or a bicycle).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a bike; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBlimp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a blimp.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a blimp; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBoat">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a boat.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a boat; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsBus">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an emergency vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an emergency vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a car and not an amphibious one.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a car and not an amphibious one; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsCargobob">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a cargobob.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a cargobob; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsDonk">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a donk car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a donk car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsElectricVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an electric vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an electric vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsEmergencyVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an emergency vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an emergency vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsFemalePed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a female <see cref="T:GTA.Ped"/> model.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Model"/> is a female <see cref="T:GTA.Ped"/> model; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            The return value varies by the gender value of the ped personality struct associated to the ped model if
            this model is a <see cref="T:GTA.Ped"/> model (always <see langword="false"/> if the model is not
            a <see cref="T:GTA.Ped"/> model).
            Without modding <c>pedpersonality.ymt</c>, this property returns <see langword="false"/> if
            <see cref="P:GTA.Model.Hash"/> is an animal hash.
            </remarks>
        </member>
        <member name="P:GTA.Model.IsFragment">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a fragment model.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a fragment model; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsGangPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a gangster pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a gangster pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsHelicopter">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a helicopter.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a helicopter; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsHumanPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a human pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a human pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsJetSki">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a jet ski.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a jet ski; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsLawEnforcementVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a law enforcement vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a law enforcement vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsLowrider">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a regular lowrider.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a regular lowrider; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsMlo">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a movable interior loader (also known as MLO or MILO).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsMalePed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a male <see cref="T:GTA.Ped"/> model.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Model"/> is a male pedestrian;
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The return value varies by the gender value of the ped personality struct associated to the ped model if
            this model is a <see cref="T:GTA.Ped"/> model (always <see langword="false"/> if the model is not
            a <see cref="T:GTA.Ped"/> model).
            Without modding <c>pedpersonality.ymt</c>, this property returns <see langword="true"/> if
            <see cref="P:GTA.Model.Hash"/> is an animal hash.
            </remarks>
        </member>
        <member name="P:GTA.Model.IsMotorcycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a motorcycle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a motorcycle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsOffRoadVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is an off-road vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an off-road vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsPed">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a pedestrian.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a pedestrian; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsPlane">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a plane.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a plane; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsProp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a prop.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a prop; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a quad bike and not an amphibious one.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a quad bike and not an amphibious one; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsSubmarine">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a submarine.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an submarine; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsSubmarineCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a submarine car.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is an submarine car; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTank">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a tank.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a tank; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a train.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a train; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsTrailer">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a trailer.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a trailer; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsVan">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a van.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a van; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.IsVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Model"/> is a vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Model"/> is a vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Model.Dimensions">
            <summary>
            Gets the dimensions of this <see cref="T:GTA.Model"/>.
            </summary>
            <returns>
            <c>rearBottomLeft</c> is the minimum dimensions, which contains the rear bottom left relative offset from the origin of the model,
            <c>frontTopRight</c> is the maximum dimensions, which contains the front top right relative offset from the origin of the model.
            </returns>
            <remarks>
            When you need to fetch dimensions info from large amount of <see cref="T:GTA.Model"/>s in a short time,
            it may be better to use <see cref="M:GTA.Model.GetDimensions(GTA.Math.Vector3@,GTA.Math.Vector3@)"/> instead because creating <see cref="T:System.ValueTuple"/> costs much (about 10x) more than
            using out parameters in .NET Framework and this property creates a <see cref="T:System.ValueTuple"/> instance.
            </remarks>
        </member>
        <member name="M:GTA.Model.GetDimensions(GTA.Math.Vector3@,GTA.Math.Vector3@)">
            <summary>
            <para>Gets the dimensions of this <see cref="T:GTA.Model"/>.</para>
            <para>
            When you need to fetch dimensions info from large amount of <see cref="T:GTA.Model"/>s in a short time, it may be better to use this method instead of <see cref="P:GTA.Model.Dimensions"/>
            because creating <see cref="T:System.ValueTuple"/> costs much (about 10x) more than using out parameters in .NET Framework.
            </para>
            </summary>
            <param name="min">The minimum offset, a.k.a. the rear bottom left relative offset, from the origin of the model.</param>
            <param name="max">The maximum offset, a.k.a. the front top right relative offset, from the origin of the model.</param>
        </member>
        <member name="M:GTA.Model.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.Model.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.Model"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.Model"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Model.RequestCollision">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/>'s collision into memory.
            </summary>
        </member>
        <member name="M:GTA.Model.RequestCollision(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.Model"/>'s collision into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.Model"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.Model"/>'s collision is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Model.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.Model"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="T:GTA.AnimationFlags">
            <summary>
            An enumeration of all the non-IK flags that the scripted animation task class (<c>CTaskScriptedAnimation</c>)
            uses.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Loop">
            <summary>
            Repeat the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.StayInEndFrame">
            <summary>
            Hold on the last frame of the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.RepositionWhenFinished">
            <summary>
            When the animation finishes pop the peds physical representation position to match the visual representations position.
            Note that the animator of the animation must not unwind the animation and must have an independent mover node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.NotInterruptable">
            <summary>
            The task cannot be interrupted by external events.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UpperBodyOnly">
            <summary>
            Only plays the upper body part of the animation.
            Dampens any motion caused by the lower body animation.Note that the animation should include the root node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Secondary">
            <summary>
            The task will run in the secondary task slot. This means it can be used as well as a movement task (for instance).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ReorientWhenFinished">
            <summary>
            When the animation finishes pop the peds physical representation direction to match the visual representations direction.
            Note that the animator of the animation must not unwind the animation and must have an independent mover node.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.AbortOnPedMovement">
            <summary>
            Ends the animation early if the ped attempts to move e.g. if the player tries to move using the controller.
            Can also be used to blend out automatically when an AI ped starts moving by combining it with the <see cref="F:GTA.AnimationFlags.Secondary"/> flag.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.Additive">
            <summary>
            Play back the animation additively. Note that this will only produce sensible results on specifically authored additive animations.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.TurnOffCollision">
            <summary>
            Do not react to collision detection whilst this anim is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.OverridePhysics">
            <summary>
            Do not apply any physics forces whilst the anim is playing.
            Automatically turns off collision, extracts any initial offset provided in the clip and uses per frame mover extraction.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.IgnoreGravity">
            <summary>
            Do not apply gravity while the anim is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExtractInitialOffset">
            <summary>
            Extract an initial offset from the playback position authored by the animator.
            Use this flag when playing back anims on different peds which have been authored to sync with each other.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExitAfterInterrupted">
            <summary>
            Exit the animation task if it is interrupted by another task (ie Natural Motion).
            Without this flag bing set looped animations will restart ofter the NM task
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncIn">
            <summary>
            Sync the anim whilst blending in (use for seamless transitions from walk / run into a full body anim).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncOut">
            <summary>
            Sync the anim whilst blending out (use for seamless transitions from a full body anim into walking / running behaviour).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.TagSyncContinuous">
            <summary>
            Sync all the time (Only useful to synchronize a partial anim e.g. an upper body).
            </summary>
            <remarks>Tag synchronizer flags are for syncing the anim against ped movement (walking / running / etc).</remarks>
        </member>
        <member name="F:GTA.AnimationFlags.ForceStart">
            <summary>
            Force the anim task to start even if the ped is falling / ragdolling / etc.
            Can fix issues with peds not playing their anims immediately after a warp / etc.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseKinematicPhysics">
            <summary>
            Use the kinematic physics mode on the entity for the duration of the anim (it should push other entities out of the way, and not be pushed around by players / etc).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseMoverExtraction">
            <summary>
            Updates the peds capsule position every frame based on the animation.
            Use in conjunction with <see cref="F:GTA.AnimationFlags.UseKinematicPhysics"/> to create characters that cannot be pushed off course by other entities / geometry / etc whilst playing the anim.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.HideWeapon">
            <summary>
            Indicates that the ped's weapon should be hidden while this animation is playing.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.EndsInDeadPose">
            <summary>
            When the anim ends, kill the ped and use the currently playing anim as the dead pose.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.RagdollOnCollision">
            <summary>
            If the peds ragdoll bounds make contact with something physical (that isn't flat ground) activate the ragdoll and fall over.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.DontExitOnDeath">
            <summary>
            Currently used only on secondary anim tasks. Secondary anim tasks will end automatically when the ped dies. Setting this flag stops that from happening.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.AbortOnWeaponDamage">
            <summary>
            Allow aborting from damage events (including non-ragdoll damage events) even when blocking other ai events using <see cref="F:GTA.AnimationFlags.NotInterruptable"/>.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.DisableForcedPhysicsUpdate">
            <summary>
            Prevent adjusting the capsule on the enter state (useful if script is doing a sequence of scripted anims and they are known to more or less stand still).
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ProcessAttachmentsOnStart">
            <summary>
            Force the attachments to be processed at the start of the clip.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.ExpandPedCapsuleFromSkeleton">
            <summary>
            Expands the capsule to the extents of the skeleton.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseAlternativeFirstPersonAnim">
            <summary>
            Plays an alternative first person version of the clip on the player when in first person mode.
            The first person clip must be in the same dictionary, and be named the same as the anim you're playing, but with <c>_FP</c> appended on the end.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.BlendOutWRTLastFrame">
            <summary>
            Start blending out the anim early, so that the blend out duration completes at the end of the animation.
            </summary>
        </member>
        <member name="F:GTA.AnimationFlags.UseFullBlending">
            <summary>
            Use full blending for this anim and override the heading/position adjustment in CTaskScriptedAnimation::CheckIfClonePlayerNeedsHeadingPositionAdjust(),
            so that the game doesn't correct errors (special case such as scrip-side implemented AI tasks, i.e. diving)
            </summary>
        </member>
        <member name="T:GTA.AnimationIKControlFlags">
            <summary>
            An enumeration of all the IK flags that the scripted animation task class (<c>CTaskScriptedAnimation</c>) uses.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.None">
            <summary>
            No Ik control during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableLegIK">
            <summary>
            Disable leg ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableArmIK">
            <summary>
            Disable arm ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableHeadIK">
            <summary>
            Disable head ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableTorsoIK">
            <summary>
            Disable torso ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableTorsoReactIK">
            <summary>
            Disable torso react ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseLegAllowTags">
            <summary>
            Use anim leg allow tags to determine when leg ik is enabled.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseLegBlockTags">
            <summary>
            Use anim leg block tags to determine when leg ik is disabled.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseArmAllowTags">
            <summary>
            Use anim arm allow tags to determine when ik is enabled.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseArmBlockTags">
            <summary>
            Use anim arm block tags to determine when ik is disabled.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.ProcessWeaponHandGrip">
            <summary>
            Process the left hand weapon grip ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseFirstPersonArmLeft">
            <summary>
            Use first person ik setup for left arm (cannot be used with AIK_DISABLE_ARM_IK).
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.UseFirstPersonArmRight">
            <summary>
            Use first person ik setup for right arm (cannot be used with AIK_DISABLE_ARM_IK).
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.DisableTorsoVehicleIK">
            <summary>
            Disable torso vehicle ik during the task.
            </summary>
        </member>
        <member name="F:GTA.AnimationIKControlFlags.LinkedFacial">
            <summary>
            Searches the dictionary of the clip being played for another clip with the _facial suffix to be played as a facial animation.
            </summary>
        </member>
        <member name="T:GTA.Bone">
            <summary>
            An enumeration of possible bone tag values for <see cref="T:GTA.Ped"/>, which is for <c>eAnimBoneTag</c>.
            </summary>
            <remarks>
            This enum has normal bone tag values in the range of uint16_t and has <c>BONETAG_INVALID</c> with the value -1 (0xFFFFFFFF).
            <c>eAnimBoneTag</c> specifies 32 bit type for its enum subtype.
            rage::parMemberEnum itself supports 32 bit, 16 bit, and 8 bit values for enums in all RAGE games until GTA V (64 bit enums are supported starting from RDR3).
            </remarks>
        </member>
        <member name="F:GTA.Bone.Invalid">
            <summary>
            The corresponding bone tag value for <c>BONETAG_INVALID</c>,
            which is used in some meta/xml files such as weapon meta files and <c>damages.meta</c>.
            </summary>
        </member>
        <member name="T:GTA.CombatAttributes">
            <summary>
            An enumeration of known combat attributes (combat behavior flags) for the <see cref="T:GTA.Ped"/>,
            which is used to set or unset the combat attributes on a <c>CPedIntelligence</c> of <c>CPed</c>.
            </summary>
            <remarks>
            You can check if names of this enum are included in the exe by searching the dumped exe for hashed values
            of names like <c>BF_[enum name]</c> without case conversion (for example, search the dumped exe for 0x61C7368E,
            which is the hashed value of <c>BF_CanUseCover</c>).
            The corresponding enum name in the exe is <c>CCombatData__BehaviourFlags</c> (the joaat hash value is
            0xE8E7201, where the original name is <c>CCombatData::BehaviourFlags</c> but ':' characters are replaced with
            '_').
            </remarks>
        </member>
        <member name="F:GTA.CombatAttributes.CanUseCover">
            <summary>
            AI will only use cover if this is set.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanUseVehicles">
            <summary>
            AI will only use <see cref="T:GTA.Vehicle"/>s if this is set.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanDoDrivebys">
            <summary>
            AI will only driveby from a <see cref="T:GTA.Vehicle"/> if this is set.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanLeaveVehicle">
            <summary>
            Will be forced to stay in a <see cref="T:GTA.Vehicle"/> if this isn't set.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanUseDynamicStrafeDecisions">
            <summary>
            The <see cref="T:GTA.Ped"/> can make decisions on whether to strafe or not based on distance to destination,
            recent bullet events, etc.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.AlwaysFight">
            <summary>
            <see cref="T:GTA.Ped"/> will always fight upon getting threat response task.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.FleeWhilstInVehicle">
            <summary>
            If in combat and in a <see cref="T:GTA.Vehicle"/>, the <see cref="T:GTA.Ped"/> will flee rather than attacking.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.WillScanForDeadPeds">
            <summary>
            <see cref="T:GTA.Ped"/>s will scan for and react to dead <see cref="T:GTA.Ped"/>s found
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.JustSeekCover">
            <summary>
            The <see cref="T:GTA.Ped"/> will seek cover only.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.BlindFireWhenInCover">
            <summary>
            <see cref="T:GTA.Ped"/> will only blind fire when in cover.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.Aggressive">
            <summary>
            <see cref="T:GTA.Ped"/> may advance.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanInvestigate">
            <summary>
            <see cref="T:GTA.Ped"/> can investigate events such as distant gunfire, footsteps, explosions etc.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.HasRadio">
            <summary>
            <see cref="T:GTA.Ped"/> can use a radio to call for backup (happens after a reaction).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.AlwaysFlee">
            <summary>
            <see cref="T:GTA.Ped"/> will always flee upon getting threat response task.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanTauntInVehicle">
            <summary>
            <see cref="T:GTA.Ped"/> can do unarmed taunts in <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanChaseTargetOnFoot">
            <summary>
            <see cref="T:GTA.Ped"/> will be able to chase their targets if both are on foot
            and the target is running away.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.WillDragInjuredPedsToSafety">
            <summary>
            <see cref="T:GTA.Ped"/> can drag injured <see cref="T:GTA.Ped"/>s to safety.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.RequiresLosToShoot">
            <summary>
            <see cref="T:GTA.Ped"/> will require LOS to the target it is aiming at before shooting.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseProximityFiringRate">
            <summary>
            <see cref="T:GTA.Ped"/> is allowed to use proximity based fire rate
            (increasing fire rate at closer distances).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableSecondaryTarget">
            <summary>
            Normally <see cref="T:GTA.Ped"/>s can switch briefly to a secondary target in combat,
            setting this will prevent that.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableEntryReactions">
            <summary>
            This will disable the flinching combat entry reactions for <see cref="T:GTA.Ped"/>s,
            instead only playing the turn and aim anims.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PerfectAccuracy">
            <summary>
            Force <see cref="T:GTA.Ped"/> to be 100% accurate in all situations.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanUseFrustratedAdvance">
            <summary>
            If we don't have cover and can't see our target it's possible we will advance,
            even if the target is in cover.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.MoveToLocationBeforeCoverSearch">
            <summary>
            This will have the <see cref="T:GTA.Ped"/> move to defensive areas and within attack windows
            before performing the cover search.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.MaintainMinDistanceToTarget">
            <summary>
            <see cref="T:GTA.Ped"/> will try to maintain a min distance to the target, even if using defensive areas
            (currently only for cover finding + usage).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanUsePeekingVariations">
            <summary>
            Allows <see cref="T:GTA.Ped"/> to use steamed variations of peeking anims.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisablePinnedDown">
            <summary>
            Disables pinned down behaviors.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisablePinDownOthers">
            <summary>
            Disables pinning down others.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableBulletReactions">
            <summary>
            Disables bullet reactions.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanBust">
            <summary>
            Allows <see cref="T:GTA.Ped"/> to bust the player.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.IgnoredByOtherPedsWhenWanted">
            <summary>
            This <see cref="T:GTA.Ped"/> is ignored by other <see cref="T:GTA.Ped"/>s when wanted.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanCommandeerVehicles">
            <summary>
            <see cref="T:GTA.Ped"/> is allowed to "jack" <see cref="T:GTA.Vehicle"/>s when needing to chase a target in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanFlank">
            <summary>
            <see cref="T:GTA.Ped"/> is allowed to flank.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.SwitchToAdvanceIfCantFindCover">
            <summary>
            <see cref="T:GTA.Ped"/> will switch to advance if they can't find cover.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.SwitchToDefensiveIfInCover">
            <summary>
            <see cref="T:GTA.Ped"/> will switch to defensive if they are in cover.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.ClearPrimaryDefensiveAreaWhenReached">
            <summary>
            <see cref="T:GTA.Ped"/> will clear their primary defensive area when it is reached.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanFightArmedPedsWhenNotArmed">
            <summary>
            <see cref="T:GTA.Ped"/> is allowed to fight armed <see cref="T:GTA.Ped"/>s when not armed.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.EnableTacticalPointsWhenDefensive">
            <summary>
            <see cref="T:GTA.Ped"/> is not allowed to use tactical points if set to use defensive movement (will only use cover).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableCoverArcAdjustments">
            <summary>
            <see cref="T:GTA.Ped"/> cannot adjust cover arcs when testing cover safety (atm done on corner cover points
            when <see cref="T:GTA.Ped"/> usingdefensive area + no LOS).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseEnemyAccuracyScaling">
            <summary>
            <see cref="T:GTA.Ped"/> may use reduced accuracy with large number of enemies attacking the same local player target.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanCharge">
            <summary>
            <see cref="T:GTA.Ped"/> is allowed to charge the enemy position.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseVehicleAttack">
            <summary>
            Use the vehicle attack mission during combat (only works on driver).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseVehicleAttackIfVehicleHasMountedGuns">
            <summary>
            Use the vehicle attack mission during combat if the <see cref="T:GTA.Vehicle"/> has mounted guns (only works on driver).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.AlwaysEquipBestWeapon">
            <summary>
            Always equip best weapon in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanSeeUnderwaterPeds">
            <summary>
            Ignores in water at depth visibility check.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableAimAtAITargetsInHelis">
            <summary>
            Will prevent this <see cref="T:GTA.Ped"/> from aiming at any AI targets that are in helicopters.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableSeekDueToLineOfSight">
            <summary>
            Disables <see cref="T:GTA.Ped"/>s seeking due to no clear line of sight.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableFleeFromCombat">
            <summary>
            To be used when releasing missions <see cref="T:GTA.Ped"/>s if we don't want them fleeing from combat
            (mission <see cref="T:GTA.Ped"/>s already prevent flee).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableTargetChangesDuringVehiclePursuit">
            <summary>
            Disables target changes during vehicle pursuit.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanThrowSmokeGrenade">
            <summary>
            <see cref="T:GTA.Ped"/> may throw a smoke grenade at player loitering in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.ClearAreaSetDefensiveIfDefensiveCannotBeReached">
            <summary>
            Will clear a set defensive area if that area cannot be reached.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableBlockFromPursueDuringVehicleChase">
            <summary>
            Disable block from pursue during vehicle chases.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableSpinOutDuringVehicleChase">
            <summary>
            Disable spin out during vehicle chases.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableCruiseInFrontDuringBlockDuringVehicleChase">
            <summary>
            Disable cruise in front during block during vehicle chases.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.CanIgnoreBlockedLosWeighting">
            <summary>
            Makes it more likely that the <see cref="T:GTA.Ped"/> will continue targeting a target with blocked los for a few seconds.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableReactToBuddyShot">
            <summary>
            Disables the react to buddy shot behaviour.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PreferNavmeshDuringVehicleChase">
            <summary>
            Prefer pathing using navmesh over road nodes.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.AllowedToAvoidOffroadDuringVehicleChase">
            <summary>
            Ignore road edges when avoiding.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PermitChargeBeyondDefensiveArea">
            <summary>
            Permits <see cref="T:GTA.Ped"/> to charge a target outside the assigned defensive area.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseRocketsAgainstVehiclesOnly">
            <summary>
            This <see cref="T:GTA.Ped"/> will switch to an RPG if target is in a <see cref="T:GTA.Vehicle"/>,
            otherwise will use alternate weapon.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableTacticalPointsWithoutClearLos">
            <summary>
            Disables <see cref="T:GTA.Ped"/>s moving to a tactical point without clear los.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisablePullAlongsideDuringVehicleChase">
            <summary>
            Disables pull alongside during vehicle chase.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.DisableAllRandomsFlee">
            <summary>
            If set on a <see cref="T:GTA.Ped"/>, they will not flee when all random <see cref="T:GTA.Ped"/>s flee is
            set to <see langword="true"/>
            (they are still able to flee due to other reasons).
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.WillGenerateDeadPedSeenScriptEvents">
            <summary>
            This <see cref="T:GTA.Ped"/> will send out a script DeadPedSeenEvent when they see a dead <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseMaxSenseRangeWhenReceivingEvents">
            <summary>
            This will use the receiving <see cref="T:GTA.Ped"/>s sense range rather than the range supplied to the communicate event.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.RestrictInVehicleAimingToCurrentSide">
            <summary>
            When aiming from a <see cref="T:GTA.Vehicle"/> the <see cref="T:GTA.Ped"/> will only aim at targetson his side
            of the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.UseDefaultBlockedLosPositionAndDirection">
            <summary>
            LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PreferAirCombatWhenInAircraft">
            <summary>
            <see cref="T:GTA.Ped"/>s flying aircraft will prefer to target other aircraft over entities on the ground.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.AllowDogFighting">
            <summary>
            Allow <see cref="T:GTA.Ped"/>s flying aircraft to use dog fighting behaviours.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PreferNonAircraftTargets">
            <summary>
            This will make the weight of targets who aircraft vehicles be reduced greatly compared to targets
            on foot or in ground based vehicles.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.PreferKnownTargetsWhenCombatClosestTarget">
            <summary>
            When <see cref="T:GTA.Ped"/>s are tasked to go to combat, they keep searching for a known target for a while
            before forcing an unknown one.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.ForceCheckAttackAngleForMountedGuns">
            <summary>
            Only allow mounted weapons to fire if within the correct attack angle (default 25-degree cone).
            On a flag in order to keep exiting behaviour and only fix in specific cases.
            </summary>
        </member>
        <member name="F:GTA.CombatAttributes.BlockFireForVehiclePassengerMountedGuns">
            <summary>
            Blocks the firing state for passenger-controlled mounted weapons.
            </summary>
            <remarks>
            The flags <see cref="F:GTA.CombatAttributes.UseVehicleAttack"/> and <see cref="F:GTA.CombatAttributes.UseVehicleAttackIfVehicleHasMountedGuns"/>
            only work for drivers.
            </remarks>
        </member>
        <member name="T:GTA.CombatFloatAttributes">
            <summary>
            An enumeration of known combat float attributes for <see cref="T:GTA.Ped"/>,
            </summary>
            <remarks>
            Almost all the initial values can be set for configs that this enum lists with <c>CCombatInfo</c> configs,
            which are instantiated from the <c>combatbehaviour.meta</c> file.
            </remarks>
        </member>
        <member name="F:GTA.CombatFloatAttributes.BlindFireChance">
            <summary>
            Chance to blind fire from cover, range is 0.0-1.0 (default is 0.05 for civilians, law doesn't blind fire).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.BurstDurationInCover">
            <summary>
            How long each burst from cover should last (default is 2.0).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.MaxShootingDistance">
            <summary>
            The maximum distance the <see cref="T:GTA.Ped"/> will try to shoot from (will override weapon range if set to
            anything > 0.0, default is -1.0)
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TimeBetweenBurstsInCover">
            <summary>
            How long to wait, in cover, between firing bursts (&lt; 0.0 will disable firing, unless cover fire is
            requested, default is 1.25).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TimeBetweenPeeks">
            <summary>
            How long to wait before attempting to peek again (default is 10.0).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.StrafeWhenMovingChance">
            <summary>
            A chance to strafe to cover, range is 0.0-1.0 (0.0 will force them to run, 1.0 will force strafe and
            shoot, default is 1.0).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.WeaponAccuracy">
            <summary>
            A chance to shoot at exactly where the <see cref="T:GTA.Ped"/> points at.
            This attribute is for the float value that <see cref="P:GTA.Ped.Accuracy"/> actually reads/writes.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.FightProficiency">
            <summary>
            How well an opponent can melee fight, range is 0.0-1.0.
            </summary>
            <remarks>
            Cannot be set in <c>combatbehaviours.meta</c>.
            </remarks>
        </member>
        <member name="F:GTA.CombatFloatAttributes.WalkWhenStrafingChance">
            <summary>
            The possibility of a <see cref="T:GTA.Ped"/> walking while strafing rather than jog/run, range is 0.0-1.0
            (default is 0.0).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HeliSpeedModifier">
            <summary>
            The speed modifier when driving a heli in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HeliSensesRange">
            <summary>
            The range of the <see cref="T:GTA.Ped"/>'s senses (sight, identification, hearing) when in a heli.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.AttackWindowDistanceForCover">
            <summary>
            The distance the game will use for cover based behaviour in attack windows Default is -1.0 (disabled),
            range is -1.0 to 150.0.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TimeToInvalidateInjuredTarget">
            <summary>
            How long to stop combat an injured target if there is no other valid target, if target is player in
            singleplayer, this will happen indefinitely unless explicitly disabled by setting to 0.0,
            default = 10.0 range = 0-50.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.MinimumDistanceToTarget">
            <summary>
            Min distance the <see cref="T:GTA.Ped"/> will use if <see cref="F:GTA.CombatAttributes.MaintainMinDistanceToTarget"/>
            is set, default 5.0.
            </summary>
            <remarks>
            There was the note "(currently only for cover search + usage)" in a official scripting header, but it is
            unknown when the word "currently" in the note specifies.
            </remarks>
        </member>
        <member name="F:GTA.CombatFloatAttributes.BulletImpactDetectionRange">
            <summary>
            The range at which the <see cref="T:GTA.Ped"/> will detect the bullet impact event.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.AimTurnThreshold">
            <summary>
            The threshold at which the <see cref="T:GTA.Ped"/> will perform an aim turn.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.AutomobileSpeedModifier">
            <summary>
            The speed modifier when driving an automobile in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TriggerChargeTimeFar">
            <summary>
            How long to wait before charging a close target hiding in cover.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TriggerChargeTimeNear">
            <summary>
            How long to wait before charging a distant target hiding in cover.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.MaxDistanceToHearEvents">
            <summary>
            Max distance <see cref="T:GTA.Ped"/>s can hear an event from, even if the sound is louder.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.MaxDistanceToHearEventsUsingLOS">
            <summary>
            Max distance <see cref="T:GTA.Ped"/>s can hear an event from, even if the sound is louder if the <see cref="T:GTA.Ped"/>
            is using LOS to hear events (<see cref="F:GTA.PedConfigFlagToggles.CheckLoSForSoundEvents"/>).
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HomingRocketBreakLockAngle">
            <summary>
            Angle between the rocket and target where lock-on will stop, range is 0.0-1.0, (default is 0.2), the bigger
            the number the easier to break lock.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HomingRocketBreakLockAngleClose">
            <summary>
            Angle between the rocket and target where lock-on will stop, when rocket is within
            <see cref="F:GTA.CombatFloatAttributes.HomingRocketBreakLockCloseDistance"/>, range is 0.0-1.0, (default is 0.6), the bigger the number
            the easier to break lock.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HomingRocketBreakLockCloseDistance">
            <summary>
            Distance at which the game check <see cref="F:GTA.CombatFloatAttributes.HomingRocketBreakLockAngleClose"/> rather than
            <see cref="F:GTA.CombatFloatAttributes.HomingRocketBreakLockAngle"/>.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.HomingRocketTurnRateModifier">
            <summary>
             Alters homing characteristics defined for the weapon (1.0 is default, &lt;1.0 slow turn rates, &gt;1.0
             speed them up.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.TimeBetweenAggressiveMovesDuringVehicleChase">
            <summary>
            Sets the time delay between aggressive moves during vehicle chases. -1.0 means use random values,
            0.0 means never.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.MaxVehicleTurretFiringRange">
            <summary>
            Max firing range for a <see cref="T:GTA.Ped"/> in vehicle turret seat.
            </summary>
        </member>
        <member name="F:GTA.CombatFloatAttributes.WeaponDamageModifier">
            <summary>
            Multiplies the weapon damage dealt by the <see cref="T:GTA.Ped"/>, range is 0.0-10.0 (default is 1.0).
            </summary>
        </member>
        <member name="F:GTA.CombatMovement.Stationary">
            <summary>
            Stands totally still during combat.
            </summary>
        </member>
        <member name="F:GTA.CombatMovement.Defensive">
            <summary>
            Seeks a defensive position.
            </summary>
        </member>
        <member name="F:GTA.CombatMovement.WillAdvance">
            <summary>
            Will advance forward in combat.
            </summary>
        </member>
        <member name="F:GTA.CombatMovement.WillRetreat">
            <summary>
            Will retreat if the enemy gets too close.
            </summary>
        </member>
        <member name="F:GTA.CombatRange.Near">
            <summary>
            Keeps within 5-15m.
            </summary>
        </member>
        <member name="F:GTA.CombatRange.Medium">
            <summary>
            Keeps within 7-30m.
            </summary>
        </member>
        <member name="F:GTA.CombatRange.Far">
            <summary>
            Keeps within 15-40m.
            </summary>
        </member>
        <member name="F:GTA.CombatRange.VeryFar">
            <summary>
            Keeps within 22-45m.
            </summary>
        </member>
        <member name="T:GTA.DecisionMaker">
            <summary>
            Represents a decision maker for <see cref="T:GTA.Ped"/>s, which determines what and how <see cref="T:GTA.Ped"/>s should response to events.
            Events can cause <see cref="T:GTA.Ped"/>s to start certain tasks. You can see how decision makers are configured in <c>events.meta</c>.
            </summary>
        </member>
        <member name="P:GTA.DecisionMaker.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.DecisionMaker"/>.
            </summary>
        </member>
        <member name="P:GTA.DecisionMaker.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.DecisionMaker"/>.
            </summary>
        </member>
        <member name="P:GTA.DecisionMaker.IsNullValue">
            <summary>
            Indicates whether <see cref="P:GTA.DecisionMaker.Hash"/> of this <see cref="T:GTA.DecisionMaker"/> is set to <c>0</c>, which can be created by <see langword="default"/> operator.
            </summary>
        </member>
        <member name="T:GTA.DecisionMakerTypeHash">
            <summary>
            An enumeration of possible decision maker type hashes.
            The max number of decision makers are hardcoded to <c>25</c>.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Player">
            <summary>
            The player (<c>"PLAYER"</c>) decision maker type hash, which has no event responses just like <see cref="F:GTA.DecisionMakerTypeHash.Empty"/> unless modified.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Cop">
            <summary>
            The cop (<c>"COP"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Fireman">
            <summary>
            The fireman/firefighter (<c>"FIREMAN"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Medic">
            <summary>
            The on-duty paramedics (<c>"MEDIC"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.OffDutyEmt">
            <summary>
            The off duty Emergency Medical Technician (<c>"OFFDUTY_EMT"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Security">
            <summary>
            The security (<c>"SECURITY"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Swat">
            <summary>
            The NOOSE (<c>"SWAT"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Empty">
            <summary>
            The decision maker type hash which is empty (<c>"EMPTY"</c>).
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Base">
            <summary>
            The decision maker type hash which is the base/parent of certain other decision makers (<c>"BASE"</c>).
            This decision maker is the parent of <see cref="F:GTA.DecisionMakerTypeHash.Cop"/>, <see cref="F:GTA.DecisionMakerTypeHash.Security"/>, <see cref="F:GTA.DecisionMakerTypeHash.Default"/>, and <see cref="F:GTA.DecisionMakerTypeHash.Gang"/>.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Default">
            <summary>
            The default (<c>"DEFAULT"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Gang">
            <summary>
            The gang (<c>"GANG"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Family">
            <summary>
            The decision maker type hash for The Families (<c>"FAMILY"</c>). The parent of this decision maker is <see cref="F:GTA.DecisionMakerTypeHash.Gang"/>.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Gull">
            <summary>
            The gull (<c>"GULL"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Hen">
            <summary>
            The hen (<c>"HEN"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Rat">
            <summary>
            Gets the rat (<c>"RAT"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Fish">
            <summary>
            Gets the fish (<c>"FISH"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Shark">
            <summary>
            Gets the shark (<c>"SHARK"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Horse">
            <summary>
            Gets the horse (<c>"HORSE"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.DomesticAnimal">
            <summary>
            Gets the domestic animal (<c>"DomesticAnimal"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Dog">
            <summary>
            Gets the domestic animal (<c>"DOG"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.WildAnimal">
            <summary>
            The wild animal  (<c>"WildAnimal"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Cougar">
            <summary>
            The cougar/mountain lion (<c>"Cougar"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.SmallAnimal">
            <summary>
            The small animal (<c>"SmallAnimal"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Cat">
            <summary>
            The cat (<c>"Cat"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="F:GTA.DecisionMakerTypeHash.Rabbit">
            <summary>
            The rabbit (<c>"Rabbit"</c>) decision maker type hash.
            </summary>
        </member>
        <member name="T:GTA.EventType">
            <summary>
            An enumeration of all possible event types except for network and error events.
            </summary>
        </member>
        <member name="F:GTA.EventType.Incapacitated">
            <summary>
            Not available in 1.0.1737.6 or earlier.
            </summary>
        </member>
        <member name="F:GTA.EventType.ShockingBrokenGlass">
            <summary>
            Not available in 1.0.1737.6 or earlier.
            </summary>
        </member>
        <member name="T:GTA.FleeAttributes">
            <summary>
            An enumeration of known flee attributes for the <see cref="T:GTA.Ped"/>,
            which is used to set or unset the flee attributes on a <c>CPedIntelligence</c> of <c>CPed</c>.
            </summary>
            <remarks>
            You can set or unset multiple attributes as <c>SET_PED_FLEE_ATTRIBUTES</c> set or unset the bits
            of flee attributes by just using simple bitwise operation (adds bits if the bool parameter is set,
            removes bits if the bool is not set).
            </remarks>
        </member>
        <member name="F:GTA.FleeAttributes.CanScream">
            <remarks>
            Set by default on <see cref="T:GTA.Ped"/> creation if the ped model definition, which is instantiated from
            a <c>peds.ymt</c> or <c>peds.meta</c> file (exists as a <c>CPedModelInfo</c> in the game memory), has
            a reference to <c>CTaskDataInfo</c> (defined in <c>taskdata.meta</c>) where the <c>Flags</c> field has
            <c>CanScreamDuringFlee</c>.
            </remarks>
        </member>
        <member name="F:GTA.FleeAttributes.PreferPavements">
            <remarks>
            Set by default on <see cref="T:GTA.Ped"/> creation if the ped model definition, which is instantiated from
            a <c>peds.ymt</c> or <c>peds.meta</c> file (exists as a <c>CPedModelInfo</c> in the game memory), has
            a reference to <c>CTaskDataInfo</c> (defined in <c>taskdata.meta</c>) where the <c>Flags</c> field has
            <c>PreferFleeOnPavements</c>.
            </remarks>
        </member>
        <member name="T:GTA.FollowNavMeshFlags">
            <summary>
            Set of flags which may be passed in to <see cref="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)"/>
            and <see cref="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)"/>.
            The latter overload takes 3 additional parameters, which in some cases must contain values required for the extra functionality -
            where this is the case it is described in the individual documents of the flags.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.NoStopping">
            <summary>
            Will ensure the <see cref="T:GTA.Ped"/> continues to move whilst waiting for the path to be found,
            and will not slow down at the end of their route.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.AdvancedSlideToCoordAndAchieveHeadingAtEnd">
            <summary>
            Performs a slide-to-coord at the and of the task.
            This requires that the parameter <c>slideToCoordHeading</c> is set correctly.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.GoFarAsPossibleIfTargetNavmeshNotLoaded">
            <summary>
            If the navmesh is not loaded in under the target position, then this will cause the ped to get as close as is possible on whatever navmesh is loaded.
            The navmesh must still be loaded at the path start.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.AllowSwimmingUnderwater">
            <summary>
            Will allow navigation underwater - by default this is not allowed.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.KeepToPavements">
            <summary>
            Will only allow navigation on pavements.
            If the path starts or ends off the pavement, the command will fail.
            Likewise if no pavement-only route can be found even although the start and end are on pavement.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.NeverEnterWater">
            <summary>
            Prevents the path from entering water at all.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.DontAvoidObjects">
            <summary>
            Disables object-avoidance for this path.
            The ped may still make minor steering adjustments to avoid objects, but will not pathfind around them.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.AdvancedUseMaxSlopeNavigable">
            <summary>
            Specifies that the navmesh route will only be able to traverse up slopes which are under the angle specified in the parameter <c>maxSlopeNavigable</c>.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.AccurateWalkRunStart">
            <summary>
            The entity will look ahead in its path for a longer distance to make the walk/run start go more in the right direction.
            Especially useful when ped start from inside an object boundaries but has to be used carefully,
            the ped might be more prone to walk into things during the walk/runstart with this flag set.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.DontAvoidPeds">
            <summary>
            Disables ped-avoidance for this path while we move.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.DontAdjustTargetPosition">
            <summary>
            If target pos is inside the bounding box of an object it will otherwise be pushed out.
            This flag should be used with extreme caution. Use only if asked specifically to use this.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.SuppressExactStop">
            <summary>
            Turns off the default behaviour, which is to stop exactly at the target position.
            Occasionally this can cause footsliding/skating problems.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.AdvancedUseClampMaxSearchDistance">
            <summary>
            Prevents the path-search from finding paths outside of this search distance.
            This can be used to prevent peds from finding long undesired routes.
            The value the parameter <c>clampMaxSearchDistance</c> must be set, and this value must be between 1 and 255 (corresponds to game units).
            The seach area is limited to an axis aligned box containing a sphere of the given radius.
            </summary>
        </member>
        <member name="F:GTA.FollowNavMeshFlags.PullFromEdgeExtra">
            <summary>
            Pulls out the paths from edges at corners for a longer distance, to prevent peds walking into stuff.
            This could in rare cases generate bigger quirks in the paths so use only when it is necessary.
            </summary>
        </member>
        <member name="F:GTA.ForceAnimAIUpdateState.CutsceneExit">
            <summary>
            Sets additional reset flags to do CameraAIUpdate and PostCameraAnimUpdate on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.Formation.Loose">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:GTA.HelmetPropFlags">
            <summary>
            An enumeration of possible helmet prop flags for <see cref="T:GTA.Ped"/>s.
            This flags will restrict helmet types using AND bitwise, so no helmet props will be used if none of the available helmet props are found that match all the flags specified.
            The original enum name should be <c>ePedCompFlags</c>, but this enum uses <c>HelmetPropFlags</c> instead of <c>PedComponentFlags</c>
            as this enum is only used for native functions for ped helmets in practice.
            </summary>
            <remarks>
            You can check if the listed enum names are correct by searching the dumped exe for hashed values like <c>PV_FLAG_[enum name (snake case)]</c>
            (<c>PV</c> would stand for PedVariation).
            </remarks>
        </member>
        <member name="F:GTA.HelmetPropFlags.Armored">
            <summary>
            Specifies helmets that disables the critical hit on the <see cref="T:GTA.Ped"/> (regardless of <see cref="P:GTA.Ped.CanSufferCriticalHits"/>).
            </summary>
            <remarks>The original name is <c>PV_FLAG_ARMOURED</c>, but this enum uses the american name.</remarks>
        </member>
        <member name="F:GTA.HelmetPropFlags.LightlyArmored">
            <remarks>The original name is <c>PV_FLAG_LIGHTLY_ARMOURED</c>, but this enum uses the american name.</remarks>
        </member>
        <member name="F:GTA.HelmetPropFlags.DefaultHelmet">
            <summary>
            Regular motorcycle helmets should be used for most <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.HelmetPropFlags.RandomHelmet">
            <summary>
            Different helmets may be used for some <see cref="T:GTA.Ped"/> models (e.g. <see cref="F:GTA.PedHash.Franklin"/>).
            </summary>
        </member>
        <member name="F:GTA.HelmetPropFlags.ScriptHelmet">
            <remarks>
            Fire helmets will be used for <see cref="F:GTA.PedHash.Michael"/> and <see cref="F:GTA.PedHash.Trevor"/>, but this value does not explicitly specify fire helmets
            for other <see cref="T:GTA.Ped"/> models (e.g. online freemode <see cref="T:GTA.Ped"/> models).
            </remarks>
        </member>
        <member name="F:GTA.HelmetPropFlags.HideInFirstPerson">
            <summary>
            Specifies helmets that should not be directly seen in the first person view.
            </summary>
        </member>
        <member name="T:GTA.IKPart">
            <summary>
            An enumeration of all the possible IK parts that is only used in
            <see cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            The members for `<c>IK_PART_INVALID</c>`, `<c>IK_PART_SPINE</c>`, `<c>IK_PART_LEG_LEFT</c>`, and
            `<c>IK_PART_LEG_RIGHT</c>`, whose values are 0, 2, 5, and 6 respectively, are not defined in this enum.
            This is because this enum is only meant to be used in `<c>SET_IK_TARGET</c>` and it actually does not support
            any of the 4 members mentioned earlier.
            </remarks>
        </member>
        <member name="T:GTA.IKTargetFlags">
            <summary>
            An enumeration of all the possible flags that is only used in
            <see cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:GTA.IKTargetFlags.ArmTargetWrtHandBone">
            <summary>
            Arm target relative to the hand bone.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.ArmTargetWrtPointHelper">
            <summary>
            Arm target relative to the point helper.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.ArmTargetWrtIKHelper">
            <summary>
            Arm target relative to the IK helper.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.IKTagModeNormal">
            <summary>
            Use animation tags directly.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.Head"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.IKTagModeAllow">
            <summary>
            Use animation tags in ALLOW mode.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.IKTagModeBlock">
            <summary>
            Use animation tags in BLOCK mode.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="F:GTA.IKTargetFlags.IKArmUseOrientation">
            <summary>
            Solve for orientation in addition to position.
            </summary>
            <remarks>
            Has effect only in conjunction with <see cref="F:GTA.IKPart.ArmLeft"/> or <see cref="F:GTA.IKPart.ArmRight"/>.
            </remarks>
        </member>
        <member name="T:GTA.KnockOffVehicleType">
            <summary>
            An enumeration of all possible values of vehicle knock off types that determines how easy the <see cref="T:GTA.Ped"/>
            can be fall off a <see cref="T:GTA.Vehicle"/>. No other values are available in the game.
            </summary>
        </member>
        <member name="T:GTA.LookAtFlags">
            <summary>
            Set of flags for the look at task for <see cref="M:GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)"/>
            and <see cref="M:GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)"/>.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.SlowTurnRate">
            <summary>
            Turn the head toward the target slowly.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.FastTurnRate">
            <summary>
            Turn the head toward the target quickly.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.ExtendYawLimit">
            <summary>
            Wide yaw head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.ExtendPitchLimit">
            <summary>
            Wide pitch head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.WidestYawLimit">
            <summary>
            Widest yaw head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.WidestPitchLimit">
            <summary>
            Widest pitch head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.NarrowYawLimit">
            <summary>
            Narrow yaw head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.NarrowPitchLimit">
            <summary>
            Narrow pitch head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.NarrowestYawLimit">
            <summary>
            Narrowest yaw head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.NarrowestPitchLimit">
            <summary>
            Narrowest pitch head limit.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.WhileNotInFov">
            <summary>
            Keep tracking the target even if they are not in the hard coded FOV.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.UseCameraFocus">
            <summary>
            Use the camera as the target.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.UseEyesOnly">
            <summary>
            Only track the target with the eyes.
            </summary>
        </member>
        <member name="F:GTA.LookAtFlags.UseLookDir">
            <summary>
            Use information in look dir DOF.
            </summary>
        </member>
        <member name="T:GTA.LookAtPriority">
            <summary>
            Set of enumerations of the available look priorities for <see cref="M:GTA.TaskInvoker.LookAt(GTA.Entity,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)"/>
            and <see cref="M:GTA.TaskInvoker.LookAt(GTA.Math.Vector3,System.Int32,GTA.LookAtFlags,GTA.LookAtPriority)"/>.
            </summary>
        </member>
        <member name="T:GTA.NavMeshBlockingObject">
            <summary>
            Represents a blocking object that blocks <see cref="T:GTA.Ped"/>s using navigation mesh paths in the area the object covers when new <see cref="T:GTA.Ped"/> tasks that use navigation meshes (e.g. <see cref="M:GTA.TaskInvoker.WanderAround"/>) start for them.
            Does not create any dynamic objects or <see cref="T:GTA.Prop"/>s.
            </summary>
            <remarks>If SHVDN runtime stops working, all the <see cref="T:GTA.NavMeshBlockingObject"/>s created via SHVDN will get removed from the game.</remarks>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.Create(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.NavMeshBlockingObjectFlags)">
            <summary>
            Creates a new <see cref="T:GTA.NavMeshBlockingObject"/>.
            </summary>
            <param name="position">The origin position.</param>
            <param name="size">The size.</param>
            <param name="headingDegrees">The heading in degrees.</param>
            <param name="flags">The flags that specify what types of paths the blocking object will block new <see cref="T:GTA.Ped"/> tasks that use navigation meshes (e.g. <see cref="M:GTA.TaskInvoker.WanderAround"/>) from using.</param>
            <returns>The new <see cref="T:GTA.NavMeshBlockingObject"/> if successfully created; otherwise, <see langword="null"/>.</returns>
            <remarks>The new <see cref="T:GTA.NavMeshBlockingObject"/> won't block existing <see cref="T:GTA.Ped"/> tasks that use navigation mesh paths in the area the blocking object covers from using.</remarks>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.Delete">
            <summary>
            Removes this <see cref="T:GTA.NavMeshBlockingObject"/>.
            </summary>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.Exists">
            <summary>
            Determines if this <see cref="T:GTA.NavMeshBlockingObject"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.NavMeshBlockingObject"/> exists; otherwise, <see langword="false"/></returns>.
        </member>
        <member name="M:GTA.NavMeshBlockingObject.Update(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.NavMeshBlockingObjectFlags)">
            <summary>
            Updates the <see cref="T:GTA.NavMeshBlockingObject"/>.
            </summary>
            <param name="position">The origin position.</param>
            <param name="size">The size.</param>
            <param name="headingDegrees">The heading in degrees.</param>
            <param name="flags">The flags that specify what types of paths the blocking object will block new peds task that use navigation meshes from using.</param>
            <returns>The new <see cref="T:GTA.NavMeshBlockingObject"/> if successfully created; otherwise, <see langword="null"/>.</returns>
            <remarks>The updated <see cref="T:GTA.NavMeshBlockingObject"/> won't affect existing <see cref="T:GTA.Ped"/> tasks.</remarks>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same navigation mesh blocking object as this <see cref="T:GTA.NavMeshBlockingObject"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same navigation mesh blocking object as this <see cref="T:GTA.NavMeshBlockingObject"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.op_Equality(GTA.NavMeshBlockingObject,GTA.NavMeshBlockingObject)">
            <summary>
            Determines if two <see cref="T:GTA.NavMeshBlockingObject"/>s refer to the same navigation mesh blocking object.
            </summary>
            <param name="left">The left <see cref="T:GTA.NavMeshBlockingObject"/>.</param>
            <param name="right">The right <see cref="T:GTA.NavMeshBlockingObject"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same navigation mesh blocking object as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.op_Inequality(GTA.NavMeshBlockingObject,GTA.NavMeshBlockingObject)">
            <summary>
            Determines if two <see cref="T:GTA.NavMeshBlockingObject"/>s don't refer to the navigation mesh blocking object.
            </summary>
            <param name="left">The left <see cref="T:GTA.NavMeshBlockingObject"/>.</param>
            <param name="right">The right <see cref="T:GTA.NavMeshBlockingObject"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the navigation mesh blocking object as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.NavMeshBlockingObject.op_Implicit(GTA.NavMeshBlockingObject)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.NavMeshBlockingObject"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.NavMeshBlockingObjectFlags.WanderPath">
            <summary>
            Blocking object will block wander paths.
            </summary>
        </member>
        <member name="F:GTA.NavMeshBlockingObjectFlags.ShortestPath">
            <summary>
            Blocking object will block (regular) shortest-paths.
            </summary>
        </member>
        <member name="F:GTA.NavMeshBlockingObjectFlags.FleePath">
            <summary>
            Blocking object will block flee paths.
            </summary>
        </member>
        <member name="T:GTA.NavMeshRouteResult">
            <summary>
            Set of enumerations of the state of any active <see cref="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)"/> task running on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.NavMeshRouteResult.TaskNotFound">
            <summary>
            No navmesh task was found on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.NavMeshRouteResult.RouteNotYetTried">
            <summary>
            The task has not yet looked for a route.
            </summary>
        </member>
        <member name="F:GTA.NavMeshRouteResult.RouteNotFound">
            <summary>
            The task has tried &amp; failed to find a route (will keep trying).
            </summary>
        </member>
        <member name="F:GTA.NavMeshRouteResult.RouteFound">
            <summary>
            The task has successfully found a route.
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Invalid">
            <summary>
            Ped is not in a valid parachute landing state.
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Regular">
            <summary>
            Ped is landing at regular speed (they are stumbling).
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Fast">
            <summary>
            Ped is landing at fast speed (they are rolling).
            </summary>
        </member>
        <member name="F:GTA.ParachuteLandingType.Crashing">
            <summary>
            Ped is crashing (ragdolling).
            </summary>
        </member>
        <member name="P:GTA.Ped.PedType">
            <summary>
            Returns the <see cref="P:GTA.Ped.PedType"/> of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetAsCop(System.Boolean)">
            <summary>
            Sets up this <see cref="T:GTA.Ped"/> so that they are treated as a cop by changing <see cref="P:GTA.Ped.PedType"/> to
            <see cref="F:GTA.PedType.Cop"/>.
            </summary>
            <param name="setRelationshipGroup">
            If <see langword="true"/>, this <see cref="T:GTA.Ped"/>'s <see cref="P:GTA.Ped.RelationshipGroup"/> will be changed to
            <see cref="F:GTA.RelationshipGroupHash.Cop"/>.
            </param>
            <remarks>
            Adjusts an appropriate population count of the population counts for non-cop <see cref="T:GTA.Ped"/>s and
            one for cop <see cref="T:GTA.Ped"/>s. Sets <see cref="P:GTA.Ped.DecisionMaker"/> to
            <see cref="F:GTA.DecisionMakerTypeHash.Cop"/>.
            </remarks>
        </member>
        <member name="M:GTA.Ped.Clone(System.Boolean)">
            <summary>
            Creates a new <see cref="T:GTA.Ped"/> at where this <see cref="T:GTA.Ped"/> is by cloning this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="linkBlends">
            If <see langword="true"/> the method will create a link between the two <see cref="T:GTA.Ped"/>s for the head
            blend.
            If <see langword="false"/>, the method will clone the head blend to the cloned <see cref="T:GTA.Ped"/> but will
            not create the link between the two <see cref="T:GTA.Ped"/>s for the head blend.
            </param>
            <returns>
            A new <see cref="T:GTA.Ped"/> instance if successfully cloned; otherwise, <see langword="null"/>.
            Do note that the old overload <see cref="M:GTA.Ped.Clone(System.Single)"/> always returns a new <see cref="T:GTA.Ped"/>
            instance even if cloning fails.
            </returns>
            <remarks>
            <para>
            This method clones compressed damage, and this works the same as how <see cref="M:GTA.Ped.CloneAlt(System.Boolean,System.Boolean)"/> works
            with the 2nd bool parameter `<c>cloneCompressedDamage</c>` set to <see langword="true"/>.
            </para>
            <para>
            This overload was supposed to be have <paramref name="linkBlends"/> as an optional argument with
            the default value <see langword="true"/>, but it is not the case due to the call `<c>Ped.Clone()</c>` being
            ambiguous for CS0121 if the parameter was optional.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.Clone(System.Single)">
            <summary>
            Spawn an identical clone of this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="heading">
            This was meant to be the direction the clone should be facing, but has no effect.
            </param>
        </member>
        <member name="M:GTA.Ped.CloneAlt(System.Boolean,System.Boolean)">
            <summary>
            <para>
            Creates a new <see cref="T:GTA.Ped"/> at where this <see cref="T:GTA.Ped"/> is by cloning this <see cref="T:GTA.Ped"/>.
            </para>
            <para>
            Not available in the game versions earlier than v1.0.463.1.
            </para>
            </summary>
            <param name="linkBlends">
            If <see langword="true"/> the method will create a link between the two <see cref="T:GTA.Ped"/>s for the head
            blend.
            If <see langword="false"/>, the method will clone the head blend to the cloned <see cref="T:GTA.Ped"/> but will
            not create the link between the two <see cref="T:GTA.Ped"/>s for the head blend.
            </param>
            <param name="cloneCompressedDamage">
            If <see langword="true"/> clone shares compressed damage.
            If <see langword="false"/>, clone has no compressed damage.
            </param>
            <returns>
            A new <see cref="T:GTA.Ped"/> instance if successfully cloned; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.Ped.CloneToTarget(GTA.Ped)">
            <summary>
            Copies variation and head blend settings from this <see cref="T:GTA.Ped"/> to another.
            </summary>
            <param name="target">
            The <see cref="T:GTA.Ped"/> to copy settings to.
            </param>
            <remarks>
            This method clones compressed damage, and this works the same as how <see cref="M:GTA.Ped.CloneToTargetAlt(GTA.Ped,System.Boolean)"/> works
            with the bool parameter `<c>cloneCompressedDamage</c>` set to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:GTA.Ped.CloneToTargetAlt(GTA.Ped,System.Boolean)">
            <summary>
            <para>
            Copies variation and head blend settings from this <see cref="T:GTA.Ped"/> to another.
            </para>
            <para>
            Not available in the game versions earlier than v1.0.463.1.
            </para>
            </summary>
            <param name="target">
            The <see cref="T:GTA.Ped"/> to copy settings to.
            </param>
            <param name="cloneCompressedDamage">
            If <see langword="true"/> clone shares compressed damage.
            If <see langword="false"/>, clone has no compressed damage.
            </param>
        </member>
        <member name="M:GTA.Ped.Kill">
            <summary>
            Kills this <see cref="T:GTA.Ped"/> immediately.
            </summary>
        </member>
        <member name="M:GTA.Ped.Resurrect">
            <summary>
            Resurrects this <see cref="T:GTA.Ped"/> from death.
            </summary>
        </member>
        <member name="M:GTA.Ped.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Ped"/> exists.
            You should ensure <see cref="T:GTA.Ped"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Ped"/> exists; otherwise, <see langword="false" /></returns>
            <seealso cref="P:GTA.Entity.IsDead"/>
            <seealso cref="P:GTA.Ped.IsInjured"/>
        </member>
        <member name="P:GTA.Ped.IsHuman">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is human.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> is human; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.CanWearHelmet">
            <summary>
            Sets a value that indicates whether this <see cref="T:GTA.Ped"/> will use a helmet on their own.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsWearingHelmet">
            <summary>
            Sets a value that indicates whether this <see cref="T:GTA.Ped"/> is currently wearing a helmet.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsTakingOffHelmet">
            <summary>
            Sets a value that indicates whether this <see cref="T:GTA.Ped"/> is currently taking off their helmet.
            </summary>
        </member>
        <member name="M:GTA.Ped.GiveHelmet(System.Boolean,GTA.HelmetPropFlags,System.Int32)">
            <summary>
            Gives this <see cref="T:GTA.Ped"/> a helmet.
            </summary>
            <param name="dontTakeOffHelmet">If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will not take off their helmet automatically.</param>
            <param name="helmetPropFlags">
            The helmet prop flags to test. If none of helmets for this <see cref="T:GTA.Ped"/> do not meet the requirements specified by the flags,
            The <see cref="T:GTA.Ped"/> will not have a helmet.
            </param>
            <param name="overwriteHelmetTextureId">
            If negative, a random texture will be used.
            If non-negative and the specified texture id is present, the texture with specified id will be used.
            If non-negative and the specified texture id is not present, the previous texture will be used
            (texture with zero id will be used if the <see cref="T:GTA.Ped"/> has not been given a helmet before).
            </param>
            <remarks>
            This method will not give the <see cref="T:GTA.Ped"/> a new helmet if they already has one.
            </remarks>
        </member>
        <member name="M:GTA.Ped.RemoveHelmet(System.Boolean)">
            <summary>
            Removes a helmet from this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="instantly">If <see langword="true"/>, the helmet will be immediately removed without an animation.</param>
        </member>
        <member name="P:GTA.Ped.Style">
            <summary>
            Opens a list of clothing and prop configurations that this <see cref="T:GTA.Ped"/> can wear.
            </summary>
        </member>
        <member name="P:GTA.Ped.Gender">
            <summary>
            Gets the gender of this <see cref="T:GTA.Ped"/> by <see cref="T:GTA.PedType"/>.
            </summary>
            <remarks>
            If you need to test if the <see cref="T:GTA.Ped"/> is male or female by using a value other than
            <see cref="T:GTA.PedType"/>, use <see cref="P:GTA.Model.IsMalePed"/> or <see cref="P:GTA.Model.IsFemalePed"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.Sweat">
            <summary>
            Gets or sets the how much sweat should be rendered on this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The sweat from 0 to 100, 0 being no sweat, 100 being saturated.
            </value>
        </member>
        <member name="P:GTA.Ped.WetnessHeight">
            <summary>
            Sets how high up on this <see cref="T:GTA.Ped"/>s body water should be visible.
            </summary>
            <value>
            The height offset ranges from -2f to 1.99f inclusive, -2f being no water visible, 1.99f being fully covered in water.
            </value>
            <remarks>
            Although zero sets the height offset of the water line to zero in meters on water height members of <c>CPed</c>,
            This property will clear the wet/soaked effect if the value is set to the zero for the compatibility of scripts built against v3.6.0.
            </remarks>
        </member>
        <member name="P:GTA.Ped.LowerWetnessHeight">
            <summary>
            Gets or sets the lower wetness height of this <see cref="T:GTA.Ped"/>.
            The value should be in the range of 0 and 1 inclusive.
            </summary>
            <remarks>
            <para>
            <see cref="P:GTA.Ped.UpperWetnessLevel"/> and <see cref="P:GTA.Ped.UpperWetnessHeight"/> must be set before this value can have affect.
            If <see cref="P:GTA.Ped.UpperWetnessLevel"/> is <c>-2f</c> or less or and <see cref="P:GTA.Ped.UpperWetnessHeight"/> is zero or less,
            this value will be transferred to <see cref="P:GTA.Ped.UpperWetnessHeight"/> and then this value will be set to <c>-2f</c>.
            </para>
            <para>
            The value must be less than <see cref="P:GTA.Ped.UpperWetnessHeight"/>, otherwise the value will be reset to <c>-2f</c> in a few frames.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.UpperWetnessHeight">
            <summary>
            Gets or sets the upper wetness height of this <see cref="T:GTA.Ped"/>.
            The value should be in the range of 0 and 1 inclusive.
            </summary>
        </member>
        <member name="P:GTA.Ped.LowerWetnessLevel">
            <summary>
            Gets or sets the lower wetness level of this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The height offset of the lower water line in meters.
            Should be in the range of <c>-2f</c> exclusive and <c>1.99f</c> inclusive.
            If the value is <c>-2f</c> or less, the wetness effect will be cleared in a few frames.
            If the value is more than <c>1.99f</c> (not <c>2f</c>), the value will be clamped to <c>1.99f</c>.
            </value>
            <remarks>
            <para>
            If the <see cref="T:GTA.Ped"/> does not exist, this method will return <c>-2f</c>,
            which is the default value that indicates the <see cref="T:GTA.Ped"/> is not wet.
            </para>
            <para>
            <see cref="P:GTA.Ped.UpperWetnessLevel"/> and <see cref="P:GTA.Ped.UpperWetnessHeight"/> must be set before this value can have affect.
            If <see cref="P:GTA.Ped.UpperWetnessLevel"/> is <c>-2f</c> or less or and <see cref="P:GTA.Ped.UpperWetnessHeight"/> is zero or less,
            this value will be transferred to <see cref="P:GTA.Ped.UpperWetnessLevel"/> and then this value will be set to zero.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.UpperWetnessLevel">
            <summary>
            Gets or sets the upper wetness level of this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The height offset of the upper water line in meters.
            Should be in the range of <c>-2f</c> exclusive and <c>1.99f</c> inclusive.
            If the value is <c>-2f</c> or less, the wetness effect will be cleared in a few frames.
            If the value is more than <c>1.99f</c> (not <c>2f</c>), the value will be clamped to <c>1.99f</c>.
            </value>
            <remarks>
            <para>
            If the <see cref="T:GTA.Ped"/> does not exist, this method will return <c>-2f</c>,
            which is the default value that indicates the <see cref="T:GTA.Ped"/> is not wet.
            </para>
            <para>
            This value and <see cref="P:GTA.Ped.UpperWetnessHeight"/> must be set before <see cref="P:GTA.Ped.LowerWetnessLevel"/> can have affect.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsWet">
            <summary>
            Gets the value that indicates this <see cref="T:GTA.Ped"/> is wet at all.
            Strictly, this method checks if the bit is set that determines wet/soaked effect is being used on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.Wet(System.Single)">
            <remarks>
            <para>
            This method changes <see cref="P:GTA.Ped.UpperWetnessHeight"/> to <paramref name="height"/> and <see cref="P:GTA.Ped.UpperWetnessLevel"/> to <c>1f</c>,
            but <see cref="P:GTA.Ped.LowerWetnessHeight"/> will be set to <c>-2f</c> and <see cref="P:GTA.Ped.LowerWetnessLevel"/> will be set to zero.
            </para>
            <para>
            If there are some cloth controllers (<c>rage::characterClothController</c>) of this <see cref="T:GTA.Ped"/> for physics,
            the wind multiplier for physics will be set to 0.3 instead of 1.0 for the normal state.
            </para>
            </remarks>
            <inheritdoc cref="M:GTA.Ped.Wet(System.Single,System.Single)"/>
        </member>
        <member name="M:GTA.Ped.Wet(System.Single,System.Single)">
            <summary>
            Makes this <see cref="T:GTA.Ped"/> wet.
            </summary>
            <param name="height">
            The height offset of the water line in meters. Should be in the range of <c>-2f</c> exclusive and <c>1.99f</c> inclusive.
            If the value is <c>-2f</c> or less, the wetness effect will be cleared in a few frames.
            If the value is more than <c>1.99f</c> (not <c>2f</c>), the value will be clamped to <c>1.99f</c>.
            </param>
            <param name="wetLevel">The wet level between 0 and 1.</param>
            <remarks>
            <para>
            This method changes <see cref="P:GTA.Ped.UpperWetnessHeight"/> to <paramref name="height"/> and <see cref="P:GTA.Ped.UpperWetnessLevel"/> to <paramref name="wetLevel"/>,
            but <see cref="P:GTA.Ped.LowerWetnessHeight"/> will be set to <c>-2f</c> and <see cref="P:GTA.Ped.LowerWetnessLevel"/> will be set to zero.
            </para>
            <para>
            If there are some cloth controllers (<c>rage::characterClothController</c>) of this <see cref="T:GTA.Ped"/> for physics,
            the wind multiplier for physics will be set to 0.3 instead of 1.0 for the normal state.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.DryOff">
            <summary>
            Dries this <see cref="T:GTA.Ped"/>. In other words, clears the wet/soaked effect from the <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            If there are some cloth controllers (<c>rage::characterClothController</c>) of this <see cref="T:GTA.Ped"/> for physics,
            the wind multiplier for physics will be set to 1.0 for the normal state.
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetWetnessEnabledThisFrame">
            <summary>
            Enables a non-player <see cref="T:GTA.Ped"/> to get wet this frame from systems that it otherwise wouldn't (e.g. particle effects).
            Since the system let the player <see cref="T:GTA.Ped"/> wet without this method, you do not need to call this method on the player <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.Armor">
            <summary>
            Gets or sets how much armor this <see cref="T:GTA.Ped"/> is wearing as an <see cref="T:System.Int32"/>.
            </summary>
            <remarks>if you need to get or set the value precisely, use <see cref="P:GTA.Ped.ArmorFloat"/> instead.</remarks>
            <value>
            The armor as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.ArmorFloat">
            <summary>
            Gets or sets how much Armor this <see cref="T:GTA.Ped"/> is wearing as a <see cref="T:System.Single"/>.
            </summary>
            <value>
            The armor as a <see cref="T:System.Single"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.Money">
            <summary>
            Gets or sets how much money this <see cref="T:GTA.Ped"/> is carrying.
            The max value is 65535.
            </summary>
        </member>
        <member name="P:GTA.Ped.MaxHealth">
            <summary>
            Gets or sets the maximum health of this <see cref="T:GTA.Ped"/> as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The maximum health as an <see cref="T:System.Int32"/>.
            </value>
            <remarks>
            <para>
            <see cref="P:GTA.Player.MaxHealth"/> will be changed when the setter is called if the <see cref="T:GTA.Ped"/> is one for a player.
            </para>
            <para>
            You should not set a value larger than <c>65535</c> or a negative value for the player ped(s) as the game uses the 16-bit unsigned integer value for the max health of the player ped(s) on <c>CPlayerInfo</c>
            and it is used when respawning and in <c>SET_ENTITY_MAX_HEALTH</c> as the max limit.
            Setting a value larger than <c>65535</c> will result in the overflow of the 16-bit unsigned integer value for the max health of <c>CPlayerInfo</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsPlayer">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is a player <see cref="T:GTA.Ped"/>, who has a <c>CPlayerInfo</c> pointer value.
            Returns <see langword="true"/> only on up to one <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.GetConfigFlag(GTA.PedConfigFlagToggles)">
            <summary>
            Gets the value of a config flag toggle on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetConfigFlag(GTA.PedConfigFlagToggles,System.Boolean)">
            <summary>
            Sets the value of a config flag toggle on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.GetResetFlag(GTA.PedResetFlagToggles)">
            <summary>
            Gets the value of a reset flag toggle on this <see cref="T:GTA.Ped"/>.
            You will need to call this method every frame you want to get, since the values of
            <see cref="T:GTA.PedConfigFlagToggles"/> are reset every frame.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetResetFlag(GTA.PedResetFlagToggles,System.Boolean)">
            <summary>
            Sets the value of a reset flag toggle on this <see cref="T:GTA.Ped"/>.
            You will need to call this method every frame you want to set, since the values of
            <see cref="T:GTA.PedConfigFlagToggles"/> are reset every frame.
            </summary>
        </member>
        <member name="M:GTA.Ped.GetConfigFlag(System.Int32)">
            <inheritdoc cref="M:GTA.Ped.GetConfigFlag(GTA.PedConfigFlagToggles)"/>
        </member>
        <member name="M:GTA.Ped.SetConfigFlag(System.Int32,System.Boolean)">
            <inheritdoc cref="M:GTA.Ped.GetConfigFlag(GTA.PedConfigFlagToggles)"/>
        </member>
        <member name="M:GTA.Ped.ResetConfigFlag(System.Int32)">
            <summary>
            Do not use this method and use <see cref="M:GTA.Ped.SetResetFlag(GTA.PedResetFlagToggles,System.Boolean)"/> or <see cref="M:GTA.Ped.GetResetFlag(GTA.PedResetFlagToggles)"/> instead,
            because <c>SET_PED_RESET_FLAG</c> uses different flag IDs from the IDs <see cref="M:GTA.Ped.GetConfigFlag(System.Int32)"/> and <see cref="M:GTA.Ped.SetConfigFlag(System.Int32,System.Boolean)"/> use.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetIsPersistentNoClearTask(System.Boolean)">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Entity"/> is persistent.
            Unlike <see cref="P:GTA.Entity.IsPersistent"/>, calling this method does not affect assigned tasks.
            </summary>
        </member>
        <member name="P:GTA.Ped.Bones">
            <summary>
            Gets a collection of the <see cref="T:GTA.PedBone"/>s in this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsProne">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is basically lying on the ground.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsGettingUp">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is getting up.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsDiving">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently diving (includes jump launch/clamber phase).
            </summary>
        </member>
        <member name="P:GTA.Ped.IsJumping">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently jumping.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsFalling">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently falling.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsVaulting">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently climbing or vaulting or doing a drop down.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsClimbing">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently climbing.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsClimbingLadder">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently climbing a ladder.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsWalking">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently walking.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsRunning">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently running.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsSprinting">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is currently sprinting.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsStopped">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is stood still or in a stationary vehicle.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsSwimming">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is swimming.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsSwimmingUnderWater">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is swimming underwater.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsDucking">
            <summary>
            Gets or sets whether this <see cref="T:GTA.Ped"/> is ducking (crouching).
            </summary>
            <remarks>
            You need to let <see cref="T:GTA.Ped"/>s duck by setting <c>AllowCrouchedMovement</c> to <c>CB_TRUE</c> (and setting <c>AllowStealthMovement</c> to <c>CB_FALSE</c>) in <c>gameconfig.xml</c>
            or changing the values for crouching with a script such as Zolika1351's Trainer before this property can return <see langword="true"/> or setting this property to <see langword="true"/> can actually make a <see cref="T:GTA.Ped"/> crouch.
            For clarification, changing stance of the player <see cref="T:GTA.Ped"/> with Stance by jedijosh920 does not make this property return <see langword="true"/> as it only changes strafe clipset.
            </remarks>
        </member>
        <member name="M:GTA.Ped.IsHeadtracking(GTA.Entity)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is looking at the target entity.
            </summary>
        </member>
        <member name="P:GTA.Ped.KeepTaskWhenMarkedAsNoLongerNeeded">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> keeps their tasks when they are marked as no longer needed by <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </summary>
            <value>
            <para>
            If set to <see langword="false" />, this <see cref="T:GTA.Ped"/>'s task will be immediately cleared and start some ambient tasks
            (most likely start wandering) when they are marked as no longer needed.
            </para>
            <para>
            If set to <see langword="true" />, this <see cref="T:GTA.Ped"/> will keep their scripted task.
            Once this <see cref="T:GTA.Ped"/> has no script tasks, their task will clear and they'll start some ambient tasks (one-time-only).
            </para>
            </value>
        </member>
        <member name="P:GTA.Ped.AlwaysKeepTask">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> keeps their tasks when they are marked as no longer needed by <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            Despite the property name, this property does not determine whether permanent events can interrupt the <see cref="T:GTA.Ped"/>'s tasks (e.g. seeing hated peds or getting shot at).
            </summary>
            <inheritdoc cref="P:GTA.Ped.KeepTaskWhenMarkedAsNoLongerNeeded"/>
        </member>
        <member name="P:GTA.Ped.Task">
            <summary>
            Opens a list of <see cref="T:GTA.TaskInvoker"/> that this <see cref="T:GTA.Ped"/> can carry out.
            </summary>
        </member>
        <member name="P:GTA.Ped.TaskSequenceProgress">
            <summary>
            Gets the stage of the <see cref="T:GTA.TaskSequence"/> this <see cref="T:GTA.Ped"/> is currently executing.
            </summary>
        </member>
        <member name="M:GTA.Ped.GetScriptTaskStatus(GTA.ScriptTaskNameHash)">
            <summary>
            Gets the script task status of specified scripted task on this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The value of the current script task status if the <see cref="T:GTA.Ped"/> exists and has their intelligence instance,
            and then <paramref name="taskNameHash"/> matches the current task name hash or <see cref="F:GTA.ScriptTaskNameHash.Any"/>;
            otherwise, <see cref="F:GTA.ScriptTaskStatus.Finished"/>.
            </value>
        </member>
        <member name="M:GTA.Ped.GetCurrentScriptTaskNameHashAndStatus(GTA.ScriptTaskNameHash@,GTA.ScriptTaskStatus@)">
            <summary>
            Gets the current script task name hash and status on this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="nameHash">
            When this method returns, contains the value of the current script task name hash, if the <see cref="T:GTA.Ped"/> exists and has their intelligence instance;
            otherwise, <see cref="F:GTA.ScriptTaskNameHash.Invalid"/> as it is internally used in the game code outside native functions.
            This parameter is passed uninitialized.
            </param>
            <param name="status">
            When this method returns, contains the value of the current script task status, if the <see cref="T:GTA.Ped"/> exists and has their intelligence instance;
            otherwise, <see cref="F:GTA.ScriptTaskStatus.Vacant"/> as it is internally used in the game code outside native functions.
            This parameter is passed uninitialized.
            </param>
        </member>
        <member name="P:GTA.Ped.CurrentScriptTaskNameHash">
            <summary>
            Gets the current script task name hash on this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The value of the current script task name hash if the <see cref="T:GTA.Ped"/> exists and has their intelligence instance;
            otherwise, <see cref="F:GTA.ScriptTaskNameHash.Invalid"/> as it is internally used in the game code outside native functions.
            </value>
        </member>
        <member name="P:GTA.Ped.CurrentScriptTaskStatus">
            <summary>
            Gets the current script task status on this <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            The value of the current script task status if the <see cref="T:GTA.Ped"/> exists and has their intelligence instance;
            otherwise, <see cref="F:GTA.ScriptTaskStatus.Vacant"/> as it is internally used in the game code outside native functions.
            </value>
        </member>
        <member name="M:GTA.Ped.GetNavMeshRouteResult">
            <summary>
            Gets Returns the state of any active <see cref="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)"/>
            task running on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetVehicleChaseBehaviorFlags(GTA.VehicleChaseBehaviorFlags,System.Boolean)">
            <summary>
            Sets or unsets any <see cref="T:GTA.VehicleChaseBehaviorFlags"/> that the <see cref="T:GTA.Ped"/> will use for an active
            vehicle chase task (<c>CTaskVehicleChase</c>).
            A vehicle chase task (<c>CTaskVehicleChase</c>) on the <see cref="T:GTA.Ped"/> must be run, which can be created
            by calling <see cref="M:GTA.TaskInvoker.VehicleChase(GTA.Ped)"/>, before calling this method or it will have no
            effect.
            </summary>
            <param name="flags">The flag to set or unset.</param>
            <param name="value">
            <see langword="true"/> to set the flags; otherwise <see langword="false"/> to unset flags.
            </param>
        </member>
        <member name="M:GTA.Ped.SetVehicleChaseIdealPursuitDistance(System.Single)">
            <summary>
            Sets the ideal pursuit distance when chasing a <see cref="T:GTA.Vehicle"/> for an active vehicle chase task
            (<c>CTaskVehicleChase</c>).
            A vehicle chase task (<c>CTaskVehicleChase</c>) on the <see cref="T:GTA.Ped"/> must be run, which can be created
            by calling <see cref="M:GTA.TaskInvoker.VehicleChase(GTA.Ped)"/>, before calling this method or it will have no
            effect.
            </summary>
        </member>
        <member name="M:GTA.Ped.ForceMotionStateThisFrame(GTA.PedMotionState,System.Boolean,GTA.ForceAnimAIUpdateState,System.Boolean)">
            <summary>
            Forces a known motion state on this <see cref="T:GTA.Ped"/> by rebuilding its motion task tree in a known state.
            </summary>
            <param name="state">The <see cref="T:GTA.PedMotionState"/> to set.</param>
            <param name="restartState">
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will perform an new appropriate motion task
            even if the current primary motion task is in the specified motion state (<paramref name="state"/>).
            </param>
            <param name="exitState">Specifies how to exit the current primary motion task.</param>
            <param name="forceAIPreCameraUpdate">
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will be forced PreCameraAIUpdate instead of
            PostCameraAIUpdate. Only has effect if <paramref name="forceAIPreCameraUpdate"/> is set to
            <see cref="F:GTA.ForceAnimAIUpdateState.CutsceneExit"/> currently.
            </param>
            <returns>
            <see langword="true"/> if the state force was supported on the <see cref="T:GTA.Ped"/> and was successful;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Ped.DecisionMaker">
            <summary>
            Gets or sets the decision maker of this <see cref="T:GTA.Ped"/>, which determines what and how this <see cref="T:GTA.Ped"/> should response to events.
            Events can cause <see cref="T:GTA.Ped"/>s to start certain tasks. You can see how decision makers are configured in <c>events.meta</c>.
            </summary>
        </member>
        <member name="P:GTA.Ped.BlockPermanentEvents">
            <summary>
            <para>
            Gets or sets whether non-temporary events without high priorities are blocked for this <see cref="T:GTA.Ped"/>.
            </para>
            <para>
            For example, the <see cref="T:GTA.Ped"/> will not flee when get shot at and they will not begin combat even if
            <see cref="P:GTA.Ped.DecisionMaker"/> specifies that seeing a hated ped should.
            </para>
            </summary>
            <remarks>
            <para>
            Even if this property is set to <see langword="true"/>, the <see cref="T:GTA.Ped"/> will still respond
            to events that meet one of the following criteria;
            <list type="bullet">
            <item><description>
            Priority is higher than that of "block non-temp events" (or the same). Examples;
                <list type="bullet">
                <item><description>
                Event for the <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.Vehicle"/> being on fire (`<c>CEventVehicleOnFire</c>`)
                </description></item>
                <item><description>
                Event for taking damage (`<c>CEventDamage</c>` with 4 possible priorities)
                </description></item>
                <item><description>
                Event for getting bumped into by another <see cref="T:GTA.Ped"/> (`<c>CEventPedCollisionWithPed</c>` and
                `<c>CEventPedCollisionWithPlayer</c>`, whose priorities are the same)
                </description></item>
                <item><description>
                Event for taking damage (`<c>CEventDamage</c>` with 4 possible priorities)
                </description></item>
                </list>
            </description></item>
            <item><description>
            Event is set to be temporary. Examples;
                <list type="bullet">
                <item><description>
                Event for vehicle on fire (`<c>CEventVehicleOnFire</c>`)
                </description></item>
                <item><description>
                Event for being about to walk into fire (`<c>CEventPotentialWalkIntoFire</c>`)
                </description></item>
                <item><description>
                Event for the <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.Vehicle"/> being upside down, beached, or stuck
                (`<c>CEventCarUndriveable</c>`)
                </description></item>
                </list>
            </description></item>
            <item><description>
            Event type is set to one of the following types;
                <list type="bullet">
                <item><description>
                `<c>EVENT_SCRIPT_COMMAND</c>`
                </description></item>
                <item><description>
                `<c>EVENT_LEADER_ENTERED_CAR_AS_DRIVER</c>`
                </description></item>
                <item><description>
                `<c>EVENT_LEADER_EXITED_CAR_AS_DRIVER</c>`
                </description></item>
                <item><description>
                `<c>EVENT_SCENARIO_FORCE_ACTION</c>`
                </description></item>
                </list>
            </description></item>
            </list>
            </para>
            </remarks>
            <value>
            <see langword="true"/> if non-temporary events without high priorities are blocked; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.RandomPedsBlockingNonTempEventsThisFrame">
            <summary>
            Sets the value that indicates whether non-temp events without high priorities will be blocked for
            random/ambient <see cref="T:GTA.Ped"/>s this frame. Excludes law enforcement <see cref="T:GTA.Ped"/>s.
            </summary>
            <remarks>
            Strictly, if this property is set to <see langword="true"/>, the game will block non-temp events this frame
            on <see cref="T:GTA.Ped"/>s with one of the random population types (e.g.
            <see cref="F:GTA.EntityPopulationType.RandomAmbient"/>) and with a <see cref="T:GTA.PedType"/> other than
            <see cref="F:GTA.PedType.Cop"/>, <see cref="F:GTA.PedType.Swat"/>, or <see cref="F:GTA.PedType.Army"/>.
            </remarks>
            <seealso cref="P:GTA.Ped.BlockPermanentEvents"/>
        </member>
        <member name="M:GTA.Ped.HasReceivedEvent(GTA.EventType)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> has received the event of <paramref name="eventType"/>.
            <see cref="F:GTA.EventType.Invalid"/> can be used to test if the <see cref="T:GTA.Ped"/> has received any event.
            </summary>
            <value>
              <see langword="true"/> if the <see cref="T:GTA.Ped"/> has received the event  of <paramref name="eventType"/>; otherwise, <see langword="false" />.
            </value>
            <remarks>This is similar to <see cref="M:GTA.Ped.IsRespondingToEvent(GTA.EventType)"/>, but will work with blocking of non-temporary events with <see cref="P:GTA.Ped.BlockPermanentEvents"/>.</remarks>
        </member>
        <member name="M:GTA.Ped.IsRespondingToEvent(GTA.EventType)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is responding to an event of <paramref name="eventType"/>.
            <see cref="F:GTA.EventType.Invalid"/> can be used to test if the <see cref="T:GTA.Ped"/> is responding to any event.
            </summary>
            <value>
              <see langword="true"/> if this <see cref="T:GTA.Ped"/> is responding to an event of <paramref name="eventType"/> and subsequent tasks are running; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Ped.Ragdoll(System.Int32,GTA.RagdollType)">
            <summary>
            Switches this <see cref="T:GTA.Ped"/> to a ragdoll by starting a ragdoll task and applying to this <see cref="T:GTA.Ped"/>.
            If <paramref name="ragdollType"/> is not set to <see cref="F:GTA.RagdollType.Relax"/> or <see cref="F:GTA.RagdollType.ScriptControl"/>, the ragdoll behavior for <see cref="F:GTA.RagdollType.Balance"/> will be used.
            </summary>
            <param name="duration">
            The duration how long the ragdoll task will run in milliseconds.
            </param>
            <param name="ragdollType">The ragdoll type.</param>
        </member>
        <member name="M:GTA.Ped.SetToRagdoll(System.Int32,System.Int32,GTA.RagdollType,System.Boolean)">
            <summary>
            Switches this <see cref="T:GTA.Ped"/> to a ragdoll by starting a ragdoll task and applying to this <see cref="T:GTA.Ped"/>.
            If <paramref name="ragdollType"/> is not set to <see cref="F:GTA.RagdollType.Relax"/> or <see cref="F:GTA.RagdollType.ScriptControl"/>, the ragdoll behavior for <see cref="F:GTA.RagdollType.Balance"/> will be used.
            </summary>
            <param name="minTime">
            The duration at least how long the ragdoll task will run in milliseconds.
            Not used for <see cref="F:GTA.RagdollType.ScriptControl"/>.
            </param>
            <param name="maxTime">
            The duration at most how long the ragdoll task will run in milliseconds.
            Not used for <see cref="F:GTA.RagdollType.Balance"/>.
            </param>
            <param name="ragdollType">The ragdoll type.</param>
            <param name="forceScriptControl">
            Specifies whether this <see cref="T:GTA.Ped"/> will not get injured or killed by being lower health than <see cref="P:GTA.Ped.InjuryHealthThreshold"/> or <see cref="P:GTA.Ped.FatalInjuryHealthThreshold"/>.
            If ped's health goes lower than <see cref="P:GTA.Ped.InjuryHealthThreshold"/>, the ragdoll task will keep their health to <see cref="P:GTA.Ped.InjuryHealthThreshold"/> plus 5.0 until the task ends.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:GTA.Ped"/> has successfully started a new ragdoll task; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method will not start a new NaturalMotion(NM) ragdoll task if some NM task is already running on the <see cref="T:GTA.Ped"/>
            (except for <see cref="F:GTA.RagdollType.ScriptControl"/>).
            </para>
            <para>
            Unlike <see cref="M:GTA.Ped.Ragdoll(System.Int32,GTA.RagdollType)"/>, this method does not automatically set <see cref="P:GTA.Ped.CanRagdoll"/> to <see langword="true"/>.
            Set the property on your own if necessary.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetToRagdollWithFall(System.Int32,System.Int32,GTA.RagdollFallType,GTA.Math.Vector3,System.Single)">
            <summary>
            Gives this <see cref="T:GTA.Ped"/> to a specific NaturalMotion (NM) ragdoll task for fall down,
            which controls them to fall off a high place, fall down stairs etc.
            </summary>
            <param name="minTime">
            The duration at least how long the ragdoll task will run in milliseconds.
            After the NM task executed for longer than this value, it may end itself if the <see cref="T:GTA.Ped"/> is fallen down.
            </param>
            <param name="maxTime">
            The duration at most how long the ragdoll task will run in milliseconds.
            The task will be forced to stop if it has been executed for longer this value,
            even if the <see cref="T:GTA.Ped"/> is still not fallen down.
            </param>
            <param name="fallType">The ragdoll fall type.</param>
            <param name="direction">The direction to which the ped should stagger and fall.</param>
            <param name="groundHeight">The height the <see cref="T:GTA.Ped"/> is expected to fall down to.</param>
            <returns>
            <see langword="true"/> if this <see cref="T:GTA.Ped"/> has successfully started a new ragdoll task; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method can start a new NaturalMotion (NM) ragdoll task even if some NM task is already running on
            the <see cref="T:GTA.Ped"/>.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.CancelRagdoll">
            <summary>Stops this <see cref="T:GTA.Ped"/> ragdolling.</summary>
        </member>
        <member name="M:GTA.Ped.SetRagdollBlockingFlags(GTA.RagdollBlockingFlags)">
            <summary>
            Blocks ragdoll reactions from various forms of damage.
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearRagdollBlockingFlags(GTA.RagdollBlockingFlags)">
            <summary>
            Re-enables ragdoll reactions from various forms of damage.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsRagdoll">
            <summary>
            Gets or sets whether this <see cref="T:GTA.Ped"/> is ragdolling.
            </summary>
            <remarks>
            Will return <see langword="false"/> when the <see cref="T:GTA.Ped"/> is getting up or writhing as a part of a ragdoll task.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsRunningRagdollTask">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is running a ragdoll task which manages its ragdoll.
            </summary>
            <remarks>
            Will return <see langword="true"/> when <see cref="P:GTA.Ped.IsRagdoll"/> returns <see langword="true"/> or the <see cref="T:GTA.Ped"/> is getting up or writhing as a part of a ragdoll task.
            </remarks>
        </member>
        <member name="P:GTA.Ped.CanRagdoll">
            <summary>
            Gets or sets whether this <see cref="T:GTA.Ped"/> can be set into a ragdoll state.
            </summary>
            <remarks>
            <see cref="T:GTA.Ped"/>s will only switch to a ragdoll if they are onscreen and within range of the player.
            </remarks>
        </member>
        <member name="P:GTA.Ped.Euphoria">
            <summary>
            Opens a list of <see cref="T:GTA.NaturalMotion.Euphoria"/> Helpers which can be applied to this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.Accuracy">
            <summary>
            Gets or sets how accurate this <see cref="T:GTA.Ped"/>s shooting ability is.
            The higher the value of this property is, the more likely it is that this <see cref="T:GTA.Ped"/> will shoot at exactly where they are aiming at.
            </summary>
            <value>
            The accuracy from 0 to 100, 0 being very inaccurate, which means this <see cref="T:GTA.Ped"/> cannot shoot at exactly where they are aiming at,
            100 being perfectly accurate.
            </value>
            <remarks>
            The ped accuracy is internally stored as a <see cref="T:System.Single"/>. To read/write the exact value, use
            <see cref="M:GTA.Ped.SetCombatFloatAttribute(GTA.CombatFloatAttributes,System.Single)"/> or
            <see cref="M:GTA.Ped.GetCombatFloatAttribute(GTA.CombatFloatAttributes)"/> with
            <see cref="F:GTA.CombatFloatAttributes.WeaponAccuracy"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.ShootRate">
            <summary>
            Sets the rate this <see cref="T:GTA.Ped"/> will shoot at.
            </summary>
            <value>
            The shoot rate from 0 to 1000, 100 is the default value.
            </value>
            <remarks>
            The value will be internally stored as a <see cref="T:System.Single"/>.
            This property internally sets the value divided by 100 (so the value will be internally 1.0 if you set 100
            to this property).
            </remarks>
        </member>
        <member name="P:GTA.Ped.FiringPattern">
            <summary>
            Gets of sets the pattern this <see cref="T:GTA.Ped"/> uses to fire weapons.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetCombatAttribute(GTA.CombatAttributes,System.Boolean)">
            <summary>
            Activates or deactivates the combat attributes.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetCombatFloatAttribute(GTA.CombatFloatAttributes,System.Single)">
            <summary>
            Sets a combat float attributes.
            </summary>
            <remarks>
            To write the shoot rate, use <see cref="P:GTA.Ped.ShootRate"/>.
            </remarks>
        </member>
        <member name="M:GTA.Ped.GetCombatFloatAttribute(GTA.CombatFloatAttributes)">
            <summary>
            Gets a combat float attributes.
            </summary>
            <remarks>
            To read the shoot rate, use <see cref="P:GTA.Ped.ShootRate"/>.
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetFleeAttributes(GTA.FleeAttributes,System.Boolean)">
            <summary>
            Activates or deactivates the flee attributes.
            </summary>
        </member>
        <member name="P:GTA.Ped.Weapons">
            <summary>
            Gets a collection of all this <see cref="T:GTA.Ped"/>s <see cref="T:GTA.Weapon"/>s.
            </summary>
        </member>
        <member name="P:GTA.Ped.VehicleWeapon">
            <summary>
            Gets the vehicle weapon this <see cref="T:GTA.Ped"/> is using on <see cref="P:GTA.Ped.CurrentVehicle"/>.
            </summary>
            <returns>
            The vehicle weapon this <see cref="T:GTA.Ped"/> is currently using if successfully found a vehicle weapon;
            otherwise, <see cref="F:GTA.VehicleWeaponHash.Invalid"/>
            </returns>
            <remarks>
            Despite the interface, this property will eventually get or set the value on
            <see cref="P:GTA.Ped.CurrentVehicle"/> if it exists.
            </remarks>
        </member>
        <member name="M:GTA.Ped.TrySetVehicleWeapon(GTA.VehicleWeaponHash)">
            <summary>
            Attempts to set the vehicle weapon this <see cref="T:GTA.Ped"/> is using on <see cref="P:GTA.Ped.CurrentVehicle"/>.
            </summary>
            <param name="hash">The vehicle weapon hash.</param>
            <returns>
            <see langword="true"/> if the operation was successful; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Despite the interface, this property will set the value on <see cref="P:GTA.Ped.CurrentVehicle"/> if it exists and
            <paramref name="hash"/> is listed on the <see cref="T:GTA.VehicleWeaponHandlingData"/> for the current vehicle.
            </remarks>
        </member>
        <member name="M:GTA.Ped.FireVehicleWeaponAt(GTA.Entity)">
            <summary>
            Fires this <see cref="T:GTA.Ped"/>'s current vehicle weapon on the current <see cref="T:GTA.Vehicle"/>
            at the target <see cref="T:GTA.Entity"/> this frame.
            </summary>
            <param name="target">
            The target <see cref="T:GTA.Entity"/>.
            If the current vehicle weapon is a rocket weapon and supports homing,
            the fired rocket will home in the target.
            If the target does not exist, this method will not ignore or throw an exception and instead
            the <see cref="T:GTA.Vehicle"/> will fire at (0f, 0f, 0f) as <c>SET_VEHICLE_SHOOT_AT_TARGET</c> does.
            </param>
            <remarks>
            <para>
            If this <see cref="T:GTA.Ped"/> is not the player, the vehicle weapon will not follow the angle constraints.
            If this <see cref="T:GTA.Ped"/> is the player, the ped will shoot in the direction of vehicle is facing
            (does not disable homing in such case).
            </para>
            <para>
            The appropriate <c>CVehicleWeapon</c> of the current <see cref="T:GTA.Vehicle"/> shoots at the target
            if the prerequisite is satisfied (retrieves via this <see cref="T:GTA.Ped"/>'s <c>CPedWeaponManager</c>).
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.FireVehicleWeaponAt(GTA.Math.Vector3)">
            <summary>
            Fires this <see cref="T:GTA.Ped"/>'s current vehicle weapon on the current <see cref="T:GTA.Vehicle"/>
            at the target coordinates this frame.
            </summary>
            <param name="target">
            The target coordinates.
            </param>
            <remarks>
            <para>
            If this <see cref="T:GTA.Ped"/> is not the player, the vehicle weapon will not follow the angle constraints.
            If this <see cref="T:GTA.Ped"/> is the player, the ped will shoot in the direction of vehicle is facing.
            </para>
            <para>
            The appropriate <c>CVehicleWeapon</c> of the current <see cref="T:GTA.Vehicle"/> shoots at the target
            if the prerequisite is satisfied (retrieves via this <see cref="T:GTA.Ped"/>'s <c>CPedWeaponManager</c>).
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.CanSwitchWeapons">
            <summary>
            Sets if this <see cref="T:GTA.Ped"/> can switch between different weapons.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsInFlyingVehicle">
            <summary>
            Indicates whether is in a plane or helicopter.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsEnteringVehicle">
            <summary>
            Indicates whether is currently entering a <see cref="T:GTA.Vehicle"/> but not sitting in a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsExitingVehicle">
            <summary>
            Indicates whether is currently exiting a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsJumpingOutOfVehicle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is jumping out of their vehicle.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Ped"/> is jumping out of their vehicle; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.KnockOffVehicleType">
            <summary>
            Sets the vehicle knock off type that determines how easy this <see cref="T:GTA.Ped"/> can be knocked off (fall off) a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.CanBeKnockedOffVehicle">
            <summary>
            Get the value that indicates whether this <see cref="T:GTA.Ped"/> is in a bike and <see cref="P:GTA.Ped.KnockOffVehicleType"/> is not set to <see cref="F:GTA.KnockOffVehicleType.Never"/>
            so the <see cref="T:GTA.Ped"/> can be be knocked off (fall off) a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.CanBeKnockedOffBike">
            <summary>
            Sets the value that indicates whether this <see cref="T:GTA.Ped"/> can be knocked off a <see cref="T:GTA.Vehicle"/> (not limited to a bike despite the property name).
            </summary>
        </member>
        <member name="M:GTA.Ped.IsInVehicle">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is sitting in or getting out any <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.IsInVehicle(GTA.Vehicle)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is sitting in or getting out the specified <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.IsSittingInVehicle">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is sitting in any <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.IsSittingInVehicle(GTA.Vehicle)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is sitting in the specified <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.IsStandingOnVehicle">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is standing on any <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.IsStandingOnVehicle(GTA.Vehicle)">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is standing on the specified <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetIntoVehicle(GTA.Vehicle,GTA.VehicleSeat)">
            <summary>
            Sets this <see cref="T:GTA.Ped"/> into the relevant seat of the specified <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="vehicle">The vehicle this <see cref="T:GTA.Ped"/> will be set into.</param>
            <param name="seat">The seat to set.</param>
        </member>
        <member name="P:GTA.Ped.LastVehicle">
            <summary>
            Gets the last <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> used.
            </summary>
            <remarks>returns <see langword="null" /> if the last vehicle doesn't exist.</remarks>
        </member>
        <member name="P:GTA.Ped.CurrentVehicle">
            <summary>
            Gets the current <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> is using.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.Ped"/> isn't in a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.Ped.VehicleTryingToEnter">
            <summary>
            Gets the <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Ped"/> is trying to enter.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.Ped"/> isn't trying to enter a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.Ped.GroundEntity">
            <summary>
            Gets the current ground <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Ped"/> is standing on.
            </summary>
            <remarks>
            returns <see langword="null" /> if this <see cref="T:GTA.Ped"/> is not standing on a <see cref="T:GTA.Entity"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.SeatIndex">
            <summary>
            Gets the <see cref="T:GTA.VehicleSeat"/> this <see cref="T:GTA.Ped"/> is in.
            </summary>
            <value>
            The <see cref="T:GTA.VehicleSeat"/> this <see cref="T:GTA.Ped"/> is in if this <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.Vehicle"/>; otherwise, <see cref="F:GTA.VehicleSeat.None"/>.
            </value>
        </member>
        <member name="P:GTA.Ped.DrivingSpeed">
            <summary>
            <para>
            Sets the driving speed this <see cref="T:GTA.Ped"/> drives at.
            </para>
            <para>
            this <see cref="T:GTA.Ped"/> must be on a <see cref="T:GTA.Vehicle"/> as a driver and the drive task running on this <see cref="T:GTA.Ped"/> must be active before setting the value can actually affect.
            </para>
            </summary>
            <remarks>
            Despite the interface, this actually changes the cruise speed field on <c>CTaskVehicleMissionBase</c>, which is not for <see cref="T:GTA.Ped"/> but for <see cref="T:GTA.Vehicle"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.MaxDrivingSpeed">
            <summary>
            <para>
            Sets the maximum driving speed this <see cref="T:GTA.Ped"/> can drive at.
            </para>
            <para>
            This <see cref="T:GTA.Ped"/> must be on a <see cref="T:GTA.Vehicle"/> as a driver and the drive task running on this <see cref="T:GTA.Ped"/> must be active before setting the value can actually affect.
            </para>
            </summary>
            <remarks>
            Despite the interface, this actually changes the maximum cruise speed field on <c>CTaskVehicleMissionBase</c>, which is not for <see cref="T:GTA.Ped"/> but for <see cref="T:GTA.Vehicle"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.DrivingStyle">
            <summary>
            <para>
            Sets the the drive tasks driving style.
            </para>
            <para>
            This <see cref="T:GTA.Ped"/> must be on a <see cref="T:GTA.Vehicle"/> as a driver and the drive task running on this <see cref="T:GTA.Ped"/> must be active before setting the value can actually affect.
            </para>
            </summary>
            <remarks>
            Despite the interface, this actually changes the driving flags field on <c>CTaskVehicleMissionBase</c>, which is not for <see cref="T:GTA.Ped"/> but for <see cref="T:GTA.Vehicle"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.VehicleDrivingFlags">
            <summary>
            <para>
            Sets the the drive tasks driving style.
            </para>
            <para>
            This <see cref="T:GTA.Ped"/> must be on a <see cref="T:GTA.Vehicle"/> as a driver and the drive task running on this <see cref="T:GTA.Ped"/> must be active before setting the value can actually affect.
            </para>
            </summary>
            <remarks>
            Despite the interface, this actually changes the driving flags field on <c>CTaskVehicleMissionBase</c>, which is not for <see cref="T:GTA.Ped"/> but for <see cref="T:GTA.Vehicle"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.DrivingAggressiveness">
            <summary>
            Sets how aggressive a driver this <see cref="T:GTA.Ped"/> will be. Range is 0f to 1f, with 0f being no aggression and 1f being maximum aggression.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsJacking">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is in the process of dragging another <see cref="T:GTA.Ped"/> from a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsBeingJacked">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is being dragged from their <see cref="T:GTA.Vehicle"/> by another <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.StaysInVehicleWhenJacked">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Ped"/> will stay in the vehicle when the driver gets jacked.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/> stays in vehicle when jacked; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.IsInParachuteFreeFall">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> is in free-fall and ready to use a parachute.
            </summary>
        </member>
        <member name="M:GTA.Ped.OpenParachute">
            <summary>
            Indicates whether this <see cref="T:GTA.Ped"/> running parachute task to open their parachute.
            </summary>
        </member>
        <member name="P:GTA.Ped.ParachuteState">
            <summary>
            Gets the current state of this parachuting <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Returns <see cref="F:GTA.ParachuteState.None"/> if this <see cref="T:GTA.Ped"/> is not parachuting.
            </remarks>
        </member>
        <member name="P:GTA.Ped.ParachuteLandingType">
            <summary>
            Gets the current landing type of this parachuting <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Returns <see cref="F:GTA.ParachuteState.None"/> if this <see cref="T:GTA.Ped"/> is not landing.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsInjured">
            <summary>
            <para>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> is injured (<see cref="P:GTA.Entity.Health"/> of the <see cref="T:GTA.Ped"/> is lower than <see cref="P:GTA.Ped.InjuryHealthThreshold"/>) or does not exist.
            </para>
            <para>
            Since <see cref="T:GTA.Ped"/>s cannot start any scripted tasks if you try to give injured <see cref="T:GTA.Ped"/>s some of them,
            this property should be used to determine if the <see cref="T:GTA.Ped"/> is able to do anything in the game (i.e. run scripted tasks) instead of <see cref="P:GTA.Entity.IsDead"/>.
            You can reproduce the case where you give some <see cref="T:GTA.Ped"/> a scripted task but it will not start by modifying <see cref="P:GTA.Ped.InjuryHealthThreshold"/> and then giving them a scripted task.
            <see cref="P:GTA.Entity.IsDead"/> should be used only if you want to specifically know that the <see cref="T:GTA.Ped"/> is dead.
            </para>
            <para>
            Can be safely called to check if <see cref="T:GTA.Ped"/>s exist and are not injured without calling <see cref="M:GTA.Ped.Exists"/>.
            </para>
            </summary>
            <value>
              <see langword="true" /> this <see cref="T:GTA.Ped"/> is injured or does not exist; otherwise, <see langword="false" />.
            </value>
            <seealso cref="P:GTA.Entity.IsDead"/>
            <seealso cref="M:GTA.Ped.Exists"/>
            <remarks>
            Since GTA IV, Rockstar Games use the equivalent native function (<c>IS_PED_INJURED</c> in GTA V) to check if some <see cref="T:GTA.Ped"/> is (almost) dead
            instead of the equivalent one (<c>IS_ENTITY_DEAD</c> in GTA V) of <see cref="P:GTA.Entity.IsDead"/> in most cases.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsInMeleeCombat">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Ped"/> is in melee combat (doing a melee task, which
            is <c>CTaskMelee</c>).
            </summary>
        </member>
        <member name="P:GTA.Ped.CanBeShotInVehicle">
            <summary>
            Sets if this <see cref="T:GTA.Ped"/> can take damage inflicted by regular bullets (not stun gun bullets) while in a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.WasKilledByStealth">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> was killed by a stealth attack.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> was killed by stealth; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.WasKilledByTakedown">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Ped"/> was killed by a takedown.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Ped"/> was killed by a takedown; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.CombatTarget">
            <summary>
            Gets the combat target <see cref="T:GTA.Ped"/> who this <see cref="T:GTA.Ped"/> is in combat with for a
            <c>CTaskCombat</c> of this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Although <c>GET_PED_TARGET_FROM_COMBAT_PED</c> is not present in v1.0.2245.0 or earlier game versions,
            this property supports all game versions. Unlike the native, this property does not check if the
            <see cref="T:GTA.Ped"/> is running <c>CTaskCombat</c> before this property can return a valid <see cref="T:GTA.Ped"/>.
            The native would return a valid <see cref="T:GTA.Ped"/> if it is in the case where a <c>CTaskCombat</c> would be
            found on an inactive task tree of <c>CTaskTreePed</c>, however, since it traverse the first
            <c>CTaskInfo</c> and its nodes on <c>CPedIntelligence</c>, not the active task tree.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsPerformingMeleeAction">
            <summary>
            Returns whether this <see cref="T:GTA.Ped"/> is currently performing any type of melee action (attack, block,
            stealth kill, takedown, dodge, etc).
            </summary>
            <remarks>
            This property returns <see langword="true"/> when the <see cref="T:GTA.Ped"/> is executing a
            <c>CTaskMeleeActionResult</c> on the active task tree of the <c>CTaskTreePed</c> on <c>CPedIntelligence</c>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.IsBeingStealthKilled">
            <summary>
            Returns whether this <see cref="T:GTA.Ped"/> is currently being killed by a melee stealth action.
            </summary>
        </member>
        <member name="P:GTA.Ped.MeleeTarget">
            <summary>
            Gets the melee target for this <see cref="T:GTA.Ped"/>. This <see cref="T:GTA.Ped"/> must be performing any type of
            melee action (attack, block, stealth kill, takedown, dodge, etc) before this property can return a valid
            <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            This property access the field of the target <see cref="T:GTA.Ped"/> address of a <c>CTaskMeleeActionResult</c>
            that is executed by this <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="P:GTA.Ped.Killer">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> that killed this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.CauseOfDeath">
            <summary>
            Gets the <see cref="T:GTA.WeaponHash"/> that this <see cref="T:GTA.Ped"/> is killed with. The return value is not necessarily a weapon hash for a human <see cref="T:GTA.Ped"/>s (e.g. can be the hash of <c>WEAPON_COUGAR</c>).
            </summary>
        </member>
        <member name="P:GTA.Ped.TimeOfDeath">
            <summary>
            Gets the time when this <see cref="T:GTA.Ped"/> is killed. This value determines how this <see cref="T:GTA.Ped"/> is rendered when <see cref="P:GTA.Game.IsThermalVisionActive"/> is <see langword="true" /> and the <see cref="T:GTA.Ped"/> is dead.
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearKillerRecord">
            <summary>
            <para>Clears the <see cref="T:GTA.Entity"/> record that killed this <see cref="T:GTA.Ped"/>. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the source of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c> (not <see langword="null" />), the game does not write the memory address of the <see cref="T:GTA.Ped"/> that killed this <see cref="T:GTA.Ped"/>.</para>
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearCauseOfDeathRecord">
            <summary>
            <para>Clears the record of the cause of death that killed this <see cref="T:GTA.Ped"/> with. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the cause of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c>, the game does not write the weapon hash value for the cause of death.</para>
            </summary>
        </member>
        <member name="M:GTA.Ped.ClearTimeOfDeathRecord">
            <summary>
            <para>Clears the time record when this <see cref="T:GTA.Ped"/> is killed. Can be useful after resurrecting this <see cref="T:GTA.Ped"/>.</para>
            <para>Internally, when a <see cref="T:GTA.Ped"/> killed and the value for the time of death in the instance of this <see cref="T:GTA.Ped"/> is not <c>0</c>, the game does not write the game time value for the time of death.</para>
            </summary>
        </member>
        <member name="P:GTA.Ped.CanSufferCriticalHits">
            <summary>
            Gets or Sets whether this <see cref="T:GTA.Ped"/> can suffer critical damage (which deals 1000 times base damages to non-player characters with default weapon configs) when bullets hit this <see cref="T:GTA.Ped"/>'s head bone or its child bones.
            If <see langword="false"/>, they will take base damage of weapons when bullets hit their head bone or its child bones, just like when bullets hit a bone other than their head bone, its child bones, or limb bones.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Ped"/> can suffer critical damage; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Ped.DiesOnLowHealth">
            <summary>
            Intended to set whether this <see cref="T:GTA.Ped"/> will die when injured, but practically do nothing meaningful.
            </summary>
        </member>
        <member name="P:GTA.Ped.DiesInstantlyInWater">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> will die instantly if they find themselves in a body of water.
            </summary>
            <remarks>
            <para>
            The complete submersion into water does not guarantee this <see cref="T:GTA.Ped"/> will die if this
            <see cref="T:GTA.Ped"/> is the local player. In details, the <see cref="T:GTA.Ped"/> with this flag enabled will not die
            by being in water if this <see cref="T:GTA.Ped"/> is the local player, the <see cref="P:GTA.Ped.PedType"/> is
            <see cref="F:GTA.PedType.Animal"/>, and the motion task data associated with the <see cref="T:GTA.Model"/> (which is set
            based on <c>motiontasks.ymt</c>) has non-null InWater (<c>PED_IN_WATER</c> type) data.
            </para>
            <para>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> unless <see cref="T:GTA.Ped"/> is running a task with
            the type <c>TASK_ON_FOOT_FISH</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.DrownsInWater">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> can take damage for being underwater.
            If this <see cref="T:GTA.Ped"/> is the player one, setting to <see langword="false"/> will enable the player to be
            underwater without taking <c>WEAPON_DROWNING</c> damage forever.
            </summary>
            <remarks>
            <para>
            Stats for time underwater do not be counted when the local player has this flag disabled and is in
            underwater.
            </para>
            <para>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> unless <see cref="T:GTA.Ped"/> is running a task with
            the type <c>TASK_ON_FOOT_FISH</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Ped.DrownsInSinkingVehicle">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> can take <c>WEAPON_DROWNING</c> damage in a sinking vehicle.
            If this <see cref="T:GTA.Ped"/> is the player one, setting to <see langword="false"/> will enable the player to be
            in a sinking vehicle without taking <c>WEAPON_DROWNING</c> damage forever.
            </summary>
        </member>
        <member name="P:GTA.Ped.DropsEquippedWeaponOnDeath">
            <summary>
            Sets whether this <see cref="T:GTA.Ped"/> will drop the current weapon when they get killed.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/> drops the current weapon when killed; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <see cref="T:GTA.Ped"/>s will drop only their current weapon when they get killed.
            </remarks>
        </member>
        <member name="P:GTA.Ped.InjuryHealthThreshold">
            <summary>
            Gets or sets the injury health threshold for this <see cref="T:GTA.Ped"/>.
            The pedestrian is considered injured and cannot start any scripted tasks when its health drops below this value.
            The pedestrian dies on attacks when its health is below this value.
            </summary>
            <value>
            The injury health threshold. Should be below <see cref="P:GTA.Entity.MaxHealth"/>.
            </value>
            <remarks>
            Note on player controlled pedestrians: One of the game scripts will consider the player wasted when their health drops below this setting value.
            </remarks>
        </member>
        <member name="P:GTA.Ped.FatalInjuryHealthThreshold">
            <summary>
            Gets or sets the fatal injury health threshold for this <see cref="T:GTA.Ped"/>.
            The pedestrian health will be set to 0.0 when it drops below this value.
            </summary>
            <value>
            The fatal injury health threshold. Should be below <see cref="P:GTA.Entity.MaxHealth"/>.
            </value>
            <remarks>
            Note on player controlled pedestrians: One of the game scripts will consider the player wasted when their health drops below <see cref="P:GTA.Ped.InjuryHealthThreshold"/>, regardless of this setting.
            </remarks>
        </member>
        <member name="P:GTA.Ped.LastWeaponImpactPosition">
            <summary>
            Gets the last position a weapon of this <see cref="T:GTA.Ped"/> was impacted at this frame.
            </summary>
            <remarks>
            This property should be called every frame as the the last valid result lasts only the frame a weapon of this <see cref="T:GTA.Ped"/>
            was impacted at and else it returns <see cref="P:GTA.Math.Vector3.Zero"/>.
            </remarks>
        </member>
        <member name="M:GTA.Ped.GetRelationshipWithPed(GTA.Ped)">
            <summary>
            Gets the relationship between this <see cref="T:GTA.Ped"/> and <paramref name="ped"/>.
            </summary>
            <param name="ped"></param>
            <remarks>
            This property returns <see cref="F:GTA.Relationship.Pedestrians"/> if the relationship is not set.
            </remarks>
        </member>
        <member name="P:GTA.Ped.RelationshipGroup">
            <summary>
            Gets or sets the <see cref="P:GTA.Ped.RelationshipGroup"/> this <see cref="T:GTA.Ped"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.Ped.SeeingRange">
            <summary>
            Gets or sets how far this <see cref="T:GTA.Ped"/> can see.
            </summary>
        </member>
        <member name="P:GTA.Ped.HearingRange">
            <summary>
            Gets or sets how far this <see cref="T:GTA.Ped"/> can hear.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldMinAngle">
            <summary>
            Gets or sets the minimum horizontal field of view for this <see cref="T:GTA.Ped"/>.
            Should be negative.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldMaxAngle">
            <summary>
            Gets or sets the maximum horizontal field of view for this <see cref="T:GTA.Ped"/>.
            Should be positive.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldMinElevationAngle">
            <summary>
            Gets or sets the minimum vertical field of view for this <see cref="T:GTA.Ped"/>.
            Should be negative.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldMaxElevationAngle">
            <summary>
            Gets or sets the maximum vertical field of view for this <see cref="T:GTA.Ped"/>.
            Should be positive.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldPeripheralRange">
            <summary>
            Gets or sets how far the peripheral vision of this <see cref="T:GTA.Ped"/> extends.
            </summary>
        </member>
        <member name="P:GTA.Ped.VisualFieldCenterAngle">
            <summary>
            Gets or sets the central visual field angle of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.IsInGroup">
            <summary>
            Gets if this <see cref="T:GTA.Ped"/> is in a <see cref="P:GTA.Ped.PedGroup"/>.
            </summary>
        </member>
        <member name="P:GTA.Ped.PedGroup">
            <summary>
            Gets the PedGroup this <see cref="T:GTA.Ped"/> is in.
            </summary>
        </member>
        <member name="M:GTA.Ped.StopCurrentPlayingSpeech">
            <summary>
            Stops currently playing speech (pain, ambient, scripted, breathing).
            </summary>
        </member>
        <member name="M:GTA.Ped.StopCurrentPlayingAmbientSpeech">
            <summary>
            Stops currently playing ambient speech.
            </summary>
            <remarks>
            Does nothing if the currently playing speech is not an ambient one.
            </remarks>
        </member>
        <member name="P:GTA.Ped.Voice">
            <summary>
            Sets the ambient voice to use when this <see cref="T:GTA.Ped"/> speaks.
            </summary>
            <remarks>
            The voice name will be stored as a joaat hash converted in the same way as <see cref="M:GTA.Game.GenerateHash(System.String)"/> does.
            </remarks>
        </member>
        <member name="P:GTA.Ped.CanPlayGestures">
            <summary>
            Sets the value that indicates this <see cref="T:GTA.Ped"/> can play gesture animations.
            </summary>
        </member>
        <member name="P:GTA.Ped.MovementAnimationSet">
            <summary>
            Sets the movement clip/animation set this <see cref="T:GTA.Ped"/> should use or <see langword="null"/>
            to reset to the default value defined in <c>peds.meta</c> under <c>&lt;MovementClipSet&gt;</c>.
            </summary>
            <remarks>
            <para>
            When the value is set to <see langword="null"/>, <see cref="M:GTA.TaskInvoker.ClearAll"/> will be called
            right after resetting the movement clipset.
            </para>
            <para>
            Despite what the doc for this property said in between v3.0.0 in v3.6.0, the loading state of some animation
            dictionaries has nothing to do with this property. Specifying a string only registered as a clip/animation
            dictionary will result in the setter failure.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetMovementClipSet(GTA.ClipSet,System.Nullable{GTA.AnimationBlendDuration})">
            <summary>
            Sets the movement clipset this <see cref="T:GTA.Ped"/> should use.
            Do not forget to stream in/load the clipset you want to load, or the method silently will fail.
            </summary>
            <param name="clipSet">
            The new movement clip set.
            </param>
            <param name="blendDuration">
            The blend duration. If <see langword="null"/>, <see cref="P:GTA.AnimationBlendDuration.Normal"/> will be used
            as the duration.
            </param>
            <remarks>
            Unlike any methods that requires some resource to be loaded before the main operation and that are present
            in v3.6.0, this method does not load the clipset automatically. Load the clipset you want to load
            beforehand.
            </remarks>
        </member>
        <member name="M:GTA.Ped.ResetMovementClipSet(System.Nullable{GTA.AnimationBlendDuration})">
            <summary>
            Resets the movement clipset to the default value defined in <c>peds.meta</c> under
            <c>&lt;MovementClipSet&gt;</c>.
            Do not forget to unstream the clipset if no longer needed.
            </summary>
            <param name="blendDuration">
            The blend duration. If <see langword="null"/>, <see cref="P:GTA.AnimationBlendDuration.Normal"/> will be used
            as the duration.
            </param>
        </member>
        <member name="M:GTA.Ped.SetStrafeClipSet(GTA.ClipSet)">
            <summary>
            Sets the strafe clipset this <see cref="T:GTA.Ped"/> should use.
            Do not forget to stream in/load the clipset you want to load, or the method silently will fail.
            </summary>
            <remarks>
            Unlike any methods that requires some resource to be loaded before the main operation and that are present in v3.6.0,
            this method does not load the clipset automatically. Load the clipset you want to load beforehand.
            </remarks>
        </member>
        <member name="M:GTA.Ped.ResetStrafeClipSet">
            <summary>
            Resets the strafe clipset to the default value defined in <c>peds.meta</c> under <c>&lt;StrafeClipSet&gt;</c>.
            Do not forget to unstream the clipset if no longer needed.
            </summary>
        </member>
        <member name="M:GTA.Ped.SetWeaponMovementClipSet(GTA.ClipSet)">
            <summary>
            Sets the weapon movement clipset this <see cref="T:GTA.Ped"/> should use.
            Do not forget to stream in/load the clipset you want to load, or the method silently will fail.
            </summary>
            <remarks>
            Unlike any methods that requires some resource to be loaded before the main operation and that are present in v3.6.0,
            this method does not load the clipset automatically. Load the clipset you want to load beforehand.
            </remarks>
        </member>
        <member name="M:GTA.Ped.ResetWeaponMovementClipSet">
            <summary>
            Resets the weapon movement clipset to the default value defined in <c>peds.meta</c> under <c>&lt;StrafeClipSet&gt;</c>.
            Do not forget to unstream the clipset if no longer needed.
            </summary>
        </member>
        <member name="M:GTA.Ped.ApplyWorldForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to this <see cref="T:GTA.Entity"/> using world offset.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyWorldForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to this <see cref="T:GTA.Entity"/> using relative offset.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyRelativeForceWorldOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to this <see cref="T:GTA.Entity"/> using world offset.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyRelativeForceRelativeOffset(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to this <see cref="T:GTA.Entity"/> using relative offset.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyForceInternal(GTA.Math.Vector3,GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a force to this <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="force">The force to be applied.</param>
            <param name="offset">The offset from center of entity at which to apply force.</param>
            <param name="forceType">Type of the force to apply.</param>
            <param name="component">Component of the entity to apply the force.</param>
            <param name="relativeForce">
            Specifies whether the force vector passed in is in relative or world coordinates.
            Relative coordinates (<see langword="true"/>) means the force will get automatically transformed into world space before being applied.
            </param>
            <param name="relativeOffset">Specifies whether the offset passed in is in relative or world coordinates.</param>
            <param name="scaleByMass">
            <para>Specifies whether to scale the force by mass.</para>
            <para>If <see langword="true"/>, force will be multiplied by mass. For example, force passed in is in fact an acceleration rate in <c>m/s*s</c> (force) or velocity change in <c>m/s</c> (impulse).</para>
            <para>If <see langword="false"/>, force will be applied directly and it's effect will depend on the mass of the entity. For example, force passed in is a proper force in Newtons (force) or a step change in momentum <c>kg*m/s</c> (impulse).</para>
            <para>
            In other words, scaling by mass is probably easier in most situations -
            if the mass of the object changes it's behaviour shouldn't, and it's easier to picture the effect because an acceleration rate of <c>10.0</c> is approximately the same as gravity (<c>9.81</c> to be more precise).
            </para>
            </param>
            <param name="triggerAudio">
            <para>Specifies whether to play audio events related to the force being applied. The sound will play only if the entity type is <see cref="T:GTA.Vehicle"/> and will play a suspension squeal depending on the magnitude of the force.</para>
            <para>The sound will play even if regardless of <see cref="T:GTA.ForceType"/> (even with a value other than between 0 to 5).</para>
            </param>
            <param name="scaleByTimeScale">
            <para>Specifies whether scale the force by the current time scale (max: <c>1.0f</c>).</para>
            <para>Only affects when <paramref name="forceType"/> is <see cref="F:GTA.ForceType.InternalImpulse"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="component"/> not a value defined in <see cref="T:GTA.RagdollComponent"/>.</exception>
        </member>
        <member name="M:GTA.Ped.ApplyWorldForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean)">
            <summary>
            Applies a world force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyRelativeForceCenterOfMass(GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean)">
            <summary>
            Applies a relative force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <inheritdoc cref="M:GTA.Ped.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.Ped.ApplyForceCenterOfMassInternal(GTA.Math.Vector3,GTA.ForceType,GTA.RagdollComponent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies a force to the center of mass of this <see cref="T:GTA.Entity"/>.
            <paramref name="forceType"/> must not be <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>.
            </summary>
            <param name="force">The force to be applied.</param>
            <param name="forceType">Type of the force to apply.</param>
            <param name="component">Component of the entity to apply the force.</param>
            <param name="relativeForce">
            Specifies whether the force vector passed in is in relative or world coordinates.
            Relative coordinates (<see langword="true"/>) means the force will get automatically transformed into world space before being applied.
            </param>
            <param name="scaleByMass">
            <para>Specifies whether to scale the force by mass.</para>
            <para>If <see langword="true"/>, force will be multiplied by mass. For example, force passed in is in fact an acceleration rate in <c>m/s*s</c> (force) or velocity change in <c>m/s</c> (impulse).</para>
            <para>If <see langword="false"/>, force will be applied directly and it's effect will depend on the mass of the entity. For example, force passed in is a proper force in Newtons (force) or a step change in momentum <c>kg*m/s</c> (impulse).</para>
            <para>
            In other words, scaling by mass is probably easier in most situations -
            if the mass of the object changes it's behaviour shouldn't, and it's easier to picture the effect because an acceleration rate of <c>10.0</c> is approximately the same as gravity (<c>9.81</c> to be more precise).
            </para>
            </param>
            <param name="applyToChildren">Specifies whether to apply force to children components as well as the speficied component.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="forceType"/> is set to <see cref="F:GTA.ForceType.ExternalForce"/> or <see cref="F:GTA.ForceType.ExternalImpulse"/>, which is not supported by this method.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="component"/> not a value defined in <see cref="T:GTA.RagdollComponent"/>.</exception>
        </member>
        <member name="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)">
            <summary>
            Sets the IK target for a given IK part belonging to this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="ikPart">The IK Part to set.</param>
            <param name="targetBone">The target <see cref="T:GTA.EntityBone"/>.</param>
            <param name="targetOffset">The target offset relative to the bone.</param>
            <param name="flags">The flags.</param>
            <param name="blendInTimeMS">
            The blend in time in milliseconds.
            Set to -1 for default blend in time. Set to 0 for instant blend in time.
            </param>
            <param name="blendOutTimeMS">
            The blend out time in milliseconds.
            Set to -1 for default blend out time. Set to 0 for instant blend out time.
            </param>
            <remarks>
            The IK target will only be valid for one update, so it needs to be set for as long as it is needed (to
            avoid IK targets not being cleared and getting stuck enabled).
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.EntityBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/summary"/>
            </summary>
            <param name="ikPart">The IK Part to set.</param>
            <param name="targetBone">The target <see cref="T:GTA.EntityBone"/>.</param>
            <param name="targetOffset">The target offset relative to the bone.</param>
            <param name="flags">The flags.</param>
            <param name="blendInTimeMS">
            The blend in time in milliseconds.
            Set to -1 for default blend in time. Set to 0 for instant blend in time.
            </param>
            <param name="blendOutTimeMS">
            The blend out time in milliseconds.
            Set to -1 for default blend out time. Set to 0 for instant blend out time.
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.Entity,System.Int32,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/summary"/>
            </summary>
            <param name="ikPart">The IK Part to set.</param>
            <param name="targetEntity">The target <see cref="T:GTA.Entity"/>.</param>
            <param name="boneTag">
            The target bone tag (an identifier, not a sequential index).
            Set to -1 for no target bone.
            </param>
            <param name="targetOffset">
            If <paramref name="targetEntity"/> is <see langword="null"/>, this is assumed to be world coordinates.
            If <paramref name="targetEntity"/> is not <see langword="null"/>, this is an offset from
            <paramref name="targetEntity"/>.
            If <paramref name="targetEntity"/> is not <see langword="null"/> and <paramref name="boneTag"/> is not -1,
            this is an offset relative to the bone.
            </param>
            <param name="flags">The flags.</param>
            <param name="blendInTimeMS">
            The blend in time in milliseconds.
            Set to -1 for default blend in time. Set to 0 for instant blend in time.
            </param>
            <param name="blendOutTimeMS">
            The blend out time in milliseconds.
            Set to -1 for default blend out time. Set to 0 for instant blend out time.
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/summary"/>
            </summary>
            <param name="ikPart">The IK Part to set.</param>
            <param name="target">The world position/coordinates to target.</param>
            <param name="flags">The flags.</param>
            <param name="blendInTimeMS">
            The blend in time in milliseconds.
            Set to -1 for default blend in time. Set to 0 for instant blend in time.
            </param>
            <param name="blendOutTimeMS">
            The blend out time in milliseconds.
            Set to -1 for default blend out time. Set to 0 for instant blend out time.
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.Ped.SetIKTarget(GTA.IKPart,GTA.PedBone,GTA.Math.Vector3,GTA.IKTargetFlags,System.Int32,System.Int32)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.Ped.GetAllLoadedModelsAppropriateForAmbientPeds">
            <summary>
            Gets an array of all loaded <see cref="T:GTA.PedHash"/>s that are appropriate to spawn as ambient peds.
            The result array can contain animal hashes and gang ped hashes, which CREATE_RANDOM_PED excludes from spawning.
            All the model hashes of the elements are loaded and the <see cref="T:GTA.Ped"/>s with the model hashes can be spawned immediately.
            </summary>
        </member>
        <member name="M:GTA.Ped.MakePedInstIfHandleIsNotZero(System.Int32)">
            <summary>
            Returns a <see cref="T:GTA.Ped"/> instance with the specified handle if the handle is not zero.
            Much more cheaper than calling <see cref="M:GTA.Entity.FromHandle(System.Int32)"/>, but be sure to use this only if we
            know what we are using always returns the zero handle when it does not return a valid ped handle.
            </summary>
            <param name="handle">The handle to test.</param>
            <returns>
            A <see cref="T:GTA.Ped"/> instance if <paramref name="handle"/> is not zero; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="P:GTA.PedBone.Tag">
            <summary>
            Gets the bone tag (identifier) of this <see cref="T:GTA.PedBone"/>.
            Will return the same value as <see cref="P:GTA.EntityBone.Tag"/> but the returned type is <see cref="T:GTA.Bone"/>.
            If the bone does not exist, <see cref="F:GTA.Bone.Invalid"/> will be returned.
            </summary>
        </member>
        <member name="P:GTA.PedBone.NextSibling">
            <summary>
            Gets the sibling bone of this <see cref="T:GTA.PedBone"/>.
            To check existence of the next sibling bone, you can use <see cref="P:GTA.EntityBone.Index"/> or <see cref="P:GTA.PedBone.Tag"/>.
            </summary>
        </member>
        <member name="P:GTA.PedBone.Parent">
            <summary>
            Gets the parent bone of this <see cref="T:GTA.PedBone"/>.
            To check existence of the next sibling bone, you can use <see cref="P:GTA.EntityBone.Index"/> or <see cref="P:GTA.PedBone.Tag"/>.
            </summary>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(GTA.Bone)">
            <summary>
            Gets the <see cref="T:GTA.PedBone"/> with the specified <paramref name="boneId"/>.
            </summary>
            <param name="boneId">The bone Id.</param>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.PedBone"/> at the specified bone index.
            </summary>
            <param name="boneIndex">The bone index.</param>
        </member>
        <member name="P:GTA.PedBoneCollection.Item(System.String)">
            <summary>
            <para>
            Gets the <see cref="T:GTA.PedBone"/> with the specified bone name. Use this overload only if you know a correct bone tag.
            If the corresponding bone is not found, the <see cref="P:GTA.EntityBone.Index"/> of the returned instance will return <c>-1</c>.
            </para>
            <para>
            This method will try to find the corresponding bone by the hash calculated with <c>(ElfHashUppercased(string) % 0xFE8F + 0x170)</c>,
            where <c>ElfHashUppercased(string)</c> will convert ASCII lowercase characters to uppercase ones before hashing characters.
            </para>
            </summary>
            <param name="boneName">Name of the bone.</param>
            <remarks>
            Registered bone tag values (in the model) may be different from the calculated hashes from corresponding bone names.
            For example, <see cref="T:GTA.Ped"/>s have the bones in their skeletons whose name is <c>SKEL_Spine3</c> and whose ID is <c>24818</c>, which doesn't match the hashed value of <c>SKEL_Spine3</c> but matches that of <c>BONETAG_SPINE3</c>.
            On the other hand, <see cref="T:GTA.Ped"/>s have the bone in their skeletons whose name is <c>IK_Head</c> and whose ID is <c>12844</c>, which matches the hashed value of <c>IK_Head</c>.
            </remarks>
        </member>
        <member name="P:GTA.PedBoneCollection.Core">
            <summary>
            Gets the core bone of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.PedBoneCollection.LastDamaged">
            <summary>
            Gets the last damaged bone for this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.PedBoneCollection.ClearLastDamaged">
            <summary>
            Clears the last damage a bone on this <see cref="T:GTA.Ped"/> received.
            </summary>
        </member>
        <member name="P:GTA.PedComponent.Count">
            <summary>
            Returns the number of available drawable models for the component type.
            </summary>
        </member>
        <member name="P:GTA.PedComponent.Index">
            <summary>
            The drawable id/index.
            </summary>
        </member>
        <member name="P:GTA.PedComponent.TextureCount">
            <summary>
            The texture count property for current <see cref="P:GTA.PedComponent.Index"/>.
            </summary>
            <remarks>
            You need to set a drawable id via <see cref="P:GTA.PedComponent.Index"/> before you can get the correct number of textures
            for a drawable model.
            </remarks>
        </member>
        <member name="P:GTA.PedComponent.TextureIndex">
            <summary>
            The texture index for the current drawable <see cref="P:GTA.PedComponent.Index"/>.
            </summary>
            <remarks>
            You need to set a drawable id via <see cref="P:GTA.PedComponent.Index"/> before you can get of set the texture index properly.
            </remarks>
        </member>
        <member name="P:GTA.PedComponent.HasTextureVariations">
            <summary>
            Returns <see langword="true"/> if there are textures for current drawable id (<see cref="P:GTA.PedComponent.Index"/>).
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Face">
            <summary>
            The head component. Despite the symbol name, this component is not limited to face.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Head">
            <summary>
            The beard component. Despite the symbol name, this component is supposed to be limited to beard.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Torso">
            <summary>
            The upper body component.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Legs">
            <summary>
            The lower body component.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Shoes">
            <summary>
            The feet component.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Special1">
            <summary>
            The "teeth" component, which is not used for teeth geometry in practice and instead used as an accessory
            component instead.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Textures">
            <summary>
            The decal component.
            </summary>
        </member>
        <member name="F:GTA.PedComponentType.Torso2">
            <summary>
            The JIJB component.
            </summary>
        </member>
        <member name="T:GTA.PedConfigFlags">
            <summary>
            Represents a wrapper class for `<c>CPedConfigFlags</c>` (not `<c>ePedConfigFlags</c>`), which contains
            relatively static flags to configure <see cref="T:GTA.Ped"/>s abilities, options, and special settings.
            </summary>
        </member>
        <member name="P:GTA.PedConfigFlags.KnockOffVehicleType">
            <summary>
            Sets the vehicle knock off type that determines how easy this <see cref="T:GTA.Ped"/> can be knocked off
            (fall off) a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.PedConfigFlags.PedLegIKMode">
            <summary>
            Gets or sets the <see cref="T:GTA.Ped"/> leg IK mode.
            </summary>
        </member>
        <member name="P:GTA.PedConfigFlags.PassengerIndexToUseInAGroup">
            <summary>
            Gets or sets the passenger index the <see cref="T:GTA.Ped"/> should want to be in use when they are in
            a <see cref="T:GTA.PedGroup"/> as a follower.
            If set to <see cref="F:GTA.VehicleSeat.Any"/>, which is the default value when a <see cref="T:GTA.Ped"/> is created,
            the group leader <see cref="T:GTA.Ped"/> will decide which seat this <see cref="T:GTA.Ped"/> should be in when
            the leader entered a vehicle as a driver (using a task response to a event leader event).
            </summary>
            <value>
            A corresponding <see cref="T:GTA.VehicleSeat"/> value if the internal value is between 0 and 15, or
            <see cref="F:GTA.VehicleSeat.Any"/> if the internal value is -1 (which is the default value); otherwise,
            <see cref="F:GTA.VehicleSeat.None"/> (e.g. when the internal value is between -16 and -2 or SHVDN could not
            fetch the value).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The passenger index is not one of the members of the passenger seats of <see cref="T:GTA.VehicleSeat"/> to
            specify the passenger index or <see cref="F:GTA.VehicleSeat.Any"/> to let the group leader <see cref="T:GTA.Ped"/>
            inform this <see cref="T:GTA.Ped"/> of which seat this <see cref="T:GTA.Ped"/> should be in. Only thrown from
            the setter.
            </exception>
            <remarks>
            You can force the <see cref="T:GTA.Ped"/> to use the specified passenger seat only by setting
            <see cref="F:GTA.PedConfigFlagToggles.ForcedToUseSpecificGroupSeatIndex"/> on.
            </remarks>
        </member>
        <member name="M:GTA.PedConfigFlags.GetConfigFlag(GTA.PedConfigFlagToggles)">
            <summary>
            Gets the value of a config flag toggle on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.PedConfigFlags.SetConfigFlag(GTA.PedConfigFlagToggles,System.Boolean)">
            <summary>
            Sets the value of a config flag toggle on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="T:GTA.PedConfigFlagToggles">
            <summary>
            An enumeration of known config flags for <see cref="T:GTA.Ped"/> (represents `<c>ePedConfigFlags</c>`).
            </summary>
            <remarks>
            You can check if names of this enum are included in the exe by searching the dumped exe for hashed values of
            names like `<c>CPED_CONFIG_FLAG_[enum name]</c>` without case conversion
            (for example, search the dumped exe for <c>0x583B5E2D</c>, which is the hashed value of
            `<c>CPED_CONFIG_FLAG_AllowMedicsToReviveMe</c>`).
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanBeShotInVehicle">
            <summary>
            Script can stop <see cref="T:GTA.Ped"/>s being shot when driving <see cref="T:GTA.Vehicle"/> (including exposed ones
            like bikes).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NoCriticalHits">
            <summary>
            <see cref="T:GTA.Ped"/> cannot be killed by a single bullet.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DrownsInWater">
            <summary>
            Determines whether this <see cref="T:GTA.Ped"/> can drown in water by taking drown damage.
            Can be set with <see cref="P:GTA.Ped.DrownsInWater"/>.
            </summary>
            <remarks>
            Resets to <see langword="true"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be done
            with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> unless <see cref="T:GTA.Ped"/> is running a task with the type
            <c>TASK_ON_FOOT_FISH</c>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DrownsInSinkingVehicle">
            <summary>
            Determines whether this <see cref="T:GTA.Ped"/> can take damage whilst in a sinking <see cref="T:GTA.Vehicle"/>.
            Can be set with <see cref="P:GTA.Ped.DrownsInSinkingVehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DiesInstantlyWhenSwimming">
            <summary>
            <see cref="T:GTA.Ped"/> cannot swim and will die as soon as they are required to swim.
            Can be set with <see cref="P:GTA.Ped.DiesInstantlyInWater"/>.
            </summary>
            <remarks>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> unless <see cref="T:GTA.Ped"/> is running a task with
            the type <c>TASK_ON_FOOT_FISH</c>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasBulletProofVest">
            <summary>
            If <see langword="true"/>, <see cref="T:GTA.Ped"/> will not take gun damage where the hit bone is
            <see cref="F:GTA.Bone.SkelSpine0"/>, <see cref="F:GTA.Bone.SkelSpine1"/>, <see cref="F:GTA.Bone.SkelSpine2"/>, or
            <see cref="F:GTA.Bone.SkelSpine3"/> (<c>BONETAG_SPINE0</c>, <c>BONETAG_SPINE1</c>, <c>BONETAG_SPINE2</c>, and
            <c>BONETAG_SPINE0</c> of bone tag names respectively).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UpperBodyDamageAnimsOnly">
            <summary>
            Force <see cref="T:GTA.Ped"/> to play only upper body damage anims from weapons.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverFallOffSkis">
            <summary>
            <see cref="T:GTA.Ped"/> will never fall over on skis.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverEverTargetThisPed">
            <summary>
            If <see langword="true"/>, the player cannot target the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ThisPedIsATargetPriority">
            <summary>
            If <see langword="true"/>, the player targetting system puts the fixed high score on the <see cref="T:GTA.Ped"/>
            as a scripted high priority target (though configurable  with <c>PrioScriptedHighPriority</c> in
            <c>pedtargetevaluator.ymt</c>), which will make the player will target them easier.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TargettableWithNoLos">
            <summary>
            If <see langword="true"/>, the player can target the <see cref="T:GTA.Ped"/> without line of sight to them.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DoesntListenToPlayerGroupCommands">
            <summary>
            script can set this so <see cref="T:GTA.Ped"/> will be in players group but not reacting to commands.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverLeavesGroup">
            <summary>
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will not leave their <see cref="T:GTA.PedGroup"/> when
            the distance to the leader exceeds the configured separation range.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SetDelayedWeaponAsCurrent">
            <summary>
            When the <see cref="T:GTA.Ped"/>s delayed weapon finally loads, set it as the <see cref="T:GTA.Ped"/>s current weapon.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KeepTasksAfterCleanUp">
            <summary>
            If <see langword="true"/> <see cref="T:GTA.Ped"/> will carry on with task even after script <see cref="T:GTA.Ped"/>
            cleanup.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockNonTemporaryEvents">
            <summary>
            Set to block any events that might interrupt the currently running tasks.
            Can be set with <see cref="P:GTA.Ped.BlockPermanentEvents"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowMedicsToReviveMe">
            <summary>
            If the <see cref="T:GTA.Ped"/> dies medics will be dispatched, <see langword="false"/> by default for mission
            <see cref="T:GTA.Ped"/>s, the <see cref="T:GTA.Ped"/> wont be attended.
            </summary>
            <remarks>
            Despite the "correct" enum name whose hash 0x583B5E2D (for `<c>CPED_CONFIG_FLAG_AllowMedicsToReviveMe</c>`)
            is present in the exe, medics cannot revive <see cref="T:GTA.Ped"/>s.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.MoneyHasBeenGivenByScript">
            <summary>
            Script can give specific amount of money to <see cref="T:GTA.Ped"/> (script <see cref="T:GTA.Ped"/>s don't drop any
            money by default).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NotAllowedToCrouch">
            <summary>
            Is this <see cref="T:GTA.Ped"/> allowed to crouch at all?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DeathPickupsPersist">
            <summary>
            Script command to control what type of pickups are created when <see cref="T:GTA.Ped"/> dies.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreSeenMelee">
            <summary>
            Script command so <see cref="T:GTA.Ped"/> doesn't stop to watch fights.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceDieIfInjured">
            <summary>
            Script command so missions <see cref="T:GTA.Ped"/>s die if injured.
            Can be set with <see cref="P:GTA.Ped.DiesOnLowHealth"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontDragMeOutCar">
            <summary>
            Force this <see cref="T:GTA.Ped"/> can't be carjacked.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.StayInCarOnJack">
            <summary>
            Script sets this to keep <see cref="T:GTA.Ped"/>s in <see cref="T:GTA.Vehicle"/> when the player steals it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceDieInCar">
            <summary>
            Don't fall out <see cref="T:GTA.Vehicle"/> if killed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.GetOutUndriveableVehicle">
            <summary>
            script can stop <see cref="T:GTA.Ped"/>s automatically getting out of <see cref="T:GTA.Vehicle"/> when it's upside down
            or undrivable (for races and stuff), defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillRemainOnBoatAfterMissionEnds">
            <summary>
            Script can stop <see cref="T:GTA.Ped"/>s automatically leaving boats when they become random chars, after a script
            quits.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontStoreAsPersistent">
            <summary>
            Some <see cref="T:GTA.Ped"/>s (like mission <see cref="T:GTA.Ped"/>s) should not be stored as persistent.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillFlyThroughWindscreen">
            <summary>
            The <see cref="T:GTA.Ped"/> will fly through the <see cref="T:GTA.Vehicle"/> windscreen upon a forward impact at high
            velocity.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasHelmet">
            <summary>
            The <see cref="T:GTA.Ped"/> has a helmet (the PedHelmetComponent has put the helmet on the <see cref="T:GTA.Ped"/> via
            "put on" animations).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseHelmet">
            <summary>
            will the <see cref="T:GTA.Ped"/> try to put on their helmet?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontTakeOffHelmet">
            <summary>
            The <see cref="T:GTA.Ped"/> will not take off their helmet (if equipped) while this is set.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedGeneratesDeadBodyEvents">
            <summary>
            Generates shocking events as if dead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontInfluenceWantedLevel">
            <summary>
            Can do any crime against this character and the cops turn a blind eye (no crime reported).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisablePlayerLockOn">
            <summary>
            If set on the local player <see cref="T:GTA.Ped"/>, the player cannot lock on any <see cref="T:GTA.Ped"/>s at all.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_DisablePlayerLockon</c>` in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableLockOnToRandomPeds">
            <summary>
            In the multiplayer game, if set on a player <see cref="T:GTA.Ped"/>, they cannot lock on other non-player
            <see cref="T:GTA.Ped"/>s with the <see cref="T:GTA.EntityPopulationType"/> anything other than
            <see cref="F:GTA.EntityPopulationType.Mission"/>.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_DisableLockonToRandomPeds</c>` in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowLockOnToFriendlyPlayers">
            <summary>
            In the multiplayer game, if set on a player <see cref="T:GTA.Ped"/>, they cannot lock on a friendly player
            <see cref="T:GTA.Ped"/>s.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers</c>` in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHornAudioWhenDead">
            <summary>
            Disable the horn when the <see cref="T:GTA.Ped"/> dies in a <see cref="T:GTA.Vehicle"/> and has their head against
            the steering wheel.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockWeaponSwitching">
            <summary>
            Disable weapon switching while this is set.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockGroupPedAimedAtResponse">
            <summary>
            Disable the behaviour which causes player-group <see cref="T:GTA.Ped"/>s to crouch when the player aims at them.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillFollowLeaderAnyMeans">
            <summary>
            Basically defines whether group <see cref="T:GTA.Ped"/>s will use <see cref="T:GTA.Vehicle"/>s etc. to follow their
            leader (<see langword="false"/> by default).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlippedByScript">
            <summary>
            Set to <see langword="true"/> if the char has ever been blipped, not 100% correct so don't use it on
            anything sensitive.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DrawRadarVisualField">
            <summary>
            Draw this <see cref="T:GTA.Ped"/>s visual field in the stealth radar.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.StopWeaponFiringOnImpact">
            <summary>
            Set to <see langword="true"/> to stop the <see cref="T:GTA.Ped"/>s weapon firing on impact when they drop it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableAutoFallOffTests">
            <summary>
            Set to <see langword="true"/> to stop <see cref="T:GTA.Ped"/> scanning for things to fall off when shot by
            the player.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_DissableAutoFallOffTests</c>` in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SteerAroundDeadBodies">
            <summary>
            Forces <see cref="T:GTA.Ped"/>s to steer around dead bodies, the default is <see langword="false"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ConstrainToNavMesh">
            <summary>
            Does not use for special handling in game code.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SyncingAnimatedProps">
            <summary>
            Does not use for special handling in game code.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WasStanding">
            <summary>
            Was the <see cref="T:GTA.Ped"/> standing last frame.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WasSwimming">
            <summary>
            Was the <see cref="T:GTA.Ped"/> swimming in water last frame.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KilledByStealth">
            <summary>
            Determines if this <see cref="T:GTA.Ped"/> was killed by a stealth action.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KilledByTakedown">
            <summary>
            Determines if this <see cref="T:GTA.Ped"/> was killed by a takedown action.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KnockedOut">
            <summary>
            Determines if this <see cref="T:GTA.Ped"/> was finished with a knockout action.
            </summary>
            <remarks>
            The original name is <c>CPED_CONFIG_FLAG_Knockedout</c> in the exe, but this enum uses the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ClearRadarBlipOnDeath">
            <summary>
            So <see cref="T:GTA.Ped"/>s automatically given blips will clear them again when they die (mainly used for
            <see cref="T:GTA.Ped"/>s recruited into players group).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustGotOffTrain">
            <summary>
            Train code uses this when grabbing random <see cref="T:GTA.Ped"/>s to get in trains.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustGotOnTrain">
            <summary>
            Train code uses this when grabbing random <see cref="T:GTA.Ped"/>s to get in trains.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UsingCoverPoint">
            <summary>
            Set to <see langword="true"/> when a <see cref="T:GTA.Ped"/> is in process of using a cover point.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KnockedUpIntoAir">
            <summary>
            Has <see cref="T:GTA.Ped"/> been knocked up into the air by a <see cref="T:GTA.Vehicle"/> collision.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasJustLeftCar">
            <summary>
            Used by navigation to force scan for <see cref="T:GTA.Vehicle"/>s collisions.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CurrLeftFootCollNM">
            <summary>
            Footprint for left foot collision for NaturalMotion tasks (for the current frame).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PrevLeftFootCollNM">
            <summary>
            Footprint for left foot collision for NaturalMotion tasks (for the previous frame).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CurrRightFootCollNM">
            <summary>
            Footprint for right foot collision for NaturalMotion tasks (for the current frame).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PrevRightFootCollNM">
            <summary>
            Footprint for right foot collision for NaturalMotion tasks (for the previous frame).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasBeenBumpedInCar">
            <summary>
            Has this <see cref="T:GTA.Ped"/> been bumped by a <see cref="T:GTA.Vehicle"/> while driving?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.InWaterTaskQuitToClimbLadder">
            <summary>
            The in-water task has just quit in response to a ladder-climb request.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NMTwoHandedWeaponBothHandsConstrained">
            <summary>
            When using physical 2-handed weapons, both hands have been latched to the gun model (used when sending
            ConfigureCharacter to NaturalMotion).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePedLoadCover">
            <summary>
            Set by the script to force a <see cref="T:GTA.Ped"/> to load cover.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustLeftCarNotCheckedForDoors">
            <summary>
            Set when a <see cref="T:GTA.Ped"/> exits a <see cref="T:GTA.Vehicle"/>. The first time they move, they should check for
            door obstructions.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UsingCrouchedPedCapsule">
            <summary>
            Set to indicate that the <see cref="T:GTA.Ped"/>'s bounds are in the crouched configuration.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasDeadPedBeenReported">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has been investigated (for dead <see cref="T:GTA.Ped"/>s).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcedAim">
            <summary>
            If set, the player <see cref="T:GTA.Ped"/> will always behave like we have the aim trigger pressed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SteersAroundPeds">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Ped"/>s and <see cref="T:GTA.Prop"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SteersAroundObjects">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Ped"/>s and <see cref="T:GTA.Prop"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OpenDoorArmIK">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> should enable open door arm IK.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceReload">
            <summary>
            Force a reload of the current weapon.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromVehicleImpact">
            <summary>
            Blocks ragdoll activation when hit by a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromBulletImpact">
            <summary>
            Blocks ragdoll activation when hit by a bullet.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromExplosions">
            <summary>
            Blocks ragdoll activation when hit by an explosive.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromFire">
            <summary>
            Blocks ragdoll activation when set on fire.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromElectrocution">
            <summary>
            Blocks ragdoll activation when electrocuted.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsBeingDraggedToSafety">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> is being dragged to safety.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasBeenDraggedToSafety">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has been dragged to safety.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KeepWeaponHolsteredUnlessFired">
            <summary>
            Ignores the creation of the weapon <see cref="T:GTA.Prop"/> unless the gun is shot.
            </summary>
            <remarks>
            This flag does not practically have any effect by setting via scripts, because it can be changed by
            a lot of functions of game code such as ones in `<c>CWeaponWheel</c>`, `<c>CPedWeaponManager</c>`,
            `<c>CPedWeaponSelector</c>` and many tasks such as `<c>CTaskCombat</c>` and `<c>CTaskMotionSwimming</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceScriptControlledKnockout">
            <summary>
            Forces a melee knockout state for the victim <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.FallOutOfVehicleWhenKilled">
            <summary>
            Forces a <see cref="T:GTA.Ped"/> to fall out of a <see cref="T:GTA.Vehicle"/> when killed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.GetOutBurningVehicle">
            <summary>
            If set, a <see cref="T:GTA.Ped"/> will escape a burning <see cref="T:GTA.Vehicle"/> they are inside, defaults to
            <see langword="true"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BumpedByPlayer">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has been bumped by the player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.RunFromFiresAndExplosions">
            <summary>
            If set, a <see cref="T:GTA.Ped"/> will run away from fires or potential explosions, defaults to
            <see langword="true"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatAsPlayerDuringTargeting">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will be given the same boost a player gets in the targeting scoring system.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsHandcuffed">
            <summary>
            indicates if the <see cref="T:GTA.Ped"/> is currently handcuffed.
            </summary>
            <remarks>
            The original name is <c>CPED_CONFIG_FLAG_IsHandCuffed</c> in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsAnkleCuffed">
            <summary>
            indicates if the <see cref="T:GTA.Ped"/> is currently ankle cuffed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableMelee">
            <summary>
            Disable melee for a <see cref="T:GTA.Ped"/> (only supported for player right now).
            </summary>
            <remarks>
            <para>
            Disables starting melee tasks for player <see cref="T:GTA.Ped"/>s from the regular player move on foot task
            `<c>CTaskPlayerOnFoot</c>`, disabling player <see cref="T:GTA.Ped"/>s to start aiming another <see cref="T:GTA.Ped"/>
            with a melee weapon (including unarmed one) and to perform a melee attack task when they are regularly
            moving.
            </para>
            <para>
            Does not disable starting melee tasks from any tasks other than `<c>CTaskPlayerOnFoot</c>`, which means
            this flag does not prevent non-player <see cref="T:GTA.Ped"/>s from performing melee tasks at all.
            This flag does not prevent player <see cref="T:GTA.Ped"/> from performing melee tasks when already aiming another
            <see cref="T:GTA.Ped"/> with a melee weapon or performing a combat task for the same reason, either.
            </para>
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableUnarmedDriveBys">
            <summary>
            Disable unarmed drive-by taunts for a <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            The original name is <c>CPED_CONFIG_FLAG_DisableUnarmedDrivebys</c> in the exe, but this enum uses
            the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustGetsPulledOutWhenElectrocuted">
            <summary>
            MP only, if a player <see cref="T:GTA.Ped"/> is electrocuted and marked as arrestable, another player jacking
            the other will just pull them out.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillNotHotwireLawEnforcementVehicle">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> will skip hotwiring a law enforcement <see cref="T:GTA.Vehicle"/>
            if it needs to be hotwired.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillCommandeerRatherThanJack">
            <summary>
            MP only, <see langword="true"/> if the <see cref="T:GTA.Ped"/> will try to commandeer a <see cref="T:GTA.Vehicle"/>
            rather than jack if possible.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanBeAgitated">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> will respond to agitation events.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePedToFaceLeftInCover">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will turn to face left in cover.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePedToFaceRightInCover">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will turn to face right in cover.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockPedFromTurningInCover">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will not turn in cover, unless one of the force flags is set.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KeepRelationshipGroupAfterCleanUp">
            <summary>
            Will allow the <see cref="T:GTA.Ped"/> to keep their relationship group after mission cleanup as opposed to going
            back to default.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePedToBeDragged">
            <summary>
            Forces the <see cref="T:GTA.Ped"/> to loop try locked door anim in order to be dragged along when
            <see cref="T:GTA.Vehicle"/>'s entry point they're trying to go has a door and it's fully closed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventPedFromReactingToBeingJacked">
            <summary>
            <see cref="T:GTA.Ped"/> doesn't react when being jacked.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsScuba">
            <summary>
            indicates if the <see cref="T:GTA.Ped"/> is currently equipped for scuba.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillArrestRatherThanJack">
            <summary>
            For cops arresting <see cref="T:GTA.Ped"/>s in <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.RemoveDeadExtraFarAway">
            <summary>
            We must be further away before <see cref="T:GTA.Ped"/> polulation remove this <see cref="T:GTA.Ped"/> when it is dead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.RidingTrain">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> is riding a train.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ArrestResult">
            <summary>
            <see langword="true"/> if the arrest task succeeded.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanAttackFriendly">
            <summary>
            <see langword="true"/> allows this <see cref="T:GTA.Ped"/> to attack <see cref="T:GTA.Ped"/>s they are friendly with.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillJackAnyPlayer">
            <summary>
            <see langword="true"/> if this player <see cref="T:GTA.Ped"/> can jack any other player (MP Only).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BumpedByPlayerVehicle">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has been bumped by a player <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DodgedPlayerVehicle">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has just dodged a player <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillJackWantedPlayersRatherThanStealCar">
            <summary>
            <see langword="true"/> if this player will jack wanted player passengers rather than try to steal
            a <see cref="T:GTA.Vehicle"/> (cops arresting crims)
            (MP Only).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NoCopWantedAggro">
            <summary>
            If this flag is set on a cap, skip some of the code that would normally make them extra aggressive and
            alert.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableLadderClimbing">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/> it will not scan for or climb ladders.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.StairsDetected">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/> it has detected stairs.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SlopeDetected">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/> it has detected a slope.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HelmetHasBeenShot">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/> it's helmet has been damaged.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CowerInsteadOfFlee">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will cower in place rather than flee, used. Used for scenarios in confined
            spaces.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanActivateRagdollWhenVehicleUpsideDown">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will be allowed to ragdoll when the <see cref="T:GTA.Vehicle"/> they are in gets
            turned upside down if the seat supports it.
            </summary>
            <remarks>
            Resets to <see langword="true"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be done
            with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AlwaysRespondToCriesForHelp">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will respond to <c>CEventInjuredCryForHelp</c> regardless if it is allied with
            the injured <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            <c>CEventInjuredCryForHelp</c>s can be created by getting hit by a car (strictly by
            <c>WEAPON_RAMMED_BY_CAR</c> or <c>WEAPON_RUN_OVER_BY_CAR</c>, getting hit with a non-lethal gun such as
            <see cref="F:GTA.WeaponHash.StunGun"/> but not the tranquilizer (weapon hash), getting hit by melee with
            the damage amount more than <c>3.0</c> and the victim is not a player.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableBloodPoolCreation">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will not create a blood pool when dead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ShouldFixIfNoCollision">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will be fixed if there is no collision around.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanPerformArrest">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> can perform arrests on <see cref="T:GTA.Ped"/> that can be arrested.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanPerformUncuff">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> can uncuff <see cref="T:GTA.Ped"/>s that are handcuffed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanBeArrested">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> may be arrested.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.MoverConstrictedByOpposingCollisions">
            <summary>
            If set, the <see cref="T:GTA.Ped"/>'s mover is getting collisions from opposing sides.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayerPreferFrontSeatMP">
            <summary>
            When <see langword="true"/>, Prefer the front seat when getting in a <see cref="T:GTA.Vehicle"/> with buddies.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsInjured">
            <summary>
            When <see langword="true"/>, the <see cref="T:GTA.Ped"/> will use injured movement anim sets and getup animations.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontEnterVehiclesInPlayersGroup">
            <summary>
            When <see langword="true"/>, will follow the player around if in their group but won't enter
            <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SwimmingTasksRunning">
            <summary>
            Stronger than <see cref="F:GTA.PedConfigFlagToggles.IsSwimming"/>, persists so long as the tasks are active.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventAllMeleeTaunts">
            <summary>
            Disable all melee taunts for this particular <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceDirectEntry">
            <summary>
            Will force this <see cref="T:GTA.Ped"/> to use the direct entry point for any <see cref="T:GTA.Vehicle"/> they try to
            enter, or warp in.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AlwaysSeeApproachingVehicles">
            <summary>
            This <see cref="T:GTA.Ped"/> will always see approaching <see cref="T:GTA.Vehicle"/>s (even from behind).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanDiveAwayFromApproachingVehicles">
            <summary>
            This <see cref="T:GTA.Ped"/> can dive away from approaching <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowPlayerToInterruptVehicleEntryExit">
            <summary>
            Will allow player to interrupt a <see cref="T:GTA.Ped"/>s scripted entry/exit task as if they had triggered it
            themselves
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnlyAttackLawIfPlayerIsWanted">
            <summary>
            This <see cref="T:GTA.Ped"/> won't attack cops unless the player is wanted.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayerInContactWithKinematicPed">
            <summary>
            Gets set to <see langword="true"/> if the player <see cref="T:GTA.Ped"/> is colliding against a <see cref="T:GTA.Ped"/>
            in kinematic mode.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayerInContactWithSomethingOtherThanKinematicPed">
            <summary>
            Gets set to <see langword="true"/> if the player <see cref="T:GTA.Ped"/> is colliding against something that is
            not a <see cref="T:GTA.Ped"/> in kinematic mode.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedsJackingMeDontGetIn">
            <summary>
            If set any <see cref="T:GTA.Ped"/> jacking this <see cref="T:GTA.Ped"/> will not get in as part of the jack.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedIgnoresAnimInterruptEvents">
            <summary>
            AI <see cref="T:GTA.Ped"/>s only, will not early out of anims, default behaviour is to exit as early as possible.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsInCustody">
            <summary>
            Signifies a player is in custody. Not much useful in final/production game builds, because the built exe
            does not have code related to arrest or handcuff.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceStandardBumpReactionThresholds">
            <summary>
            By default, armed and friendly <see cref="T:GTA.Ped"/>s have increased resistance to being bumped by players and
            friendly <see cref="T:GTA.Vehicle"/>s. Setting this flag will make them use the standard thresholds without
            multiplying by any values.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LawWillOnlyAttackIfPlayerIsWanted">
            <summary>
            If set on a player <see cref="T:GTA.Ped"/>, they can only be attacked by law if the player is wanted.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsAgitated">
            <summary>
            If set, this <see cref="T:GTA.Ped"/> is agitated.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventAutoShuffleToDriversSeat">
            <summary>
            MP only, prevents passenger from auto shuffling over to driver's seat if it becomes free.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseKinematicModeWhenStationary">
            <summary>
            When enabled, the <see cref="T:GTA.Ped"/> will continually set the kinematic mode reset flag when stationary.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.EnableWeaponBlocking">
            <summary>
            When enabled, non-player <see cref="T:GTA.Ped"/>s can use WeaponBlocking behaviors.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHurt">
            <summary>
            Will prevent the <see cref="T:GTA.Ped"/>s go into hurt combat mode.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayerIsWeird">
            <summary>
            Should this player <see cref="T:GTA.Ped"/> periodically generate shocking events for being weird.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedHadPhoneConversation">
            <summary>
            Has this <see cref="T:GTA.Ped"/> had a phone conversation before.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BeganCrossingRoad">
            <summary>
            Indicates <see cref="T:GTA.Ped"/> started crossing the road in case of interruption.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WarpIntoLeadersVehicle">
            <summary>
            Warps into the leader's <see cref="T:GTA.Vehicle"/> of the <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.PedGroup"/> when
            starting entering the <see cref="T:GTA.Vehicle"/> instead of normally entering it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DoNothingWhenOnFootByDefault">
            <summary>
            Do nothing when on foot by default (when computing a default task).
            </summary>
            <remarks>
            Another task takes precedence when computing a default task if the <see cref="T:GTA.Ped"/> meet one of
            the following criteria in the following order of precedence;
            <list type="bullet">
            <item><description>
            <see cref="T:GTA.Ped"/> is in <see cref="T:GTA.Vehicle"/> (strictly when <see cref="F:GTA.PedConfigFlagToggles.InVehicle"/> is set to
            <see langword="true"/>). Performs an appropriate task such as `<c>CTaskPlayerDrive</c>` for the local player
            <see cref="T:GTA.Ped"/> and `<c>CTaskPolice</c>` for <see cref="T:GTA.Ped"/>s whose population type is the cop one.
            </description></item>
            <item><description>
            <see cref="T:GTA.Ped"/> is the local player <see cref="T:GTA.Ped"/>. Uses a primary motion task.
            </description></item>
            <item><description>
            <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.PedType"/> is <see cref="F:GTA.PedType.Swat"/> and
            the <see cref="T:GTA.EntityPopulationType"/> is not <see cref="F:GTA.EntityPopulationType.Mission"/>.
            Uses a `<c>CTaskSwat</c>`.
            </description></item>
            <item><description>
            <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.PedType"/> is <see cref="F:GTA.PedType.Army"/> and
            the <see cref="T:GTA.EntityPopulationType"/> is not <see cref="F:GTA.EntityPopulationType.Mission"/>.
            Uses a `<c>CTaskArmy</c>`.
            </description></item>
            <item><description>
            <see cref="T:GTA.Ped"/> is in a <see cref="T:GTA.PedGroup"/> as a follower and it has a leader.
            Uses a `<c>CTaskFollowLeaderAnyMeans</c>`.
            </description></item>
            <item><description>
            <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.EntityPopulationType"/> is <see cref="F:GTA.EntityPopulationType.Mission"/>.
            Uses a `<c>CTaskDoNothing</c>`, which means there is no need to set this flag for mission
            <see cref="T:GTA.Ped"/>s unless <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/> may be called on them later.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UsingScenario">
            <summary>
            Set when the <see cref="T:GTA.Ped"/> is using a scenario. Call `<c>CPed::UpdateSpatialArrayTypeFlags()</c>` if
            changing.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.VisibleOnScreen">
            <summary>
            Set when the <see cref="T:GTA.Ped"/> is visible on screen, as determined by `<c>CPedAILodManager</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontCollideWithKinematic">
            <summary>
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will not collide with other kinematic <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ActivateOnSwitchFromLowPhysicsLod">
            <summary>
            If set, activate physics when switching from low to regular physics LOD.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollOnPedCollisionWhenDead">
            <summary>
            Dead <see cref="T:GTA.Ped"/>s with this flag set won't be allowed to reactivate their ragdoll when hit by another
            ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollOnVehicleCollisionWhenDead">
            <summary>
            Dead <see cref="T:GTA.Ped"/>s with this flag set won't be allowed to reactivate their ragdoll when hit by
            a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasBeenInArmedCombat">
            <summary>
            Is set if this <see cref="T:GTA.Ped"/> has ever been in armed combat.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseDiminishingAmmoRate">
            <summary>
            Set for when we want to diminish the ammo at a slower rate. Used specifically in cases where AI do not have
            infinite ammo.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidanceIgnoreAll">
            <summary>
            This <see cref="T:GTA.Ped"/> won't steer around anyone
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_Avoidance_Ignore_All</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidanceIgnoredByAll">
            <summary>
            Other <see cref="T:GTA.Ped"/>s won't steer around this <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_Avoidance_Ignored_by_All</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidanceIgnoreGroup1">
            <summary>
            This <see cref="T:GTA.Ped"/> won't steer around <see cref="T:GTA.Ped"/>s marked group 1.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_Avoidance_Ignore_Group1</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidanceMemberOfGroup1">
            <summary>
            This <see cref="T:GTA.Ped"/> is marked as a member of avoidance group 1.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_Avoidance_Member_of_Group1</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcedToUseSpecificGroupSeatIndex">
            <summary>
            <see cref="T:GTA.Ped"/> is forced to use specific seat index set by `<c>SET_PED_GROUP_MEMBER_PASSENGER_INDEX</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LowPhysicsLodMayPlaceOnNavMesh">
            <summary>
            If set, <see cref="T:GTA.Ped"/>s in low lod physics will be placed so that their feet rest on the navmesh.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableExplosionReactions">
            <summary>
            If set, <see cref="T:GTA.Ped"/>s will disable all explosion reactions.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DodgedPlayer">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> has just dodged a player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WaitingForPlayerControlInterrupt">
            <summary>
            Set when player switches to an AI <see cref="T:GTA.Ped"/> and keeps the scripted task of the AI <see cref="T:GTA.Ped"/>,
            if unset we won't check for interrupts or time out.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcedToStayInCover">
            <summary>
            <see cref="T:GTA.Ped"/> won't move out of cover when set (not even to fire).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.GeneratesSoundEvents">
            <summary>
            Does this <see cref="T:GTA.Ped"/> generate sound events?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ListensToSoundEvents">
            <summary>
            Does this <see cref="T:GTA.Ped"/> have the ability to respond to sound events?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowToBeTargetedInAVehicle">
            <summary>
            <see cref="T:GTA.Ped"/> can be targeting inside a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WaitForDirectEntryPointToBeFreeWhenExiting">
            <summary>
            When exiting a <see cref="T:GTA.Vehicle"/>, the <see cref="T:GTA.Ped"/> will wait for the direct entry point to be clear
            before exiting.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceExitToSkyDive">
            <summary>
            Force the skydive exit if we're exiting the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SteersAroundVehicles">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowPedInVehiclesOverrideTaskFlags">
            <summary>
            If set, allow the <see cref="T:GTA.Ped"/> to be set in <see cref="T:GTA.Vehicle"/>s even if the <see cref="T:GTA.Ped"/>'s
            TaskData would otherwise disallow it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontEnterLeadersVehicle">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will not enter the leader's <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableExitToSkyDive">
            <summary>
            Disable the skydive exit if we're exiting the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ScriptHasDisabledCollision">
            <summary>
            Script disabled collision on this <see cref="T:GTA.Ped"/> via <see cref="P:GTA.Entity.IsCollisionEnabled"/>, this leaves
            on collision against explosions and weapons. Exists solely to prevent the AI lod reactivate the collision.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseAmbientModelScaling">
            <summary>
            This <see cref="T:GTA.Ped"/> is drawn randomly scaled from [0.5,1.0]
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontWatchFirstOnNextHurryAway">
            <summary>
            Hurry away without watching the next time this <see cref="T:GTA.Ped"/> runs <c>CTaskHurryAway</c>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisablePotentialToBeWalkedIntoResponse">
            <summary>
            make <c>EVENT_POTENTIAL_BE_WALKED_INTO</c> not affect this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisablePedAvoidance">
            <summary>
            This <see cref="T:GTA.Ped"/> will not avoid other <see cref="T:GTA.Ped"/>s whilst navigating.
            </summary>
            <remarks>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceRagdollUponDeath">
            <summary>
            When the <see cref="T:GTA.Ped"/> dies, it will ragdoll instead of potentially choosing an animated death.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanLosePropsOnDamage">
            <summary>
            When <see cref="T:GTA.Ped"/> receives damage any <see cref="T:GTA.Prop"/> glasses could be knocked off.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowedToDetachTrailer">
            <summary>
            Allow this <see cref="T:GTA.Ped"/> to detach trailers from <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowBlockDeadPedRagdollActivation">
            <summary>
            If set, the ragdoll activation blocking flags can be used to disable activation of dead <see cref="T:GTA.Ped"/>s.
            Otherwise, by default, dead <see cref="T:GTA.Ped"/>s can always activate their ragdolls.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsHoldingProp">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> is currently holding a <see cref="T:GTA.Prop"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlocksPathingWhenDead">
            <summary>
            When this <see cref="T:GTA.Ped"/> dies their body will block all pathfinding modes - not just wandering.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePlayNormalScenarioExitOnNextScriptCommand">
            <summary>
            The next time this <see cref="T:GTA.Ped"/> leaves a scenario to perform some script task they will be forced into
            their normal scenario exit.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePlayImmediateScenarioExitOnNextScriptCommand">
            <summary>
            The next time this <see cref="T:GTA.Ped"/> leaves a scneario to perform some script task they will be forced into
            their immediate (blend out) exit.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceSkinCharacterCloth">
            <summary>
            Force character cloth to stay skinned immediately after being created. If flag is not set then character
            cloth is not forced to be skinned when created.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LeaveEngineOnWhenExitingVehicles">
            <summary>
            The player will leave the engine on when exiting a <see cref="T:GTA.Vehicle"/> <em>normally</em>.
            </summary>
            <remarks>
            The following factors overwrite the "SwitchEngineOff" value evaluated with this flag, which are evaluated
            in the following order;
            <list type="bullet">
            <item><description>
            If the <see cref="T:GTA.Vehicle"/> model (index) is not that of the Oppressor Mk II, then;
                <list type="bullet">
                <item><description>
                The wanted level is 2 or more and the time since last spotted is less than a certain tunable value.
                Overwrites the evaluated value with <see langword="false"/>.
                </description></item>
                <item><description>
                There is an active Action Mode reason. Overwrites the evaluated value with <see langword="false"/>.
                </description></item>
                </list>
            </description></item>
            <item><description>
            The <see cref="T:GTA.Vehicle"/> has the flag that can be set with
            `<c>SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED</c>`. Overwrites the evaluated value with
            <see langword="false"/>.
            </description></item>
            <item><description>
            The <see cref="T:GTA.Vehicle"/> has weapon blades. Overwrites the evaluated value with <see langword="true"/>.
            </description></item>
            <item><description>
            `<c>CVehicleEnterExitFlags::BeJacked</c>` flag is set for the exit <see cref="T:GTA.Vehicle"/> task.
            Overwrites the evaluated value with <see langword="false"/>.
            </description></item>
            <item><description>
            The <see cref="T:GTA.Vehicle"/> is using script auto pilot. Overwrites the evaluated value with
            <see langword="false"/>.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PhoneDisableTextingAnimations">
            <summary>
            tells taskmobile phone to not texting animations.  Currently don't play these in MP.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PhoneDisableTalkingAnimations">
            <summary>
            tells taskmobile phone to not talking animations.  Currently don't play these in MP.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PhoneDisableCameraAnimations">
            <summary>
            tells taskmobile phone to not camera animations.  Currently don't play these in SP.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableBlindFiringInShotReactions">
            <summary>
            Stops the <see cref="T:GTA.Ped"/> from accidentally blind firing it's weapon when doing an NM (ragdoll) shot
            reaction.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowNearbyCoverUsage">
            <summary>
            This makes it so that OTHER <see cref="T:GTA.Ped"/>s are allowed to take cover at points that would otherwise be
            rejected due to proximity.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.InStrafeTransition">
            <summary>
            <see langword="true"/> if in strafe transition.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanPlayInCarIdles">
            <summary>
            If <see langword="false"/>, blocks in-car idle animations from playing.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanAttackNonWantedPlayerAsLaw">
            <summary>
            If the <see cref="T:GTA.Ped"/> is a law enforcement <see cref="T:GTA.Ped"/> then they will ignore the player wanted
            level clean check in combat and continue attacking.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WillTakeDamageWhenVehicleCrashes">
            <summary>
            <see cref="T:GTA.Ped"/> gets damaged when the <see cref="T:GTA.Vehicle"/> they are in crashes.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AICanDrivePlayerAsRearPassenger">
            <summary>
            If this AI <see cref="T:GTA.Ped"/> is driving the <see cref="T:GTA.Vehicle"/>, if the player taps to enter, they will
            enter as a rear passenger, if they hold, they'll jack the driver.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayerCanJackFriendlyPlayers">
            <summary>
            If a friendly player is driving the <see cref="T:GTA.Vehicle"/>, if the player taps to enter, they will enter as
            a passenger, if they hold, they'll jack the driver.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnStairs">
            <summary>
            Are we on stairs?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SimulatingAiming">
            <summary>
            Simulating the aim button for player until on input detection.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AIDriverAllowFriendlyPassengerSeatEntry">
            <summary>
            If this AI <see cref="T:GTA.Ped"/> is driving the <see cref="T:GTA.Vehicle"/>, allow players to get in passenger seats.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ParentCarIsBeingRemoved">
            <summary>
            Set on the target <see cref="T:GTA.Ped"/> if the <see cref="T:GTA.Vehicle"/> they are in is being removed to avoid
            an expensive detach check.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowMissionPedToUseInjuredMovement">
            <summary>
            Set the target <see cref="T:GTA.Ped"/> to be allowed to use Injured movement clips.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanLoseHelmetOnDamage">
            <summary>
            When <see cref="T:GTA.Ped"/> receives a headshot then a helmet can be knocked off.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverDoScenarioExitProbeChecks">
            <summary>
            When this <see cref="T:GTA.Ped"/> exits a scenario they ignore probe checks against the environment and just pick
            an exit clip.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SuppressLowLodRagdollSwitchWhenCorpseSettles">
            <summary>
            This will suppress the automatic switch to a lower ragdoll LOD when switching to the ragdoll frame after
            dying.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventUsingLowerPrioritySeats">
            <summary>
            Don't use certain seats (like hanging on the side of a <see cref="T:GTA.Vehicle"/>).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustLeftVehicleNeedsReset">
            <summary>
            Set when leaving a <see cref="T:GTA.Vehicle"/> and disabling collision with the <see cref="T:GTA.Vehicle"/> exiting to
            indicate we need to clear out the disabling.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TeleportIfCantReachPlayer">
            <summary>
            If this <see cref="T:GTA.Ped"/> is following the player and stuck in a place where he can't be reached, teleport
            when possible.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedsInVehiclePositionNeedsReset">
            <summary>
            <see cref="T:GTA.Ped"/> was being jacked/killed but isn't anymore, ensure they're in the seat.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedsFullyInSeat">
            <summary>
            <see cref="T:GTA.Ped"/> is fully in the seat (Set after the position needs reset flag)
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowPlayerLockOnIfFriendly">
            <summary>
            If this <see cref="T:GTA.Ped"/> is friendly with the player, this will allow the <see cref="T:GTA.Ped"/> to lock on.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseCameraHeadingForDesiredDirectionLockOnTest">
            <summary>
            Force camera direction for heading test if desired direction is also set
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TeleportToLeaderVehicle">
            <summary>
            If set, teleport if <see cref="T:GTA.Ped"/> is not in the leader's <see cref="T:GTA.Vehicle"/> before
            `<c>TaskEnterVehicle::m_SecondsBeforeWarpToLeader</c>`, which is set with <c>SecondsBeforeWarpToLeader</c>
            of <c>CTaskEnterVehicle__Tunables</c> in <c>vehicletasks.ymt</c>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidanceIgnoreWeirdPedBuffer">
            <summary>
            Don't give weird <see cref="T:GTA.Ped"/>s extra buffer.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnStairSlope">
            <summary>
            Are we on a stair slope?
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasPlayedNMGetup">
            <summary>
            This <see cref="T:GTA.Ped"/> has gotten up from NM at least once.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontBlipCop">
            <summary>
            Wanted system shouldn't consider this <see cref="T:GTA.Ped"/> when creating blips.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SpawnedAtExtendedRangeScenario">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> spawned at a scenario with extended range.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WalkAlongsideLeaderWhenClose">
            <summary>
            This <see cref="T:GTA.Ped"/> will walk alongside group leader if they are the first member of the leader's
            <see cref="T:GTA.PedGroup"/>, they are close enough to the leader, and the <see cref="T:GTA.PedGroup"/>'s formation is
            set up to allow this (such as in the default <c>CPedFormationTypes::FORMATION_LOOSE</c>).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KillWhenTrapped">
            <summary>
            This will kill a mission <see cref="T:GTA.Ped"/> that becomes trapped (like under a cow carcass) and cannot get
            up.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.EdgeDetected">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/> it has detected an edge.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AlwaysWakeUpPhysicsOfIntersectedPeds">
            <summary>
            This <see cref="T:GTA.Ped"/> will cause physics to activate on any <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Ped"/>'s
            capsule is inside of, even if this <see cref="T:GTA.Ped"/> is being attached.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.EquippedAmbientLoadOutWeapon">
            <summary>
            This is set to prevent a <see cref="T:GTA.Ped"/> from holstering a loadout weapon equipped during
            <c>CPedPopulation::EquipPed</c> as part of the defined <c>CAmbientPedModelVariations</c>' loadout.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AvoidTearGas">
            <summary>
            If set, a <see cref="T:GTA.Ped"/> will avoid tear gas.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.StoppedSpeechUponFreezing">
            <summary>
            Marks that we've already dealt with cleaning up speech audio after becoming frozen.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableGoToWritheWhenInjured">
            <summary>
            If set, <c>CPed::DAMAGED_GOTOWRITHE</c> will no longer get set. In particular, tazer hits will no longer
            kill this <see cref="T:GTA.Ped"/> in one hit. Also, this flag prevents <see cref="T:GTA.Ped"/>s reacting to fire from
            instantly getting killed when they are set not to ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnlyUseForcedSeatWhenEnteringHeliInGroup">
            <summary>
            If set this <see cref="T:GTA.Ped"/> will only use their forced seat index if the <see cref="T:GTA.Vehicle"/> they are
            entering is a heli as part of a group.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ThrownFromVehicleDueToExhaustion">
            <summary>
            <see cref="T:GTA.Ped"/> got tired and was thrown from bike. Used to scale ragdoll damage for a few seconds after
            the dismount.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UpdateEnclosedSearchRegion">
            <summary>
            This <see cref="T:GTA.Ped"/> will update their enclosed regions.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ShouldChargeNow">
            <summary>
            This <see cref="T:GTA.Ped"/> should charge if in combat right away, for use by scripts, cleared once
            <see cref="T:GTA.Ped"/> charges.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.RagdollingOnBoat">
            <summary>
            We don't want ragdolling <see cref="T:GTA.Ped"/>s processing buoyancy when in a boat.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowMinorReactionsAsMissionPed">
            <summary>
            If <see langword="true"/>, this <see cref="T:GTA.Ped"/> will react to events such as being hit by
            a <see cref="T:GTA.Vehicle"/> as a mission <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockDeadBodyShockingEventsWhenDead">
            <summary>
            If <see langword="true"/>, this <see cref="T:GTA.Ped"/> will not generate dead body shocking events when dead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedHasBeenSeen">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> has be visible to the player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedIsInReusePool">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> is currently in the <see cref="T:GTA.Ped"/> reuse pool.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedWasReused">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> was in the reuse pool and then was reused.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableShockingEvents">
            This <see cref="T:GTA.Ped"/> should ignore shocking events (not generate ones).
        </member>
        <member name="F:GTA.PedConfigFlagToggles.MovedUsingLowLodPhysicsSinceLastActive">
            <summary>
            Set for <see cref="T:GTA.Ped"/>s that have moved using low LOD physics.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverReactToPedOnRoof">
            <summary>
            If <see langword="true"/>, this <see cref="T:GTA.Ped"/> will not react to a <see cref="T:GTA.Ped"/> standing on the
            roof.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePlayFleeScenarioExitOnNextScriptCommand">
            <summary>
            If set this <see cref="T:GTA.Ped"/> will use a flee exit to leave on the next script command.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JustBumpedIntoVehicle">
            <summary>
            Set for <see cref="T:GTA.Ped"/>s that just bumped into a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableShockingDrivingOnPavementEvents">
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will not react to <see cref="T:GTA.Ped"/>s driving on pavement.
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ShouldThrowSmokeNow">
            <summary>
            This <see cref="T:GTA.Ped"/> should throw a smoke grenade in combat right away, for use by scripts, cleared once
            <see cref="T:GTA.Ped"/> throws.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisablePedConstraints">
            <summary>
            Flags the <see cref="T:GTA.Ped"/> to ensure it either does or does not have its control constraints.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceInitialPeekInCover">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will peek once before firing in cover. Cleared upon peeking.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CreatedByDispatch">
            <summary>
            this <see cref="T:GTA.Ped"/> was created by one of the dispatch systems, usually law enforcement.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PointGunLeftHandSupporting">
            <summary>
            NM state config flag. Set to <see langword="true"/> when the characters support hand has broken from
            the weapon.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableJumpingFromVehiclesAfterLeader">
            <summary>
            If <see langword="true"/> on a <see cref="T:GTA.PedGroup"/> leader, disable the follower <see cref="T:GTA.Ped"/>s
            jumping out of <see cref="T:GTA.Vehicle"/>s after the leader.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromPlayerPedImpact">
            <summary>
            Blocks ragdoll activation from animated player <see cref="T:GTA.Ped"/> bumps.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromAiRagdollImpact">
            <summary>
            Blocks ragdoll activation from collisions with AI ragdolls.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromPlayerRagdollImpact">
            <summary>
            Blocks ragdoll activation from collisions with a ragdolling player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableQuadrupedSpring">
            <summary>
            Use to disable quadruped spring processing when settling from a ragdoll performance.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsInCluster">
            <summary>
            This <see cref="T:GTA.Ped"/> is currently in a scenario point cluster.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ShoutToGroupOnPlayerMelee">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will shout target position when melee attacked by a player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoredByAutoOpenDoors">
            <summary>
            Set this for a <see cref="T:GTA.Ped"/> to be ignored by the auto opened doors when checking to see if the door
            should be opened.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreferInjuredGetup">
            <summary>
            Set this during nm tasks to trigger an injured getup when the <see cref="T:GTA.Ped"/> gets up.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceIgnoreMeleeActiveCombatant">
            <summary>
            Purposely ignore the melee active combatant role and push them into a support or inactive combatant role.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CheckLoSForSoundEvents">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will ignore sound events generated by <see cref="T:GTA.Entity"/>s they can't see.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JackedAbandonedCar">
            <summary>
            This <see cref="T:GTA.Ped"/> was spawned to steal an ambient <see cref="T:GTA.Vehicle"/> that was left around.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanSayFollowedByPlayerAudio">
            <summary>
            If set, <see cref="T:GTA.Ped"/> can play FRIEND_FOLLOWED_BY_PLAYER lines.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ActivateRagdollFromMinorPlayerContact">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will activate the NM ragdoll balance as soon as they are touched by the player
            (ignoring velocity thresholds).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasPortablePickupAttached">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> is carrying a portable pickup.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePoseCharacterCloth">
            <summary>
            If set, default cloth pose will be applied if is available in the character cloth when the cloth is created.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasClothCollisionBounds">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will use cloth collision bounds.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasHighHeels">
            <summary>
            Set when the <see cref="T:GTA.Ped"/> has high heels.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatAsAmbientPedForDriverLockOn">
            <summary>
            If set, this force player <see cref="T:GTA.Ped"/> to treat this <see cref="T:GTA.Ped"/> as an ambient target even if
            this <see cref="T:GTA.Ped"/>'s  <see cref="T:GTA.EntityPopulationType"/> is set to
            <see cref="F:GTA.EntityPopulationType.Mission"/>.
            </summary>
            <remarks>
            With this flag, the player cannot lock on to <see cref="T:GTA.Ped"/>s with <see cref="F:GTA.PedType.Animal"/> or
            non-threat <see cref="T:GTA.Ped"/>s as how non-mission <see cref="T:GTA.Ped"/>s can be locked on to from inside
            a <see cref="T:GTA.Vehicle"/>. Without this flag, the player cannot lock on to friendly mission <see cref="T:GTA.Ped"/>s
            (the player can lock on to mission <see cref="T:GTA.Ped"/>s who are neutral).
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontBehaveLikeLaw">
            <summary>
            </summary>
            If set on security <see cref="T:GTA.Ped"/>s, they will not use the law like behaviors/logic (they will not report
            wanted position, can attack without wanted level, etc).
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SpawnedAtScenario">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> was originally spawned at a scenario point.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisablePoliceInvestigatingBody">
            <summary>
            If set, police will not perform the CTaskShockingPoliceInvestigate Behavior on the <see cref="T:GTA.Ped"/>
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableWritheShootFromGround">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will no longer shoot while writhing.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LowerPriorityOfWarpSeats">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will only just the warp entry points if there are no animated entry points
            available.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableTalkTo">
            <summary>
            If set the <see cref="T:GTA.Ped"/> can't be talked to.
            </summary>
            <remarks>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontBlip">
            <summary>
            Stops a <see cref="T:GTA.Ped"/> being blipped by the wanted system.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsSwitchingWeapon">
            <summary>
            <see cref="T:GTA.Ped"/> is running the swap weapon task.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreLegIkRestrictions">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will ignore leg IK request restrictions for non-player <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ScriptForceNoTimesliceIntelligenceUpdate">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will never have their intelligence update time sliced across frames.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.JackedOutOfMyVehicle">
            <summary>
            If set, this <see cref="T:GTA.Ped"/> has been jacked out of its <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WentIntoCombatAfterBeingJacked">
            <summary>
            If set, this <see cref="T:GTA.Ped"/> went into combat because of being jacked.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollForVehicleGrab">
            <summary>
            Blocks ragdoll activation when grabbing <see cref="T:GTA.Vehicle"/> doors.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePackageCharacterCloth">
            <summary>
            Set the flag for forcing package on character cloth when cloth is created on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowTaskDoNothingTimeslicing">
            <summary>
            If set, this <see cref="T:GTA.Ped"/> will timeslice it's <c>DoNothing</c> Task when computing default task.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceProneCharacterCloth">
            <summary>
            Set the flag to place character cloth in prone state when cloth is created on the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NotAllowedToJackAnyPlayers">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will not be allowed to jack any other players (not synced).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KilledByStandardMelee">
            <summary>
            Killed by standard melee.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AlwaysLeaveTrainUponArrival">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will always exit the train when it stops at a station.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcePlayDirectedNormalScenarioExitOnNextScriptCommand">
            <summary>
            Set flag to determine that a directed normal exit should be use for new tasks on this scenario
            <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnlyWritheFromWeaponDamage">
            <summary>
            Only allow <see cref="T:GTA.Ped"/> to writhe from weapon damage, not from other stuff, like small vehicle impacts
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseSloMoBloodVfx">
            <summary>
            Flags the <see cref="T:GTA.Ped"/> to use the slo-mo blood vfx instead of the normal ones.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.EquipJetpack">
            <summary>
            Equip/put on the jetpack if we have one in our inventory.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventDraggedOutOfCarThreatResponse">
            <summary>
            Don't do threat response when dragged out of a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ScriptHasCompletelyDisabledCollision">
            <summary>
            Script has completely disabled collision on this <see cref="T:GTA.Ped"/> via
            <c>SET_ENTITY_COMPLETELY_DISABLE_COLLISION</c>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverDoScenarioNavChecks">
            <summary>
            This <see cref="T:GTA.Ped"/> will not check for navmesh when exiting their scenario.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceSynchronousScenarioExitChecking">
            <summary>
            This <see cref="T:GTA.Ped"/> will expensively probe for a scenario exit location in one frame.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ThrowingGrenadeWhileAiming">
            <summary>
            Set <see langword="true"/> in <c>CTaskAimGunOnFoot::Aiming_OnUpdate</c>, <see langword="false"/> in
            <c>CTaskAimAndThrowProjectile::CleanUp</c>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceDeepSurfaceCheck">
            <summary>
            Don't do distance from camera culling of the deep surface check, needed for detecting snow, mud, etc.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableDeepSurfaceAnims">
            <summary>
            Disable deep surface anims to prevent them slowing <see cref="T:GTA.Ped"/> down.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontBlipNotSynced">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will not be blipped by the wanted system, this is not synced over
            the network to allow script to individually control a <see cref="T:GTA.Ped"/>s blippedness on different machines.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsDuckingInVehicle">
            <summary>
            <see cref="T:GTA.Ped"/> is ducking inside a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventAutoShuffleToTurretSeat">
            If set the <see cref="T:GTA.Ped"/> will not automatically shuffle to the turret seat when it becomes free.
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableEventInteriorStatusCheck">
            <summary>
            Disables the ignore events based on interior status check which normally has <see cref="T:GTA.Ped"/>s inside
            ignore events from outside.
            </summary>
            <remarks>
            Resets to <see langword="false"/> when the <see cref="T:GTA.Ped"/> is marked as no longer needed, which can be
            done with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasReserveParachute">
            <summary>
            Does <see cref="T:GTA.Ped"/> have a reserve chute that they can deploy.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseReserveParachute">
            <summary>
            Use reserve parachute settings.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatDislikeAsHateWhenInCombat">
            <summary>
            If this <see cref="T:GTA.Ped"/> is in combat then any <see cref="T:GTA.Ped"/> they dislike they will consider
            the relationship hate instead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.OnlyUpdateTargetWantedIfSeen">
            <summary>
            If the target is a player we will only set the wanted level or update the radar if they are seen.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowAutoShuffleToDriversSeat">
            <summary>
            Allows this <see cref="T:GTA.Ped"/> to auto shuffle to the driver seat of a <see cref="T:GTA.Vehicle"/> if the driver is
            dead (law and MP <see cref="T:GTA.Ped"/>s would do this normally).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontActivateRagdollFromSmokeGrenade">
            <summary>
            Blocks ragdoll activation when damaged by smoke grenade.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LinkMbrToOwnerOnChain">
            <summary>
            This <see cref="T:GTA.Ped"/> will attempt to match the speed of the owner while following its current scenario
            chain.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_LinkMBRToOwnerOnChain</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AmbientFriendBumpedByPlayer">
            <summary>
            The player has walked into our ambient friend.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AmbientFriendBumpedByPlayerVehicle">
            <summary>
            The player has driven into our ambient friend.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.InFpsUnholsterTransition">
            <summary>
            Player is playing the unholster transition in FPS mode.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_InFPSUnholsterTransition</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventReactingToSilencedCloneBullets">
            <summary>
            Prevents the <see cref="T:GTA.Ped"/> from reacting to silenced bullets fired from network clone
            <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableInjuredCryForHelpEvents">
            <summary>
            Blocks <see cref="T:GTA.Ped"/> from creating the injured cry for help events (run over, tazed or melee would
            usually do this).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.NeverLeaveTrain">
            <summary>
            Prevents <see cref="T:GTA.Ped"/>s riding trains from getting off them.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontDropJetpackOnDeath">
            <summary>
            When dead, don't drop equipped jetpack.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseFpsUnholsterTransitionDuringCombatRoll">
            <summary>
            Player is playing the unholster transition in FPS mode.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ExitingFpsCombatRoll">
            <summary>
            Player is exiting combat roll in FPS mode.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_ExitingFpsCombatRoll</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ScriptHasControlOfPlayer">
            <summary>
            <see langword="true"/> when script is controlling the movement of the player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayFpsIdleFidgetsForProjectile">
            <summary>
            <see langword="true"/> when we should be playing idle fidgets for projectiles.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableAutoEquipHelmetsInBikes">
            <summary>
            Prevents <see cref="T:GTA.Ped"/> from auto-equipping helmets when entering a bike (includes quad bikes).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableAutoEquipHelmetsInAircraft">
            <summary>
            Prevents <see cref="T:GTA.Ped"/> from auto-equipping helmets when entering an aircraft.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WasPlayingFpsGetup">
            <summary>
            Was playing getup animations in FPS mode.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_WasPlayingFPSGetup</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.WasPlayingFpsMeleeActionResult">
            <summary>
            Was playing action result animations in FPS mode.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreferNoPriorityRemoval">
            <summary>
            Unless scenario conditions apply, make this <see cref="T:GTA.Ped"/> go through normal deletion but not priority
            deletion.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.FpsFidgetsAbortedOnFire">
            <summary>
            <see langword="true"/> when the FPS idle fidgets are aborted because the player fired the gun.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceFpsIKWithUpperBodyAnim">
            <summary>
            <see langword="true"/> when upper body anims are used during various tasks.
            </summary>
            <remarks>
            The original name is `<c>CPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim</c>` in the exe.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SwitchingCharactersInFirstPerson">
            <summary>
            <see langword="true"/> we switch a character in first person mode (in `<c>CGameWorld::ChangePlayerPed</c>`).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsClimbingLadder">
            <summary>
            <see langword="true"/> when the <see cref="T:GTA.Ped"/> is climbing a ladder.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasBareFeet">
            <summary>
            Flag to indicate that player has no shoes (used for third and first person aiming cameras and
            <see cref="T:GTA.Ped"/> follow camera).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.GoOnWithoutVehicleIfItIsUnableToGetBackToRoad">
            <summary>
            It will force the <see cref="T:GTA.Ped"/> to abandon its <see cref="T:GTA.Vehicle"/> (when using TaskGoToPointAnyMeans)
            if it is unable to get back to road.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockDroppingHealthSnacksOnDeath">
            <summary>
            Set by script to prevent <see cref="T:GTA.Ped"/>s from dropping snack health pickups on death
            (in <c>CPed::CreateDeadPedPickups</c>).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ResetLastVehicleOnVehicleExit">
            <summary>
            Reset the <see cref="T:GTA.Ped"/>'s stored MyVehicle pointer when they leave their <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceThreatResponseToNonFriendToFriendMeleeActions">
            <summary>
            Forces threat response to melee actions from non friend to friend <see cref="T:GTA.Ped"/>s.
            With this flag, the <see cref="T:GTA.Ped"/> will ignore threat responses to melee actions where they are friendly
            with neither of source and target <see cref="T:GTA.Ped"/>s of the threat responses.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontRespondToRandomPedsDamage">
            <summary>
            Do not respond to <see cref="T:GTA.Ped"/>s damage where the inflictor's <see cref="T:GTA.EntityPopulationType"/> is
            one of the random types.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowContinuousThreatResponseWantedLevelUpdates">
            <summary>
            Shares the same logic of <see cref="F:GTA.PedConfigFlagToggles.OnlyUpdateTargetWantedIfSeen"/> but will continue to check even after
            the initial wanted level is set.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.KeepTargetLossResponseOnCleanup">
            <summary>
            On mission state cleanup, which can be called with <see cref="M:GTA.Entity.MarkAsNoLongerNeeded"/>,
            the <see cref="T:GTA.Ped"/> will not set their target loss response to exit task.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PlayersDontDragMeOutOfCar">
            <summary>
            Similar to <see cref="F:GTA.PedConfigFlagToggles.DontDragMeOutCar"/> except it only prevents players from dragging
            the <see cref="T:GTA.Ped"/> out and allows AI to still do so.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BroadcastRespondedToThreatWhenGoingToPointShooting">
            <summary>
            Whenever the <see cref="T:GTA.Ped"/> starts shooting while going to a point, it trigger a responded to threat
            broadcast.
            </summary>
            <remarks>
            The original name is <c>CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting</c> in the exe,
            but this enum uses the corrected name.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnorePedTypeForIsFriendlyWith">
            <summary>
            If this is set then `<c>CPedIntelligence::IsFriendlyWith</c>` will ignore the <see cref="T:GTA.Ped"/> type checks
            (i.e. two <see cref="F:GTA.PedType.Cop"/> <see cref="T:GTA.Ped"/>s are not automatically friendly).
            </summary>
            <remarks>
            Strictly, when either of 2 <see cref="T:GTA.Ped"/>s have this flag, neither of them will not automatically
            consider the other as friendly even if their <see cref="T:GTA.PedType"/>s are the same and are
            <see cref="F:GTA.PedType.Medic"/>, <see cref="F:GTA.PedType.Fire"/>, or <see cref="F:GTA.PedType.Cop"/>.
            <see cref="T:GTA.Ped"/>s' <see cref="T:GTA.Relationship"/> (acquaintance) must be set to
            <see cref="F:GTA.Relationship.Companion"/> or <see cref="F:GTA.Relationship.Respect"/> towards other <see cref="T:GTA.Ped"/>s,
            or must be in the same <see cref="T:GTA.PedGroup"/> as other <see cref="T:GTA.Ped"/>s, so they will be considered
            friendly with others (as the usual case).
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatNonFriendlyAsHateWhenInCombat">
            <summary>
            Any non-friendly <see cref="T:GTA.Ped"/> will be considered as hated instead.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontLeaveVehicleIfLeaderNotInVehicle">
            <summary>
            Suppresses exit vehicle task being created in <c>CEventLeaderExitedCarAsDriver::CreateResponseTask</c>.
            <see cref="T:GTA.Ped"/> won't exit <see cref="T:GTA.Vehicle"/> if leader isn't in it as well.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ChangeFromPermanentToAmbientPopTypeOnMigration">
            <summary>
            Change <see cref="T:GTA.Ped"/> to ambient pop type on migration.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowMeleeReactionIfMeleeProofIsOn">
            <summary>
            Allow melee reaction to come through even if proof is on.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UsingLowriderLeans">
            <summary>
            <see cref="T:GTA.Ped"/> is playing lowrider lean animations due to <see cref="T:GTA.Vehicle"/> suspension modification.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UsingAlternateLowriderLeans">
            <summary>
            <see cref="T:GTA.Ped"/> is playing alternate lowrider lean animations (ie arm on window) due to
            <see cref="T:GTA.Vehicle"/> suspension modification.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseNormalExplosionDamageWhenBlownUpInVehicle">
            <summary>
            If this is set, the <see cref="T:GTA.Ped"/> won't be instantly killed if <see cref="T:GTA.Vehicle"/> is blown up (from
            <c>CAutomobile::BlowUpCar</c> -> <c>KillPedsInVehicle</c>). Instead, they will take normal explosive damage
            and be forced to exit the <see cref="T:GTA.Vehicle"/> if they're still alive.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHomingMissileLockForVehiclePedInside">
            <summary>
            Blocks locking on of the <see cref="T:GTA.Vehicle"/> that the <see cref="T:GTA.Ped"/> is inside.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableTakeOffScubaGear">
            <summary>
            Same as CPED_RESET_FLAG_DisableTakeOffScubaGear but on a config flag.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreMeleeFistWeaponDamageMult">
            <summary>
            Melee fist weapons (ie knuckle duster) won't apply relative health damage scaler
            (<c>m_MeleeRightFistTargetHealthDamageScaler</c> in weapon info).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.LawPedsCanFleeFromNonWantedPlayer">
             <summary>
             Law <see cref="T:GTA.Ped"/>s will be triggered to flee if player triggers an appropriate event (even if
             <see cref="T:GTA.Ped"/> is not wanted) instead of entering combat. NB: Only synced over the network when set on
             players.
            
             Allows law <see cref="T:GTA.Ped"/> to flee even if <see cref="T:GTA.Ped"/> is not wanted and
             <c>CWanted::m_AllRandomsFlee</c> is set.
             </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceBlipSecurityPedsIfPlayerIsWanted">
            <summary>
            Forces security <see cref="T:GTA.Ped"/>s (not cop <see cref="T:GTA.Ped"/>s) to be blipped on the minimap if the player
            is wanted. Set on the local player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsHolsteringWeapon">
            <summary>
            <see cref="T:GTA.Ped"/> is running the swap weapon task and holstering the previous weapon, but has not started
            drawing the new one.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseGoToPointForScenarioNavigation">
            <summary>
            Don't use nav mesh for navigating to scenario points. DLC Hack for yachts.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontClearLocalPassengersWantedLevel">
            <summary>
            Don't clear local <see cref="T:GTA.Ped"/>'s wanted level when remote <see cref="T:GTA.Ped"/> in the same
            <see cref="T:GTA.Vehicle"/> has his wanted level cleared by script.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockAutoSwapOnWeaponPickups">
            <summary>
            Block auto weapon swaps for weapon pickups.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ThisPedIsATargetPriorityForAI">
            <summary>
            Increase AI targeting score for <see cref="T:GTA.Ped"/>s with this flag.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsSwitchingHelmetVisor">
            <summary>
            Indicates that <see cref="T:GTA.Ped"/> is playing switch visor up/down anim.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceHelmetVisorSwitch">
            <summary>
            Forces <see cref="T:GTA.Ped"/> to do a visor helmet switch if able to.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsPerformingVehicleMelee">
            <summary>
            Indicates that <see cref="T:GTA.Ped"/> is performing vehicle melee action.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseOverrideFootstepPtFx">
            <summary>
            Overrides <see cref="T:GTA.Ped"/> footstep particle effects with the global overriden footstep effect, which can
            be changed by <c>SET_PARTICLE_FX_FOOT_OVERRIDE_NAME</c>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableVehicleCombat">
            <summary>
            Disables vehicle combat.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatAsFriendlyForTargetingAndDamage">
            <summary>
            Prevents this <see cref="T:GTA.Ped"/> from being locked on and blocks ability to damage / fire at
            <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.AllowBikeAlternateAnimations">
            <summary>
            Allows <see cref="T:GTA.Ped"/>s on motorcycles to use the alternate animation set when available.
            </summary>
            <remarks>
            <see cref="T:GTA.Ped"/>s will not use the alternate animation when they have seat overrides set by a script, which
            can be set with `<c>SET_PED_IN_VEHICLE_CONTEXT</c>`, or when they are panicked or agitated.
            </remarks>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.TreatAsFriendlyForTargetingAndDamageNonSynced">
            <summary>
            Prevents this <see cref="T:GTA.Ped"/> from being locked on and blocks ability to damage / fire at
            <see cref="T:GTA.Ped"/>. This flag is not synced, o will only work on machine that set it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseLockpickVehicleEntryAnimations">
            <summary>
            When set, will attempt to use lockpick animations designed for Franklin in SP mode when breaking into
            a <see cref="T:GTA.Vehicle"/> (for forced entry).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreInteriorCheckForSprinting">
            <summary>
            When set, player will be able to sprint inside interiors even if it is tagged to prevent it.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.SwatHeliSpawnWithinLastSpottedLocation">
            <summary>
            When set, swat helicopters will spawn within last spotted location instead of actual <see cref="T:GTA.Ped"/>
            location (and target is a player).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableStartEngine">
            <summary>
            prevents <see cref="T:GTA.Ped"/> from playing start engine anims (and turning engine on).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreBeingOnFire">
            <summary>
            makes <see cref="T:GTA.Ped"/> ignore being on fire (fleeing, reacting to `<c>CEventOnFire</c>` event).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableTurretOrRearSeatPreference">
            <summary>
            Disables turret seat and activity seat preference for vehicle entry for local player.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableWantedHelicopterSpawning">
            <summary>
            Will not spawn wanted helicopters to chase after this target.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.UseTargetPerceptionForCreatingAimedAtEvents">
            <summary>
            Will only create aimed at events if player is within normal perception of the target.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHomingMissileLockon">
            <summary>
            Will prevent homing lockon on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForceIgnoreMaxMeleeActiveSupportCombatants">
            <summary>
            Ignore max number of active support combatants and let <see cref="T:GTA.Ped"/> join them as such.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.StayInDefensiveAreaWhenInVehicle">
            <summary>
            Will try to stay within set defensive area while driving a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontShoutTargetPosition">
            <summary>
            Will prevent the <see cref="T:GTA.Ped"/> from communicating target position to all other friendly
            <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHelmetArmor">
            <summary>
            Will apply full headshot damage, regardless if <see cref="T:GTA.Ped"/> has a helmet (or armored one).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CreatedByConcealedPlayer">
            <summary>
            Marks a <see cref="T:GTA.Ped"/> that was created by concealed player from marked up scenarios.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PermanentlyDisablePotentialToBeWalkedIntoResponse">
            <summary>
            Synced and permanent version of <see cref="F:GTA.PedConfigFlagToggles.DisablePotentialToBeWalkedIntoResponse"/>.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PreventVehExitDueToInvalidWeapon">
            <summary>
            Will prevent <see cref="T:GTA.Ped"/> from automatically being forced out of <see cref="T:GTA.Vehicle"/> due to weapon
            being invalid (e.g. turret seats after going into water).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IgnoreNetSessionFriendlyFireCheckForAllowDamage">
            <summary>
            Will ignore the friendly fire setting that was set by NETWORK_SET_FRIENDLY_FIRE_OPTION when checking if
            <see cref="T:GTA.Ped"/> can be damaged.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontLeaveCombatIfTargetPlayerIsAttackedByPolice">
            <summary>
            Will make <see cref="T:GTA.Ped"/> stay in combat even if the player has targeting starts being attacked by cops.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CheckLockedBeforeWarp">
            <summary>
            Will check when entering a <see cref="T:GTA.Vehicle"/> if it is locked before warping.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontShuffleInVehicleToMakeRoom">
            <summary>
            Will prevent a player from shuffling across to make room if another player is entering from the same side.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.GiveWeaponOnGetup">
            <summary>
            Will give the <see cref="T:GTA.Ped"/> a weapon to use once their weapon is removed for getups.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontHitVehicleWithProjectiles">
            <summary>
            <see cref="T:GTA.Ped"/> fired projectiles will ignore the <see cref="T:GTA.Vehicle"/> they are in.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableForcedEntryForOpenVehiclesFromTryLockedDoor">
            <summary>
            Will prevent <see cref="T:GTA.Ped"/> from forcing entry into <see cref="T:GTA.Vehicle"/>s that are open from
            <c>TryLockedDoor</c> state.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.FiresDummyRockets">
            <summary>
            Does nothing in SP game. In MP game, issues a <c>CEventNetworkFiredDummyProjectile</c> when
            <see cref="T:GTA.Ped"/>s with this flag fire projectiles (not limited to rockets).
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.PedIsArresting">
            <summary>
            Is the <see cref="T:GTA.Ped"/> currently preforming an arrest.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.IsDecoyPed">
            <summary>
            Will make this <see cref="T:GTA.Ped"/> a decoy <see cref="T:GTA.Ped"/> that will focus targeting.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HasEstablishedDecoy">
            <summary>
            This <see cref="T:GTA.Ped"/> has created a decoy.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockDispatchedHelicoptersFromLanding">
            <summary>
            Will prevent dispatched helicopters from landing and dropping off <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontCryForHelpOnStun">
            <summary>
            Will prevent <see cref="T:GTA.Ped"/>s from crying for help when shot with the stun gun.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.HitByTranqWeapon">
            <summary>
            Tranq weapons are handled differently in terms of damage. This triggers that logic.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.CanBeIncapacitated">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> may be incapacitated.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.ForcedAimFromArrest">
            <summary>
            If set, we will always behave like we have the aim trigger pressed.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DontChangeTargetFromMelee">
            <summary>
            If set, we wont set a new target after a melee attack.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.DisableHealthRegenerationWhenStunned">
            <summary>
            Used to disable health regeneration when damaged with the stun gun in MP.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.RagdollFloatsIndefinitely">
            <summary>
            Prevents a dead <see cref="T:GTA.Ped"/> from sinking.
            </summary>
        </member>
        <member name="F:GTA.PedConfigFlagToggles.BlockElectricWeaponDamage">
            <summary>
            Blocks electric weapon damage.
            </summary>
        </member>
        <member name="M:GTA.PedGroup.Delete">
            <summary>
            Removes this <see cref="T:GTA.PedGroup"/>.
            </summary>
        </member>
        <member name="M:GTA.PedGroup.Exists">
            <summary>
            Determines if this <see cref="T:GTA.PedGroup"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.PedGroup"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same group as this <see cref="T:GTA.PedGroup"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same group as this <see cref="T:GTA.PedGroup"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Equality(GTA.PedGroup,GTA.PedGroup)">
            <summary>
            Determines if two <see cref="T:GTA.PedGroup"/>s refer to the same group.
            </summary>
            <param name="left">The left <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="right">The right <see cref="T:GTA.Checkpoint"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same group as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Inequality(GTA.PedGroup,GTA.PedGroup)">
            <summary>
            Determines if two <see cref="T:GTA.PedGroup"/>s don't refer to the same group.
            </summary>
            <param name="left">The left <see cref="T:GTA.PedGroup"/>.</param>
            <param name="right">The right <see cref="T:GTA.PedGroup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same group as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedGroup.op_Implicit(GTA.PedGroup)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.PedGroup"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.PedHash.Franklin02">
            <summary>
            The Franklin Clinton model added in the Contract update, and this model is not used for story mode. The model name is <c>P_Franklin_02</c>.
            The leader player will control a <see cref="T:GTA.Ped" /> with this model in Short Trip missions.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY">
            <summary>
            The first in-game model of Andre Romell Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY02">
            <summary>
            The second in-game model of Andre Romell Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO">
            <summary>
            The first in-game model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO02">
            <summary>
            The second in-game model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO">
            <summary>
            The first in-game model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO02">
            <summary>
            The second in-game model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARYCutscene">
            <summary>
            The first cutscene model of Andre Romell Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.ARY02Cutscene">
            <summary>
            The second cutscene model of Andre Romell Young, known professionally as Dr. Dre.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIOCutscene">
            <summary>
            The first cutscene model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.JIO02Cutscene">
            <summary>
            The second cutscene model of Jimmy Iovine.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJOCutscene">
            <summary>
            The first cutscene model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="F:GTA.PedHash.MJO02Cutscene">
            <summary>
            The second cutscene model of Mark Jordan, known professionally as DJ Pooh.
            </summary>
        </member>
        <member name="T:GTA.PedHeadshot">
            <summary>
            Represents a <see cref="T:GTA.Ped"/> headshot.
            </summary>
        </member>
        <member name="M:GTA.PedHeadshot.Register(GTA.Ped)">
            <summary>
            Registers a <see cref="T:GTA.Ped"/> to have their headshot taken (64x64 by default).
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to have their headshot taken.</param>
            <returns>A <see cref="T:GTA.PedHeadshot"/> instance if successfully requested; otherwise, <see langword="null"/>.</returns>
            <remarks>
            There are 26 slots available for this regular <see cref="T:GTA.PedHeadshot"/> (31 in the game versions prior to v1.0.877.1);
            if it's already in use, this request will fail and return <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:GTA.PedHeadshot.RegisterHiRes(GTA.Ped)">
            <summary>
            Registers a <see cref="T:GTA.Ped"/> to have their headshot taken with a high resolution texture (128x128 resolution by default).
            Not available in the game versions earlier than v1.0.877.1.
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to have their headshot taken.</param>
            <returns>
            A <see cref="T:GTA.PedHeadshot"/> instance if successfully requested; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            There are 7 slot available for transparent <see cref="T:GTA.PedHeadshot"/>; if it's already in use,
            this request will fail and return <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:GTA.PedHeadshot.RegisterTransparent(GTA.Ped)">
            <summary>
            Registers a <see cref="T:GTA.Ped"/> to have their headshot taken with a transparent background (128x128 resolution by default).
            </summary>
            <param name="ped">The <see cref="T:GTA.Ped"/> to have their headshot taken with a transparent background.</param>
            <returns>
            A <see cref="T:GTA.PedHeadshot"/> instance if successfully requested; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            There is only one slot available for transparent <see cref="T:GTA.PedHeadshot"/>; if it's already in use,
            this request will fail and return <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:GTA.PedHeadshot.Handle">
            <summary>
            Gets the handle of this <see cref="T:GTA.PedHeadshot"/>.
            </summary>
        </member>
        <member name="P:GTA.PedHeadshot.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.PedHeadshot"/>.
            </summary>
        </member>
        <member name="P:GTA.PedHeadshot.IsValid">
            <summary>
            Returns whether this <see cref="T:GTA.PedHeadshot"/> is a valid one.
            At least <see cref="P:GTA.PedHeadshot.Handle"/> must be reserved for this property to return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GTA.PedHeadshot.IsReady">
            <summary>
            Returns whether the texture of this <see cref="T:GTA.PedHeadshot"/> is ready to be used.
            At least <see cref="P:GTA.PedHeadshot.Handle"/> must be reserved for this property to return <see langword="true"/>.
            </summary>
        </member>
        <member name="M:GTA.PedHeadshot.TryGetTxd(GTA.Graphics.Txd@)">
            <summary>
            Gets a <see cref="T:GTA.Graphics.Txd"/> that represents the texture dictionary name of this <see cref="T:GTA.PedHeadshot"/>.
            The texture name is the same as the txd name.
            </summary>
            <param name="txd">
            When this method returns, contains a <see cref="T:GTA.Graphics.Txd"/> that represents the ped headshot txd name,
            if the <see cref="T:GTA.PedHeadshot"/> is ready to be used; otherwise, a <see cref="T:GTA.Graphics.Txd"/> that contains
            the empty string as the name. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> that represents the ped headshot txd name if the <see cref="T:GTA.PedHeadshot"/>
            is ready to be used; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PedHeadshot.GetTxdNoStatusCheck">
            <summary>
            Gets a <see cref="T:GTA.Graphics.Txd"/> that represents the texture dictionary (txd) name of this <see cref="T:GTA.PedHeadshot"/>
            without any status tests. You should not directly use the return value to any methods or native functions
            that require texture dictionary names, as this method always returns the txd names for the <see cref="P:GTA.PedHeadshot.Handle"/>
            without ANY status tests.
            </summary>
            <remarks>
            This methods basically returns the same string as <c>pedmugshot_%02d</c>,
            where <see cref="P:GTA.PedHeadshot.Handle"/> is filled in.
            </remarks>
        </member>
        <member name="M:GTA.PedHeadshot.Release">
            <summary>
            Releases this <see cref="T:GTA.PedHeadshot"/> associated to a <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.PedHeadshot.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same ped headshot as this <see cref="T:GTA.PedHeadshot"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same ped headshot as this <see cref="T:GTA.PedHeadshot"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedHeadshot.op_Equality(GTA.PedHeadshot,GTA.PedHeadshot)">
            <summary>
            Determines if two <see cref="T:GTA.PedHeadshot"/>s refer to the same ped headshot.
            </summary>
            <param name="left">The left <see cref="T:GTA.PedHeadshot"/>.</param>
            <param name="right">The right <see cref="T:GTA.PedHeadshot"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same ped headshot as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedHeadshot.op_Inequality(GTA.PedHeadshot,GTA.PedHeadshot)">
            <summary>
            Determines if two <see cref="T:GTA.PedHeadshot"/>s don't refer to the same ped headshot.
            </summary>
            <param name="left">The left <see cref="T:GTA.PedHeadshot"/>.</param>
            <param name="right">The right <see cref="T:GTA.PedHeadshot"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same ped headshot as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedHeadshot.op_Implicit(GTA.PedHeadshot)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.PedHeadshot"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.PedLegIKMode">
            <summary>
            An enumeration of all the possible <see cref="T:GTA.Ped"/> leg IK mode. No other values are available in the game.
            </summary>
        </member>
        <member name="F:GTA.PedLegIKMode.Off">
            <summary>
            No leg IK at all.
            </summary>
        </member>
        <member name="F:GTA.PedLegIKMode.Partial">
            <summary>
            Fixup legs based on standing capsule impacts.
            </summary>
        </member>
        <member name="F:GTA.PedLegIKMode.Full">
            <summary>
            Fixup legs using probes for each foot.
            </summary>
        </member>
        <member name="F:GTA.PedLegIKMode.FullMelee">
            <summary>
            Fixup legs using probes for each foot with melee support.
            </summary>
        </member>
        <member name="T:GTA.PedMotionState">
            <summary>
            An enumeration of all the possible motion states for <see cref="T:GTA.Ped"/>s, which represents
            `<c>CPedMotionStates::eMotionState</c>` (mangled name for PSO parsers: <c>CPedMotionStates__eMotionState</c>).
            </summary>
            <remarks>
            All the canonical names have the prefix "<c>MotionState_</c>" at the beginning.
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.CrouchIdle">
            <remarks>
            The canonical name is "<c>MotionState_Crouch_Idle</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.CrouchWalk">
            <remarks>
            The canonical name is "<c>MotionState_Crouch_Walk</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.CrouchRun">
            <remarks>
            The canonical name is "<c>MotionState_Crouch_Run</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.DivingIdle">
            <remarks>
            The canonical name is "<c>MotionState_Driving_Idle</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.DivingSwim">
            <remarks>
            The canonical name is "<c>MotionState_Driving_Swim</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.StealthIdle">
            <remarks>
            The canonical name is "<c>MotionState_Stealth_Swim</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.StealthWalk">
            <remarks>
            The canonical name is "<c>MotionState_Stealth_Walk</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.StealthRun">
            <remarks>
            The canonical name is "<c>MotionState_Stealth_Run</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.ActionModeIdle">
            <remarks>
            The canonical name is "<c>MotionState_ActionMode_Idle</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.ActionModeWalk">
            <remarks>
            The canonical name is "<c>MotionState_ActionMode_Walk</c>".
            </remarks>
        </member>
        <member name="F:GTA.PedMotionState.ActionModeRun">
            <remarks>
            The canonical name is "<c>MotionState_ActionMode_Run</c>".
            </remarks>
        </member>
        <member name="T:GTA.PedMoveBlendRatio">
            <summary>
            Represents a move blend ratio for peds.
            Between <c>0f</c> to <c>3f</c>, even subtle difference makes some difference at how peds will move.
            </summary>
        </member>
        <member name="P:GTA.PedMoveBlendRatio.Still">
            <summary>
            Returns the same struct as <c>new PedMoveBlendRatio(0.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.PedMoveBlendRatio.Walk">
            <summary>
            Returns the same struct as <c>new PedMoveBlendRatio(1.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.PedMoveBlendRatio.Run">
            <summary>
            Returns the same struct as <c>new PedMoveBlendRatio(2.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.PedMoveBlendRatio.Sprint">
            <summary>
            Returns the same struct as <c>new PedMoveBlendRatio(3.0f)</c>.
            </summary>
        </member>
        <member name="M:GTA.PedMoveBlendRatio.op_Equality(GTA.PedMoveBlendRatio,GTA.PedMoveBlendRatio)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedMoveBlendRatio.op_Inequality(GTA.PedMoveBlendRatio,GTA.PedMoveBlendRatio)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><see langword="true" /> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PedMoveBlendRatio.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:GTA.PedMoveBlendRatio.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:GTA.PedPropAnchorPoint">
            <summary>
            An enumeration of anchor points for <see cref="T:GTA.Ped"/> props (represents what <c>eAnchorPoints</c> in the game represents).
            </summary>
        </member>
        <member name="T:GTA.PedResetFlags">
            <summary>
            Represents a wrapper class for `<c>CPedResetFlags</c>` (not `<c>ePedResetFlags</c>`).
            The class calls its reset methods every frame, where the members that tracks the remaining numbers of frames
            get decremented and most of the other values are reset to appropriate values.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesToBeKnockedByDoor">
            <summary>
            Gets or sets the number of frame where the <see cref="T:GTA.Ped"/> is getting pushed out of the way by the player
            pushing a door.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesToSetEntityZFromGround">
            <summary>
            Gets or sets the number of frames where the the game can snap the height of the ped to the correct distance
            above the ground.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesNotToAcceptIKLookAts">
            <summary>
            Gets or sets the number of frames the <see cref="T:GTA.Ped"/> should not accept any IK look ats.
            The value takes any number between 0 and 3.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not within the range of 0 to 3. Can only be thrown from the setter.
            </exception>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesNotToAcceptCodeIKLookAts">
            <summary>
            Gets or sets the number of frames the <see cref="T:GTA.Ped"/> should not accept script IK look ats.
            The value takes any number between 0 and 3.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not within the range of 0 to 3. Can only be thrown from the setter.
            </exception>
            <remarks>
            This property having a value more than zero does not prevent the <see cref="T:GTA.Ped"/> from looking at
            initiated by a script, or by some of the game code that's not called via native functions.
            </remarks>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesToConsiderJustLeftVehicle">
            <summary>
            Gets or sets the number of frames the <see cref="T:GTA.Ped"/> should be considered to have just left
            a <see cref="T:GTA.Vehicle"/>. The value takes any number between 0 and 15.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not within the range of 0 to 15. Can only be thrown from the setter.
            </exception>
        </member>
        <member name="P:GTA.PedResetFlags.NumFramesToConsiderInCover">
            <summary>
            Gets or sets the number of frames the <see cref="T:GTA.Ped"/> should be considered to have just left
            a <see cref="T:GTA.Vehicle"/>. The value takes any number between 0 and 3.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is not within the range of 0 to 3. Can only be thrown from the setter.
            </exception>
        </member>
        <member name="P:GTA.PedResetFlags.EntityZFromGroundZHeight">
            <summary>
            Gets or sets the absolute Z coordinate of the ground height that determines if the <see cref="T:GTA.Ped"/> should
            be snapped to the ground. If close enough and <see cref="P:GTA.PedResetFlags.NumFramesToSetEntityZFromGround"/> is more than
            zero, the <see cref="T:GTA.Ped"/> will be snapped to the ground.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.EntityZFromGroundZThreshold">
            <summary>
            Gets or sets the Z coordinate threshold from the ground height that determines if the <see cref="T:GTA.Ped"/>
            should be snapped to the ground. If close enough and <see cref="P:GTA.PedResetFlags.NumFramesToSetEntityZFromGround"/> is more
            than zero, the <see cref="T:GTA.Ped"/> will be snapped to the ground.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.IsHeadIKBlocked">
            <summary>
            Gets a value that indicates whether the head IK is blocked for both game code and scripts in
            this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.IsCodeHeadIKBlocked">
            <summary>
            Gets a value that indicates whether the head IK is blocked for scripts in this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.HasJustLeftVehicle">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Ped"/> should be considered as have just left
            a <see cref="T:GTA.Vehicle"/> by testing if <see cref="P:GTA.PedResetFlags.NumFramesToConsiderInCover"/> is not zero.
            </summary>
        </member>
        <member name="P:GTA.PedResetFlags.IsInCover">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Ped"/> is currently in cover by testing
            if <see cref="P:GTA.PedResetFlags.NumFramesToConsiderInCover"/> is not zero.
            </summary>
            <remarks>
            While how this property is the same as how `<c>bool CPed::GetIsInCover() const</c>` returns true,
            it is not the same as how SHVDN's <see cref="P:GTA.Ped.IsInCover"/> returns true, which tests if
            a `<c>TaskCover</c>` is running on the <see cref="T:GTA.Ped"/>'s intelligence.
            </remarks>
        </member>
        <member name="M:GTA.PedResetFlags.SetIsHeadIKBlocked">
            <summary>
            Sets the head IK of this <see cref="T:GTA.Ped"/> as blocked.
            </summary>
            <remarks>
            Sets <see cref="P:GTA.PedResetFlags.NumFramesNotToAcceptIKLookAts"/> to the max value, which is 3 at least in the game versions
            between v1.0.372.2 and v1.0.3179.0.
            </remarks>
        </member>
        <member name="M:GTA.PedResetFlags.SetIsCodeHeadIKBlocked">
            <summary>
            Sets the head IK of this <see cref="T:GTA.Ped"/> as blocked for scripts.
            </summary>
            <remarks>
            Sets <see cref="P:GTA.PedResetFlags.NumFramesNotToAcceptIKLookAts"/> to the max value, which is 3 at least in the game versions
            between v1.0.372.2 and v1.0.3179.0.
            </remarks>
        </member>
        <member name="M:GTA.PedResetFlags.SetEntityZFromGroundZHeight(System.Single,System.Single)">
            <summary>
            Sets the Z coordinate of the ground height and the threshold, which determine if the <see cref="T:GTA.Ped"/>
            should be snapped to the ground.
            </summary>
            <param name="height">The absolute Z coordinate of the ground where the <see cref="T:GTA.Ped"/> is on.</param>
            <param name="threshold">The threshold to determine if the <see cref="T:GTA.Ped"/> should be snapped.</param>
            <remarks>
            <see cref="P:GTA.PedResetFlags.NumFramesToSetEntityZFromGround"/> should be more than zero to snap before calling this method.
            If the property gets set to zero in the internal reset function, what you set via this method will also be
            reset.
            </remarks>
        </member>
        <member name="M:GTA.PedResetFlags.GetResetFlag(GTA.PedResetFlagToggles)">
            <summary>
            Gets the value of a reset flag toggle on this <see cref="T:GTA.Ped"/>.
            You will need to call this method every frame you want to get, since the values of
            <see cref="T:GTA.PedConfigFlagToggles"/> are reset every frame.
            </summary>
        </member>
        <member name="M:GTA.PedResetFlags.SetResetFlag(GTA.PedResetFlagToggles,System.Boolean)">
            <summary>
            Sets the value of a reset flag toggle on this <see cref="T:GTA.Ped"/>.
            You will need to call this method every frame you want to set, since the values of
            <see cref="T:GTA.PedConfigFlagToggles"/> are reset every frame.
            </summary>
        </member>
        <member name="T:GTA.PedResetFlagToggles">
            <summary>
            An enumeration of known reset flags for <see cref="T:GTA.Ped"/>, which will be required to set or get every frame you need to set or get.
            </summary>
            <remarks>
            You can check if names of this enum are included in the exe by searching the dumped exe for hashed values of names like <c>CPED_RESET_FLAG_[enum name]</c> without case conversion
            (for example, search the dumped exe for 0x49F290D0, which is the hashed value of <c>CPED_RESET_FLAG_DisablePlayerJumping</c>).
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FallenDown">
            <summary>
            Decides whether to IK rotate body to match ground angle.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontRenderThisFrame">
            <summary>
            Forces <see cref="T:GTA.Ped"/> to stop rendering this frame (for example - drive task can stop
            <see cref="T:GTA.Ped"/>s rendering inside buses).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockMovementAnims">
            <summary>
            Completely disables processing of on-foot movement anim blending for this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ZeroDesiredMoveBlendRatios">
            <summary>
            Zeroes out all inputs to movement system this frame, causing <see cref="T:GTA.Ped"/> to stop moving.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontChangeMbrInSimpleMoveDoNothing">
            <summary>
            If this is set, then `<c>TaskSimpleMoveDoNothing</c>` will not reset desired move blend ratio to zero
            this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FollowingRoute">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> is following a route of some sort - used to let simplest goto task pull
            the <see cref="T:GTA.Ped"/> back onto their current route segment.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TakingRouteSplineCorner">
            <summary>
            Whether the <see cref="T:GTA.Ped"/> is cornering via a spline curve, which will take them off their route line
            segment.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPhysicsTasks">
            <summary>
            Indicates if the <see cref="T:GTA.Ped"/> needs to call process physics for (main) tasks this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPreRender2">
            <summary>
            Indicates if the <see cref="T:GTA.Ped"/> needs to call `<c>ProcessPreRender2</c>` for tasks.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FiringWeapon">
            <summary>
            Set when <see cref="T:GTA.Ped"/> fires any weapon, so script can check the flag.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SearchingForCover">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> is likely to be searching for cover, used by the navmesh to load coverpoints
            around interested <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.KeepCoverPoint">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> wants to keep their current cover point this frame,
            otherwise it gets released.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsClimbing">
            <summary>
            If the <see cref="T:GTA.Ped"/> is climbing, shimmying or on a ladder. Stops `<c>ProcessProbes()</c>` from
            happening.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsJumping">
            <summary>
            Is the <see cref="T:GTA.Ped"/> jumping.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsLanding">
            <summary>
            Is landing after being in the air.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CullExtraFarAway">
            <summary>
            Flag AI can set to make <see cref="T:GTA.Ped"/> get culled further away (used for roadblock cops, criminals...)
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TaskUseKinematicPhysics">
            <summary>
            For use by tasks - puts the <see cref="T:GTA.Ped"/> into Kinematic physics mode.
            In this mode the <see cref="T:GTA.Ped"/> will push other objects our of the way, but not be physically affected
            by them.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TemporarilyBlockWeaponSwitching">
            <summary>
            Stops weapon switch processing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoNotClampFootIK">
            <summary>
            Stops clamping the foot IK. Maybe the clamps should be parameters of the IK manager, but apparently that is to be refactored in future
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DoNotClampFootIk</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MoveBlend_bFleeTaskRunning">
            <summary>
            `<c>TASK_SMART_FLEE</c>`, or `<c>TASK_COMPLEX_LEAVE_CAR_AND_FLEE</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsAiming">
            <summary>
            `<c>TASK_GUN</c>` or `<c>TASK_USE_COVER</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MoveBlend_bTaskComplexGunRunning">
            <summary>
            `<c>TASK_COMPLEX_GUN</c>` (only)
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MoveBlend_bMeleeTaskRunning">
            <summary>
            `<c>TASK_COMPLEX_MELEE</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MoveBlend_bCopSearchTaskRunning">
            <summary>
            `<c>TASK_COMPLEX_SEARCH_FOR_PED_ON_FOOT</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PatrollingInVehicle">
            <summary>
            <see cref="T:GTA.Ped"/> is patrolling in a <see cref="T:GTA.Vehicle"/>, likely meaning they are swat or police.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsWalkingRoundPlayer">
            <summary>
            Whether this <see cref="T:GTA.Ped"/> is walking around another <see cref="T:GTA.Ped"/> (one frame latency).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.VisemeAnimsBlocked">
            <summary>
            Blocks viseme anims from playing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AmbientAnimsBlocked">
            <summary>
            Blocks new ambient idles from starting.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ApplyVelocityDirectly">
            <summary>
            Indicates if the <see cref="T:GTA.Ped"/> should apply the velocity directly to the physics collider or go through
            the force solver.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerLockOn">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisablePlayerLockon</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ResetMoveGroupAfterRagdoll">
            <summary>
            If <see langword="true"/>, will reset the temp anim group when not ragdolling.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePedConstraints">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to rotate around freely.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerJumping">
            <summary>
            Disables player jumping if <see langword="true"/>. Reset in `<c>ResetPostPhysics</c>`, as it will be set
            via script.
            </summary>
            <remarks>
            Does not disable climbing.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerVaulting">
            <summary>
            Disables player vaulting/climbing if <see langword="true"/>.
            </summary>
            <remarks>
            Does not disable auto-vault, but you can disable it with <see cref="F:GTA.PedResetFlagToggles.DisablePlayerAutoVaulting"/>.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableAsleepImpulse">
            <summary>
            Disable the code that pushes <see cref="T:GTA.Ped"/>s which fall asleep in the air.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PostCameraAnimUpdateUseZeroTimestep">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ePostCameraAnimUpdateUseZeroTimestep</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowUpdateIfNoCollisionLoaded">
            <summary>
            Don't freeze the <see cref="T:GTA.Ped"/> for not having bounds loaded around it.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PlacingCharge">
            <summary>
            Setting Bomb (firing weapon is set also).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ScriptDisableSecondaryAnimationTasks">
            <summary>
            Disable upper body animation tasks such as shove <see cref="T:GTA.Ped"/> and open door anims.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressGunfireEvents">
            <summary>
            Suppresses AI generating fire events, so civilians won't be shocked or react, for use in a shooting range
            for example.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_SupressGunfireEvents</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InfiniteStamina">
            <summary>
            Currently just for mounts, but could be expanded to anything with stamina.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockWeaponReactionsUnlessDead">
            <summary>
            Stops ragdoll and NM behaviors triggering from weapon damage unless the <see cref="T:GTA.Ped"/> has died.
            </summary>
            <remarks>
            Does not block explosion reactions.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePlayerFiring">
            <summary>
            Forces player to fire even if they aren't pressing fire.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InCoverFacingLeft">
            <summary>
            Set when exiting the cover state saying if the <see cref="T:GTA.Ped"/> is facing left.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePeekFromCover">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will go into peeking if they are already in cover.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NotAllowedToChangeCrouchState">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will not be allowed to change their crouch state.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePedToStrafe">
            <summary>
            Forces a <see cref="T:GTA.Ped"/> to strafe.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceMeleeStrafingAnims">
            <summary>
            Forces a <see cref="T:GTA.Ped"/> to use the melee strafing anims when strafing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseKinematicPhysics">
            <summary>
            To be used by scripts - puts the <see cref="T:GTA.Ped"/> into Kinematic physics mode.
            In this mode, the <see cref="T:GTA.Ped"/> will push other physical objects our of the way, but not be physically
            affected by them.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ClearLockOnTarget">
            <summary>
            Clears the player's lock-on target next frame.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ClearLockonTarget</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CanPedSeeHatedPedBeingUsed">
            <summary>
            Activates can <see cref="T:GTA.Ped"/> see hated <see cref="T:GTA.Ped"/> generating events even when blocking of
            non-temp events is on.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InstantBlendToAim">
            <summary>
            Makes the <see cref="T:GTA.Ped"/> perform an instant blend to aim if starting a gun task this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceImprovedIdleTurns">
            <summary>
            Forces the <see cref="T:GTA.Ped"/> to use an improved idle turning system that should help him turn to face more
            quickly.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.HitPedWithWeapon">
            <summary>
            Set when damage is inflicted by this <see cref="T:GTA.Ped"/> on another <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePedToUseScriptCamHeading">
            <summary>
            Forces a <see cref="T:GTA.Ped"/> to the scripted camera heading instead of gameplay.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForcePedToUseScripCamHeading</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessProbesWhenExtractingZ">
            <summary>
            Makes the capsule physics push the <see cref="T:GTA.Ped"/> out of the ground even when extracting Z.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.KeepDesiredCoverPoint">
            <summary>
            Should the <see cref="T:GTA.Ped"/> keep their desired cover point this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.HasProcessedCornering">
            <summary>
            Whether the <see cref="T:GTA.Ped"/> has already processed slowing down for this corner.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.StandingOnForkliftForks">
            <summary>
            Set when the <see cref="T:GTA.Ped"/> standing capsule hits the forklift forks.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AimWeaponReactionRunning">
            <summary>
            <see cref="T:GTA.Ped"/> is running the reaction task this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InContactWithFoliage">
            <summary>
            <see cref="T:GTA.Ped"/> is in contact with `<c>GTA_FOLIAGE_TYPE</c>` bounds.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceExplosionCollisions">
            <summary>
            <see cref="T:GTA.Ped"/> will always collide with explosions, even when collision is off.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreTargetsCoverForLos">
            <summary>
            When checking LOS against targets, this <see cref="T:GTA.Ped"/> will ignore their cover (if the cover exists).
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_IgnoreTargetsCoverForLOS</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockAnimatedWeaponReactions">
            <summary>
            <see cref="T:GTA.Ped"/> should not play animated damager reactions while this flag is set.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePedCapsule">
            <summary>
            Removes the <see cref="T:GTA.Ped"/> capsule from the physics simulation.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableCrouchWhileInCover">
            <summary>
            Force the crouch flag to return <see langword="true"/> while in cover.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IncreasedAvoidanceRadius">
            <summary>
            Adds extra 2m onto the radius other <see cref="T:GTA.Ped"/>s use to avoid this <see cref="T:GTA.Ped"/> during local
            steering.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceRunningSpeedForFragSmashing">
            <summary>
            Forces the <see cref="T:GTA.Ped"/> to apply forces to frags as if running on contact,
            to guarantee <see cref="T:GTA.Ped"/>s will smash through frag objects when playing custom anims.
            Can be set by level designers to force the <see cref="T:GTA.Ped"/> to smash more easily through frags.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EnableMoverAnimationWhileAttached">
            <summary>
            While flagged, any mover animation will be applied to the offset of the attachment.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NoTimeDelayBeforeShot">
            <summary>
            While flagged, The time delay before a player can fire after aiming is 0.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SearchingForAutoVaultClimb">
            <summary>
            Informs climb code the <see cref="T:GTA.Ped"/> is doing an auto-vault.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ExtraLongWeaponRange">
            <summary>
            Extends the range of a <see cref="T:GTA.Ped"/>s weapons to 250m.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePlayerToEnterVehicleThroughDirectDoorOnly">
            <summary>
            Forces the player to only use direct access when entering <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TaskCullExtraFarAway">
            <summary>
            Can be set by AI tasks on the main task tree to disable a <see cref="T:GTA.Ped"/> getting cull from a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsVaulting">
            <summary>
            Set the entire time `<c>CTaskVault</c>` is running.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsParachuting">
            <summary>
            Set the entire time `<c>CTaskParachute</c>` is running.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressSlowingForCorners">
            <summary>
            If set, this will prevent the <see cref="T:GTA.Ped"/> from slowing down to take corners this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableProcessProbes">
            <summary>
            Disables processing of probes.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerAutoVaulting">
            <summary>
            If this flag is set on a <see cref="T:GTA.Ped"/>, it will not attempt to auto-vault.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.RequiresLegIK">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_RequiresLegIk</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.JayWalking">
            <summary>
            If set then the <see cref="T:GTA.Ped"/> is jay walking and a <see cref="T:GTA.Vehicle"/> is allowed to run him over.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseBulletPenetration">
            <summary>
            <see cref="T:GTA.Ped"/> will use bullet penetration code.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceAimAtHead">
            <summary>
            Force all attackers to target the head of this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsInStationaryScenario">
            <summary>
            In a scenario and not moving. Informs avoidance code that the <see cref="T:GTA.Ped"/> isn't going anywhere and
            should be steered around rather than waited for. Needs to be set on the <see cref="T:GTA.Ped"/> before they can
            handle scenario gesture clip sets.
            </summary>
            <remarks>
            `<c>CTaskUseScenario::ProcessPreFSM()</c>` also sets this flag when the squared magnitude/length of
            the <see cref="T:GTA.Ped"/> velocity is less than 0.010000001 (internal hex representation: `<c>0x3C23D70B</c>`,
            the result of the expression `<c>0.1f * 0.1f</c>`).
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TemporarilyBlockWeaponEquipping">
            <summary>
            Stop weapon equipping.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CoverOutroRunning">
            <summary>
            `<c>TASK_AIM_GUN_FROM_COVER_OUTRO</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSeeThroughChecksWhenTargeting">
            <summary>
            Any targeting LoS checks will fail if any materials with 'see through' materials found.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PuttingOnHelmet">
            <summary>
            Putting on helmet. You should not set this flag, only query it.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowPullingPedOntoRoute">
            <summary>
            Allows goto task to apply heading in order to pull a <see cref="T:GTA.Ped"/> back onto their route.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ApplyAnimatedVelocityWhilstAttached">
            <summary>
            Allows attachment offsets to be updated from animated velocities.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AICoverEntryRunning">
            <summary>
            `<c>TASK_ENTER_COVER</c>` : `<c>State_PlayAIEntryAnim</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ResponseAfterScenarioPanic">
            <summary>
            The <see cref="T:GTA.Ped"/> is entering threat response after panic exiting a scenario.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsNearDoor">
            <summary>
            <see cref="T:GTA.Ped"/> is near a non-vehicle door.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PanicInVehicle">
            <summary>
            When set, the <see cref="T:GTA.Ped"/> will play panic animations if in a vehicle.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableDynamicCapsuleRadius">
            <summary>
            Turn off dynamic adjustments to <see cref="T:GTA.Ped"/> capsules.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsRappelling">
            <summary>
            Is currently in a rappel task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SkipReactInReactAndFlee">
            <summary>
            When this <see cref="T:GTA.Ped"/> goes to `<c>CTaskThreatResponse</c>`, play the flee transition but not
            the reaction clip if fleeing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CannotBeTargeted">
            <summary>
            Will prevent this <see cref="T:GTA.Ped"/> from being a part of any other <see cref="T:GTA.Ped"/>s target list.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsFalling">
            <summary>
            <see cref="T:GTA.Ped"/> is in pure fall state (i.e. no parachuting, landing etc included).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceInjuryAfterStunned">
            <summary>
            Forces this <see cref="T:GTA.Ped"/> to the injured state after being stunned.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.HurtThisFrame">
            <summary>
            The <see cref="T:GTA.Ped"/> has entered the hurt state this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockWeaponFire">
            <summary>
            Prevent the <see cref="T:GTA.Ped"/> from shooting a weapon.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ExpandPedCapsuleFromSkeleton">
            <summary>
            Set the <see cref="T:GTA.Ped"/> capsule radius based on skeleton.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableWeaponLaserSight">
            <summary>
            Toggle the weapon laser sight off for this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PedExitedVehicleThisFrame">
            <summary>
            Set when <see cref="T:GTA.Ped"/> gets set out of <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SearchingForDropDown">
            <summary>
            <see cref="T:GTA.Ped"/> is searching for drop down.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseTighterTurnSettings">
            <summary>
            <see cref="T:GTA.Ped"/> should use tighter turn settings in human locomotion motion task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableArmSolver">
            <summary>
            Disable the arm solver this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TasksNeedProcessMoveSignalCalls">
            <summary>
            Set when <see cref="T:GTA.Ped"/>s require calls to `<c>ProcessMoveSignals()</c>`, for AI timeslicing to work
            with `<c>Move</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NoCollisionMovementMode">
            <summary>
            Set when a <see cref="T:GTA.Ped"/> is moving in an area where collisions with fixed geometry are unlikely.
            The <see cref="T:GTA.Ped"/>'s physics will not be forced to activate.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsNearLadder">
            <summary>
            <see cref="T:GTA.Ped"/> is near top of a ladder.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_IsNearLaddder</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoredByAutoOpenDoors">
            <summary>
            Set this for a <see cref="T:GTA.Ped"/> to be ignored by the auto opened doors when checking to see if the door
            should be opened.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockIKWeaponReactions">
            <summary>
            <see cref="T:GTA.Ped"/> should not play Ik damager reactions while this flag is set.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_BlockIkWeaponReactions</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FirstPhysicsUpdate">
            <summary>
            <see cref="T:GTA.Ped"/> was just created this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SpawnedThisFrameByAmbientPopulation">
            <summary>
            <see cref="T:GTA.Ped"/> was spawned this frame by ambient population.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuspendInitiatedMeleeActions">
            <summary>
            Temporarily suspend any melee actions this frame (does not include hit reactions).
            Use <see cref="F:GTA.PedConfigFlagToggles.DisableMelee"/> to turn it off completely.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressInAirEvent">
            <summary>
            Prevents <see cref="T:GTA.Ped"/> from getting the in air event the next frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowTasksIncompatibleWithMotion">
            <summary>
            If set, allows the <see cref="T:GTA.Ped"/> to have tasks incompatible with its current motion
            (the <see cref="T:GTA.Ped"/> will skip `<c>CheckTasksAreCompatibleWithMotion</c>` in that case).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsEnteringOrExitingVehicle">
            <summary>
            `<c>TASK_ENTER_VEHICLE</c>` or `<c>TASK_EXIT_VEHICLE</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.HasGunTaskWithAimingState">
            <summary>
            <see cref="T:GTA.Ped"/> is running `<c>TASK_GUN</c>` and task's state is `<c>State_Aim</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressLethalMeleeActions">
            <summary>
            This will suppress any melee action that is considered lethal (`<c>RA_IS_LETHAL</c>`, defined in
            `<c>action_table.meta</c>`).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AmbientIdleAndBaseAnimsBlocked">
            <summary>
            Blocks ambient idles and base animations from playing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseAlternativeWhenBlock">
            <summary>
            If set, <see cref="T:GTA.Ped"/> will use alternative aiming/firing anims
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceLowLodWaterCheck">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will always force probe for being in water when in low LOD mode.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MakeHeadInvisible">
            <summary>
            If set, scale the head of the <see cref="T:GTA.Ped"/> to 0.001.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NoAutoRunWhenFiring">
            <summary>
            Don't auto run when set.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PermitEventDuringScenarioExit">
            <summary>
            Ignore certain aspects (FOV checks, etc) of `<c>AffectsPedCore()</c>` on some events while
            the <see cref="T:GTA.Ped"/> is playing a scenario exit.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSteeringAroundVehicles">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSteeringAroundPeds">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSteeringAroundObjects">
            <summary>
            Enables/disables the low-level steering behaviour around <see cref="T:GTA.Prop"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSteeringAroundNavMeshEdges">
            <summary>
            Enables/disables the low-level steering behaviour around nav mesh edges.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableTakeOffParachutePack">
            <summary>
            Disable taking off the parachute pack.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceCombatTaunt">
            <summary>
            Forces a combat taunt for <see cref="T:GTA.Ped"/>s using the insult special ability.
            This flag is set, they will always use the combat taunt when the special is activated.
            </summary>
            <remarks>
            Although the instance method `<c>IsPedNoticableToPlayer</c>` in the class `<c>CScriptPedAIBlips::AIBlip</c>`,
            which `<c>Update()</c>` in the class may call, set this flag as well as some ysc scripts, no game code or
            ysc scripts test if this flag is set as of v1.0.2699.0.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreCombatTaunts">
            <summary>
            The <see cref="T:GTA.Ped"/> will ignore combat taunt events.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SkipAIUpdateProcessControl">
            <summary>
            <see langword="true"/> if we've already run this <see cref="T:GTA.Ped"/>'s AI and can skip it from within
            `<c>ProcessControl</c>`.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_SkipAiUpdateProcessControl</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OverridePhysics">
            <summary>
            A reset flag that disables collision and gravity on the <see cref="T:GTA.Ped"/> and drives entity positions and
            rotations directly, rather than going through the physics update.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WasPhysicsOverridden">
            <summary>
            <see langword="true"/> if physics was overriden during the last update.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockWeaponHoldingAnims">
            <summary>
            Block any on-foot weapon holding anims.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableMoveTaskHeadingAdjustments">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/>'s movement task should not adjust the heading of
            the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventAllMeleeTakedowns">
            <summary>
            Will temporarily prevent any takedown from being performed on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventFailedMeleeTakedowns">
            <summary>
            Will temporarily prevent any failed takedowns from being performed on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseTighterAvoidanceSettings">
            <summary>
            <see cref="T:GTA.Ped"/> should use tighter avoidance settings in navigation task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsHigherPriorityClipControllingPed">
            <summary>
            <see langword="true"/> if the active task on the main task tree is taking responsibility for the mover
            track.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.VehicleCrushingRagdoll">
            <summary>
            Set to <see langword="true"/> if a <see cref="T:GTA.Vehicle"/> is pressing downward on the ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnActivationUpdate">
            <summary>
            <see cref="T:GTA.Ped"/> was just activated this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceMotionStateLeaveDesiredMbr">
            <summary>
            Set this to disable setting the desired move blend ratio when forcing the motion state.
            Useful for forcing a flee start, etc.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceMotionStateLeaveDesiredMBR</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableDropDowns">
            <summary>
            Disable drop downs for this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InContactWithBigFoliage">
            <summary>
            <see cref="T:GTA.Ped"/> is in contact with `<c>GTA_FOLIAGE_TYPE</c>` bounds that are large and the player can be hidden.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_InContactWithBIGFoliage</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableCellphoneAnimations">
            <summary>
            Tells `<c>CTaskMobilePhone</c>` to blend out move network and prevent it from blending in.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsExitingVehicle">
            <summary>
            `<c>TASK_EXIT_VEHICLE</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableActionMode">
            <summary>
            Disables combat anims for <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EquippedWeaponChanged">
            <summary>
            Equipped weapon changed this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TouchingOverhang">
            <summary>
            Some part appears to be constrained downwards.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TooSteepForPlayer">
            <summary>
            We're standing on something flagged too steep for the player to stand on.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockSecondaryAnim">
            <summary>
            Block any secondary scripted task animations playing on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsInCombat">
            <summary>
            This <see cref="T:GTA.Ped"/> is running the combat task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseHeadOrientationForPerception">
            <summary>
            Will use the <see cref="T:GTA.Ped"/>'s head orientation for perception tests.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsDoingDriveBy">
            <summary>
            This <see cref="T:GTA.Ped"/> is running a driveby gun or projectile task.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_IsDoingDriveby</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsEnteringCover">
            <summary>
            This <see cref="T:GTA.Ped"/> is running a cover entry task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceMovementScannerCheck">
            <summary>
            Set to make `<c>CStaticMovementScanner::Scan()</c>` check for collisions as if the <see cref="T:GTA.Ped"/> is
            moving.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableJumpRagdollOnCollision">
            <summary>
            If <see langword="true"/>, the player will no longer auto-ragdoll when colliding with objects,
            <see cref="T:GTA.Ped"/>s, etc. while jumping.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsBeingMeleeHomedByPlayer">
            <summary>
            Set on the target <see cref="T:GTA.Ped"/> in melee if the player is homing towards them.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ShouldLaunchBicycleThisFrame">
            <summary>
            This <see cref="T:GTA.Ped"/> should launch the bicycle this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CanDoBicycleWheelie">
            <summary>
            This <see cref="T:GTA.Ped"/> can do a bicycle wheelie.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceProcessPhysicsUpdateEachSimStep">
            <summary>
            If <see langword="true"/>, `<c>ProcessPhysics()</c>` will execute completely for each physics simulation
            step.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePedCapsuleMapCollision">
            <summary>
            Disables collision between the <see cref="T:GTA.Ped"/> capsule and the map (useful in cases where the entity
            position is being tightly controlled outside of physics, e.g. by an animation).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSeatShuffleDueToInjuredDriver">
            <summary>
            If <see langword="true"/>, motion in vehicle task won't shuffle to the driver seat just because the driver
            is injured.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPostMovement">
            <summary>
            Tells `<c>CGameWorld::ProcessAfterAllMovement()</c>` to call `<c>ProcessPostMovement</c>` for tasks on
            the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPostCamera">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to call `<c>ProcessPostCamera</c>` for tasks.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPostPreRender">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to call `<c>ProcessPostPreRender</c>` for tasks.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontRaiseFistsWhenLockedOn">
            <summary>
            The player <see cref="T:GTA.Ped"/> will use the new front melee logic.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreferMeleeBodyIKHitReaction">
            <summary>
            This will prefer all melee hit reactions to use body IK hit reactions if ragdoll is not selected.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_PreferMeleeBodyIkHitReaction</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPhysicsTasksMotion">
            <summary>
            Indicates the <see cref="T:GTA.Ped"/> needs to call process physics for motion tasks this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPhysicsTasksMovement">
            <summary>
            Indicates the <see cref="T:GTA.Ped"/> needs to call process physics for movement tasks this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableFriendlyGunReactAudio">
            <summary>
            If set, disables friendly responses to gunshots/being aimed at.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceForwardTransitionInReactAndFlee">
            <summary>
            If set, force `<c>CTaskReactAndFlee</c>` to use a forward facing flee transition.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsEnteringVehicle">
            <summary>
            `<c>TASK_ENTER_VEHICLE</c>`
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoNotSkipNavMeshTrackerUpdate">
            <summary>
            If set the <see cref="T:GTA.Ped"/> will not allow the NavMeshTracker update (where the NavMeshTracker is
            a `<c>CNavMeshTrackedObject</c>`) to be skipped this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.RagdollOnVehicle">
            <summary>
            Set to <see langword="true"/> when the ragdoll is lying on top of a <see cref="T:GTA.Vehicle"/> (note: hands,
            feet, forearms and shins are not included in the test).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableNMForRiverRapids">
            <summary>
            If set, disable NM reactions to fast moving water.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsInWrithe">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> is on the ground writhing and might start shooting from ground.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventGoingIntoStillInVehicleState">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will not go into the still in vehicle pose.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseFastEnterExitVehicleRates">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will get in and out of <see cref="T:GTA.Vehicle"/>s faster.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableGroundAttachment">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> won't attach to a ground physical when his physics disables (useful for
            cutscenes, etc).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseProbeSlopeStairsDetection">
            <summary>
            Uses more expensive slope/stairs detection.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnlyAllowLeftArmDoorIK">
            <summary>
            When set along side open door ik, will only use the left hand.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_OnlyAllowLeftArmDoorIk</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnlyAllowRightArmDoorIK">
            <summary>
            When set along side open door ik, will only use the right hand.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_OnlyAllowRightArmDoorIk</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceProcessPedStandingUpdateEachSimStep">
            <summary>
            When set, `<c>ProcessPedStanding</c>` will get called for each physics step.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableFlashlight">
            <summary>
            When set, the flashlight on a AI weapon will be turned off.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableFlashLight</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoingCombatRoll">
            <summary>
            When set, the <see cref="T:GTA.Ped"/> is doing a combat roll.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CanAbortExitForInAirEvent">
            <summary>
            When set, the <see cref="T:GTA.Ped"/> can abort the exit vehicle anim to go into fall.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceEnableFlashlightForAI">
            <summary>
            When set, the AI <see cref="T:GTA.Ped"/> will enable their flashlight.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceEnableFlashLightForAI</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WaitingForCompletedPathRequest">
            <summary>
            This <see cref="T:GTA.Ped"/> is waiting for a path request which is now complete, so their tasks must be updated
            this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EnableSteepSlopePrevention">
            <summary>
            Pushes the <see cref="T:GTA.Ped"/> through the same steep slope tolerances in `<c>CTaskMotionBase</c>` that
            the player encounters.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPostMovementTimeSliced">
            <summary>
            Parallel flag to `<c>ProcessPostMovement</c>`, except this is reset in `<c>PreTask()</c>`, meaning it stays
            consistent across timeslicing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EnablePressAndReleaseDives">
            <summary>
            Player has to press and hold dive button to dive in water.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnlyExitVehicleOnButtonRelease">
            <summary>
            Only allows player to exit vehicle when button is released rather than pressed or held.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OverrideHairScale">
            <summary>
            Scales the <see cref="T:GTA.Ped"/>'s hair down to the specified value.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ConsiderAsPlayerCoverThreatWithoutLos">
            <summary>
            Considered as a threat as part of player cover search even if they can't see the player.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ConsiderAsPlayerCoverThreatWithoutLOS</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockCustomAIEntryAnims">
            <summary>
            Disables the <see cref="T:GTA.Ped"/> from using custom AI cover entry animations.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.StreamActionModeAnimsIfDisabled">
            <summary>
            Stream action mode anims even if action mode is disabled.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceUpdateRagdollMatrix">
            <summary>
            <see cref="T:GTA.Ped"/> requires ragdoll matrix update next frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventGoingIntoShuntInVehicleState">
            <summary>
            If set, the <see cref="T:GTA.Ped"/> will not go into the shunt in vehicle pose.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoingDriveByOutro">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DoingDrivebyOutro</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableUnarmedDriveBys">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableUnarmedDrivebys</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontActivateRagdollFromPlayerPedImpactReset">
            <summary>
            Block ragdoll activations from animated player bumps.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontActivateRagdollFromAiRagdollImpactReset">
            <summary>
            Block ragdoll activations from collisions with an ai ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontActivateRagdollFromPlayerRagdollImpactReset">
            <summary>
            Block ragdoll activations from collisions with a player ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableVisemeBodyAdditive">
            <summary>
            If set, prevents visemes from playing any additive body animations.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CapsuleBeingPushedByPlayerCapsule">
            <summary>
            Set when the player capsule is pushing up against this <see cref="T:GTA.Ped"/>s capsule.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UsingMoverExtraction">
            <summary>
            Set when the players capsule is getting repositioned each frame relative to an anim and origin.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EnableVoiceDrivenMouthMovement">
            <summary>
            If set, turn on the voice driven mouth movement.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseTighterEnterVehicleSettings">
            <summary>
            <see cref="T:GTA.Ped"/> should use tighter (shorter) settings for entering <see cref="T:GTA.Vehicle"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InRaceMode">
            <summary>
            Set when the player is in the race mode.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableAmbientMeleeMoves">
            <summary>
            Disable ambient (initial) melee moves.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowSpecialAbilityInVehicle">
            <summary>
            Allows the player to trigger the special ability while in a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableInVehicleActions">
            <summary>
            Prevents <see cref="T:GTA.Ped"/> from doing in vehicle actions such as starting engine, hotwiring,
            closing door etc.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceInstantSteeringWheelIKBlendIn">
            <summary>
            Forces <see cref="T:GTA.Ped"/> to blend in steering wheel ik instantly rather than over time.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceInstantSteeringWheelIkBlendIn</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreThreatEngagePlayerCoverBonus">
            <summary>
            Ignores the bonus score for selecting cover that the player can engage the enemy at.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.Block180Turns">
            <summary>
            Blocks triggering of 180 turns in human locomotion this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontCloseVehicleDoor">
            <summary>
            Prevents the <see cref="T:GTA.Ped"/> from closing the vehicle door of the car they're in.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SkipExplosionOcclusion">
            <summary>
            Map collision will not block this <see cref="T:GTA.Ped"/> from being hit by explosions.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPhysicsTasksTimeSliced">
            <summary>
            Parallel flag to ProcessPhysicsTasks, except this is reset in PreTask(), meaning it stays consistent across
            timeslicing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.MeleeStrikeAgainstNonPed">
            <summary>
            Set when the <see cref="T:GTA.Ped"/> has performed a melee strike and hit any non-<see cref="T:GTA.Ped"/> material.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreNavigationForDoorArmIK">
            <summary>
            We will not attempt to walk around doors when using arm IK.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableAimingWhileParachuting">
            <summary>
            Disable aiming while parachuting.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePedCollisionWithPedEvent">
            <summary>
            Disable hit reaction due to colliding with a <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreVelocityWhenClosingVehicleDoor">
            <summary>
            Will ignore the vehicle speed threshold and close the door anyway.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontWalkRoundObjects">
            <summary>
            Don't walk round objects that the <see cref="T:GTA.Ped"/> collide with whilst moving.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CancelLeftHandGripIK">
            <summary>
            Call `<c>ProcessLeftHandGripIk()</c>` to cancel left hand grip IK, at the right time of the frame.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_CancelLeftHandGripIk</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ResetMovementStaticCounter">
            <summary>
            Will keep reset the static counter when this is set.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableInVehiclePedVariationBlocking">
            <summary>
            Will allow <see cref="T:GTA.Ped"/> variations to be rendered in <see cref="T:GTA.Vehicle"/>s, even if marked otherwise.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ReduceEffectOfVehicleRamControlLoss">
            <summary>
            When on a mission this reset flag will slightly reduce the amount of time the player loses control of their
            <see cref="T:GTA.Vehicle"/> when hit by an AI <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerMeleeFriendlyAttacks">
            <summary>
            Another flag to disable friendly attack from the player. Set on the opponent you would like it to be
            disabled on.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsMeleeTargetUnreachable">
            <summary>
            Set when the melee target has been deemed unreachable (AI only).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OverrideHairScaleLarger">
            <summary>
            Scales the <see cref="T:GTA.Ped"/>'s hair up to the specified value.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableDustOffAnims">
            <summary>
            Disables ambient dust off animations.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableMeleeHitReactions">
            <summary>
            This <see cref="T:GTA.Ped"/> will refrain from ever performing a melee hit reaction.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.VisemeAnimsAudioBlocked">
            <summary>
            Blocks viseme anims audio from playing.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowHeadPropInVehicle">
            <summary>
            This overrides <see cref="F:GTA.HelmetPropFlags.NotInCar"/> set on any head prop and stops it from being removed
            when getting into the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SetLastBoundMatricesDone">
            <summary>
            Ensure that the last bound matrices are only updated once per frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreserveAnimatedAngularVelocity">
            <summary>
            Don't allow the locomotion task to adjust angular velocity coming from animation.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OpenDoorArmIK">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> should enable open door arm IK.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseTighterTurnSettingsForScript">
            <summary>
            Script set flag, to force use of tighter turn settings in locomotion task.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePreCameraProcessExternallyDrivenDofs">
            <summary>
            Set if the <see cref="T:GTA.Ped"/> should process externally driven dofs before the pre-camera ai update.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForcePreCameraProcessExternallyDrivenDOFs</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.LadderBlockingMovement">
            <summary>
            Ped is waiting for ladder and blocking movement to prevent falling off.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableVoiceDrivenMouthMovement">
            <summary>
            If set, turn off the voice driven mouth movement (overrides <see cref="F:GTA.PedResetFlagToggles.EnableVoiceDrivenMouthMovement"/>).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SteerIntoSkids">
            <summary>
            If set, steer into skids while driving.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowOpenDoorIkBeforeFullMovement">
            <summary>
            When set, code will ignore the logic that requires the <see cref="T:GTA.Ped"/> to be in
            `<c>CTaskHumanLocomotion::State_Moving</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowHomingMissileLockOnInVehicle">
            <summary>
            When set, code will bypass rel settings and allow a homing lock on to this <see cref="T:GTA.Ped"/> when they are
            in a <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableHighHeels">
            <summary>
            Force the high heels DOF to be 0.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BreakTargetLock">
            <summary>
            Force lock on to break for this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DontUseSprintEnergy">
            <summary>
            Player does not get tired when sprinting.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableMaterialCollisionDamage">
            <summary>
            Don't be damaged by touching dangerous material (e.g. electric generator).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableMPFriendlyLockOn">
            <summary>
            Don't target friendly players in MP.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableMPFriendlyLockon</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableMPFriendlyLethalMeleeActions">
            <summary>
            Don't melee kill friendly players in MP.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IfLeaderStopsSeekCover">
            <summary>
            If our leader stops, try and seek cover if the <see cref="T:GTA.Ped"/> can.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ProcessPostPreRenderAfterAttachments">
            <summary>
            Indicates that the <see cref="T:GTA.Ped"/> needs to call `<c>ProcessPostPreRenderAfterAttachments</c>` on their
            `<c>CPedIntelligence</c>` for tasks.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseInteriorCapsuleSettings">
            <summary>
            Use Interior capsule settings.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsClosingVehicleDoor">
            <summary>
            <see cref="T:GTA.Ped"/> is closing a vehicle door.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableIdleExtraHeadingChange">
            <summary>
            Disable lerping the <see cref="T:GTA.Ped"/> towards the desired heading in the locomotion idle.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnlySelectVehicleWeapons">
            <summary>
            Only allows vehicle weapons to be selected in `<c>CPedWeaponSelector::SelectWeapon</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsWarpingIntoVehicleMP">
            <summary>
            Set in `<c>CTaskEnterVehicle::SetPedInSeat_OnEnter</c>` if <see cref="T:GTA.Ped"/> is warping into
            a <see cref="T:GTA.Vehicle"/> in multiplayer.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.RemoveHelmet">
            <summary>
            Forces a <see cref="T:GTA.Ped"/> to remove its helmet.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsRemovingHelmet">
            <summary>
            Returns <see langword="true"/> if <see cref="T:GTA.Ped"/> is removing its helmet.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NeverRagdoll">
            <summary>
            Disable all attempts by this <see cref="T:GTA.Ped"/> to ragdoll.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableWallHitAnimation">
            <summary>
            Disable stuck wall hit animation for the <see cref="T:GTA.Ped"/> this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PlayAgitatedAnimsInVehicle">
            <summary>
            Play agitated anims in <see cref="T:GTA.Vehicle"/> - overrides normal sit idle.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsSeatShuffling">
            <summary>
            Returns <see langword="true"/> if <see cref="T:GTA.Ped"/> is shuffling seat.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsThrowingProjectileWhileAiming">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> are running `<c>TASK_AIM_AND_THROW_PROJECTILE</c>` as
            a subtask of `<c>TASK_AIM_GUN_ON_FOOT</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableProjectileThrowsWhileAimingGun">
            <summary>
            Set by script command `<c>DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN</c>`.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowControlRadioInAnySeatInMP">
            <summary>
            Allows <see cref="T:GTA.Ped"/> in any seat to control radio in multiplayer.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSpyCarTransformation">
            <summary>
            Blocks <see cref="T:GTA.Ped"/> from manually transforming spycar to/from car/sub modes.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableSpycarTransformation</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockQuadLocomotionIdleTurns">
            <summary>
            Prevent CTaskQuadLocomotion from blending in idle turns, regardless of desired/current heading
            differential.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockHeadBobbingToRadio">
            <summary>
            Blocks <see cref="T:GTA.Ped"/> from headbobbing to radio music in <see cref="T:GTA.Vehicle"/>s.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_BlockHeadbobbingToRadio</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PlayFpsIdleFidgets">
            <summary>
            Allows us to load and play idle fidgets in `<c>TaskMotionAiming</c>`.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_PlayFPSIdleFidgets</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceExtraLongBlendInForPedSkipIdleCoverTransition">
            <summary>
            When putting a <see cref="T:GTA.Ped"/> directly into cover, the <see cref="T:GTA.Ped"/> will blend in the new cover
            anims slowly to prevent a pose pop.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlendingOutFpsIdleFidgets">
            <summary>
            <see langword="true"/> if FPS idle fidgets are blending out.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_BlendingOutFPSIdleFidgets</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FpsSwimUseSwimMotionTask">
            <summary>
            Set to <see langword="true"/> when the <see cref="T:GTA.Ped"/> is pressing forward on the left stick in FPS mode so they switch from
            Aiming to Swimmimg/Diving motion tasks.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_FPSSwimUseSwimMotionTask</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FpsSwimUseAimingMotionTask">
            <summary>
            Set to <see langword="true"/> when the <see cref="T:GTA.Ped"/> is strafing in water in FPS mode so the <see cref="T:GTA.Ped"/> use the motion aiming task.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_FPSSwimUseAimingMotionTask</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FiringWeaponWhenReady">
            <summary>
            Set when <see cref="T:GTA.Ped"/> has decided to fire weapon when ready, used in FPS mode.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsBlindFiring">
            <summary>
            <see langword="true"/> if the blind fire task is running.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsPeekingFromCover">
            <summary>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> is peeking in cover.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.TaskSkipProcessPreComputeImpacts">
            <summary>
            <see langword="true"/> to bail out of ProcessPreComputeImpacts.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableAssistedAimLockOn">
            <summary>
            Don't ever try to lock on to this <see cref="T:GTA.Ped"/> with cinematic aim.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableAssistedAimLockon</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FpsAllowAimIKForThrownProjectile">
            <summary>
            To control enabling of FPS aim IK while using a projectile until it is ready.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_FPSAllowAimIKForThrownProjectile</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePreCameraAIAnimUpdateIfFirstPerson">
            <summary>
            Force a pre camera ai and animation update if the <see cref="T:GTA.Ped"/> is the first person camera target
            during the pre camera update.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForcePreCameraAiAnimUpdateIfFirstPerson</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NoCollisionDamageFromOtherPeds">
            <summary>
            Any <see cref="T:GTA.Ped"/> this is set on won't register damage from collisions against other
            <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockCameraSwitching">
            <summary>
            Block camera view mode switching.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.NeverDieFromCapsuleRagdollSettings">
            <summary>
            Negate the capsule's preference for ragdoll triggering death on this <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InContactWithDeepSurface">
            <summary>
            <see cref="T:GTA.Ped"/> is in contact with `<c>GTA_DEEP_SURFACE_TYPE</c>` bounds
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IncludePedReferenceVelocityWhenFiringProjectiles">
            <summary>
            Add on the <see cref="T:GTA.Ped"/>'s velocity to the projectile's initial velocity.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForcePreCameraAnimUpdate">
            <summary>
            Force a pre camera animation update if the <see cref="T:GTA.Ped"/> is the first person camera target during
            the pre camera update.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableHelmetCullFps">
            <summary>
            Disables <see cref="F:GTA.HelmetPropFlags.HideInFirstPerson"/> from culling the prop in
            `<c>CPedPropsMgr::RenderPropsInternal</c>`.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableHelmetCullFPS</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableFpsArmIK">
            <summary>
            Disables FPS arm IK in `<c>CTaskPlayerOnFoot::IsStateValidForFPSIK</c>`.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableFPSArmIK</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableRightArmIKInCoverOutroFps">
            <summary>
            Turn off right arm IK during cover outros in FPS mode when set.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableRightArmIKInCoverOutroFPS</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoFpsSprintBreakOut">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DoFPSSprintBreakOut</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DoFpsJumpBreakOut">
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DoFPSJumpBreakOut</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WeaponBlockedInFpsMode">
            <summary>
            <see langword="true"/> if running `<c>CTaskWeaponBlocked</c>` in FPS mode.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_WeaponBlockedInFPSMode</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ScriptClearingPedTasks">
            <summary>
            Set by <see cref="M:GTA.TaskInvoker.ClearAllImmediately"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WasFpsJumpingWithProjectile">
            <summary>
            <see cref="T:GTA.Ped"/> was jumping on foot with projectile in hand.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_WasFPSJumpingWithProjectile</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WaypointPlaybackSlowMoreForCorners">
            <summary>
            Slow for corners more aggressively for waypoint playback.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FpsPlacingProjectile">
            <summary>
            <see langword="true"/> while placing a projectile in FPS mode.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_FPSPlacingProjectile</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseBulletPenetrationForGlass">
            <summary>
            <see cref="T:GTA.Ped"/> will use bullet penetration code when glass material is hit.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.FpsPlantingBombOnFloor">
            <summary>
            Doing a floor plant with a bomb in FPS mode.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_FPSPlantingBombOnFloor</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceSkipFpsAimIntro">
            <summary>
            Don't do FPS Aim intro.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceSkipFPSAimIntro</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CanBePinnedByFriendlyBullets">
            <summary>
            If set on a <see cref="T:GTA.Ped"/> then they are allowed to be pinned by bullets from friendly
            <see cref="T:GTA.Ped"/>s.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableLeftArmIKInCoverOutroFps">
            <summary>
            Turn off left arm IK during cover outros in FPS mode when set.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_DisableLeftArmIKInCoverOutroFPS</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableSpikeStripRoadBlocks">
            <summary>
            Blocks road blocks with spike strips from spawning if set on the local player <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SkipFpsUnholsterTransition">
            <summary>
            Skip aim unholster transition.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_SkipFPSUnHolsterTransition</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PutDownHelmetFX">
            <summary>
            Trigger the put down helmet fx.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IsLowerPriorityMeleeTarget">
            <summary>
            Peds marked with this flag will only be able to be hit by the player if the player explicitly presses
            the melee button.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceScanForEventsThisFrame">
            <summary>
            Disable timeslicing of event scanning.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.StartProjectileTaskWithPrimingDisabled">
            <summary>
            Set this flag to disable priming when the projectile task starts up until the attack trigger is released
            and pressed again.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.CheckFpsSwitchInCameraUpdate">
            <summary>
            Set if some game code want to perform a second AI/anim update when switching between first person/third person.
            </summary>
            <remarks>
            <para>
            `<c>camManager::Update</c>` tests whether the flag is set, and `<c>CTaskCombatRoll::CleanUp()</c>` sets this flag.
            </para>
            <para>
            The canonical name is `<c>CPED_RESET_FLAG_CheckFPSSwitchInCameraUpdate</c>`.
            </para>
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceAutoEquipHelmetsInAircraft">
            <summary>
            Force <see cref="T:GTA.Ped"/> to auto-equip a helmet on entering aircraft. Overrides
            <see cref="F:GTA.PedConfigFlagToggles.DisableAutoEquipHelmetsInAircraft"/> (set in the interaction menu in
            GTA Online).
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceAutoEquipHelmetsInAicraft</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockRemotePlayerRecording">
            <summary>
            Flag used by replay editor to disable recording specified remote players.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InflictedDamageThisFrame">
            <summary>
            Indicates something inflicted damage to the <see cref="T:GTA.Ped"/> in a damage event this frame.
            </summary>
            <remarks>
            `<c>CPedDamageCalculator::ApplyDamageAndComputeResponse</c>` sets this flag only when it processed
            a damage response with positive lost in which the victim is the <see cref="T:GTA.Ped"/> this frame.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseFirstPersonVehicleAnimsIfFpsCamNotDominant">
            <summary>
            Allow FPS vehicle anims even if FPS camera isn't dominant.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_UseFirstPersonVehicleAnimsIfFPSCamNotDominant</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceIntoStandPoseOnJetSki">
            <summary>
            Puts the <see cref="T:GTA.Ped"/> in a standing pose on the jetski.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_ForceIntoStandPoseOnJetski</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InAirDefenceSphere">
            <summary>
            <see cref="T:GTA.Ped"/> is located inside an air defence sphere.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressTakedownMeleeActions">
            <summary>
            This will suppress all takedown melee actions (`<c>RA_IS_TAKEDOWN</c>` or `<c>RA_IS_STEALTH_KILL</c>`,
            defined in `<c>`action_table.meta</c>`).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.InvertLookAroundControls">
            <summary>
            Inverts lookaround controls (right stick / mouse) for this player, for this frame.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreCombatManager">
            <summary>
            Allows attacking <see cref="T:GTA.Ped"/> to engage another entity without waiting for its turn (if there's
            multiple attackers).
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseBlendedCamerasOnUpdateFpsCameraRelativeMatrix">
            <summary>
            Check if there is an active camera blending and use the blended camera frame when compute the FPS camera
            relative matrix.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceMeleeCounter">
            <summary>
            Forces the <see cref="T:GTA.Ped"/> to perform a dodge and a counter move if it's attacked.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.WasHitByVehicleMelee">
            <summary>
            Indicates that <see cref="T:GTA.Ped"/> was hit by vehicle melee attack.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.SuppressNavmeshForEnterVehicleTask">
            <summary>
            Don't allow <see cref="T:GTA.Ped"/> to use navmesh when navigating in `<c>CTaskEnterVehicle</c>`.
            Will use goto-point or bail if they cannot use that.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisablePlayerCombatRoll">
            <summary>
            Disables player combat rolling.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.IgnoreDetachSafePositionCheck">
            <summary>
            Will ignore safe position check on detaching the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.DisableEasyLadderConditions">
            <summary>
            Prevents the more forgiving MP ladder detection settings from being used, and forces SP settings.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PlayerIgnoresScenarioSpawnRestrictions">
            <summary>
            Makes local player ignore certain scenario spawn restrictions on scenarios that respect this flag.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UsingDrone">
            <summary>
            Indicates player is using Drone from Battle DLC.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.ForceWantedLevelWhenKilled">
            <summary>
            Will force the player that killed this <see cref="T:GTA.Ped"/> to get wanted level,
            even if he wouldn't otherwise.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseScriptedWeaponFirePosition">
            <summary>
            Will use scripted firing position on the clones of this <see cref="T:GTA.Ped"/> on other machines.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.EnableCollisionOnNetworkCloneWhenFixed">
            <summary>
            Enable collision on player <see cref="T:GTA.Ped"/> network clones when physics is fixed.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.UseExtendedRagdollCollisionCalculator">
            <summary>
            Use extended logic for determining damage instigator for ragdoll collisions.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventLockOnToFriendlyPlayers">
            <summary>
            Prevent the player locking on to friendly players.
            </summary>
            <remarks>
            The canonical name is `<c>CPED_RESET_FLAG_PreventLockonToFriendlyPlayers</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedResetFlagToggles.OnlyAbortScriptedAnimOnMovementByInput">
            <summary>
            Modifies <see cref="F:GTA.AnimationFlags.AbortOnPedMovement"/> to only trigger an abort when movement would be
            caused by player input.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.PreventAllStealthKills">
            <summary>
            Prevents stealth takedowns from being preformed on a <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.BlockFallTaskFromExplosionDamage">
            <summary>
            Prevent <see cref="T:GTA.Ped"/>s from entering a fall task if affected by explosion damage.
            </summary>
        </member>
        <member name="F:GTA.PedResetFlagToggles.AllowPedRearEntry">
            <summary>
            Mimics the behaviour like with boss <see cref="T:GTA.Ped"/>s by holding the button for entering the rear seats.
            </summary>
        </member>
        <member name="F:GTA.PedTransportMode.Any">
            <summary>
            Any mode of transport bike, car plane, on foot etc.
            </summary>
        </member>
        <member name="F:GTA.PedTransportMode.OnFoot">
            <summary>
            The ped is on foot.
            </summary>
        </member>
        <member name="F:GTA.PedTransportMode.InVehicle">
            <summary>
            The ped is in a vehicle not on foot.
            </summary>
        </member>
        <member name="T:GTA.PedType">
            <summary>
            An enumeration of all the possible ped types.
            </summary>
        </member>
        <member name="F:GTA.PedType.Invalid">
            <remarks>
            In the game's codebase, this value is only used by `<c>CSelectionWheel::TriggerFadeInEffect</c>`
            (the class manages the player selection wheel), `<c>CNetObjPed::GetPedScriptGameStateData</c>`,
            `<c>ReplayBufferMarkerMgr::AddMarkerInternal</c>`, and 3 functions of `<c>CEventPlayerDeath</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedType.Player0">
            <summary>
            The <see cref="T:GTA.PedType"/> for Michael.
            </summary>
        </member>
        <member name="F:GTA.PedType.Player1">
            <summary>
            The <see cref="T:GTA.PedType"/> for Franklin.
            </summary>
        </member>
        <member name="F:GTA.PedType.NetworkPlayer">
            <summary>
            The <see cref="T:GTA.PedType"/> for players controlled over the network (not by the local machine)
            </summary>
            <remarks>
            Although this is only relevant when the game is online, player <see cref="T:GTA.Ped"/>s will have this type if
            the static network session instance is not null and is active, and the ped type of the player ped is not
            the animal ped type in `<c>CPlayerInfo::SetPlayerPed</c>`.
            </remarks>
        </member>
        <member name="F:GTA.PedType.Player2">
            <summary>
            The <see cref="T:GTA.PedType"/> for Trevor.
            </summary>
        </member>
        <member name="F:GTA.PedType.CivMale">
            <summary>
            The civilian male <see cref="T:GTA.PedType"/>.
            </summary>
        </member>
        <member name="F:GTA.PedType.CivFemale">
            <summary>
            The civilian female <see cref="T:GTA.PedType"/>.
            </summary>
        </member>
        <member name="T:GTA.RagdollBlockingFlags">
            <summary>
            An enumeration of possible flags used to disable ragdoll behaviors from various sources.
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.PlayerImpact">
            <summary>
            Blocks ragdoll activation from any impact with a <see cref="T:GTA.Ped"/> (player characters running into
            the <see cref="T:GTA.Ped"/>, or active ragdolls colliding with them).
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.AllowBlockDeadPed">
            <summary>
            Allows blocking of ragdoll activation for dead <see cref="T:GTA.Ped"/>s.
            By default, dead <see cref="T:GTA.Ped"/>s' ragdolls are allowed to activate regardless of how these flags
            have been set.
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.PlayerBump">
            <summary>
            Blocks ragdoll activation from an animated player running into the character (but not from collisions
            with other ragdolls).
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.PlayerRagdollBump">
            <summary>
            Blocks ragdoll activation from a ragdolling player colliding with the character (but not from animated
            player bumps or collisions with active non-player ragdolls).
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.PedRagdollBump">
            <summary>
            Blocks ragdoll activation from a ragdolling non-player colliding with the character (but not from any
            collisions with players, ragdolling or otherwise).
            </summary>
        </member>
        <member name="F:GTA.RagdollBlockingFlags.VehicleGrab">
            <summary>
            Blocks ragdoll activation from grabbing a <see cref="T:GTA.Vehicle"/> door whilst it pulls away.
            </summary>
        </member>
        <member name="T:GTA.RagdollComponent">
            <summary>
            The ragdoll component enum, which is used for apply force natives and some config files such as <c>physicstasks.ymt</c>.
            </summary>
        </member>
        <member name="T:GTA.RagdollFallType">
            <summary>
            An enumeration of most of the possible values for <see cref="M:GTA.Ped.SetToRagdollWithFall(System.Int32,System.Int32,GTA.RagdollFallType,GTA.Math.Vector3,System.Single)"/>.
            </summary>
            <remarks>
            Most of the values listed are named after the values of the enum <c>eRagdollType</c>,
            which is used in <c>RagdollType</c> in <c>pedbounds.xml</c>.
            </remarks>
        </member>
        <member name="F:GTA.RagdollFallType.FallToDeath">
            <summary>
            Behaves similar to <see cref="F:GTA.RagdollFallType.Male"/>, but the <see cref="T:GTA.Ped"/> will be killed
            after a ragdoll fall task ends (by a <c>CEventDeath</c>).
            </summary>
        </member>
        <member name="F:GTA.RagdollType.Relax">
            <summary>
            <see cref="T:GTA.Ped"/>s will fall with their muscle relax, just like when <see cref="T:GTA.Ped"/>s' healths are set to zero and get killed by setting the healths.
            </summary>
        </member>
        <member name="F:GTA.RagdollType.ScriptControl">
            <summary>
            You can control <see cref="T:GTA.Ped"/>s' ragdoll behaviors by additional configurations. Consider using the <see cref="T:GTA.NaturalMotion.Euphoria"/> class for advanced and easier ragdoll configurations.
            </summary>
        </member>
        <member name="F:GTA.RagdollType.Balance">
            <summary>
            <see cref="T:GTA.Ped"/>s will try to balance.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Companion">
            <summary>
            The correct relationship name for this enum would be <c>Respect</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Respect">
            <summary>
            The correct relationship name for this enum would be <c>Like</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Like">
            <summary>
            The correct relationship name for this enum would be <c>Ignore</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Neutral">
            <summary>
            The correct relationship name for this enum would be <c>Dislike</c>.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Dislike">
            <summary>
            The correct relationship name for this enum would be <c>Wanted</c>.
            Will be used for cops towards the player relationship group when the player is wanted.
            </summary>
        </member>
        <member name="F:GTA.Relationship.Pedestrians">
            <summary>
            The correct relationship name for this enum would be <c>None</c>.
            </summary>
        </member>
        <member name="P:GTA.RelationshipGroup.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.RelationshipGroup"/>.
            </summary>
        </member>
        <member name="P:GTA.RelationshipGroup.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.RelationshipGroup"/>.
            </summary>
        </member>
        <member name="T:GTA.RelationshipGroupHash">
            <summary>
            An enumeration of hashes ambient peds use and ones for 3 families of protagonists.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Player">
            <summary>
            The player (<c>"PLAYER"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.CivilianMale">
            <summary>
            The civilian male (<c>"CIVMALE"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.CivilianFemale">
            <summary>
            The civilian female (<c>"CIVFEMALE"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Cop">
            <summary>
            The cop (<c>"COP"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.SecurityGuard">
            <summary>
            The security guard (<c>"SECURITY_GUARD"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.PrivateSecurity">
            <summary>
            The private security (<c>"PRIVATE_SECURITY"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Fireman">
            <summary>
            The fireman/firefighter (<c>"FIREMAN"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangLost">
            <summary>
            The ambient gang relationship group hash of The Lost MC (<c>"AMBIENT_GANG_LOST"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangMexican">
            <summary>
            The ambient gang relationship group hash of Vagos (<c>"AMBIENT_GANG_MEXICAN"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangFamily">
            <summary>
            The ambient gang relationship group hash of The Families (<c>"AMBIENT_GANG_FAMILY"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangBallas">
            <summary>
            The ambient gang relationship group hash of Ballas (<c>"AMBIENT_GANG_BALLAS"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangMarabunte">
            <summary>
            The ambient gang relationship group hash of Armenian Mob (<c>"AMBIENT_GANG_MARABUNTE"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangCult">
            <summary>
            The ambient gang relationship group hash of Altruist Cult (<c>"AMBIENT_GANG_CULT"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangSalva">
            <summary>
            The ambient gang relationship group hash of Marabunta Grande (<c>"AMBIENT_GANG_SALVA"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangWeiCheng">
            <summary>
            The ambient gang relationship group hash of Los Santos Triads (<c>"AMBIENT_GANG_WEICHENG"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AmbientGangHillbilly">
            <summary>
            The ambient gang relationship group hash of Rednecks (<c>"AMBIENT_GANG_HILLBILLY"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.HatesPlayer">
            <summary>
            The <c>"HATES_PLAYER"</c> relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Hen">
            <summary>
            The <c>"HEN"</c> relationship group hash.
            The whale <see cref="T:GTA.Ped"/>s, the dolphin <see cref="T:GTA.Ped"/>, and the stingray <see cref="T:GTA.Ped"/> also belong to this relationship group.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.WildAnimal">
            <summary>
            Gets the wild animal relationship group hash (<c>"WILD_ANIMAL"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Shark">
            <summary>
            Gets the shark (<c>"SHARK"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Cougar">
            <summary>
            Gets the cougar/mountain lion (<c>"COUGAR"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.NoRelationship">
            <summary>
            The relationship group hash for <c>"NO_RELATIONSHIP"</c>.
            <see cref="T:GTA.Ped"/>s created by a script belongs to this hash until another relationship group hash is assigned.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Army">
            <summary>
            The army (<c>"ARMY"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.GuardDog">
            <summary>
            The guard dog (<c>"GUARD_DOG"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.AggressiveInvestigate">
            <summary>
            The <c>"AGGRESSIVE_INVESTIGATE"</c> relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Medic">
            <summary>
            The paramedics (<c>"MEDIC"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.Cat">
            <summary>
            The cat (<c>"CAT"</c>) relationship group hash.
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.FamilyMichael">
            <summary>
            The relationship group hash for Michael's family (<c>"RELGROUPHASH_FAMILY_M"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.FamilyFranklin">
            <summary>
            The relationship group hash for Franklin's family (<c>"RELGROUPHASH_FAMILY_F"</c>).
            </summary>
        </member>
        <member name="F:GTA.RelationshipGroupHash.FamilyTrevor">
            <summary>
            The relationship group hash for Trevor's family (<c>"RELGROUPHASH_FAMILY_T"</c>).
            </summary>
        </member>
        <member name="T:GTA.ScriptTaskNameHash">
            <summary>
            An enumeration of all possible scripted task name hashes.
            Used for <see cref="M:GTA.Ped.GetScriptTaskStatus(GTA.ScriptTaskNameHash)"/>.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskNameHash.Any">
            <summary>
            This is the special hash that makes <see cref="M:GTA.Ped.GetScriptTaskStatus(GTA.ScriptTaskNameHash)"/> returns the current task status
            regardless of the current script task hash.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskNameHash.Invalid">
            <summary>
            This value is used when no scripted task is performed.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskStatus.WaitingToStart">
            <summary>
            The task is issued to the <see cref="T:GTA.Ped"/> as a primary task but they're waiting for events or other tasks preventing them from performing it to end.
            Eg. When the task is issued while the <see cref="T:GTA.Ped"/> is ragdolling or reacting a shocking event such as a agitating event,
            or when an animation task is issued while they are being dragged from their <see cref="T:GTA.Vehicle"/> (and the animation task is primary one).
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskStatus.Performing">
            <summary>
            Task is currently being performed by the <see cref="T:GTA.Ped"/> as a primary task.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskStatus.Dormant">
            <summary>
            The task is dormant because it's temporarily interrupted by some events or other tasks.
            Eg. When the <see cref="T:GTA.Ped"/> is stumbling since another <see cref="T:GTA.Entity"/> bumped them after the task had started at all.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskStatus.Vacant">
            <summary>
            The script task has nothing to do.
            <see cref="F:GTA.ScriptTaskNameHash.Invalid"/> basically goes to this status.
            </summary>
        </member>
        <member name="F:GTA.ScriptTaskStatus.Finished">
            <summary>
            The task has been done or not performed yet as a primary task.
            Strictly, <see cref="M:GTA.Ped.GetScriptTaskStatus(GTA.ScriptTaskNameHash)"/> returns this value
            if the specified hash does not match the current one and the specified hash is not <see cref="F:GTA.ScriptTaskNameHash.Any"/>.
            </summary>
        </member>
        <member name="F:GTA.Style.NumPedComponent">
            <summary>
            The max component count.
            At least GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS will return zero if the 2nd argument is 0xC or higher as uint32_t.
            </summary>
        </member>
        <member name="F:GTA.Style.NumPedProps">
            <summary>
            The practical max ped prop count.
            </summary>
        </member>
        <member name="M:GTA.Style.PreloadVariationData(GTA.PedComponentType,System.Int32,System.Int32)">
            <summary>
            Sets a component variation to preload into memory, without applying it on this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="componentType">The ped component type/id.</param>
            <param name="drawableId">The drawable id.</param>
            <param name="textureId">The texture id.</param>
        </member>
        <member name="M:GTA.Style.HasLoadedPreloadVariationData">
            <summary>
            Returns true if the preload data set with <see cref="M:GTA.Style.PreloadVariationData(GTA.PedComponentType,System.Int32,System.Int32)"/> is in memory.
            </summary>
        </member>
        <member name="M:GTA.Style.ReleasePreloadVariationData">
            <summary>
            Releases the assets set with <see cref="M:GTA.Style.PreloadVariationData(GTA.PedComponentType,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            Note that variation data set with <see cref="M:GTA.Style.PreloadVariationData(GTA.PedComponentType,System.Int32,System.Int32)"/> counts towards
            the script memory budget of the SHVDN runtime script.
            For this reason, it is important to use this method to release these assets as soon as you don't need them
            anymore.
            In fact, you can call this method as soon as you have set the same variation with
            <see cref="M:GTA.PedComponent.SetVariation(System.Int32,System.Int32)"/> since at that point the assets will be rendered on the ped
            and have references to keep them in memory.
            </remarks>
        </member>
        <member name="M:GTA.Style.PreloadPropData(GTA.PedPropAnchorPoint,System.Int32,System.Int32)">
            <summary>
            Sets a prop to preload into memory, without applying it on this <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="anchor">The ped component type/id.</param>
            <param name="propId">The prop id.</param>
            <param name="textureId">The texture id.</param>
        </member>
        <member name="M:GTA.Style.HasLoadedPreloadPropData">
            <summary>
            Returns true if the preload prop set with <see cref="M:GTA.Style.PreloadPropData(GTA.PedPropAnchorPoint,System.Int32,System.Int32)"/> is in memory.
            </summary>
        </member>
        <member name="M:GTA.Style.ReleasePreloadPropData">
            <summary>
            Releases the assets set with <see cref="M:GTA.Style.PreloadPropData(GTA.PedPropAnchorPoint,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            Note that variation data set with <see cref="M:GTA.Style.PreloadPropData(GTA.PedPropAnchorPoint,System.Int32,System.Int32)"/> counts towards
            the script memory budget of the SHVDN runtime script.
            For this reason, it is important to use this method to release these assets as soon as you don't need them
            anymore.
            In fact, you can call this method as soon as you have set the same variation with
            <see cref="M:GTA.PedProp.SetVariation(System.Int32,System.Int32)"/> since at that point the assets will be rendered on the ped
            and have references to keep them in memory.
            </remarks>
        </member>
        <member name="T:GTA.TaskCombatFlags">
            <summary>
            An enumeration of known flags for the <c>CTaskCombat</c>.
            </summary>
        </member>
        <member name="F:GTA.TaskCombatFlags.ArrestTarget">
            <summary>
            The <see cref="T:GTA.Ped"/> will try to arrest the target if they are a cop, or this flag does not have effect.
            </summary>
        </member>
        <member name="T:GTA.TaskThreatResponseFlags">
            <summary>
            An enumeration of known flags for the <c>CTaskThreatResponse</c>.
            </summary>
        </member>
        <member name="F:GTA.TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed">
            <summary>
            The <see cref="T:GTA.Ped"/> will not stop combating the target even if the target uses firearms but the
            <see cref="T:GTA.Ped"/> who's executing the task does not have firearms with ammunition.
            </summary>
        </member>
        <member name="T:GTA.TaskGoToPointAnyMeansFlags">
            <summary>
            An enumeration of known flags for the <c>CTaskCombat</c>.
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.IgnoreVehicleHealth">
            <summary>
            Ignores the health of the vehicle (default behaviour is to not use any vehicle with less than 600 health).
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.ConsiderAllNearbyVehicles">
            <summary>
            Considers all nearby <see cref="T:GTA.Vehicle"/> for suitability (default behavior is to consider only
            the <see cref="T:GTA.Vehicle"/> closest to the <see cref="T:GTA.Ped"/>).
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.ProperIsDriveableCheck">
            <summary>
            Performs the same tests as is done in <see cref="M:GTA.Vehicle.get_IsDriveable"/>.
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.RemainInVehicleAtDestination">
            <summary>
            Instructs the <see cref="T:GTA.Ped"/> to remain in the <see cref="T:GTA.Vehicle"/> at the end,
            so that multiple tasks can be chained together.
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.NeverAbandonVehicle">
            <summary>
            <see cref="T:GTA.Ped"/>s will never abandon the <see cref="T:GTA.Vehicle"/> it is in.
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.NeverAbandonVehicleIfMoving">
            <summary>
            <see cref="T:GTA.Ped"/>s will never abandon the <see cref="T:GTA.Vehicle"/> it is in if <see cref="T:GTA.Vehicle"/> is moving.
            </summary>
        </member>
        <member name="F:GTA.TaskGoToPointAnyMeansFlags.UseAITargetingForThreats">
            <summary>
            <see cref="T:GTA.Ped"/>s will use the targeting system for threats and register any threats they can attack
            (rather than just using the closest targetable <see cref="T:GTA.Ped"/>).
            </summary>
        </member>
        <member name="T:GTA.MoveNetworkFlags">
            <summary>
            Set of flags which may be passed in.
            </summary>
        </member>
        <member name="F:GTA.MoveNetworkFlags.Secondary">
            <remarks>
            With this flag set, the move network task methods in <see cref="T:GTA.TaskInvoker"/> cannot be used as a part of
            a <see cref="T:GTA.TaskSequence"/>.
            </remarks>
        </member>
        <member name="T:GTA.PedMoveNetworkTaskInterface">
            <summary>
            Represents a move network task interface/facade class.
            </summary>
        </member>
        <member name="P:GTA.PedMoveNetworkTaskInterface.Ped">
            <summary>
            Gets the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.PedMoveNetworkTaskInterface.IsTaskActive">
            <summary>
            Returns <see langword="true"/> if a move network is active.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:GTA.Ped"/> is processing a move network task
            (`<c>CTaskMoVEScripted</c>`) and a move network is active in the found task; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            The property searches for a `<c>CTaskMoVEScripted</c>` by searching primary tasks first, then secondary
            tasks. The property returns <see langword="false"/> when `<c>CTaskMoVEScripted</c>`s are found among
            both primary and secondary tasks and the found a move network is not active in
            the found `<c>CTaskMoVEScripted</c>` of primary tasks.
            </remarks>
        </member>
        <member name="P:GTA.PedMoveNetworkTaskInterface.IsReadyForTransition">
            <summary>
            Returns <see langword="true"/> if a move network is ready for a state transition
            </summary>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.RequestStateTransition(System.String)">
            <summary>
            Returns <see langword="true"/> if a move network is ready for a state transition.
            </summary>
        </member>
        <member name="P:GTA.PedMoveNetworkTaskInterface.CurrentScriptStateName">
            <summary>
            Returns the current state.
            </summary>
            <remarks>
            Returns "<c>Unknown</c>" when <see cref="P:GTA.PedMoveNetworkTaskInterface.IsTaskActive"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.SetNetworkClipSet(GTA.AtHashValue,GTA.AtHashValue)">
            <summary>
            <para>
            Sets a clip set for this move network to use.
            </para>
            <para>
            Only available in the game version v1.0.1493.0 and later.
            </para>
            </summary>
            <param name="clipSet">The hash of the name of the actual clip set to use.</param>
            <param name="varClipSet">
            The hash of the name of the variable clip set you are setting.
            </param>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.SetSignalFloat(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:System.Single"/> MoVE signal to the passed value.
            </summary>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.SetSignalFloatLerpRate(System.String,System.Single)">
            <summary>
            <para>
            Sets the lerp rate to the passed value.
            </para>
            <para>
            Only available in the game version v1.0.1493.0 and later.
            </para>
            </summary>
            <remarks>
            Lerp rate controls rate at which the corresponding MoVE float signal will lerp over frame updates on
            the clone from the current value to the target value.
            It is assumed that the corresponding MoVE float signal has already been created using
            <see cref="M:GTA.PedMoveNetworkTaskInterface.SetSignalFloat(System.String,System.Single)"/>.
            Currently the lerp rate defaults to a value of `<c>0.5f</c>`. The lerp value has to be above `<c>0.0f</c>`
            and below `<c>1.0f</c>`.
            If a lerp rate of `<c>1.0f</c>` is applied then no lerping is used and the exact float value will be
            synced and applied immediately on the clone.
            </remarks>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.SetSignalBool(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> MoVE signal to the passed value.
            </summary>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.GetSignalFloat(System.String)">
            <summary>
            <para>
            Gets the value of a <see cref="T:System.Single"/> type output parameter from the peds scripted MoVE network.
            </para>
            <para>
            Only available in the game version v1.0.1493.0 and later.
            </para>
            </summary>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.GetSignalBool(System.String)">
            <summary>
            Gets the value of a <see cref="T:System.Boolean"/> type output parameter from the peds scripted MoVE network.
            </summary>
        </member>
        <member name="M:GTA.PedMoveNetworkTaskInterface.GetEvent(System.String)">
            <summary>
            Returns <see langword="true"/> if an event with the given name has just fired on
            the <see cref="T:GTA.Ped"/>'s script owned MoVE network.
            </summary>
        </member>
        <member name="M:GTA.TaskInvoker.AimGunAtEntity(GTA.Entity,System.Int32,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to aim a gun at an <see cref="T:GTA.Entity"/>.
            The <see cref="T:GTA.Ped"/> must equip a weapon where its <c>CWeaponInfo</c> has the <c>"Gun"</c> flag (the RAGE parser will create ones from weapon meta files).
            For instance, the <see cref="T:GTA.Ped"/> a task for aiming when they are equipping a pistol or rocket launcher, but not when equipping a melee weapon or thrown weapon.
            </summary>
            <param name="target">The target <see cref="T:GTA.Entity"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="instantBlendToAim">If <see langword="true"/>, the task will skip the idle transition and instantly blend to the aim pose.</param>
        </member>
        <member name="M:GTA.TaskInvoker.AimGunAtPosition(GTA.Math.Vector3,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to aim a gun at the specified position.
            The <see cref="T:GTA.Ped"/> must equip a weapon where its <c>CWeaponInfo</c> has the <c>"Gun"</c> flag (the RAGE parser will create ones from weapon meta files).
            For instance, the <see cref="T:GTA.Ped"/> a task for aiming when they are equipping a pistol or rocket launcher, but not when equipping a melee weapon or thrown weapon.
            </summary>
            <param name="target">The target position.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="instantBlendToAim">If <see langword="true"/>, the task will skip the idle transition and instantly blend to the aim pose.</param>
            <param name="playAimIntro">If <see langword="true"/>, the task will play the aim intro.</param>
        </member>
        <member name="M:GTA.TaskInvoker.Jump">
            <inheritdoc cref="M:GTA.TaskInvoker.Jump(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.TaskInvoker.Jump(System.Boolean,System.Boolean)">
            <summary>
            Forces the <see cref="T:GTA.Ped"/> to jump.
            </summary>
            <param name="doSuperJump">
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will do super jump.
            Internally, the super jump and the beast jump flags will be used for a new <c>CTaskJumpVault</c>.
            Does nothing in (probably) v1.0.505.2 or earlier game versions.
            </param>
            <param name="useFullSuperJumpForce">
            If <see langword="true"/> and <paramref name="doSuperJump"/> is <see langword="true"/> as well, the super jump height will be doubled.
            Internally, the super jump and the beast jump flags will be used for a new <c>CTaskJumpVault</c> (even if <paramref name="doSuperJump"/> is <see langword="false"/>).
            Does nothing in (probably) v1.0.505.2 or earlier game versions.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.Climb">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to perform the climb task (<c>CTaskJumpVault</c>).
            </summary>
            <remarks>
            The <see cref="T:GTA.Ped"/> needs to be positioned and oriented so that a jump will locate an edge for the ped to grab.
            If an edge can’t be found, the ped will just do a normal jump and land.
            If an edge can be found then the ped will climb and then stand on top of the found edge.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.ClimbLadder">
            <inheritdoc cref="M:GTA.TaskInvoker.ClimbLadder(System.Boolean)"/>
        </member>
        <member name="M:GTA.TaskInvoker.ClimbLadder(System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to perform a climb ladder task (<c>CTaskClimbLadderFully</c>).
            </summary>
            <remarks>
            The task decides whether the <see cref="T:GTA.Ped"/> is supposed to climb or descend by examining which end of the ladder is nearest.
            The <see cref="T:GTA.Ped"/> needs to be positioned right next to the ladder they are supposed to use, and should also be facing it.
            There are two possibilities for mounting the ladder - at the base of the ladder facing towards the front of it, and at the top of the ladder facing the reverse of the ladder.
            If successful, the <see cref="T:GTA.Ped"/> will get on the ladder, climb, and then get off.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.Combat(GTA.Ped,GTA.TaskCombatFlags,GTA.TaskThreatResponseFlags)">
            <summary>
            Tells a ped to combat another ped.
            </summary>
        </member>
        <member name="M:GTA.TaskInvoker.CombatTimed(GTA.Ped,System.Int32,GTA.TaskCombatFlags)">
            <summary>
            Tells a ped to combat another ped for a timed period.
            </summary>
            <remarks>
            Implicitly specifies <see cref="F:GTA.TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed"/> for a new
            <c>CTaskThreadResponse</c> task.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.CombatHatedTargetsInArea(GTA.Math.Vector3,System.Single,GTA.TaskCombatFlags)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to combat hated targets in the area.
            </summary>
            <remarks>
            Hated targets means <see cref="T:GTA.Ped"/>s whose relationships/acquaintances are set to
            <see cref="F:GTA.Relationship.Neutral"/>, <see cref="F:GTA.Relationship.Dislike"/> or <see cref="F:GTA.Relationship.Hate"/>
            from the <see cref="T:GTA.Ped"/> who will execute the new task toward them.
            There must be at least one <see cref="T:GTA.Ped"/> with one of the relationship settings, or the created
            <c>CTaskCombatClosestTargetInArea</c> will stop executing immediately.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.CombatHatedTargetsAroundPed(System.Single,GTA.TaskCombatFlags)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to combat hated targets in the radius about the <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Hated targets means <see cref="T:GTA.Ped"/>s whose relationships/acquaintances are set to
            <see cref="F:GTA.Relationship.Neutral"/>, <see cref="F:GTA.Relationship.Dislike"/> or <see cref="F:GTA.Relationship.Hate"/>
            from the <see cref="T:GTA.Ped"/> who will execute the new task toward them.
            There must be at least one <see cref="T:GTA.Ped"/> with one of the relationship settings, or the created
            <c>CTaskCombatClosestTargetInArea</c> will stop executing immediately.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.CombatHatedTargetsAroundPedTimed(System.Single,System.Int32,GTA.TaskCombatFlags)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to combat hated targets in the radius about the <see cref="T:GTA.Ped"/> for a time period.
            </summary>
            <remarks>
            Hated targets means <see cref="T:GTA.Ped"/>s whose relationships/acquaintances are set to
            <see cref="F:GTA.Relationship.Neutral"/>, <see cref="F:GTA.Relationship.Dislike"/> or <see cref="F:GTA.Relationship.Hate"/>
            from the <see cref="T:GTA.Ped"/> who will execute the new task toward them.
            There must be at least one <see cref="T:GTA.Ped"/> with one of the relationship settings, or the created
            <c>CTaskCombatClosestTargetInArea</c> will stop executing immediately.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)">
            <summary>
            Puts the <see cref="T:GTA.Ped"/> into melee.
            </summary>
            <param name="target">The target.</param>
            <param name="blendIn">
            The blend time in second. <see cref="P:GTA.AnimationBlendDuration.Instant"/> will make the <see cref="T:GTA.Ped"/> into
            melee instantly from the previous motion such as walking.
            To precisely mimic how long general game code blends a <see cref="T:GTA.Ped"/> into melee, use
            <see cref="P:GTA.AnimationBlendDuration.Normal"/>.
            </param>
            <param name="strafePhaseSync">
            <para>
            Typically <c>0f</c> is used, but <c>10f</c> is used in all of the occurrences where <c>8f</c> is used for
            <paramref name="blendIn"/> in <c>fbi4_prep1.ysc</c>.
            </para>
            <para>
            Not exactly known how this parameter affects the motion strafing task (<c>CTaskMotionStrafing</c>), but
            at least this sets a field of <c>CTaskMotionPed</c> in <c>TASK_PUT_PED_DIRECTLY_INTO_MELEE</c>, which is
            soon read by a created <c>CTaskMotionStrafing</c> and will be used for a <c>rage::fwMoveNetworkPlayer</c>
            that can be accessed from a <c>CTaskMotionStrafing</c> instance.
            </para>
            </param>
            <remarks>
            Implicitly sets <see cref="F:GTA.TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed"/> for the created
            <c>CTaskThreatResponse</c> if called on an AI/NPC <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,System.Single)">
            <summary>
            Puts the <see cref="T:GTA.Ped"/> into melee, but allow to specify the task time that only applies for a player
            <see cref="T:GTA.Ped"/>. Not intended to use with an AI/NPC <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='target']"/>
            </param>
            <param name="blendIn">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='blendIn']"/>
            </param>
            <param name="strafePhaseSync">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='strafePhaseSync']"/>
            </param>
            <param name="timeInTask">
            The time in seconds for the newly created <c>CTaskMelee</c>.
            Only applies when the <see cref="T:GTA.Ped"/> being given the task is a player one.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single,GTA.TaskCombatFlags)">
            <summary>
            Puts the <see cref="T:GTA.Ped"/> into melee, but allow to specify the combat flags that only applies for an
            AI/NPC <see cref="T:GTA.Ped"/>. Not intended to use with a player <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="target">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='target']"/>
            </param>
            <param name="blendIn">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='blendIn']"/>
            </param>
            <param name="strafePhaseSync">
            <inheritdoc cref="M:GTA.TaskInvoker.PutDirectlyIntoMelee(GTA.Ped,GTA.AnimationBlendDuration,System.Single)" path="/param[@name='strafePhaseSync']"/>
            </param>
            <param name="aiCombatFlags">
            The combat flags for the newly created <c>CTaskThreatResponse</c> to use.
            Only applies when the <see cref="T:GTA.Ped"/> being given the task is an AI/NPC one.
            <see cref="F:GTA.TaskCombatFlags.DisableAimIntro"/> is implicitly set in <c>TASK_PUT_PED_DIRECTLY_INTO_MELEE</c>,
            and setting such value has no effect.
            </param>
            <remarks>
            Implicitly sets <see cref="F:GTA.TaskThreatResponseFlags.CanFightArmedPedsWhenNotArmed"/> for the created
            <c>CTaskThreatResponse</c> if called on an AI/NPC <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,System.Nullable{GTA.PedMoveBlendRatio},System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to follow the navmesh to the given coord.
            </summary>
            <param name="position">The position to go to.</param>
            <param name="moveBlendRatio">Specifies how much fast the ped will move. If <see langword="null"/>, the value will default to <c>2f</c>.</param>
            <param name="timeBeforeWarp">The time before warping in milliseconds.</param>
            <param name="radius">An Unknown radius parameter (possibly the radius for navmesh search) but does not affect the distance where the ped will stop.</param>
            <param name="navigationFlags">The navigation flags.</param>
            <param name="finalHeading">The final heading that the <see cref="T:GTA.Ped"/> will turn to at the end of the task. Leave <see cref="F:GTA.TaskInvoker.DefaultNavmeshFinalHeading"/> to leave as is.</param>
            <remarks>
            Sometimes a path may not be able to be found. This could happen because there simply isn't any way to get there, or maybe a bunch of dynamic objects have blocked the way,
            or maybe the destination is too far away. In this case the <see cref="T:GTA.Ped"/> will simply stand still.
            To identify when this has happened, you can use <see cref="M:GTA.Ped.GetNavMeshRouteResult"/>. This will help you find situations where <see cref="T:GTA.Ped"/> cannot get to their target.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.FollowNavMeshTo(GTA.Math.Vector3,GTA.PedMoveBlendRatio,System.Int32,System.Single,GTA.FollowNavMeshFlags,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to follow the navmesh to the given coord.
            </summary>
            <param name="position">The position to go to.</param>
            <param name="moveBlendRatio">Specifies how much fast the ped will move.</param>
            <param name="timeBeforeWarp">The time before warping in milliseconds.</param>
            <param name="radius">An Unknown radius parameter (possibly the radius for navmesh search) but does not affect the distance where the ped will stop.</param>
            <param name="navigationFlags">The navigation flags.</param>
            <param name="slideToCoordHeading">The slide-to-coord heading in degrees.</param>
            <param name="maxSlopeNavigable">
            Max slope which this ped can move over (<c>0f</c> = can only move on flat,
            <c>45f</c> means cannot move on anything above 1:1 slope, <c>90f</c> means can move on any slope).</param>
            <param name="clampMaxSearchDistance">
            Clamp the search distance to this value, path-search will not search further than this distance
            (value must be between 1 and 255 inclusive).
            </param>
            <param name="finalHeading">The final heading that the <see cref="T:GTA.Ped"/> will turn to at the end of the task. Leave <see cref="F:GTA.TaskInvoker.DefaultNavmeshFinalHeading"/> to leave as is.</param>
            <remarks>
            Sometimes a path may not be able to be found. This could happen because there simply isn't any way to get there, or maybe a bunch of dynamic objects have blocked the way,
            or maybe the destination is too far away. In this case the <see cref="T:GTA.Ped"/> will simply stand still.
            To identify when this has happened, you can use <see cref="M:GTA.Ped.GetNavMeshRouteResult"/>. This will help you find situations where <see cref="T:GTA.Ped"/> cannot get to their target.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.GoStraightTo(GTA.Math.Vector3,System.Int32,GTA.PedMoveBlendRatio,System.Single,System.Single)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to go to a coord, without using the navmesh.
            </summary>
            <param name="position">The position to go to.</param>
            <param name="moveBlendRatio">Specifies how much fast the ped will move.</param>
            <param name="timeBeforeWarp">The time before warping in milliseconds.</param>
            <param name="finalHeading">The final heading that the <see cref="T:GTA.Ped"/> will turn to at the end of the task. Set <see cref="F:GTA.TaskInvoker.DefaultNavmeshFinalHeading"/> to leave the heading as is.</param>
            <param name="targetRadius">The target radius.</param>
        </member>
        <member name="M:GTA.TaskInvoker.GoToPointAnyMeans(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single)">
            <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)"/>
        </member>
        <member name="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParams(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single)">
             <param name="target">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='target']"/>
             </param>
             <param name="moveBlendRatio">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='moveBlendRatio']"/>
             </param>
             <param name="vehicle">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='vehicle']"/>
             </param>
             <param name="useLongRangeVehiclePathing">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='useLongRangeVehiclePathing']"/>
             </param>
             <param name="drivingFlags">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='drivingFlags']"/>
             </param>
             <param name="maxRangeToShootTargets">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='maxRangeToShootTargets']"/>
             </param>
             <param name="extraVehToTargetDistToPreferVeh">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='extraVehToTargetDistToPreferVeh']"/>
             </param>
             <param name="driveStraightLineDistance">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='driveStraightLineDistance']"/>
             </param>
             <param name="extraFlags">
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)" path="/param[@name='extraFlags']"/>
             </param>
             <param name="warpTimerMs">
             Warps ped to target position if ped gets stuck for this amount of time in milliseconds
             (only if <paramref name="warpTimerMs"/> != -1.0).
             Only works for <see cref="T:GTA.Ped"/>s on foot or in a car/bike (not aircraft/boats).
             <see cref="T:GTA.Ped"/>s will be removed from <see cref="T:GTA.Vehicle"/> on warp.
             </param>
             <inheritdoc cref="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)"/>
            
        </member>
        <member name="M:GTA.TaskInvoker.GoToPointAnyMeansExtraParamsWithCruiseSpeed(GTA.Math.Vector3,GTA.PedMoveBlendRatio,GTA.Vehicle,System.Boolean,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Single,GTA.TaskGoToPointAnyMeansFlags,System.Single,System.Single)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to go to a point by any means.
            </summary>
            <param name="target">The target point.</param>
            <param name="moveBlendRatio">The move blend ratio.</param>
            <param name="vehicle">
            The vehicle to get to the point.
            Set <see langword="null"/> to let the <see cref="T:GTA.Ped"/> use any <see cref="T:GTA.Vehicle"/>s.
            If a <see cref="T:GTA.Vehicle"/> instance is set that does not exist in the game, the method will silently fail
            without even creating a <c>CTaskGoToPointAnyMeans</c>, which is supposed to be created.
            </param>
            <param name="useLongRangeVehiclePathing">
            If <see langword="true"/>, the created task may use a <c>CTaskVehicleGotoLongRange</c>, which automatically
            loads nodes in the background (may be useful to avoid the task not going to a point when you want to get
            <see cref="T:GTA.Ped"/>s to a point far from where the player is).
            If <see langword="false"/>, the created task will not use a <c>CTaskVehicleGotoLongRange</c>, which may
            result in the task not going to a point if the specified point is too far from where the player is.
            </param>
            <param name="drivingFlags">The driving flags.</param>
            <param name="maxRangeToShootTargets">
            The max range to shoot targets in meters.
            </param>
            <param name="extraVehToTargetDistToPreferVeh">
            <para>
            The distance in meters that partially determines if the <see cref="T:GTA.Ped"/> stops considering when they are
            not in a <see cref="T:GTA.Vehicle"/>. The high this value is, the further the <see cref="T:GTA.Ped"/> will stop
            considering from <paramref name="target"/>. Roughly speaking, if this parameter is more than the square of
            the distance between the <see cref="T:GTA.Ped"/> and <paramref name="target"/>, they will not basically take any
            <see cref="T:GTA.Vehicle"/>s.
            </para>
            <para>
            Strictly speaking, the distance between a <see cref="T:GTA.Vehicle"/> and
            <paramref name="target"/> and this parameter is less than or equal to the sum of the distance between
            the <see cref="T:GTA.Ped"/> and <paramref name="target"/> and the square root, the task will stop considering
            the <see cref="T:GTA.Vehicle"/>.<br/>
            You can confirm if it is correct that how exactly this parameter works that explained in this document by
            searching for <c>"76 04 B0 01 EB 79 0F 28 9A ? ? ? ? F3 0F 59 ED"</c> and inspecting nearby instructions,
            where rcx is the pointer to a <c>CTaskGoToPointAnyMeans</c>, rdx is the pointer to a considered
            <c>CVehicle</c>, and r8 is the pointer to the <c>CPed</c> who is executing the rcx task.
            </para>
            </param>
            <param name="driveStraightLineDistance">
            The distance to target in meters at which the <see cref="T:GTA.Ped"/> will start driving straight instead of
            following vehicle nodes.
            </param>
            <param name="extraFlags">
            The extra flags for how the created task should be executed.
            </param>
            <param name="cruiseSpeed">
            The cruise speed in m/s.
            </param>
            <param name="targetArriveDist">
            The distance to target in meters at which a vehicle task will quit.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.LandPlane(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Vehicle)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> in a plane to land.
            The <see cref="T:GTA.Ped"/> will try to land in between the <paramref name="startPosition"/> and <paramref name="touchdownPosition"/>.
            </summary>
            <param name="startPosition">The start position on a runway.</param>
            <param name="touchdownPosition">The end position on a runway.</param>
            <param name="plane">The plane to land. if <see langword="null"/>, <see cref="P:GTA.Ped.CurrentVehicle"/> will be used as <c>TASK_PLANE_LAND</c> requires a vehicle handle as the 2nd parameter.</param>
        </member>
        <member name="M:GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Gives the <see cref="T:GTA.Ped"/> a task to park the specified <see cref="T:GTA.Vehicle"/> in the specified manner.
            </summary>
            <param name="vehicle">The driven vehicle.</param>
            <param name="position">The center of the space.</param>
            <param name="heading">
            <para>Heading of the parking space. Can be either positive or negative direction.</para>
            <para>Although "radius" is an incorrectly named parameter, the name is retained for scripts that use the method with named parameters.</para>
            </param>
            <param name="radius">
            <para>If the vehicle's heading isn't within this amount of <paramref name="heading"/>, the <see cref="T:GTA.Vehicle"/> will back up and try to straighten itself out.</para>
            <para></para>
            </param>
            <param name="keepEngineOn">If <see langword="true"/>, keep the lights on after parking.</param>
        </member>
        <member name="M:GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,GTA.ParkType,System.Single,System.Boolean)">
            <summary>
            Gives the <see cref="T:GTA.Ped"/> a task to park the specified <see cref="T:GTA.Vehicle"/> in the specified manner.
            </summary>
            <param name="vehicle">The driven vehicle.</param>
            <param name="position">The center of the space.</param>
            <param name="directionDegrees">
            Heading of the parking space.
            Can be either positive or negative direction--how the <see cref="T:GTA.Vehicle"/> enters the space is determined by <paramref name="parkType"/>.
            </param>
            <param name="parkType">Style of parking.</param>
            <param name="toleranceDegrees">
            If the vehicle's heading isn't within this amount of <paramref name="directionDegrees"/>, the <see cref="T:GTA.Vehicle"/> will back up and try to straighten itself out.
            </param>
            <param name="keepEngineOn">If <see langword="true"/>, keep the lights on after parking.</param>
        </member>
        <member name="M:GTA.TaskInvoker.PlayAnimationAdvanced(GTA.CrClipAsset,GTA.Math.Vector3,GTA.Math.Vector3,System.Nullable{GTA.AnimationBlendDelta},System.Nullable{GTA.AnimationBlendDelta},System.Int32,GTA.AnimationFlags,System.Single,GTA.EulerRotationOrder,GTA.AnimationIKControlFlags)">
            <summary>
            Plays an anim task on the <see cref="T:GTA.Ped"/> with a reposition and reorientation at the beginning.
            </summary>
            <param name="crClipAsset">
            The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.
            </param>
            <param name="position">The initial position in World Coordinates to start the anim at.</param>
            <param name="rotation">
            The initial rotation (in degrees, format &lt;&lt; pitch, roll, heading &gt;&gt;) to playback the anim from.
            </param>
            <param name="blendInDelta">The rate at which the task will blend in.</param>
            <param name="blendOutDelta">The rate at which the task will blend out.</param>
            <param name="timeToPlay">The time to play in milliseconds.</param>
            <param name="flags">The animation flags.</param>
            <param name="startPhase">The phase to start between 0 and 1.</param>
            <param name="rotOrder">The rotation order.</param>
            <param name="ikFlags">The IK flags.</param>
            <remarks>
            <para>
            Specifying the task flags both <see cref="F:GTA.AnimationFlags.ExtractInitialOffset"/> and
            <see cref="F:GTA.AnimationFlags.OverridePhysics"/> will instruct the task to play the anim using an initial offset
            specified by the animator (if one exists). Use this flag to playback synced anims on multiple peds (i.e.
            give all peds the same Pos and Rot values and the animation flag
            <see cref="F:GTA.AnimationFlags.ExtractInitialOffset"/> and <see cref="F:GTA.AnimationFlags.OverridePhysics"/>)
            </para>
            <para>
            This method does not automatically request <see cref="T:GTA.CrClipDictionary"/> of <paramref name="crClipAsset"/>
            which is different from <see cref="M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)"/>, so you will need to manually request it.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.PlaySynchronizedScene(GTA.FwSyncedScene,GTA.CrClipAsset,GTA.AnimationBlendDelta,GTA.AnimationBlendDelta,GTA.SyncedSceneFlags,GTA.RagdollBlockingFlags,System.Nullable{GTA.AnimationBlendDelta},GTA.AnimationIKControlFlags)">
            <summary>
            Starts a synchronized scene task to play a synchronized animation.
            </summary>
            <param name="scene">The <see cref="T:GTA.FwSyncedScene"/> to start on.</param>
            <param name="anim">The clip asset to play. Must be loaded before calling this method.</param>
            <param name="blendIn">The rate at which the task will blend in.</param>
            <param name="blendOut">The rate at which the task will blend out.</param>
            <param name="flags">A set of flags allowing for different playback options.</param>
            <param name="ragdollFlags">
            Determines which ragdoll reactions to disable while the scene is running.
            </param>
            <param name="moverBlendIn">
            Determines how fast the peds position will be interpolated into the synchronized scene
            (helps to remove pops, and to allow blending into scenes from a walk, etc.)
            If set to <see langword="null"/>, <see cref="P:GTA.AnimationBlendDelta.InstantBlendIn"/> will be used instead.
            </param>
            <param name="ikFlags">The IK flags.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartMoveNetworkByName(System.String,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)">
            <summary>
            Tasks the <see cref="T:GTA.Ped"/> to start a move network with the passed network name.
            </summary>
            <param name="networkName">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='networkName']"/>
            </param>
            <param name="blendDuration">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='blendDuration']"/>
            </param>
            <param name="flags">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='flags']"/>
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByName(System.String,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)">
            <summary>
            Tasks the <see cref="T:GTA.Ped"/> to start a move network with the passed network and with custom start position
            and orientation.
            </summary>
            <param name="networkName">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='networkName']"/>
            </param>
            <param name="pos">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='pos']"/>
            </param>
            <param name="rot">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='rot']"/>
            </param>
            <param name="rotOrder">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='rotOrder']"/>
            </param>
            <param name="blendDuration">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='blendDuration']"/>
            </param>
            <param name="flags">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='flags']"/>
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartMoveNetworkByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)">
            <summary>
            <para>
            Tasks the <see cref="T:GTA.Ped"/> to start a move network with the passed network name. This method allows
            the network to be setup with initial parameters (clipsets, floats and bools).
            </para>
            <para>
            Only available in the game version v1.0.1493.0 and later.
            </para>
            </summary>
            <param name="networkName">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='networkName']"/>
            </param>
            <param name="initParams">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='initParams']"/>
            </param>
            <param name="blendDuration">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='blendDuration']"/>
            </param>
            <param name="flags">
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/param[@name='flags']"/>
            </param>
            <remarks>
            <inheritdoc cref="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartMoveNetworkAdvancedByNameWithInitParams(System.String,GTA.TaskMoVEScriptedInitialParameters,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,System.Nullable{GTA.AnimationBlendDuration},GTA.MoveNetworkFlags)">
            <summary>
            <para>
            Tasks the <see cref="T:GTA.Ped"/> to start a move network with the passed network and with custom start position
            and orientation. This method allows the network to be setup with initial parameters (clipsets, floats
            and bools).
            </para>
            <para>
            Only available in the game version v1.0.1868.0 and later.
            </para>
            </summary>
            <param name="networkName">
            The move network name. This should match some mrf file name without the extension `<c>.mrf</c>`.
            </param>
            <param name="initParams">The initial parameters.</param>
            <param name="pos">The start position.</param>
            <param name="rot">The start rotation.</param>
            <param name="rotOrder">The rotation order in world space.</param>
            <param name="blendDuration">
            The blend duration in seconds. If set to <see langword="null"/>,
            <see cref="P:GTA.AnimationBlendDuration.Instant"/> will be used.
            </param>
            <param name="flags">The move network flags.</param>
            <remarks>
            You will need to request the <see cref="T:GTA.CrClipDictionary"/>s specified in the mrf file that
            <paramref name="networkName"/> specifies on your own before you can have <see cref="T:GTA.Ped"/>s properly
            perform the animations. You can use CodeWalker to inspect what mrf files define. You might also need to
            set signal parameters to the task using <see cref="T:GTA.PedMoveNetworkTaskInterface"/> in some states
            before the <see cref="T:GTA.Ped"/> can perform the animations defined in the state structure.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.Pause(System.Int32)">
            <summary>
            <para>
            Tasks the <see cref="T:GTA.Ped"/> to do nothing for the specified amount of milliseconds.
            Typically used as a part of <see cref="T:GTA.TaskSequence"/> to add a delay.
            <c>CTaskDoNothing</c> will be issued when this method is called as a standalone task and <c>CTaskPause</c> will be issued when this method is called as a part of <see cref="T:GTA.TaskSequence"/>.
            </para>
            <para>
            Some tasks such as <c>CTaskMeleeActionResult</c>, which is caused by doing melee attacks, may stop immediately when this task is issued
            as a part of <see cref="T:GTA.TaskSequence"/>, which is different from <see cref="M:GTA.TaskInvoker.StandStill(System.Int32)"/>.
            </para>
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <remarks>
            Unlike <see cref="M:GTA.TaskInvoker.StandStill(System.Int32)"/>, if no script (including ysc ones or external ones) owns the <see cref="T:GTA.Ped"/>,
            which is possible by creating them or calling <see cref="M:GTA.Entity.MarkAsMissionEntity(System.Boolean)"/>,
            the <see cref="T:GTA.Ped"/> will stop doing a pause task immediately and do an ambient task instead.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StandStill(System.Int32)">
            <summary>
            <para>
            Tasks the <see cref="T:GTA.Ped"/> to stand still for the specified amount of milliseconds.
            Typically used as a part of <see cref="T:GTA.TaskSequence"/> to add a stand still task (internally <c>CTaskDoNothing</c> will always be issued).
            </para>
            <para>
            Some tasks such as <c>CTaskMeleeActionResult</c>, which is caused by doing melee attacks, may not stop immediately when this task is issued,
            which is different from <see cref="M:GTA.TaskInvoker.Pause(System.Int32)"/>.
            </para>
            </summary>
            <param name="duration">The duration in milliseconds.</param>
            <remarks>
            Unlike <see cref="M:GTA.TaskInvoker.Pause(System.Int32)"/>, the <see cref="T:GTA.Ped"/> won't stop doing a pause task even if no script
            (including ysc ones or external ones) owns the <see cref="T:GTA.Ped"/>, which is possible by creating them or
            calling <see cref="M:GTA.Entity.MarkAsMissionEntity(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartScenarioInPlace(System.String,System.Int32,System.Boolean)">
            <summary>
            Puts this <see cref="T:GTA.Ped"/> into the given scenario immediately in place.
            </summary>
            <param name="scenarioName">The scenario name.</param>
            <param name="timeToLeave">
            <para>The time in milliseconds since the <see cref="T:GTA.Ped"/> starts the main clip of the scenario before they starts to leave.</para>
            <para>If zero, the initiated task will not have the <see cref="T:GTA.Ped"/> leave the scenario by elapsing time.</para>
            <para>If positive, the initiated task will have the <see cref="T:GTA.Ped"/> leave the scenario after the specified time elapsed.</para>
            <para>
            If negative, the initiated task will will not stop the <see cref="T:GTA.Ped"/> leaving the scenario by elapsing time (behaves the same as zero in this way)
            but this method will start a <c>CTaskUseScenario</c> task with "idle forever" flag (although it is unknown what difference the flag makes).
            </para>
            </param>
            <param name="playIntroClip">If <see langword="false"/>, the initiated task will skip the enter clip.</param>
            <remarks>
            This method will not start a <c>CTask</c> and the <see cref="T:GTA.Ped"/> will do nothing for the <c>CTask</c>
            if the scenario manager does not have the registered hash for <paramref name="scenarioName"/>.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartScenarioAtPosition(System.String,GTA.Math.Vector3,System.Single,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tell this <see cref="T:GTA.Ped"/> to move or warp to the position and heading given, then start the scenario passed.
            </summary>
            <param name="scenarioName">The scenario name.</param>
            <param name="position">The position to put the <see cref="T:GTA.Ped"/> into the given scenario.</param>
            <param name="heading">The heading to put the <see cref="T:GTA.Ped"/> into the given scenario.</param>
            <param name="timeToLeave">
            <para>The time in milliseconds since the <see cref="T:GTA.Ped"/> starts the main clip of the scenario before they starts to leave.</para>
            <para>If zero, the initiated task will not have the <see cref="T:GTA.Ped"/> leave the scenario by elapsing time.</para>
            <para>If positive, the initiated task will have the <see cref="T:GTA.Ped"/> leave the scenario after the specified time elapsed.</para>
            <para>
            If negative, the initiated task will will not stop the <see cref="T:GTA.Ped"/> leaving the scenario by elapsing time (behaves the same as zero in this way)
            but this method will start a <c>CTaskUseScenario</c> task with "idle forever" flag (although it is unknown what difference the flag makes).
            </para>
            </param>
            <param name="playIntroClip">If <see langword="false"/>, the initiated task will skip the enter clip.</param>
            <param name="warp">If <see langword="true"/>, the initiated task will warp the <see cref="T:GTA.Ped"/> rather than tell them to go to the position themselves.</param>
            <remarks>
            This method will not start a <c>CTask</c> and the <see cref="T:GTA.Ped"/> will do nothing for the <c>CTask</c>
            if the scenario manager does not have the registered hash for <paramref name="scenarioName"/>.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to perform a task when in a <see cref="T:GTA.Vehicle"/> against another
            <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to use to achieve the task.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task in m/s.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">
            The distance in meters at which the AI thinks the target has been reached and the car stops.
            To pick default value <c>4f</c>, the parameter can be passed in as <c>-1</c> or any other values less than
            zero.
            </param>
            <param name="straightLineDist">
            The distance in meters at which the AI switches to heading for the target directly instead of following
            the nodes.
            The max acceptable value is 255, or the value will be clamp to 255 by the native function
            <c>TASK_VEHICLE_MISSION</c>.
            To pick default value <c>20f</c>, the parameter can be passed in as <c>-1</c> or any other values less than
            zero.
            </param>
            <param name="driveAgainstTraffic">
            if set to <see langword="true"/>, allows the car to drive on the opposite side of the road into incoming traffic.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to target another <see cref="T:GTA.Ped"/> with a <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="vehicle">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='vehicle']"
            />
            </param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="drivingFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='drivingFlags']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="straightLineDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='straightLineDist']"
            />
            </param>
            <param name="driveAgainstTraffic">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='driveAgainstTraffic']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to target a coord with a <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="vehicle">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='vehicle']"
            />
            </param>
            <param name="target">The target coordinates.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="drivingFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='drivingFlags']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="straightLineDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='straightLineDist']"
            />
            </param>
            <param name="driveAgainstTraffic">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"
            path="/param[@name='driveAgainstTraffic']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)">
            <summary>
            Tells a <see cref="T:GTA.Vehicle"/> to escort another <see cref="T:GTA.Entity"/>.
            Identical to <see cref="M:GTA.TaskInvoker.StartVehicleMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Single,System.Boolean)"/>
            with <see cref="F:GTA.VehicleMissionType.Escort"/>, but allows setting a custom offset.
            </summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to drive.</param>
            <param name="escortEntity">The <see cref="T:GTA.Entity"/> to escort.</param>
            <param name="escortType">The escort types.</param>
            <param name="cruiseSpeed">The cruise speed in meters.</param>
            <param name="drivingFlags">The driving flags.</param>
            <param name="customOffset">
            The distance how far the <see cref="T:GTA.Ped"/> will keep the distance between <paramref name="escortEntity"/>
            in meters. If less than zero, the following value will be used as a fallback in the created task:
            <list type="bullet">
            <item>
            <description>
            If <paramref name="escortType"/> is either <see cref="F:GTA.VehicleEscortType.Rear"/> or
            <see cref="F:GTA.VehicleEscortType.Front"/>, always 5 meters is used as a fallback regardless of the vehicle type
            (<see cref="T:GTA.VehicleType"/>). To test if the fall back value is correct for front or rear escort types,
            search a dumped exe for <c>0F 28 46 ? F3 0F 10 8B ? ? 00 00 0F 2F 0D ? ? ? ? 0F 29 45 ? 73 08</c>.
            </description>
            </item>
            <item>
            <description>
            If <paramref name="escortType"/> is either <see cref="F:GTA.VehicleEscortType.Left"/> or
            <see cref="F:GTA.VehicleEscortType.Right"/>, one of the following three fallback values will be used and the
            vehicle type (<see cref="T:GTA.VehicleType"/>) determines this. Fallback values:
            	<list type="bullet">
            	<item>
            	<description>
            	For helicopters, blimp, and autogyro types, which are <see cref="F:GTA.VehicleType.Helicopter"/>,
            	<see cref="F:GTA.VehicleType.Blimp"/>, and <see cref="F:GTA.VehicleType.Autogyro"/>, 15 meters.
            	</description>
            	</item>
            	<item>
            	<description>
            	For motorcycle type (<see cref="F:GTA.VehicleType.Motorcycle"/>), 1.4 meters. This does not include bicycle
            	type (<see cref="F:GTA.VehicleType.Bicycle"/>).
            	</description>
            	</item>
            	<item>
            	<description>
            	For any vehicle types other than, heli, blimp, motorcycle, and autogyro, 2 meters. Do note that this
            	fallback value applies for plane type <see cref="F:GTA.VehicleType.Plane"/>.
            	</description>
            	</item>
                </list>
            To test if the fall back value is correct for left or right escort types, search a dumped exe for
            <c>0F 57 F6 0F 2F FE 44 0F 28 C6 73 32</c>.
            </description>
            </item>
            </list>
            The fallback values are subject to change by game updates.
            </param>
            <param name="minHeightAboveTerrain">
            Only used for helicopters. The height in meters that the heli will try to stay above terrain
            (i.e. 20 == always tries to stay at least 20 meters above ground).
            </param>
            <param name="straightLineDistance">
            The distance to target in meters at which the <see cref="T:GTA.Ped"/> will start driving straight instead of
            following vehicle nodes.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.VehicleFollow(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Int32)">
            <summary>
            Tells a <see cref="T:GTA.Vehicle"/> to follow another <see cref="T:GTA.Entity"/>.
            This task sits sort of in between <see cref="M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)"/> and <see cref="M:GTA.TaskInvoker.VehicleChase(GTA.Ped)"/>.
            Not as fine-controlled as <see cref="M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)"/> but not as aggressive as <see cref="M:GTA.TaskInvoker.VehicleChase(GTA.Ped)"/>.
            This task is preferable to <see cref="M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)"/> when the following vehicle might start off in front
            of the thing it's supposed to follow.
            </summary>
            <param name="vehicle">
            The <see cref="T:GTA.Vehicle"/> to use to follow <paramref name="followEntity"/>.
            </param>
            <param name="followEntity">The <see cref="T:GTA.Entity"/> to follow.</param>
            <param name="cruiseSpeed">The cruise speed in m/s.</param>
            <param name="drivingFlags">The driving flags.</param>
            <param name="followDistance">The follow distance.</param>
        </member>
        <member name="M:GTA.TaskInvoker.VehicleHeliProtect(GTA.Vehicle,GTA.Entity,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,GTA.HeliMissionFlags)">
            <summary>
            Tells a helicopter to protect another <see cref="T:GTA.Entity"/>.
            Identical to <see cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"/>
            with <see cref="F:GTA.VehicleMissionType.HeliProtect"/>, but allows setting a custom offset.
            </summary>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task in m/s.</param>
            <param name="targetReachedDist">
            The distance in meters at which heli thinks it's arrived.
            Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and
            <see cref="F:GTA.VehicleMissionType.Circle"/>.
            To pick default value <c>4f</c>, the parameter can be passed in as <c>-1</c> or any other values less than
            zero.
            </param>
            <param name="flightHeight">
            The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).
            </param>
            <param name="minHeightAboveTerrain">
            The height in meters that the heli will try to stay above terrain (ie 20 == always tries to stay at least
            20 meters above ground).
            </param>
            <param name="heliOrientation">
            The orientation the heli tries to be in (<c>0f</c> to <c>360f</c>).
            Use <c>-1f</c> (or any value less than zero) if not bothered. <c>-1f</c> Should be used in 99% of the times.
            </param>
            <param name="slowDownDistance">
            In general, get more control with big number and more dynamic with smaller.
            Setting to <c>-1</c> means use default tuning (<c>100</c>).
            </param>
            <param name="missionFlags">The heli mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='heli']"
            />
            </param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="flightHeight">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='flightHeight']"
            />
            </param>
            <param name="minHeightAboveTerrain">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='minHeightAboveTerrain']"
            />
            </param>
            <param name="heliOrientation">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='heliOrientation']"
            />
            </param>
            <param name="slowDownDistance">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='slowDownDistance']"
            />
            </param>
            <param name="missionFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='missionFlags']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)">
            <summary>Gives the helicopter a mission.</summary>
            <param name="heli">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='heli']"
            />
            </param>
            <param name="target">The target coordinate.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="flightHeight">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='flightHeight']"
            />
            </param>
            <param name="minHeightAboveTerrain">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='minHeightAboveTerrain']"
            />
            </param>
            <param name="heliOrientation">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='heliOrientation']"
            />
            </param>
            <param name="slowDownDistance">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='slowDownDistance']"
            />
            </param>
            <param name="missionFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartHeliMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,GTA.HeliMissionFlags)"
            path="/param[@name='missionFlags']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.HeliEscortHeli(GTA.Vehicle,GTA.Vehicle,GTA.Math.Vector3)">
            <summary>
            Gives a helicopter a mission to escort another heli at an offset position.
            </summary>
            <param name="heli">
            The helicopter for the <see cref="T:GTA.Ped"/> to escort <paramref name="escortHeli"/>.
            </param>
            <param name="escortHeli">
            The helicopter to escort. If <see cref="P:GTA.Vehicle.Type"/> is a type other than
            <see cref="F:GTA.VehicleType.Helicopter"/> on this argument, the method will fail without giving an escort task.
            </param>
            <param name="offset">
            The escort offset.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>Gives a plane a mission.</summary>
            <param name="plane">The helicopter.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task in m/s.</param>
            <param name="targetReachedDist">
            Distance in meters at which heli thinks it's arrived.
            Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and
            <see cref="F:GTA.VehicleMissionType.Circle"/>.
            To pick default value <c>4f</c>, the parameter can be passed in as <c>-1</c> or any other values less than
            zero.
            </param>
            <param name="flightHeight">
            The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).
            </param>
            <param name="minHeightAboveTerrain">
            The height in meters that the heli will try to stay above terrain
            (ie 20 == always tries to stay at least 20 meters above ground).
            </param>
            <param name="planeOrientation">
            The orientation the plane tries to be in (<c>0f</c> to <c>360f</c>). Use <c>-1f</c> if not bothered.
            <c>-1f</c> Should be used in 99% of the times.
            </param>
            <param name="precise">
            Specifies whether to tell the plane to move precisely with VTOL.
            If <see langword="true"/> and the plane supports VTOL, the plane will use VTOL and set the vertical flight
            nozzles position to the position for vertical flight.
            If <see langword="true"/> and the plane supports VTOL, the plane will not use VTOL and set the vertical flight
            nozzles position to the position for horizontal flight.
            If the plane does not support VTOL, this parameter has no effect.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/summary"
            />
            </summary>
            <param name="plane">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='plane']"
            />
            </param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="flightHeight">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='flightHeight']"
            />
            </param>
            <param name="minHeightAboveTerrain">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='minHeightAboveTerrain']"
            />
            </param>
            <param name="planeOrientation">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='planeOrientation']"
            />
            </param>
            <param name="precise">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='precise']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/summary"
            />
            </summary>
            <param name="plane">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='plane']"
            />
            </param>
            <param name="target">The target coordinate.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="flightHeight">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='flightHeight']"
            />
            </param>
            <param name="minHeightAboveTerrain">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='minHeightAboveTerrain']"
            />
            </param>
            <param name="planeOrientation">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='planeOrientation']"
            />
            </param>
            <param name="precise">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartPlaneMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Boolean)"
            path="/param[@name='precise']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.PlaneTaxi(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single)">
            <summary>
            Gives plane a task to drive/taxi along the runway on the ground.
            </summary>
            <param name="plane">The plane to use/give a task.</param>
            <param name="position">The target position.</param>
            <param name="cruiseSpeed">The cruise speed in m/s.</param>
            <param name="targetReachedDist">
            The distance in meters at which the plane thinks it's arrived and the task stops executing.
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">The boat.</param>
            <param name="target">The target <see cref="T:GTA.Vehicle"/>.</param>
            <param name="missionType">The vehicle mission type.</param>
            <param name="cruiseSpeed">The cruise speed for the task in m/s.</param>
            <param name="drivingFlags">The driving flags for the task.</param>
            <param name="targetReachedDist">
            The distance in meters at which boat thinks it's arrived.
            Also used as the hover distance for <see cref="F:GTA.VehicleMissionType.Attack"/> and
            <see cref="F:GTA.VehicleMissionType.Circle"/>.
            To pick default value <c>4f</c>, the parameter can be passed in as <c>-1</c> or any other values less than
            zero.
            </param>
            <param name="missionFlags">The boat mission flags for the task.</param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Ped,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='boat']"
            />
            </param>
            <param name="target">The target <see cref="T:GTA.Ped"/>.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="drivingFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='drivingFlags']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="missionFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='missionFlags']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Math.Vector3,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)">
            <summary>Gives the boat a mission.</summary>
            <param name="boat">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='boat']"
            />
            </param>
            <param name="target">The target coordinate.</param>
            <param name="missionType">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='missionType']"
            />
            </param>
            <param name="cruiseSpeed">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='cruiseSpeed']"
            />
            </param>
            <param name="drivingFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='drivingFlags']"
            />
            </param>
            <param name="targetReachedDist">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='targetReachedDist']"
            />
            </param>
            <param name="missionFlags">
            <inheritdoc
            cref="M:GTA.TaskInvoker.StartBoatMission(GTA.Vehicle,GTA.Vehicle,GTA.VehicleMissionType,System.Single,GTA.VehicleDrivingFlags,System.Single,GTA.BoatMissionFlags)"
            path="/param[@name='missionFlags']"
            />
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.GoToPlanePreciseVtol(GTA.Vehicle,GTA.Math.Vector3,System.Int32,System.Int32,System.Nullable{System.Single},System.Boolean)">
            <summary>
            <para>
            Tells a plane with VTOL (like <see cref="F:GTA.VehicleHash.Hydra"/> or <see cref="F:GTA.VehicleHash.Avenger"/>)
            to move precisely throughout the world. Will fail for other <see cref="T:GTA.Vehicle"/>s.
            </para>
            <para>
            Not available in the game versions earlier than v1.0.1290.1.
            </para>
            </summary>
            <param name="plane">The plane to apply the task.</param>
            <param name="target">The target coordinates.</param>
            <param name="flightHeight">
            The Z coordinate the heli tries to maintain (i.e. 30 == 30 meters above sea level).
            </param>
            <param name="minHeightAboveTerrain">
            The height in meters that the heli will try to stay above terrain
            (ie 20 == always tries to stay at least 20 meters above ground).
            </param>
            <param name="desiredOrientation">
            The orientation the plane tries to be in (<c>0f</c> to <c>360f</c>).
            Set <see langword="null"/> to not constrain.
            </param>
            <param name="autoPilot">
            Specifies whether to apply the plane goto task directly to the <see cref="T:GTA.Vehicle"/>, and apply some flags
            to allow this task to run with no driver.
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.1290.1.
            </exception>
        </member>
        <member name="M:GTA.TaskInvoker.GoToSubmarineAndStop(GTA.Vehicle,GTA.Math.Vector3,System.Boolean)">
            <summary>
            <para>
            Tells a submarine to goto and stop at the position given.
            </para>
            <para>
            Only available in the game version v1.0.1290.1 or later versions.
            </para>
            </summary>
            <param name="submarine">The submarine to use or directly apply the task.</param>
            <param name="position">The target position.</param>
            <param name="autoPilot">
            If <see langword="true"/>, a <c>CTaskVehicleGoToSubmarine</c> will be directly
            applied to the <see cref="T:GTA.Vehicle"/>, and apply some flags to allow this task to run with no driver.
            If <see langword="false"/>, a <c>CTaskVehicleGoToSubmarine</c> will be applied as a part of
            <c>CTaskControlVehicle</c> in the <see cref="T:GTA.Ped"/>.
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in the game versions earlier than v1.0.2189.0.
            </exception>
            <remarks>
            Cannot be used in a <see cref="T:GTA.TaskSequence"/> if <paramref name="autoPilot"/> is <see langword="true"/>,
            since <c>TASK_SUBMARINE_GOTO_AND_STOP</c> directly apply the task to the task manager of the
            <see cref="T:GTA.Vehicle"/>'s intelligence in such case.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.SwapWeapon">
            <inheritdoc cref="M:GTA.TaskInvoker.SwapWeapon(System.Boolean)"/>
        </member>
        <member name="M:GTA.TaskInvoker.SwapWeapon(System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to swap their weapon.
            </summary>
            <param name="drawWeapon">If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will start to swap while the current weapon is drawn.</param>
        </member>
        <member name="M:GTA.TaskInvoker.VehicleChase(GTA.Ped)">
            <summary>
            The <see cref="T:GTA.Ped"/> will chase the target <see cref="T:GTA.Ped"/>'s <see cref="T:GTA.Vehicle"/> with their own
            <see cref="T:GTA.Vehicle"/>. Both <see cref="T:GTA.Ped"/>s must be in <see cref="T:GTA.Vehicle"/>s, or the task will abort.
            </summary>
            <remarks>
            Cannot be used in a <see cref="T:GTA.TaskSequence"/> since <c>TASK_VEHICLE_CHASE</c> does not expect the zero
            handle for task sequences.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.HeliChase(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> in a heli to chase an <see cref="T:GTA.Entity"/>. The <see cref="T:GTA.Ped"/> must be in
            a heli.
            </summary>
            <remarks>
            Cannot be used in a <see cref="T:GTA.TaskSequence"/> since <c>TASK_HELI_CHASE</c> does not expect the zero
            handle for task sequences.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.PlaneChase(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> in a plane to land. The <see cref="T:GTA.Ped"/> will try to land in between the start
            and end coords.
            </summary>
            <remarks>
            Cannot be used in a <see cref="T:GTA.TaskSequence"/> since <c>TASK_PLANE_CHASE</c> does not expect the zero
            handle for task sequences.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.PlaneChase(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> in a heli to chase an <see cref="T:GTA.Entity"/>. The <see cref="T:GTA.Ped"/> must be in
            a heli.
            </summary>
            <remarks>
            Cannot be used in a <see cref="T:GTA.TaskSequence"/> since <c>TASK_PLANE_CHASE</c> does not expect the zero
            handle for task sequences.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.Wander(System.Single,System.Boolean)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to wander.
            </summary>
        </member>
        <member name="M:GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single)">
            <inheritdoc cref="M:GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:GTA.TaskInvoker.WanderAround(GTA.Math.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Tells the <see cref="T:GTA.Ped"/> to wander within a certain radius from the given position indefinitely.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The max radius the <see cref="T:GTA.Ped"/> can wander around <paramref name="position"/>.</param>
            <param name="minTime">
            The minimum time for the wait time in seconds before the <see cref="T:GTA.Ped"/> starts wandering.
            Must not be negative or more than <paramref name="maxTime"/>.
            </param>
            <param name="maxTime">
            The maximum time for the wait time in seconds before the <see cref="T:GTA.Ped"/> starts wandering.
            Must not be negative or less than <paramref name="maxTime"/>.
            </param>
            <remarks>
            The initiated task will put the <see cref="T:GTA.Ped"/> to the wait state if the <see cref="T:GTA.Ped"/> gets interrupted by a <c>CEvent</c> after the interruption.
            </remarks>
        </member>
        <member name="M:GTA.TaskInvoker.ForceMotionState(GTA.PedMotionState,System.Boolean)">
            <summary>
            Taskes to the peds motion state so it can be sequenced.
            Forces a known motion state on this <see cref="T:GTA.Ped"/> by rebuilding its motion task tree in a known state
            on performing the task.
            </summary>
            <param name="state">The <see cref="T:GTA.PedMotionState"/> to set.</param>
            <param name="restartState">
            If <see langword="true"/>, the <see cref="T:GTA.Ped"/> will perform an new appropriate motion task
            even if the current primary motion task is in the specified motion state (<paramref name="state"/>).
            </param>
        </member>
        <member name="M:GTA.TaskInvoker.StopScriptedAnimationTask(GTA.CrClipAsset,System.Nullable{GTA.AnimationBlendDelta})">
            <summary>
            Attempts to stop a play anim task initiated by <see cref="M:GTA.TaskInvoker.PlayAnimation(GTA.CrClipAsset)"/>.
            Does not stop non-scripted animation tasks.
            </summary>
            <param name="crClipAsset">
            The <see cref="T:GTA.CrClipAsset"/> to find the corresponding clip.
            </param>
            <param name="blendOutDelta">
            The blend out delta. if set to <see langword="null"/>, <see cref="P:GTA.AnimationBlendDelta.NormalBlendOut"/>
            will be used.
            </param>
        </member>
        <member name="T:GTA.TaskMoVEScriptedInitialParameters">
            <summary>
            Represents an immutable set of initial parameters for scripted move network tasks.
            </summary>
        </member>
        <member name="M:GTA.TaskMoVEScriptedInitialParameters.BuildStructForNatives">
            <remarks>
            Builds a new <see cref="T:GTA.TaskMoVEScriptedInitialParametersStruct"/> instance to pass to native functions.
            </remarks>
        </member>
        <member name="T:GTA.TaskMoVEScriptedInitialParametersBuilder">
            <summary>
            Represents a builder that builds <see cref="T:GTA.TaskMoVEScriptedInitialParameters"/>.
            </summary>
        </member>
        <member name="M:GTA.TaskMoVEScriptedInitialParametersBuilder.FloatParamLerpValue0(System.Single)">
            <remarks>
            The default value is -1.0f.
            </remarks>
        </member>
        <member name="M:GTA.TaskMoVEScriptedInitialParametersBuilder.FloatParamLerpValue1(System.Single)">
            <remarks>
            The default value is -1.0f.
            </remarks>
        </member>
        <member name="M:GTA.TaskMoVEScriptedInitialParametersBuilder.Build">
            <remarks>
            Builds a new <see cref="T:GTA.TaskMoVEScriptedInitialParameters"/> instance.
            </remarks>
        </member>
        <member name="T:GTA.TaskMoVEScriptedInitialParametersStruct">
            <summary>
            Represents an immutable struct that has a set of initial parameters and for scripted move network tasks.
            Intended to be used to pass the data to native functions.
            </summary>
            <remarks>
            Since this struct has a private disposed field, this struct should not be passed by value as a argument.
            </remarks>
        </member>
        <member name="T:GTA.TaskSequence">
            <summary>
            Represents a task sequence.
            After you create a <see cref="T:GTA.TaskSequence"/> instance, call <see cref="P:GTA.TaskSequence.AddTask"/> as many as you want and call <see cref="M:GTA.TaskSequence.Close"/> or <see cref="M:GTA.TaskSequence.Close(System.Boolean)"/>
            right after the instance creation statement.
            </summary>
            <remarks>
            If you forget to close or dispose of your <see cref="T:GTA.TaskSequence"/>s and <see cref="T:GTA.Ped"/>s cannot start any <see cref="T:GTA.TaskSequence"/>s afterwards during script development,
            try restarting the game session by loading a save or starting a new game.
            </remarks>
        </member>
        <member name="M:GTA.TaskSequence.Dispose">
            <summary>
            Clears the <see cref="T:GTA.TaskSequence"/>.
            You should call this method after you call <see cref="M:GTA.TaskInvoker.PerformSequence(GTA.TaskSequence)"/> on some <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="P:GTA.TaskSequence.Handle">
            <summary>
            Gets the <see cref="T:GTA.TaskSequence"/> handle.
            </summary>
        </member>
        <member name="P:GTA.TaskSequence.Count">
            <summary>
            Gets the number <see cref="T:GTA.TaskSequence"/> of stacked tasks.
            </summary>
            <remarks>
            Will return a incorrect value when you have add tasks via a variable cached from what <see cref="P:GTA.TaskSequence.AddTask"/> returns.
            </remarks>
        </member>
        <member name="P:GTA.TaskSequence.IsClosed">
            <summary>
            Gets the value indicating whether the <see cref="T:GTA.TaskSequence"/> is closed.
            </summary>
        </member>
        <member name="P:GTA.TaskSequence.AddTask">
            <summary>
            Gets the dedicated <see cref="T:GTA.TaskInvoker"/>.
            You should invoke tasks like <c>taskSequence.AddTask.StandStill(1000)</c> (not via a cached TaskInvoker instance)
            so you can get the correct task count via <see cref="P:GTA.TaskSequence.Count"/>.
            </summary>
            <remarks>If you need to invoke native functions for scripted tasks manually, set <c>0</c> as the ped handle argument until you close the sequence.</remarks>
            <exception cref="T:System.Exception">Thrown when the <see cref="T:GTA.TaskSequence"/> is closed.</exception>
        </member>
        <member name="M:GTA.TaskSequence.Close">
            <inheritdoc cref="M:GTA.TaskSequence.Close(System.Boolean)"/>
        </member>
        <member name="M:GTA.TaskSequence.Close(System.Boolean)">
            <summary>
            Closes the <see cref="T:GTA.TaskSequence"/> if opened or does nothing if closed.
            </summary>
            <param name="repeat">Specifies whether to set the sequence to repeat.</param>
        </member>
        <member name="T:GTA.EnterVehicleFlags">
            <summary>
            Set of flags to define the behaviour of the enter and exit vehicle tasks.
            Shares the same flags with <see cref="T:GTA.LeaveVehicleFlags"/>.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.ResumeIfInterupted">
            <summary>
            Resume the enter vehicle task even if the task is interrupted (bumped, shot).
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpToDoor">
            <summary>
            Warp the <see cref="T:GTA.Ped"/> to entry point ready to open the door/enter seat.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.JackAnyone">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to jack regardless of relationship status if they have to jack someone to complete the enter vehicle task.
            Without this flag, the <see cref="T:GTA.Ped"/> won't jack those they respect or like where the relationship is set to <see cref="F:GTA.Relationship.Companion"/> or <see cref="F:GTA.Relationship.Respect"/> towards them,
            but may jack those they don't respect or like.
            Without this flag, the <see cref="T:GTA.Ped"/> will abort the enter vehicle task if they have to jack one of those who respect or like to complete the enter vehicle task.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIn">
            <summary>
            Warp the <see cref="T:GTA.Ped"/> onto the <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.DontCloseDoor">
            <summary>
            Dont close the vehicle door.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIfDoorIsBlocked">
            <summary>
            Allow ped to warp to the seat if entry is blocked.
            If the shuffle link to that seat is blocked by someone but the entry point for the shuffle link is not directly blocked, the <see cref="T:GTA.Ped"/> won't warp.
            Consider using <see cref="F:GTA.EnterVehicleFlags.WarpIfShuffleLinkIsBlocked"/> if you want the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.UseLeftEntry">
            <summary>
            Use entry/exit point on the left hand side.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.UseRightEntry">
            <summary>
            Use entry/exit point on the right hand side.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.JustPullPedOut">
            <summary>
            When jacking just open the door and/or pull the ped out, but don't get in.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.BlockSeatShuffling">
            <summary>
            Disable shuffling, forcing ped to use direct door only.
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.WarpIfShuffleLinkIsBlocked">
            <summary>
            Allow ped to warp if the direct door is blocked and the shuffle link to that seat is blocked by someone.
            Unlike <see cref="F:GTA.EnterVehicleFlags.WarpIfDoorIsBlocked"/>, this flag allows the the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone (regardless of whether the door linked to the shuffle link is directly blocked).
            </summary>
        </member>
        <member name="F:GTA.EnterVehicleFlags.DontJackAnyone">
            <summary>
            Never jack anyone when entering/exiting.
            This flag takes precedence over <see cref="F:GTA.EnterVehicleFlags.AllowJacking"/>.
            </summary>
        </member>
        <member name="T:GTA.LeaveVehicleFlags">
            <summary>
            Set of flags to define the behaviour of the enter and exit vehicle tasks.
            Shares the same flags with <see cref="T:GTA.EnterVehicleFlags"/>.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpOut">
            <summary>
            Warp the ped out of the vehicle.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontWaitForVehicleToStop">
            <summary>
            Don't wait for the vehicle to stop before exiting.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.LeaveDoorOpen">
            <summary>
            Dont close the vehicle door.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked">
            <summary>
            Allow ped to warp to the seat if entry is blocked. The player <see cref="T:GTA.Ped"/> will warp out of the vehicle without any flags if the entry is blocked.
            If the shuffle link to that seat is blocked by someone but the entry point for the shuffle link is not directly blocked, the <see cref="T:GTA.Ped"/> won't warp.
            Consider using <see cref="F:GTA.LeaveVehicleFlags.WarpIfShuffleLinkIsBlocked"/> if you want the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.BailOut">
            <summary>
            Jump out of the vehicle regardless of its speed.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontDefaultWarpIfDoorBlocked">
            <summary>
            <see cref="M:GTA.TaskInvoker.LeaveVehicle(GTA.LeaveVehicleFlags)"/> (or <c>TASK_LEAVE_ANY_VEHICLE</c>) auto defaults the <see cref="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked"/>, set this flag to not set that.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.FromLeftSide">
            <summary>
            Use entry/exit point on the left hand side.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.FromRightSide">
            <summary>
            Use entry/exit point on the right hand side.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.BlockSeatShuffling">
            <summary>
            Disable shuffling, forcing ped to use direct door only.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WarpIfShuffleLinkIsBlocked">
            <summary>
            Allow ped to warp if the direct door is blocked and the shuffle link to that seat is blocked by someone. The player <see cref="T:GTA.Ped"/> will warp out of the vehicle without any flags if the entry is blocked.
            Unlike <see cref="F:GTA.LeaveVehicleFlags.WarpIfDoorIsBlocked"/>, this flag allows the the <see cref="T:GTA.Ped"/> to warp when the direct door and the shuffle link to that seat is blocked by someone (regardless of whether the door linked to the shuffle link is directly blocked).
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.DontJackAnyone">
            <summary>
            Never jack anyone when entering/exiting.
            </summary>
        </member>
        <member name="F:GTA.LeaveVehicleFlags.WaitForEntryPointToBeClear">
            <summary>
            Wait for our entry point to be clear of peds before exiting.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.LinearC">
            <summary>
            The linear damping constant.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.LinearV">
            <summary>
            The linear damping coefficient proportional to velocity.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.LinearV2">
            <summary>
            The linear damping coefficient proportional to velocity squared.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.AngularC">
            <summary>
            The angular damping constant.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.AngularV">
            <summary>
            The angular damping coefficient proportional to velocity.
            </summary>
        </member>
        <member name="F:GTA.PhysicsDampingType.AngularV2">
            <summary>
            The angular damping coefficient proportional to velocity squared.
            </summary>
        </member>
        <member name="T:GTA.Projectile">
            <summary>
            Represents a projectile, which is for `<c>CProjectile</c>`.
            </summary>
        </member>
        <member name="P:GTA.Projectile.Owner">
            <summary>
            Gets the <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Projectile"/> belongs to.
            Can be <see langword="null" /> or a <see cref="T:GTA.Ped"/> instance whose handle is for <see cref="T:GTA.Vehicle"/>, which is not valid as a <see cref="T:GTA.Ped"/> instance.
            </summary>
        </member>
        <member name="P:GTA.Projectile.OwnerEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Projectile"/> belongs to. Can be <see langword="null" />.
            </summary>
        </member>
        <member name="P:GTA.Projectile.WeaponHash">
            <summary>
            Gets the <see cref="P:GTA.Projectile.WeaponHash"/> this <see cref="T:GTA.Projectile"/> was fired with.
            </summary>
        </member>
        <member name="M:GTA.Projectile.Explode">
            <summary>
            Explodes this <see cref="T:GTA.Projectile"/>. Note that calling this method does not necessarily delete this <see cref="T:GTA.Projectile"/> due to the weapon configuration.
            </summary>
        </member>
        <member name="M:GTA.Projectile.FromHandle(System.Int32)">
            <summary>
            Get a <see cref="T:GTA.Projectile"/> instance by its handle.
            </summary>
            <param name="handle">The handle to test.</param>
            <returns>
            A <see cref="T:GTA.Projectile"/> if the handle is assigned for a <see cref="T:GTA.Projectile"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:GTA.ProjectileRocket">
            <summary>
            Represents a rocket projectile, which is for `<c>CProjectileRocket</c>`.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.Target">
            <summary>
            Gets or sets the homing target.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.CachedTargetPosition">
            <summary>
            Gets or sets the cached homing target position when the projectile is not homing <see cref="P:GTA.ProjectileRocket.Target"/>
            accurately for <see cref="P:GTA.ProjectileRocket.IsAccurate"/> being not set.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.LaunchDirection">
            <summary>
            Gets or sets the launch direction.
            The <see cref="T:GTA.ProjectileRocket"/> lerps to this direction first until it lerps close enough.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.FlightModelInput">
            <summary>
            Gets or sets the flight model input of this <see cref="T:GTA.ProjectileRocket"/> as a <see cref="T:GTA.Math.Vector3"/>.
            </summary>
            <remarks>
            If you are accessing subset of flight model input values and concern potential performance loss when
            the property has to access 2 cache lines, use individual flight model input such as
            <see cref="P:GTA.ProjectileRocket.FlightModelInputPitch"/>. You might want to note that the address of
            <see cref="P:GTA.ProjectileRocket.FlightModelInputYaw"/> can be in a different cache line from one where
            <see cref="P:GTA.ProjectileRocket.FlightModelInputPitch"/> and <see cref="P:GTA.ProjectileRocket.FlightModelInputRoll"/> are.
            </remarks>
        </member>
        <member name="P:GTA.ProjectileRocket.FlightModelInputPitch">
            <summary>
            Gets or sets the pitch of flight model input of this <see cref="T:GTA.ProjectileRocket"/>.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.FlightModelInputRoll">
            <summary>
            Gets or sets the roll of flight model input of this <see cref="T:GTA.ProjectileRocket"/>.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.FlightModelInputYaw">
            <summary>
            Gets or sets the yaw of flight model input of this <see cref="T:GTA.ProjectileRocket"/>.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.TimeBeforeHoming">
            <summary>
            Gets or sets the time before homing in seconds.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.TimeBeforeHomingAngleBreak">
            <summary>
            Gets or sets the time before homing stops ignoring angle break in seconds.
            If set to zero (or less) and the <see cref="T:GTA.ProjectileRocket"/> is homing, it should only home
            <see cref="P:GTA.ProjectileRocket.Target"/> is within a certain angle threshold.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.LauncherSpeed">
            <summary>
            Gets or sets the speed this <see cref="T:GTA.ProjectileRocket"/> launched and should maintain in m/s.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.TimeSinceLaunch">
            <summary>
            Gets or sets the time since launch that in seconds. If this value is less than the `SeparationTime` of
            the `<c>CAmmoRocketInfo</c>` that this <see cref="T:GTA.ProjectileRocket"/> uses,
            the <see cref="T:GTA.ProjectileRocket"/> will receive a small gravity force instead of the thrust force.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.IsAccurate">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> is accurately homing, which is set when the player
            locks on a <see cref="T:GTA.Entity"/> and fires the weapon.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.LerpToLaunchDirection">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> is lerping to the launch direction, which is set
            in `<c>CProjectileRocket::Fire</c>`.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.ApplyThrust">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> should apply thrust.
            Sets to <see langword="false"/> when the <see cref="T:GTA.ProjectileRocket"/> goes into water if
            `<c>CProjectileRocket::ProcessPhysics</c>` is controlling the physics and <c>`ThrustUnderwater`</c> is
            not set in `<c>ProjectileFlags</c>` of the projectile's <c>`CAmmoRocketInfo`</c>.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.OnFootHomingWeaponLockedOn">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> is locked on with a on-foot homing weapon
            that fired the <see cref="T:GTA.ProjectileRocket"/>. `<c>OnFootHoming</c>` should be set in
            `<c>WeaponFlags</c>` of `<c>CWeaponInfo</c>` (in a `weapons.meta`), so the internal functions of
            `<c>CProjectileRocket</c>` can work to home <see cref="P:GTA.ProjectileRocket.Target"/> as intended.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.WasHoming">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> was homing <see cref="P:GTA.ProjectileRocket.Target"/> at any time.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.StopHoming">
            <summary>
            Gets or sets whether this <see cref="T:GTA.ProjectileRocket"/> has stopped homing <see cref="P:GTA.ProjectileRocket.Target"/>.
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.IsRedirected">
            <summary>
            <para>
            Gets whether this <see cref="T:GTA.ProjectileRocket"/> is redirected to a <see cref="T:GTA.Projectile"/> attractor
            whose `<c>CAmmoProjectileInfo</c>` (or one of its subclasses `<c>CAmmoRocketInfo</c>` or
            `<c>CAmmoThrownInfo</c>`) has `<c>HomingAttractor</c>` flag in `<c>ProjectileFlags</c>`.
            </para>
            <para>
            Not available in v1.0.1032.1 and earlier versions.
            </para>
            </summary>
        </member>
        <member name="P:GTA.ProjectileRocket.CachedDirection">
            <summary>
            Gets or sets the cached direction toward <see cref="P:GTA.ProjectileRocket.Target"/>.
            </summary>
        </member>
        <member name="M:GTA.ProjectileRocket.FromHandle(System.Int32)">
            <summary>
            Get a <see cref="T:GTA.ProjectileRocket"/> instance by its handle.
            </summary>
            <param name="handle">The handle to test.</param>
            <returns>
            A <see cref="T:GTA.ProjectileRocket"/> if the handle is assigned for a <see cref="T:GTA.ProjectileRocket"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:GTA.ProjectileThrown">
            <summary>
            Represents a thrown projectile, which is for `<c>CProjectileThrown</c>`.
            </summary>
            <remarks>
            Unlike `<c>CProjectileRocket</c>`, `<c>CProjectileThrown</c>` only overrides
            `<c>CObject::GetAsProjectileThrown</c>` (both const and non-const variants) and `<c>CProjectile::GetInfo</c>`
            (which returns `<c>CAmmoProjectileInfo</c>`).
            `<c>CProjectileThrown</c>` does not have additional members or functions, either.
            </remarks>
        </member>
        <member name="M:GTA.ProjectileThrown.FromHandle(System.Int32)">
            <summary>
            Get a <see cref="T:GTA.ProjectileThrown"/> instance by its handle.
            </summary>
            <param name="handle">The handle to test.</param>
            <returns>
            A <see cref="T:GTA.ProjectileThrown"/> if the handle is assigned for a <see cref="T:GTA.ProjectileThrown"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="P:GTA.Prop.HasBeenDetachedFromParentEntity">
            <summary>
            Determines if this <see cref="T:GTA.Prop"/> has been created as a <see cref="T:GTA.Prop"/> detached from the parent <see cref="T:GTA.Entity"/>.
            Will return <see langword="true"/> when the <see cref="T:GTA.Prop"/> has been detached from parent <see cref="T:GTA.Ped"/> and has been created as a separate <see cref="T:GTA.Prop"/>
            or when the <see cref="T:GTA.Prop"/> is a fragment part detached from parent <see cref="T:GTA.Vehicle"/> or <see cref="T:GTA.Prop"/> and has been created as a separate <see cref="T:GTA.Prop"/>
            </summary>
        </member>
        <member name="P:GTA.Prop.ParentEntityDetachedFrom">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Prop"/> is detached from.
            If found, will return an instance of any one of <see cref="T:GTA.Ped"/>, <see cref="T:GTA.Vehicle"/>, or <see cref="T:GTA.Prop"/>.
            If not found, will return <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GTA.Prop.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Prop"/> exists.
            You should ensure <see cref="T:GTA.Prop"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Prop"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Prop.AsProjectile">
            <summary>
            Get as a <see cref="T:GTA.Projectile"/> instance if this <see cref="T:GTA.Prop"/> is a <see cref="T:GTA.Projectile"/>.
            </summary>
            <returns>
            A <see cref="T:GTA.Projectile"/> if the <see cref="T:GTA.Prop"/> exists and is a <see cref="T:GTA.Projectile"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.Prop.AsProjectileRocket">
            <summary>
            Get as a <see cref="T:GTA.ProjectileRocket"/> instance if this <see cref="T:GTA.Prop"/> is
            a <see cref="T:GTA.ProjectileRocket"/>.
            </summary>
            <returns>
            A <see cref="T:GTA.ProjectileRocket"/> if the <see cref="T:GTA.Prop"/> exists and is a <see cref="T:GTA.ProjectileRocket"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.Prop.AsProjectileThrown">
            <summary>
            Get as a <see cref="T:GTA.ProjectileThrown"/> instance if this <see cref="T:GTA.Prop"/> is
            a <see cref="T:GTA.ProjectileThrown"/>.
            </summary>
            <returns>
            A <see cref="T:GTA.ProjectileThrown"/> if the <see cref="T:GTA.Prop"/> exists and is a <see cref="T:GTA.ProjectileThrown"/>;
            otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="T:GTA.SyncedSceneFlags">
            <summary>
            An enumeration of possible flags used for the synchronized scene task `<c>CTaskSynchronizedScene</c>`.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.UseKinematicPhysics">
            <summary>
            When this flag is set, the task will run in kinematic physics mode (other entities will collide, and be
            pushed out of the way).
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.TagSyncOut">
            <summary>
            When this flag is set, The task will do a tag synchronized blend out with the movement behaviour of
            the <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.DontInterrupt">
            <summary>
            When this flag is set, the scene will not be interrupted by ai events like falling, entering water / etc.
            Also blocks all weapon reactions / etc.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.OnAbortStopScene">
            <summary>
            When this flag is set, the entire scene will be stopped if this task is aborted.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.AbortOnWeaponDamage">
            <summary>
            When this flag is set, the task will end if the <see cref="T:GTA.Ped"/> takes weapon damage.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.BlockMoverUpdate">
            <summary>
            When this flag is set, the task will not update the mover. Can be used to include vehicles in a synced
            scene when the scene is attached to them.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.LoopWithinScene">
            <summary>
            When this flag is set, the tasks with anims shorter than the scene will loop while the scene is playing.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.PreserveVelocity">
            <summary>
            When this flag is set, the task will preserve it's velocity on clean up (must be using physics).
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.ExpandPedCapsuleFromSkeleton">
            <summary>
            When this flag is set, the <see cref="T:GTA.Ped"/> capsule will attempt to expand to cover the skeleton during
            playback.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.ActivateRagdollOnCollision">
            <summary>
            When this flag is set, the <see cref="T:GTA.Ped"/> will switch to ragdoll and fall down on making contact with
            a physical object (other than flat ground).
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.HideWeapon">
            <summary>
            When this flag is set, the <see cref="T:GTA.Ped"/>'s weapon will be hidden while the scene is playing.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.AbortOnDeath">
            <summary>
            When this flag is set, the task will end if the <see cref="T:GTA.Ped"/> dies.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.VehicleAbortOnLargeImpact">
            <summary>
            When running the scene on a vehicle, allow the scene to abort if the vehicle takes a heavy collision from
            another vehicle.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.VehicleAllowPlayerEntry">
            <summary>
            When running the scene on a vehicle, allow player <see cref="T:GTA.Ped"/>s to enter the vehicle.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.ProcessAttachmentsOnStart">
            <summary>
            When this flag is set, process the attachments at the start of the scene.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.NetOnEarlyNonPedStopReturnToStart">
            <summary>
            When this flag is set, a non-<see cref="T:GTA.Ped"/> entity will be returned to their starting position if the
            scene finishes early.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.SetPedOutOfVehicleAtStart">
            <summary>
            When this flag is set, the <see cref="T:GTA.Ped"/> will be automatically set out of their <see cref="T:GTA.Vehicle"/>
            at the start of the scene.
            </summary>
        </member>
        <member name="F:GTA.SyncedSceneFlags.NetDisregardAttachmentChecks">
            <summary>
            When this flag is set, the attachment checks done in `<c>CNetworkSynchronisedScenes::Update</c>` when
            pending start will be disregarded.
            </summary>
        </member>
        <member name="T:GTA.BaseSubHandlingData">
            <summary>
            Represents the base sub handling data class for <c>CBaseSubHandlingData</c>.
            </summary>
        </member>
        <member name="P:GTA.BaseSubHandlingData.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.BaseSubHandlingData"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.BaseSubHandlingData.Parent">
            <summary>
            Gets the parent <see cref="T:GTA.BaseSubHandlingData"/>.
            </summary>
        </member>
        <member name="P:GTA.BaseSubHandlingData.HandlingType">
            <summary>
            Gets the handling type.
            </summary>
        </member>
        <member name="P:GTA.BaseSubHandlingData.IsValid">
            <summary>
            Returns true if this <see cref="T:GTA.BaseSubHandlingData"/> is valid.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.BaseSubHandlingData"/> is valid; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.BaseSubHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same sub handling data as this <see cref="T:GTA.BaseSubHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same sub handling data as this <see cref="T:GTA.BaseSubHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BaseSubHandlingData.op_Equality(GTA.BaseSubHandlingData,GTA.BaseSubHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BaseSubHandlingData"/>s refer to the ub handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BaseSubHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BaseSubHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same sub handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BaseSubHandlingData.op_Inequality(GTA.BaseSubHandlingData,GTA.BaseSubHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BaseSubHandlingData"/>s don't refer to the same car handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BaseSubHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BaseSubHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same sub handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.BikeHandlingData">
            <summary>
            Represents the bike handling data class for <c>CBikeHandlingData</c>, which is for motorcycles, quad bikes (also trikes), and bicycles.
            All the values this class exposes are available in all game versions.
            </summary>
        </member>
        <member name="P:GTA.BikeHandlingData.LeanForwardCenterOfMassMultiplier">
            <summary>
            Gets or sets the value indicating how much the center of mass is shifted by leaning forward in meters.
            </summary>
            <value>
            The value indicating how much the center of mass is shifted by leaning forward in meters.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.LeanForwardForceMultiplier">
            <summary>
            Gets or sets the value indicating how much force is applied when leaning forward.
            </summary>
            <value>
            The value indicating how much force is applied when leaning forward.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.LeanBackCenterOfMassMultiplier">
            <summary>
            Gets or sets the value indicating how much the center of mass is shifted by leaning backward in meters.
            </summary>
            <value>
            The value indicating how much the center of mass is shifted by leaning backward in meters.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.LeanBackwardForceMultiplier">
            <summary>
            Gets or sets the value indicating how much force is applied when leaning backward.
            </summary>
            <value>
            The value indicating how much force is applied when leaning backward.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.MaxBankAngle">
            <summary>
            Gets or sets The max angle of bike lean when cornering in radians.
            </summary>
            <value>
            The max angle of bike lean when cornering in radians.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.FullAnimAngle">
            <summary>
            Gets or sets the angle where the driver's body starts to fully lean when cornering.
            </summary>
            <value>
            The angle where the driver's body starts to fully lean when cornering in radians.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.DesLeanReturnFraction">
            <summary>
            Gets or sets the value indicating how slowly the driver body lean changes by steering.
            </summary>
            <value>
            The value indicating how much slowly the driver body lean changes by steering.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.StickLeanMultiplier">
            <summary>
            Gets or sets the multiplier indicating how quickly the bike leans by steering.
            </summary>
            <value>
            The multiplier indicating how quickly the bike leans by steering.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.BrakingStabilityMultiplier">
            <summary>
            Gets or sets the value for brake bias/balance value. If this value is negative, the bike will have rear brake bias.
            This value has effect even when there is no steer input.
            </summary>
            <value>
            The value for brake bias/balance value.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.InAirSteerMultiplier">
            <summary>
            Gets or sets the strength multiplier of in-air steering (which applies when no tires are touching surface).
            This value should be negative to let the bike steer just like when it's on ground and let the bike upside up when the driver is not leaning forward or backward.
            Pitch input still works even when this value is zero, but the bike will try to get upside down when this value is positive.
            </summary>
            <value>
            The value for brake bias/balance value.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.WheelieBalancePoint">
            <summary>
            Gets or sets the value that affects how much x-axis rotation is needed in radians before an additional positive x-Axis angular force applies to the bike, which will keep the bike from easily wheelieing more.
            Only affects when the bike is wheelieing. Should be positive to not let the bike easily wheelie more than a certain angle, but easily wheelie to the specified angle.
            The more the difference is, the more positive x-Axis angular force the bike will receive.
            </summary>
            <remarks>
            The formula <c>(float)Math.Asin(Vector3.Dot(Vehicle.ForwardVector, VehicleWheel.SurfaceNormalVector)) - fWheelieBalancePoint</c> (where the deg to rad conversion has been already applied to <c>fWheelieBalancePoint</c>) determines whether to apply negative x-Axis angular force.
            If the result is more than 0.05, an additional positive x-Axis angular force will be applied.
            </remarks>
            <value>
            The value that affects how much x-axis rotation is needed before an additional positive x-Axis angular force applies to the bike when the bike is wheelieing in radians.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.StoppieBalancePoint">
            <summary>
            Gets or sets the value that affects how much x-axis rotation is needed in radians before an additional negative x-Axis angular force applies to the bike, which will keep the bike from easily stoppieing more.
            Only affects when the bike is stoppieing. Should be negative to not let the bike stoppie wheelie more than a certain angle, but easily stoppie to the specified angle.
            The more the difference is, the more negative x-Axis angular force the bike will receive.
            </summary>
            <remarks>
            The formula <c>(float)Math.Asin(Vehicle.ForwardVector.Z) - fStoppieBalancePoint</c> (where the deg to rad conversion has been already applied to <c>fStoppieBalancePoint</c>) determines whether to apply negative x-Axis angular force.
            If the result is less than -0.05, an additional negative x-Axis angular force will be applied. Unlike wheelieing, the normal vector of the wheel does not affect in physics for stopping at all.
            </remarks>
            <value>
            The value that affects how much x-axis rotation is needed before an additional negative x-Axis angular force applies to the bike when the bike is stoppieing in radians.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.WheelieSteerMultiplier">
            <summary>
            Gets or sets the multiplier for steering when wheelieing. Should be negative.
            </summary>
            <value>
            The multiplier for steering when wheelieing.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.RearBalanceMultiplier">
            <summary>
            Gets or sets An unknown multiplier for rear balance that have effects only when wheelieing. Should be positive.
            </summary>
            <value>
            An unknown multiplier for rear balance that have effects only when wheelieing.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.FrontBalanceMultiplier">
            <summary>
            Gets or sets An unknown multiplier for front balance that have effects only when stopping. Should be positive.
            </summary>
            <value>
            An unknown multiplier for front balance that have effects only when stopping.
            </value>
        </member>
        <member name="P:GTA.BikeHandlingData.BikeOnStandLeanAngle">
            <summary>
            Gets or sets the lean angle in radians indicating how much the bike should be lean on stand or in very low speed. Should be negative to match the standing animation.
            </summary>
            <value>
            The lean angle in radians indicating how much the bike should be lean on stand or in very low speed.
            </value>
        </member>
        <member name="M:GTA.BikeHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same bike handling data as this <see cref="T:GTA.BikeHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same bike handling data as this <see cref="T:GTA.BikeHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BikeHandlingData.op_Equality(GTA.BikeHandlingData,GTA.BikeHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BikeHandlingData"/>s refer to the same bike handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BikeHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BikeHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same bike handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BikeHandlingData.op_Inequality(GTA.BikeHandlingData,GTA.BikeHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BikeHandlingData"/>s don't refer to the same bike handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BikeHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BikeHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same bike handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.BoatHandlingData">
            <summary>
            Represents the boat handling data class for <c>CBoatHandlingData</c>, which is for boats.
            </summary>
        </member>
        <member name="P:GTA.BoatHandlingData.AquaplanePushWaterMultiplier">
            <summary>
            Gets or sets the multiplier value that indicates how much water wave the boat produce.
            Faster boat move will create more water wave.
            </summary>
            <remarks>
            This value multiplies a water push value that is typically between <c>0f</c> and <c>600f</c> to calculate how much water wave should be produced.
            <see cref="P:GTA.BoatHandlingData.AquaplanePushWaterCap"/> will cap the multiplied value.
            </remarks>
            <value>
            The multiplier value that indicates how much water wave the boat produce.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.AquaplanePushWaterCap">
            <summary>
            Gets or sets the multiplier value that indicates how much water wave the boat can produce.
            </summary>
            <value>
            The multiplier value that indicates how much water wave the boat can produce.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.AquaplanePushWaterApply">
            <summary>
            Gets or sets the multiplier value that indicates how much water the boat pushes by moving through the water.
            </summary>
            <value>
            The multiplier value that indicates how much water the boat pushes by moving through the water.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.RudderForce">
            <summary>
            Gets or sets the rudder force factor. Moderately high value like <c>10f</c> will make the boat easier to steer.
            </summary>
            <value>
            The rudder force factor
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.RudderOffsetSubmerge">
            <summary>
            Gets or sets the vertical offset of propeller from bone when determining if submerged.
            </summary>
            <value>
            The vertical offset of propeller from bone when determining if submerged.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.RudderOffsetForce">
            <summary>
            Gets or sets the vertical offset of propeller from bone when applying force.
            </summary>
            <value>
            The vertical offset of propeller from bone when applying force.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.VectorTurnResistance">
            <summary>
            Gets or sets the resistance value to rotation. the lower the value is, the harder to rotate.
            </summary>
            <remarks>
            Set a <see cref="T:GTA.Math.Vector3"/> with some components zero will let the boat rotate without resistance in corresponding axes.
            </remarks>
            <value>
            The resistance value to rotation.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.DragCoefficient">
            <summary>
            Gets or sets the drag coefficient on the water.
            </summary>
            <value>
            The drag coefficient  on the water.
            </value>
        </member>
        <member name="P:GTA.BoatHandlingData.KeelSphereSize">
            <summary>
            Gets or sets the keel sphere size for physics.
            </summary>
            <value>
            The keel sphere size for physics.
            </value>
        </member>
        <member name="M:GTA.BoatHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same boat handling data as this <see cref="T:GTA.BoatHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same boat handling data as this <see cref="T:GTA.BoatHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BoatHandlingData.op_Equality(GTA.BoatHandlingData,GTA.BoatHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BoatHandlingData"/>s refer to the same boat handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BoatHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BoatHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same boat handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.BoatHandlingData.op_Inequality(GTA.BoatHandlingData,GTA.BoatHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.BoatHandlingData"/>s don't refer to the boat handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.BoatHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.BoatHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same boat handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.CarHandlingData">
            <summary>
            <para>
            Represents the car handling data class for <c>CCarHandlingData</c>.
            </para>
            <para>
            Only <c>fBackEndPopUpCarImpulseMult</c>, <c>fBackEndPopUpBuildingImpulseMult</c>, and <c>fBackEndPopUpMaxDeltaSpeed</c> are available in all the versions prior to v1.0.1365.1.
            The other values are available only in v1.0.1365.1 or later game versions.
            </para>
            </summary>
        </member>
        <member name="P:GTA.CarHandlingData.ToeFront">
            <summary>
            Gets or sets the toe of the vehicle's front wheels in radians. Positive value makes front wheels toe-in and Negative value makes front wheels toe-out.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The toe of the vehicle's front wheels in radians.
            </value>
        </member>
        <member name="P:GTA.CarHandlingData.ToeRear">
            <summary>
            Gets or sets the toe of the vehicle's rear wheels in radians. Positive value makes rear wheels toe-in and Negative value makes rear wheels toe-out.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The toe of the vehicle's rear wheels in radians.
            </value>
        </member>
        <member name="P:GTA.CarHandlingData.CamberFront">
            <summary>
            Gets or sets the camber of the vehicle's front wheels.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The camber of the vehicle's front wheels in radians.
            </value>
        </member>
        <member name="P:GTA.CarHandlingData.CamberRear">
            <summary>
            Gets or sets the camber of the vehicle's rear wheels.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The camber of the vehicle's rear wheels in radians.
            </value>
        </member>
        <member name="P:GTA.CarHandlingData.Castor">
            <summary>
            Gets or sets the castor angle of the vehicle's wheels in radians.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The castor angle of the vehicle's wheels in radians.
            </value>
        </member>
        <member name="P:GTA.CarHandlingData.EngineResistance">
            <summary>
            Gets or sets the engine resistance. The higher the value is, the slower the vehicles accelerate.
            Only available in v1.0.1365.1 or later game versions.
            </summary>
            <value>
            The engine resistance.
            </value>
        </member>
        <member name="M:GTA.CarHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same car handling data as this <see cref="T:GTA.CarHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same car handling data as this <see cref="T:GTA.CarHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.CarHandlingData.op_Equality(GTA.CarHandlingData,GTA.CarHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.CarHandlingData"/>s refer to the same car handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.CarHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.CarHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same car handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.CarHandlingData.op_Inequality(GTA.CarHandlingData,GTA.CarHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.CarHandlingData"/>s don't refer to the same car handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.CarHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.CarHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same car handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.FlyingHandlingData">
            <summary>
            <para>
            Represents the flying handling data class for <c>CFlyingHandlingData</c>, which is for aircraft.
            </para>
            </summary>
        </member>
        <member name="P:GTA.FlyingHandlingData.Thrust">
            <summary>
            Gets or sets the thrust power value.
            </summary>
            <value>
            The thrust power value.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.ThrustFallOff">
            <summary>
            Gets or sets the thrust powerloss value with speed.
            </summary>
            <value>
            The thrust powerloss value with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.ThrustVectoring">
            <summary>
            Gets or sets the thrust direction adjustment value based on steering. Higher value makes the airplane more sensitive.
            </summary>
            <value>
            The thrust direction adjustment value based on steering.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.YawMultiplier">
            <summary>
            Gets or sets the yaw input strength, which scales up with speed.
            </summary>
            <value>
            The yaw input strength, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.YawStabilize">
            <summary>
            Gets or sets the yaw resistance value, which scales up with speed.
            </summary>
            <value>
            The yaw resistance value, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.SideSlipMultiplier">
            <summary>
            Gets or sets the sideways resistance, which scales up with speed.
            </summary>
            <value>
            The sideways resistance, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.RollMultiplier">
            <summary>
            Gets or sets the roll input strength, which scales up with speed.
            </summary>
            <value>
            The roll input strength, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.RollStabilize">
            <summary>
            Gets or sets the roll resistance value, which scales up with speed.
            </summary>
            <value>
            The roll resistance value, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.PitchMultiplier">
            <summary>
            Gets or sets the pitch input strength, which scales up with speed.
            </summary>
            <value>
            The pitch input strength, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.PitchStabilize">
            <summary>
            Gets or sets the pitch resistance value, which scales up with speed.
            </summary>
            <value>
            The pitch resistance value, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.FormLiftMultiplier">
            <summary>
            Gets or sets the base lift factor that's independent from wing's attack angle.
            Affects the tendency to point relative upwards with speed.
            </summary>
            <value>
            The base lift factor that's independent from wing's attack angle.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.AttackLiftMultiplier">
            <summary>
            Gets or sets the lift factor of the wing's attack angle while rising, which scales up with speed.
            </summary>
            <value>
            The lift factor of the wing's attack angle while rising, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.AttackDiveMultiplier">
            <summary>
            Gets or sets the lift factor of the wing's attack angle while diving, which scales up with speed.
            </summary>
            <value>
            The lift factor of the wing's attack angle while diving, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.GearDownDragV">
            <summary>
            Gets or sets the extra drag when the gear (and in some planes, the flaps too) is down, which scales up with speed.
            </summary>
            <value>
            The extra drag when the gear (and in some planes, the flaps too) is down, which scales up with speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.GearDownLiftMultiplier">
            <summary>
            Gets or sets the Lift multiplier when the gear (and in some planes, the flaps too) is down.
            </summary>
            <value>
            The Lift multiplier when the gear (and in some planes, the flaps too) is down.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.WindMultiplier">
            <summary>
            Gets or sets the wind influence factor.
            </summary>
            <value>
            The wind influence factor.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.MoveResistance">
            <summary>
            Gets or sets a form of air drag/resistance factor, which is separate from <see cref="P:GTA.HandlingData.InitialDragCoefficient"/> and works in a less natural way.
            It is advised to change <see cref="P:GTA.HandlingData.InitialDragCoefficient"/> to adjust the air drag behavior instead.
            </summary>
            <value>
            A form of air drag/resistance factor, which is separate from <see cref="P:GTA.HandlingData.InitialDragCoefficient"/>.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.VectorTurnResistance">
            <summary>
            Gets or sets the resistance value to rotation. the lower the value is, the less natural wobble.
            </summary>
            <remarks>
            When you set a <see cref="T:GTA.Math.Vector3"/> with some components zero, the airplane will behave the same in corresponding axes before the new value is set.
            </remarks>
            <value>
            The resistance value to rotation.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.VectorSpeedResistance">
            <summary>
            Gets or sets an unknown resistance value to rotation or speed.
            </summary>
            <remarks>
            When you set a <see cref="T:GTA.Math.Vector3"/> with some components zero, the airplane will behave the same in corresponding axes before the new value is set.
            </remarks>
            <value>
            An unknown resistance value to rotation or speed.
            </value>
        </member>
        <member name="P:GTA.FlyingHandlingData.ExtraLiftWithRoll">
            <summary>
            Gets or sets the lift factor that will be made by rolling. Higher value will make more force in local x-axis.
            Only available in v1.0.1180.2 or later game versions.
            </summary>
            <value>
            The lift factor that will be made by rolling.
            </value>
        </member>
        <member name="M:GTA.FlyingHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same flying handling data as this <see cref="T:GTA.FlyingHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same flying handling data as this <see cref="T:GTA.FlyingHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.FlyingHandlingData.op_Equality(GTA.FlyingHandlingData,GTA.FlyingHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.FlyingHandlingData"/>s refer to the same flying handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.FlyingHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.FlyingHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same flying handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.FlyingHandlingData.op_Inequality(GTA.FlyingHandlingData,GTA.FlyingHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.FlyingHandlingData"/>s don't refer to the same flying handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.FlyingHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.FlyingHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same flying handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.HandlingData">
            <summary>
            <para>This class has most regular handling data. Currently compatible with 1.0.2060.0 or later.</para>
            <para>
            Note that this class gets data from or sets data to the <c>CHandlingData</c> instance as is, and thus not all the handling values don't match the equivalent values in the <c>handling.meta</c> file.
            The game multiplies or divides some values after reading values from the <c>handling.meta</c> file.
            </para>
            </summary>
        </member>
        <member name="P:GTA.HandlingData.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.HandlingData"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.HandlingData.IsValid">
            <summary>
            Returns true if this <see cref="T:GTA.HandlingData"/> is valid.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.HandlingData"/> is valid; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.HandlingData.AntiRollBarBiasFront">
            <summary>
            Gets or sets the bias between front and rear for the anti-roll bar.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The anti roll bar bias front. 0.0f is fully front, 2.0f is fully rear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.AntiRollBarForce">
            <summary>
            Gets or sets the spring constant that is transmitted to the opposite wheel when under compression.
            Larger numbers result in a larger force being applied.
            </summary>
            <value>
            The anti roll bar force.
            </value>
        </member>
        <member name="P:GTA.HandlingData.ClutchChangeRateScaleDownShift">
            <summary>
            Gets or sets the clutch speed multiplier on down shifts.
            </summary>
            <value>
            The clutch speed multiplier on down shifts.
            </value>
        </member>
        <member name="P:GTA.HandlingData.ClutchChangeRateScaleUpShift">
            <summary>
            Gets or sets the clutch speed multiplier on up shifts.
            </summary>
            <value>
            The clutch speed multiplier on up shifts.
            </value>
        </member>
        <member name="P:GTA.HandlingData.DownForceModifier">
            <summary>
            Gets or sets the amount of downforce applied to the vehicle.
            </summary>
            <value>
            The amount of downforce applied to the vehicle.
            </value>
        </member>
        <member name="P:GTA.HandlingData.DriveBiasFront">
            <summary>
            <para>Gets or sets how much the vehicle gives rear axles force. The rest of the force will be given to front axles. This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.</para>
            <para>0.0 is rear wheel drive, 2.0 is front wheel drive, and any value between 0.01 and 0.199 is four wheel drive (1.0 give both front and rear axles equal force, being perfect 4WD.)</para>
            </summary>
            <value>
            The percent the vehicle gives rear axles force (between 0.0 to 2.0).
            </value>
        </member>
        <member name="P:GTA.HandlingData.DriveInertia">
            <summary>
            Gets or sets the drive inertia that determines how fast the engine acceleration is.
            </summary>
            <value>
            The drive inertia.
            </value>
            <remarks>
            If you want a vehicle with high torque but slow acceleration (e.g. a truck), lower the driver inertia and specify a high drive force.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.InitialDragCoefficient">
            <summary>
            Gets or sets the drag coefficient.
            </summary>
            <value>
            The drag coefficient.
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveForce">
            <summary>
            Gets or sets the power engine produces in top gear.
            </summary>
            <value>
            The power engine that produces in top gear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveGears">
            <summary>
            Gets or sets the number of gears (excluding reverse).
            </summary>
            <value>
            The number of gears (excluding reverse).
            </value>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveMaxVelocity">
            <summary>
            Determines the speed at redline in high gear in m/s that provides <c>CTransmission</c> of new
            <see cref="T:GTA.Vehicle"/>s with this <see cref="T:GTA.HandlingData"/>; Controls the final drive of the vehicle's
            gearbox.
            </summary>
            <value>
            the speed at redline in high gear.
            </value>
            <remarks>
            <para>
            This value is initially set to <c>[the value of `fInitialDriveMaxFlatVel`] / 3.6f * 1.2f</c>, where
            <c>fInitialDriveMaxFlatVel</c> is read from a <c>handling.meta</c>.
            </para>
            <para>
            Setting this value does not guarantee the vehicle will reach this speed. Setting this value does not
            change the speed at redline in high gear of existing <see cref="T:GTA.Vehicle"/>s with this
            <see cref="T:GTA.HandlingData"/>, as it is the <c>CTransmission</c> on a <c>CVehicle</c> that actually
            determines the speed at redline in high gear of a <see cref="T:GTA.Vehicle"/>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.InitialDriveMaxFlatVelocity">
            <summary>
            Gets or sets the initial drive max velocity in m/s.
            This is read when <see cref="T:GTA.Vehicle"/>s are driving, but it is unknown that how exactly this value
            affects.
            </summary>
            <value>
            the speed at redline in high gear in m/s.
            </value>
            <remarks>
            This value is initially set to <c>[the value of `fInitialDriveMaxFlatVel`] / 3.6f</c>, where
            <c>fInitialDriveMaxFlatVel</c> is read from a <c>handling.meta</c>.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.LowSpeedTractionLossMultiplier">
            <summary>
            How much traction is reduced at low speed, 0.0 means normal traction. It affects mainly car burnout (spinning wheels when car doesn't move) when pressing gas.
            Decreasing value will cause less burnout, less sliding at start. However, the higher value, the more burnout car gets.
            </summary>
            <value>
            How much traction is reduced at low speed.
            </value>
        </member>
        <member name="P:GTA.HandlingData.Mass">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>
            The weight in Kilograms.
            </value>
        </member>
        <member name="P:GTA.HandlingData.OilVolume">
            <summary>
            Gets or sets the amount of oil.
            </summary>
            <value>
            The amount of oil.
            </value>
        </member>
        <member name="P:GTA.HandlingData.PercentSubmerged">
            <summary>
            Gets or sets the percentage of the "floating height" after it falls into the water, before sinking.
            </summary>
            <value>
            The percentage between 0 and 1.
            </value>
            <remarks>
            The default value for vanilla land vehicles is 0.85. The value will stop sinking the vehicle to float for a moment before sinking.
            An invalid number will cause the vehicle to sink without the driver drowning.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.PetrolTankVolume">
            <summary>
            Gets or sets the amount of petrol that will leak after damaging a vehicle's tank.
            </summary>
            <value>
            The amount of petrol.
            </value>
        </member>
        <member name="P:GTA.HandlingData.PetrolConsumptionRate">
            <summary>
            Gets or Sets the rate at which a vehicle consumes petrol (gasoline).
            </summary>
            <value>
            The petrol consumption rate.
            </value>
            <remarks>
            <para>The default value in vanilla handling.meta files is 0.5f.</para>
            <para>There is a good chance that this attribute may be used in missions where there is a script that changes the gas level of the vehicle.</para>
            <para>It should probably be used more frequently to adjust how fast the vehicle's petrol leaks.</para>
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.PopUpLightRotation">
            <summary>
            Gets or sets the rotation values in degree the parts pop-up headlights needs to be rotated when headlights are on.
            </summary>
            <value>
            The rotation values in degree. Can be negative.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SteeringLock">
            <summary>
            <para>
            Gets or sets a value that multiplies the game's calculation of the angle of the steer wheel will turn while at full turn in radians.
            Steering lock is directly related to over/under-steer.
            </para>
            <para>When <see cref="T:GTA.HandlingData"/> instances are initialized, the game converts the value in degrees read from <c>handling.meta</c> to radians before this value is initialized.</para>
            </summary>
            <value>
            The value that multiplies the game's calculation of the angle of the steer wheel in radians, between 0.01 and above.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionBiasFront">
            <summary>
            Gets or sets the damping scale bias between front and rear wheels.
            This value determines which suspension is stronger, front or rear.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The suspension bias front.
            </value>
            <remarks>
            if more wheels at back (e.g. trucks), front suspension should be stronger.
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.SuspensionCompressionDamping">
            <summary>
            Gets or sets the damping during strut compression.
            This value will be set to the equivalent value in the <c>handling.meta</c> divided by 10 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The damping during strut compression.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionForce">
            <summary>
            Gets or sets the suspension force.
            Lower limit for zero force at full extension is calculated using (1.0f / (force * number of wheels)).
            </summary>
            <value>
            The suspension force.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionLowerLimit">
            <summary>
            Gets or sets how far the wheels can move down from their original position.
            </summary>
            <value>
            The suspension lower limit.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionRaise">
            <summary>
            Gets or sets the adjustment from artist positioning.
            </summary>
            <value>
            The suspension raise.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionReboundDamping">
            <summary>
            Gets or sets the damping during strut rebound.
            This value will be set to the equivalent value in the <c>handling.meta</c> divided by 10 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The damping during strut rebound.
            </value>
        </member>
        <member name="P:GTA.HandlingData.SuspensionUpperLimit">
            <summary>
            Gets or sets how far the wheels can move up from their original position.
            </summary>
            <value>
            The suspension upper limit.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionBiasFront">
            <summary>
            Gets or sets the value that determines the distribution of traction from front to rear.
            This value will be set to the equivalent value in the <c>handling.meta</c> multiplied by 2 when <see cref="T:GTA.HandlingData"/> instances are initialized.
            </summary>
            <value>
            The value that determines distribution of traction from front to rear.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionLossMultiplier">
            <summary>
            Gets or sets how much traction is affected by material grip differences from 1.0f.
            </summary>
            <value>
            The traction loss multiplier.
            </value>
        </member>
        <member name="P:GTA.HandlingData.TractionSpringDeltaMax">
            <summary>
            Gets or sets the maximum distance for traction spring.
            </summary>
            <value>
            The traction loss multiplier.
            </value>
        </member>
        <member name="P:GTA.HandlingData.WeaponDamageScaledToVehicleHealthMultiplier">
            <summary>
            Gets of Sets the multiplier for how much damage a vehicle takes from weapons.
            </summary>
            <value>
            The weapon damage scaling multiplier.
            </value>
            <remarks>
            <para>The default value in vanilla handling.meta files is 0.5f.</para>
            <para>This attribute scales the amount of damage a vehicle takes based on its remaining health. A vehicle that is nearly destroyed will take less damage from weapons than a fully healthy vehicle. Changing this attribute can affect the vehicle's durability in combat situations.</para>
            </remarks>
        </member>
        <member name="P:GTA.HandlingData.BikeHandlingData">
            <summary>Gets the <see cref="T:GTA.BikeHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.BikeHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a bike handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.FlyingHandlingData">
            <summary>Gets the non-vertical <see cref="T:GTA.FlyingHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A non-vertical <see cref="T:GTA.FlyingHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a non-vertical flying handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.VerticalFlyingHandlingData">
            <summary>Gets the vertical <see cref="T:GTA.FlyingHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.FlyingHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a vertical flying handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.BoatHandlingData">
            <summary>Gets the vertical <see cref="T:GTA.BoatHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.BoatHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a boat handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.SeaPlaneHandlingData">
            <summary>Gets the vertical <see cref="T:GTA.SeaPlaneHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.SeaPlaneHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a sea plane handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.SubmarineHandlingData">
            <summary>Gets the vertical <see cref="T:GTA.SubmarineHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.SubmarineHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a submarine handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.TrailerHandlingData">
            <summary>Gets the vertical <see cref="T:GTA.TrailerHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A <see cref="T:GTA.TrailerHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a trailer handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.CarHandlingData">
            <summary>Gets the <see cref="T:GTA.CarHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A vertical <see cref="T:GTA.CarHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a car handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="P:GTA.HandlingData.VehicleWeaponHandlingData">
            <summary>Gets the <see cref="T:GTA.VehicleWeaponHandlingData"/> of this <see cref="T:GTA.HandlingData"/>.</summary>
            <value>A vertical <see cref="T:GTA.VehicleWeaponHandlingData"/> of the <see cref="T:GTA.HandlingData"/>.</value>
            <remarks>If the <see cref="T:GTA.HandlingData"/> does not have a vehicle weapon handling data, this property returns <see langword="null"/>.</remarks>
        </member>
        <member name="T:GTA.SeaPlaneHandlingData">
            <summary>
            Represents the sea plane handling data class for <c>CSeaPlaneHandlingData</c>, which is for sea planes.
            </summary>
        </member>
        <member name="P:GTA.SeaPlaneHandlingData.PontoonDragCoefficient">
            <summary>
            Gets or sets the coefficient that adds drag to the pontoon of the sea plane when travelling on water in a similar way to the vehicle's initial drag.
            </summary>
            <value>
            The coefficient that adds drag to the pontoon of the sea plane when travelling on water in a similar way to the vehicle's initial drag.
            </value>
        </member>
        <member name="P:GTA.SeaPlaneHandlingData.PontoonVerticalDampingCoefficientUp">
            <summary>
            Gets or sets the damping coefficient against positive z-direction.
            Higher value will float more stronger when travelling on water.
            </summary>
            <value>
            The damping coefficient against positive z-direction.
            </value>
        </member>
        <member name="P:GTA.SeaPlaneHandlingData.PontoonVerticalDampingCoefficientDown">
            <summary>
            Gets or sets the damping coefficient against negative z-direction.
            Higher value will sink more stronger when travelling on water.
            </summary>
            <value>
            The damping coefficient against negative z-direction.
            </value>
        </member>
        <member name="M:GTA.SeaPlaneHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same sea plane handling data as this <see cref="T:GTA.SeaPlaneHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same sea plane handling data as this <see cref="T:GTA.SeaPlaneHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SeaPlaneHandlingData.op_Equality(GTA.SeaPlaneHandlingData,GTA.SeaPlaneHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SeaPlaneHandlingData"/>s refer to the same sea plane handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SeaPlaneHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SeaPlaneHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same sea plane handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SeaPlaneHandlingData.op_Inequality(GTA.SeaPlaneHandlingData,GTA.SeaPlaneHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SeaPlaneHandlingData"/>s don't refer to the sea plane handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SeaPlaneHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SeaPlaneHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same sea plane handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.SpecialFlightHandlingData">
            <summary>
            Represents the special flight handling data class for <c>CSpecialFlightHandlingData</c>, which is for vehicles that have special flight feature.
            </summary>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.VectorAngularDamping">
            <summary>
            Gets or sets the constant angular damping vector in each axis.
            </summary>
            <value>
            The angular damping vector in each axis.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.VectorAngularDampingMin">
            <summary>
            Gets or sets the angular damping vector in each axis that have effects more when the vehicle is moving faster.
            Not available in v1.0.1290.1 or v1.0.1365.1.
            </summary>
            <value>
            The angular damping vector in each axis that have effects more when the vehicle is moving faster.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.VectorLinearDamping">
            <summary>
            Gets or sets the constant linear damping vector in each axis.
            </summary>
            <value>
            The constant linear damping vector in each axis.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.VectorLinearDampingMin">
            <summary>
            Gets or sets the angular damping vector in each axis that have effects more when the vehicle is moving faster.
            Not available in v1.0.1290.1 or v1.0.1365.1.
            </summary>
            <value>
            The angular damping vector in each axis that have effects more when the vehicle is moving faster.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.RollTorqueScale">
            <summary>
            Gets or sets the roll (local y-axis) torque scale produced by steering.
            </summary>
            <value>
            The roll (local y-axis) torque scale produced by steering.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.YawTorqueScale">
            <summary>
            Gets or sets the yaw (local z-axis) torque scale produced by steering.
            </summary>
            <value>
            The yaw (local z-axis) torque scale produced by steering.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.PitchTorqueScale">
            <summary>
            Gets or sets the pitch (local x-axis) torque scale produced by steering.
            </summary>
            <value>
            The pitch (local x-axis) torque scale produced by steering.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.TransitionDuration">
            <summary>
            Gets or sets the transition duration in seconds.
            </summary>
            <remarks>
            If the value is less than <c>1f / 60f</c> (or <c>1f / (float)(frameRateValue)</c> if the frame rate is more than 60),
            The vehicle does not transform from special flight mode back to normal properly, making wheels not placed in correct positions and wings not retracted.
            </remarks>
            <value>
            The transition duration in seconds.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.HoverVelocityScale">
            <summary>
            Gets or sets the velocity scale the vehicle can produce by hovering.
            </summary>
            <value>
            The velocity scale the vehicle can produce by hovering.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.MinSpeedForThrustFalloff">
            <summary>
            Gets or sets the minimum speed in m/s before thrust falloff will be applied.
            Not available in v1.0.1290.1 or v1.0.1365.1.
            </summary>
            <value>
            The minimum speed in m/s before thrust falloff will be applied.
            </value>
        </member>
        <member name="P:GTA.SpecialFlightHandlingData.BrakingThrustScale">
            <summary>
            Gets or sets the thrust scale for braking.
            Not available in v1.0.1290.1 or v1.0.1365.1.
            </summary>
            <value>
            The thrust scale for braking.
            </value>
        </member>
        <member name="M:GTA.SpecialFlightHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same special flight handling data as this <see cref="T:GTA.SpecialFlightHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same special flight handling data as this <see cref="T:GTA.SpecialFlightHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SpecialFlightHandlingData.op_Equality(GTA.SpecialFlightHandlingData,GTA.SpecialFlightHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SpecialFlightHandlingData"/>s refer to the same special flight handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SpecialFlightHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SpecialFlightHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same special flight handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SpecialFlightHandlingData.op_Inequality(GTA.SpecialFlightHandlingData,GTA.SpecialFlightHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SpecialFlightHandlingData"/>s don't refer to the special flight handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SpecialFlightHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SpecialFlightHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same special flight handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.SubmarineHandlingData">
            <summary>
            Represents the submarine handling data class for <c>CSubmarineHandlingData</c>, which is for submarines.
            </summary>
        </member>
        <member name="P:GTA.SubmarineHandlingData.PitchMultiplier">
            <summary>
            Gets or sets the multiplier value that indicates how fast the submarine rotates in the pitch axis (local x-axis).
            </summary>
            <value>
            The multiplier value that indicates how fast the submarine rotates in the pitch axis (local x-axis).
            </value>
        </member>
        <member name="P:GTA.SubmarineHandlingData.PitchAngle">
            <summary>
            Gets or sets the maximum angle in degrees that indicates how much the submarine can rotate in the pitch axis (local x-axis).
            </summary>
            <value>
            The multiplier value that indicates how much the submarine can rotate in the pitch axis (local x-axis).
            </value>
        </member>
        <member name="P:GTA.SubmarineHandlingData.YawMultiplier">
            <summary>
            Gets or sets the multiplier value that indicates how much the submarine can rotate in the yaw axis (local z-axis).
            </summary>
            <value>
            The multiplier value that indicates how much the submarine can rotate in the yaw axis (local z-axis).
            </value>
        </member>
        <member name="P:GTA.SubmarineHandlingData.DiveSpeed">
            <summary>
            Gets or sets a value that at least have an effect on buoyancy when the submarine has no driver.
            </summary>
            <value>
            A value that at least have an effect on buoyancy when the submarine has no driver.
            </value>
        </member>
        <member name="M:GTA.SubmarineHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same submarine handling data as this <see cref="T:GTA.SubmarineHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same submarine handling data as this <see cref="T:GTA.SubmarineHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SubmarineHandlingData.op_Equality(GTA.SubmarineHandlingData,GTA.SubmarineHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SubmarineHandlingData"/>s refer to the same submarine handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SubmarineHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SubmarineHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same submarine handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.SubmarineHandlingData.op_Inequality(GTA.SubmarineHandlingData,GTA.SubmarineHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.SubmarineHandlingData"/>s don't refer to the submarine handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.SubmarineHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.SubmarineHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same submarine handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.TrailerHandlingData">
            <summary>
            Represents the trailer handling data class for <c>CTrailerHandlingData</c>, which is for trailers.
            </summary>
        </member>
        <member name="P:GTA.TrailerHandlingData.AttachLimitPitch">
            <summary>
            Gets or sets the attach limit angle in degrees that indicates how much the trailer is allowed to lean in the yaw axis (local x-axis).
            </summary>
            <remarks>
            The value will be read only when this trailer starts to get towed.
            </remarks>
            <value>
            The attach limit angle in degrees that indicates how much the trailer is allowed to lean in the yaw axis (local x-axis).
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.AttachLimitRoll">
            <summary>
            Gets or sets the attach limit angle in degrees that indicates how much the trailer is allowed to lean in the roll axis (local y-axis).
            </summary>
            <remarks>
            The value will be read only when this trailer starts to get towed.
            </remarks>
            <value>
            The attach limit angle that in degrees indicates how much the trailer is allowed to lean in the roll axis (local y-axis).
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.AttachLimitYaw">
            <summary>
            Gets or sets the attach limit angle that in degrees indicates how much the trailer is allowed to lean in the yaw axis (local z-axis).
            </summary>
            <remarks>
            The value will be read only when this trailer starts to get towed.
            </remarks>
            <value>
            The attach limit angle that in degrees indicates how much the trailer is allowed to lean in the yaw axis (local z-axis).
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.UprightSpringConstant">
            <summary>
            Gets or sets the upright spring constant that have effects when the trailer is rotated too much in the pitch axis.
            Lower value will make higher spring force. The value should be negative.
            </summary>
            <value>
            The upright spring constant that have effects when the trailer is rotated too much in the pitch axis.
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.UprightDampingConstant">
            <summary>
            Gets or sets the upright damping constant.
            </summary>
            <value>
            The upright damping constant.
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.AttachedMaxDistance">
            <summary>
            Gets or sets the attachment distance constraint max distance.
            Any value less than or equal to zero will default to the old spherical constraint.
            </summary>
            <value>
            The attachment distance constraint max distance.
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.AttachedMaxPenetration">
            <summary>
            Gets or sets the attachment distance constraint max penetration.
            Any value less than or equal to zero will default to the old spherical constraint.
            </summary>
            <value>
            The attachment distance constraint max penetration.
            </value>
        </member>
        <member name="P:GTA.TrailerHandlingData.PositionConstraintMassRatio">
            <summary>
            Gets or sets the value that indicates the trailer should appear either heavier or lighter
            relative to the towing vehicle without actually changing its real mass.
            If less than <c>1f</c>, the trailer will appear heavier.
            </summary>
            <value>
            The value that indicates the trailer should appear either heavier or lighter
            relative to the towing vehicle without actually changing its real mass.
            </value>
        </member>
        <member name="M:GTA.TrailerHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same trailer handling data as this <see cref="T:GTA.TrailerHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same trailer handling data as this <see cref="T:GTA.TrailerHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.TrailerHandlingData.op_Equality(GTA.TrailerHandlingData,GTA.TrailerHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.TrailerHandlingData"/>s refer to the same trailer handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.TrailerHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.TrailerHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same trailer handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.TrailerHandlingData.op_Inequality(GTA.TrailerHandlingData,GTA.TrailerHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.TrailerHandlingData"/>s don't refer to the trailer handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.TrailerHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.TrailerHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same trailer handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.VehicleWeaponHandlingData">
            <summary>
            Represents the vehicle weapon handling data class for <c>CVehicleWeaponHandlingData</c>.
            </summary>
            <remarks>
            <para>
            You can use up to 6 elements per array for weapons and turrets in v1.0.1180.2 or later game versions (although turret arrays can internally contain up to 12 elements).
            In the game versions prior to v1.0.1180.2, you can use up to 4 elements per array for weapons and 3 elements per array for turrets.
            </para>
            <para>
            Resetting vehicle part states will be needed to apply the changes to existing vehicles that use this sub handling data, such as changing vehicle mods or calling <see cref="M:GTA.Vehicle.Repair"/>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.WeaponHash">
            <summary>
            Gets or sets usable vehicle weapon hashes.
            </summary>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.WeaponSeats">
            <summary>
            Gets or sets the seat number indices that can control the weapons.
            For example, when <see cref="F:GTA.VehicleSeat.Passenger"/> is set at index 1,
            the <see cref="T:GTA.Ped"/> on the passenger seat can use the weapon at the index 1 of <see cref="P:GTA.VehicleWeaponHandlingData.WeaponHash"/>.
            </summary>
            <remarks>
            Set <see cref="F:GTA.VehicleSeat.Driver"/> if the weapon hash is not set.
            </remarks>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.WeaponVehicleModType">
            <summary>
            Gets or sets the vehicle mod type values which seats vehicle weapons are related to.
            Setting incorrect values may result in wrong vehicle weapon handling.
            </summary>
            <remarks>
            <para>
            <see cref="F:GTA.VehicleModType.None"/> indicates no mod type is related, which will be set when no value is specified in the <c>handling.meta</c> file.
            </para>
            <para>
            Only available in v1.0.1103.2 or later game versions.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.TurretSpeed">
            <summary>
            Gets or sets the max turret speed in angular speed.
            </summary>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.TurretPitchMin">
            <summary>
            Gets or sets the minimum turret pitch in radians.
            </summary>
        </member>
        <member name="P:GTA.VehicleWeaponHandlingData.TurretPitchMax">
            <summary>
            Gets or sets the maximum turret pitch in radians.
            </summary>
        </member>
        <member name="M:GTA.VehicleWeaponHandlingData.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same vehicle weapon handling data as this <see cref="T:GTA.FlyingHandlingData"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same vehicle weapon handling data as this <see cref="T:GTA.FlyingHandlingData"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.VehicleWeaponHandlingData.op_Equality(GTA.VehicleWeaponHandlingData,GTA.VehicleWeaponHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.VehicleWeaponHandlingData"/>s refer to the same vehicle weapon handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.VehicleWeaponHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.VehicleWeaponHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same vehicle weapon handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.VehicleWeaponHandlingData.op_Inequality(GTA.VehicleWeaponHandlingData,GTA.VehicleWeaponHandlingData)">
            <summary>
            Determines if two <see cref="T:GTA.VehicleWeaponHandlingData"/>s don't refer to the same vehicle weapon handling data.
            </summary>
            <param name="left">The left <see cref="T:GTA.VehicleWeaponHandlingData"/>.</param>
            <param name="right">The right <see cref="T:GTA.VehicleWeaponHandlingData"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same vehicle weapon handling data as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:GTA.HandlingType">
            <summary>
            An Enumeration of all possible sub handling type.
            </summary>
            <remarks>
            You can confirm if the listed names are correct by searching some dumped exe for the hashed values from strings like <c>HANDLING_TYPE_FLYING</c> (without case conversion).
            The exe has the hashed value of <c>HANDLING_TYPE_TRAIN</c>, which is <c>0xE0F200C3</c>, but it does not have a concrete class for train handling data.
            </remarks>
        </member>
        <member name="T:GTA.ScriptedVehicleLightSetting">
            <summary>
            An enumeration of all possible values of scripted vehicle light setting.
            </summary>
        </member>
        <member name="F:GTA.ScriptedVehicleLightSetting.SetVehicleLightsOn">
            <summary>
            Sets vehicle lights on.
            </summary>
        </member>
        <member name="F:GTA.ScriptedVehicleLightSetting.SetVehicleLightsOff">
            <summary>
            Sets vehicle lights off.
            Note that next light switch will turn on the full beam if previous state was beam on (either regular or full).
            </summary>
        </member>
        <member name="F:GTA.ScriptVehicleWheelIndex.Invalid">
            <summary>
            The invalid value for <see cref="P:GTA.VehicleWheel.ScriptIndex"/>.
            Do not directly use this value for native functions.
            </summary>
        </member>
        <member name="F:GTA.ScriptVehicleWheelIndex.BikeFront">
            <remarks>
            Internally specifies the same wheel index as <see cref="F:GTA.ScriptVehicleWheelIndex.CarFrontLeft"/>.
            <see cref="P:GTA.VehicleWheel.ScriptIndex"/> will never return this value when you get a <see cref="T:GTA.VehicleWheel"/>
            via <see cref="P:GTA.VehicleWheelCollection.Item(GTA.VehicleWheelBoneId)"/> and will return <see cref="F:GTA.ScriptVehicleWheelIndex.CarFrontLeft"/> instead.
            </remarks>
        </member>
        <member name="F:GTA.ScriptVehicleWheelIndex.BikeRear">
            <remarks>
            Internally specifies the same wheel index as <see cref="F:GTA.ScriptVehicleWheelIndex.CarRearLeft"/>.
            <see cref="P:GTA.VehicleWheel.ScriptIndex"/> will never return this value when you get a <see cref="T:GTA.VehicleWheel"/>
            via <see cref="P:GTA.VehicleWheelCollection.Item(GTA.VehicleWheelBoneId)"/> and will return <see cref="F:GTA.ScriptVehicleWheelIndex.CarRearLeft"/> instead.
            </remarks>
        </member>
        <member name="M:GTA.Vehicle.Repair">
            <summary>
            Restores the health of this <see cref="T:GTA.Vehicle"/> and fixes any damage instantaneously.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.Explode">
            <summary>
            Explodes this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Vehicle"/> exists.
            You should ensure <see cref="T:GTA.Vehicle"/>s still exist before manipulating them or getting some values for them on every tick, since some native functions may crash the game if invalid entity handles are passed.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Vehicle"/> exists; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:GTA.Vehicle.DirtLevel">
            <summary>
            Gets or sets dirt level of this <see cref="T:GTA.Vehicle"/> between 0.0 (clean) to 15.0 (dirty).
            </summary>
        </member>
        <member name="P:GTA.Vehicle.EnvEffLevel">
            <summary>
            Gets or sets the opacity of the EnvEff texture on this <see cref="T:GTA.Vehicle"/> between 0.0 (transparent) and 1.0 (opaque).
            </summary>
        </member>
        <member name="M:GTA.Vehicle.SetHydraulicsControl(System.Boolean)">
            <summary>
            If disabled, any raised hydraulics are lowered and controls are disabled. If enabled, hydraulics are raised if lowered and controls are enabled.
            Only available in v1.0.505.2 or later versions.
            </summary>
            <param name="toggle">Whether to enable this <see cref="T:GTA.Vehicle"/>'s hydraulic controls or not.</param>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if called in game versions earlier than v1.0.505.2.
            </exception>
        </member>
        <member name="M:GTA.Vehicle.ForceUseAudioGameObject(System.String)">
            <summary>
            Overrides this <see cref="T:GTA.Vehicle"/>'s audio game object with another so the vehicle has different various
            vehicle sounds such as horn, door, suspension, and start sequences.
            </summary>
            <param name="gameObjectName">
            <para>
            The audio game object name. Case insensitive in ASCII characters since the string will be hashed using
            (almost) the same function as <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/> uses.
            </para>
            <para>
            Generally accepts the internal game name of the <see cref="T:GTA.Vehicle"/> to source an audio profile from,
            such as "sentinel" or "deluxe". All vanilla vehicles use unique game audio objects as of v1.0.2944.0
            because none of them have <c>audioNameHash</c> override in vehicles.meta. For mod vehicles, you might
            want to check if <c>audioNameHash</c> is overridden.
            </para>
            <para>
            You can use any names listed as items of any audio type of vehicle, boat, bicycle, aeroplane, helicopter,
            or train. You can find one with the term <c>Item type="[some type]"</c> ("[some type]" can be
            <c>Vehicle</c>, <c>Boat</c>, <c>Bicycle</c>, <c>Aeroplane</c>, <c>Helicopter</c>, <c>Train</c>)
            in <c>game.dat[some number].rel</c> in CodeWalker. "BJXL_ARMENIAN_3" and "STRETCH_MICHAEL_4" are registered
            as the vehicle type for 2 ysc scripts for example and you can use them.
            </para>
            </param>
        </member>
        <member name="P:GTA.Vehicle.IsRegularAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a regular automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibiousAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsSubmarineCar">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a submarine car.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAutomobile">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an automobile.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsRegularQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a regular quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibiousQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsQuadBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a quad bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAmphibious">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an amphibious vehicle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsTrailer">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a trailer.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsPlane">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a plane.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsHelicopter">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a helicopter.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBlimp">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a helicopter.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAircraft">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is an aircraft.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsMotorcycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a motorcycle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBicycle">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a bicycle.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBike">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a bike.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsBoat">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a boat.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a train.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsSubmarine">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is a submarine.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CanPretendOccupants">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> can pretend it has the same <see cref="T:GTA.Ped"/>s.
            Set to <see langword="false"/> to prevent this <see cref="T:GTA.Vehicle"/> from creating new <see cref="T:GTA.Ped"/>s as its occupants.
            </summary>
            <remarks>
            <see cref="T:GTA.Vehicle"/>s do not pretend occupants regardless of this value if <see cref="P:GTA.Entity.PopulationType"/> is set to
            <see cref="F:GTA.EntityPopulationType.Permanent"/> or <see cref="F:GTA.EntityPopulationType.Mission"/>.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.IsStolen">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> was stolen.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsWanted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> is wanted by the police.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> is wanted by the police; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.NeedsToBeHotwired">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> needs to be hotwired to start.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> needs to be hotwired to start; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.PreviouslyOwnedByPlayer">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> was previously owned by a <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> was previously owned by a <see cref="T:GTA.Player"/>; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AllowRappel">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> allows <see cref="T:GTA.Ped"/>s to rappel.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> allows <see cref="T:GTA.Ped"/>s to rappel; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanStandOnTop">
            <summary>
            Gets a value indicating whether <see cref="T:GTA.Ped"/>s can stand on this <see cref="T:GTA.Vehicle"/> regardless of <see cref="T:GTA.Vehicle"/>s speed.
            </summary>
            <value>
            <see langword="true" /> if <see cref="T:GTA.Ped"/>s can stand on this <see cref="T:GTA.Vehicle"/> regardless of <see cref="T:GTA.Vehicle"/>s speed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanJump">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> can jump.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> can jump; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AreExhaustPopsEnabled">
            <summary>
            Sets whether the exhaust of this <see cref="T:GTA.Vehicle"/> will make popping noises.
            </summary>
            <value>
            <see langword="true" /> to enable exhaust popping; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.HasLowerFrictionTires">
            <summary>
            Sets whether this vehicle has low-friction tires equipped.
            Only works on Automobiles, Helicopters, and Planes.
            </summary>
            <value>
            <see langword="true" /> to equip this <see cref="T:GTA.Vehicle"/> with low-friction tires; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.DisplayName">
            <summary>
            Gets the display name of this <see cref="T:GTA.Vehicle"/>.
            <remarks>Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to get the localized name.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.LocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:GTA.Vehicle"/>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassDisplayName">
            <summary>
            Gets the display name of this <see cref="T:GTA.Vehicle"/>s <see cref="T:GTA.VehicleClass"/>.
            <remarks>Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to get the localized class name.</remarks>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassLocalizedName">
            <summary>
            Gets the localized name of this <see cref="T:GTA.Vehicle"/>s <see cref="T:GTA.VehicleClass"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ClassType">
            <summary>
            Gets the class of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Type">
            <summary>
            Gets the type of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.LodMultiplier">
            <summary>
            Gets or sets a lod multiplier for this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <remarks>
            When you try to find an appropriate lod multiplier to set, start by using low values (1.1, 1.5, etc) until the wanted result is achieved.
            Large values are not appropriate and will be expensive to draw.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.HandlingData">
            <summary>
            Gets the handling data attached to this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.BodyHealth">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/>s body health.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.EngineHealth">
            <summary>
            <para>Gets or sets this <see cref="T:GTA.Vehicle"/> engine health.</para>
            <para>
            When this value is less than 0.0, the engine will not work.
            </para>
            <para>
            When this value is between -1000.0 and 0.0 exclusive, the engine is on fire and the value will decrease until it reaches -1000.0.
            While on fire, burning engine "may" set the petrol tank on fire as well, but there's only a chance of this.
            </para>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.PetrolTankHealth">
            <summary>
            <para>Gets or sets this <see cref="T:GTA.Vehicle"/> petrol tank health.</para>
            <para>
            When this value is between -1000.0 and 0.0 exclusive, the petrol tank is on fire and the value will decrease until it reaches -1000.0.
            The <see cref="T:GTA.Vehicle"/> will explode when this health reaches -1000.0.
            </para>
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliEngineHealth">
            <summary>
            Gets or sets the engine health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliMainRotorHealth">
            <summary>
            Gets or sets the main rotor health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HeliTailRotorHealth">
            <summary>
            Gets or sets the tail rotor health for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsRadioEnabled">
            <summary>
            Turns this <see cref="T:GTA.Vehicle"/>s radio on or off.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.RadioStation">
            <summary>
            Sets this <see cref="T:GTA.Vehicle"/>s radio station.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsEngineRunning">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/>s engine is running.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/>s engine is running; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsEngineStarting">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/>s engine is currently starting.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/>s engine is starting; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanEngineDegrade">
            <summary>
            Sets the value indicating whether the aircraft engine of this <see cref="T:GTA.Vehicle"/> can degrade.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.EngineTemperature">
            <summary>
            Gets the engine temperature of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.OilLevel">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> oil level.
            If this value is above zero, this value decreases instead of <see cref="P:GTA.Vehicle.EngineHealth"/> when the engine emits black smoke.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.OilVolume">
            <summary>
            Gets the oil volume of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.FuelLevel">
            <summary>
            Gets or sets this <see cref="T:GTA.Vehicle"/> fuel level.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.PetrolTankVolume">
            <summary>
            Gets the petrol tank volume of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Gears">
            <summary>
            Gets or sets the gears value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HighGear">
            <summary>
            Gets or sets the high gear value of this <see cref="T:GTA.Vehicle"/>.
            The highest acceptable value is 10 since v1.0.1604.0 and is 7 in earlier game versions, so you cannot
            corrupt the memory region for this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the passed value is too high.</exception>
        </member>
        <member name="P:GTA.Vehicle.NextGear">
            <summary>
            Gets or sets the next gear value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CurrentGear">
            <summary>
            Gets or sets the current gear this <see cref="T:GTA.Vehicle"/> is using.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Turbo">
            <summary>
            Gets or sets the current turbo value of this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <remarks>
            Affects the engine performance only when <see cref="F:GTA.VehicleToggleModType.Turbo"/> is installed.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.Clutch">
            <summary>
            Gets or sets the current clutch of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.Throttle">
            <summary>
            Gets or sets the current throttle of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.BrakePower">
            <summary>
            Gets or sets the current brake power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ThrottlePower">
            <summary>
            Gets or sets the current throttle power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.MaxBraking">
            <summary>
            Gets the maximum brake power of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.MaxTraction">
            <summary>
            Gets the maximum traction of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.SetReducedGripLevel(System.Int32)">
            <summary>
            Reduces this <see cref="T:GTA.Vehicle"/>'s current grip level.
            Only works on Automobiles, Helicopters, and Planes.
            Only supported in game versions 1.0.1604.0 or later.
            </summary>
            <param name="level">The level from 0-3 to reduce grip by, with 0 being no reduction and 3 being maximum reduction.</param>
        </member>
        <member name="P:GTA.Vehicle.WheelSpeed">
            <summary>
            Gets the speed the drive wheels are turning at.
            This is the value used for the dashboard speedometers (after being converted to mph).
            </summary>
        </member>
        <member name="P:GTA.Vehicle.ForwardSpeed">
            <summary>
            Sets this <see cref="T:GTA.Vehicle"/>s forward speed.
            </summary>
            <value>
            The forward speed in m/s.
            </value>
        </member>
        <member name="P:GTA.Vehicle.HeliBladesSpeed">
            <summary>
            Gets or sets the blades speed for this heli.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.CurrentRPM">
            <summary>
            Gets or sets the current RPM of this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <value>
            The current RPM between <c>0.0f</c> and <c>1.0f</c>.
            </value>
        </member>
        <member name="P:GTA.Vehicle.Acceleration">
            <summary>
            Gets the acceleration of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.SteeringAngle">
            <summary>
            Gets or sets the steering angle of this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <value>
            The steering angle in degrees.
            </value>
        </member>
        <member name="P:GTA.Vehicle.SteeringScale">
            <summary>
            Gets or sets the steering scale of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAlarmSet">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has an alarm set.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has an alarm set; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsAlarmSounding">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> is sounding its alarm.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> is sounding its alarm; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AlarmTimeLeft">
            <summary>
            Gets or sets time left before this <see cref="T:GTA.Vehicle"/> alarm stops.
            If greater than zero, the vehicle alarm will be sounding.
            The highest acceptable value is 65534.
            </summary>
            <value>
            The time left before this <see cref="T:GTA.Vehicle"/> alarm stops.
            </value>
        </member>
        <member name="M:GTA.Vehicle.StartAlarm">
            <summary>
            Starts sounding the alarm on this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HasSiren">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has a siren.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has a siren; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.CanUseSiren">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> can use a siren.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> can activate a siren; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.TrySetCanUseSiren(System.Boolean)">
            <summary>
            Sets the value that determines this <see cref="T:GTA.Vehicle"/> can use siren if a given <see langword="bool"/> is <see langword="false"/>
            or the <see langword="bool"/> is <see langword="true"/> and <see cref="P:GTA.Vehicle.CanUseSiren"/> returns <see langword="true"/> on the <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="value"></param>
            <returns>Returns <see langword="true"/> if the supplied value can be set.</returns>
        </member>
        <member name="P:GTA.Vehicle.IsSirenActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its siren turned on.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its siren turned on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsSirenSilent">
            <summary>
            Gets or sets a value indicating whether the siren on this <see cref="T:GTA.Vehicle"/> is muted.
            </summary>
            <value>
            <see langword="true" /> if the siren on this <see cref="T:GTA.Vehicle"/> is muted; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsHornEnabled">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its horn enabled.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its horn enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsHornActive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its horn turned on.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its horn turned on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.SoundHorn(System.Int32)">
            <summary>
            Sounds the horn on this <see cref="T:GTA.Vehicle"/>.
            </summary>
            <param name="duration">The duration in milliseconds to sound the horn for.</param>
        </member>
        <member name="P:GTA.Vehicle.AreLightsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its lights on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its lights on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.SetScriptedLightSetting(GTA.ScriptedVehicleLightSetting)">
            <summary>
            Sets scripted vehicle light setting.
            </summary>
            <param name="lightSetting">
            The scripted light setting to set.
            If set to <see cref="F:GTA.ScriptedVehicleLightSetting.SetVehicleLightsOn"/>
            or <see cref="F:GTA.ScriptedVehicleLightSetting.SetVehicleLightsOff"/>, the method will also change non-scripted light states
            (for <see cref="F:GTA.ScriptedVehicleLightSetting.SetVehicleLightsOff"/>, in a bit incomplete way).
            </param>
        </member>
        <member name="P:GTA.Vehicle.AreHighBeamsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its high beams on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its high beams on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsInteriorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its interior lights on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its interior lights on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsSearchLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its search light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its search light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsTaxiLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its taxi light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its taxi light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsLeftIndicatorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its left indicator light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its left indicator light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsRightIndicatorLightOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its right indicator light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its right indicator light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.AreBrakeLightsOn">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> has its brake light on.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has its brake light on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.IsConsideredDestroyed">
            <summary>
            <para>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> is considered destroyed.
            Will be set to <see langword="true"/> when <see cref="T:GTA.Vehicle"/>s are exploded or sinking for a short time.
            </para>
            <para>
            <see cref="P:GTA.Entity.IsDead"/> will return <see langword="true"/> and <see cref="P:GTA.Vehicle.IsDriveable"/> will return <see langword="false"/> if this value is set to <see langword="true"/>.
            Does not affect if this <see cref="T:GTA.Vehicle"/> will rendered scorched.
            </para>
            </summary>
            <remarks>
            Many features of <see cref="T:GTA.Vehicle"/> will be disabled when this value is set to <see langword="true"/>.
            For example, <see cref="T:GTA.Ped"/>s cannot enter <see cref="T:GTA.Vehicle"/>s considered destroyed or start the engines of them. <see cref="T:GTA.Ped"/>s cannot use weapons of them.
            The player cannot unflip <see cref="T:GTA.Vehicle"/>s considered destroyed.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.HasDamageDecals">
            <summary>
            Returns <see langword="true"/> if there are any bang or scuff decals on this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsDriveable">
            <summary>
            Gets the value that indicates whether this <see cref="T:GTA.Vehicle"/> is driveable.
            For the setter, it behaves in the same way as <see cref="P:GTA.Vehicle.IsUndriveable"/> except that this setter negates the value.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Vehicle"/> is not destroyed (<see cref="P:GTA.Vehicle.IsConsideredDestroyed"/>
            returns <see langword="false"/>) and both <see cref="P:GTA.Vehicle.PetrolTankHealth"/> and <see cref="P:GTA.Vehicle.EngineHealth"/> is
            greater than 0.0f; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Vehicle.IsUndriveable">
            <summary>
            Sets the value that indicates whether this <see cref="T:GTA.Vehicle"/> is forced to be undriveable
            (but still enterable).
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAxlesStrong">
            <summary>
            Sets the value that indicates whether this <see cref="T:GTA.Vehicle"/> has strong axles
            so that its axles dont break easily.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.DropsMoneyOnExplosion">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Vehicle"/> drops money when destroyed.
            Only works if the vehicle model is a car, quad bikes or trikes (strictly if the internal vehicle class is CAutomobile or derived class from CAutomobile).
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> drops money when destroyed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.ApplyDamageDeformation(GTA.Math.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Applies damage deformation to this <see cref="T:GTA.Vehicle"/>.
            You might want to pass <paramref name="damage"/> and <paramref name="deformation"/> where the product is
            larger than 5000 to see a observable result.
            </summary>
            <param name="position">The coordinates where the damage is applied to the <see cref="T:GTA.Vehicle"/>.</param>
            <param name="damage">
            Scales how much damage is applied to the <see cref="T:GTA.Vehicle"/>.
            Not known whether the outcome will be exactly the same if this parameter and <paramref name="deformation"/>
            are passed in the reversed order.
            </param>
            <param name="deformation">
            Sets how much the vehicle is deformed by (not exactly a radius parameter).
            Not known whether the outcome will be exactly the same if this parameter and <paramref name="deformation"/>
            are passed in the reversed order.
            </param>
            <param name="localDamage">
            If <see langword="true"/>, this method will apply the damage local to the <see cref="T:GTA.Vehicle"/>'s space.
            If <see langword="false"/>, this method will apply the damage in the world space.
            You would likely set this parameter to <see langword="true"/> in most cases.
            </param>
            <remarks>
            Does not deal damage to any health values.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.IsHandbrakeForcedOn">
            <summary>
            Sets a value indicating whether the Handbrake on this <see cref="T:GTA.Vehicle"/> is forced on.
            </summary>
            <value>
              <see langword="true" /> if the Handbrake on this <see cref="T:GTA.Vehicle"/> is forced on; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.CreatePedOnSeat(GTA.VehicleSeat,GTA.Model)">
            <summary>
            Creates a <see cref="T:GTA.Ped"/> on the specified seat.
            </summary>
            <param name="seat">The seat the new <see cref="T:GTA.Ped"/> will be spawned.</param>
            <param name="model">The model for the new <see cref="T:GTA.Ped"/>.</param>
            <exception cref="T:System.ArgumentException">Another <see cref="T:GTA.Ped"/> already occupies <paramref name="seat"/> of the <see cref="T:GTA.Vehicle"/>.</exception>
            <remarks>Returns <see langword="null"/> if <paramref name="model"/> is not for a <see cref="T:GTA.Ped"/> or it cannot be loaded within one second.</remarks>
        </member>
        <member name="M:GTA.Vehicle.CreateRandomPedOnSeat(GTA.VehicleSeat)">
            <summary>
            Creates a random <see cref="T:GTA.Ped"/> on the specified seat.
            </summary>
            <param name="seat">The seat the new <see cref="T:GTA.Ped"/> will be spawned.</param>
            <exception cref="T:System.ArgumentException">Another <see cref="T:GTA.Ped"/> already occupies <paramref name="seat"/> of the <see cref="T:GTA.Vehicle"/>.</exception>
        </member>
        <member name="P:GTA.Vehicle.ProvidesCover">
            <summary>
            Gets or sets a value indicating whether peds can use this <see cref="T:GTA.Vehicle"/> for cover.
            </summary>
            <value>
              <see langword="true" /> if peds can use this <see cref="T:GTA.Vehicle"/> for cover; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Vehicle.GetRestrictedAmmoCount(System.Int32)">
            <summary>
            <para>
            Gets the current restricted ammo count for a particular vehicle weapon index on this <see cref="T:GTA.Vehicle"/>.
            When the restricted ammo count is set positive, the game will count down with every fire and prevent firing at 0.
            </para>
            <para>
            Not available in v1.0.877.1 or earlier game versions due to absence of members for restricted
            ammo counts in <c>CVehicle</c>.
            Currently not available in v1.0.944.2 due to absence of <c>GET_VEHICLE_WEAPON_RESTRICTED_AMMO</c>.
            </para>
            </summary>
            <param name="vehicleWeaponIndex">
            The weapon index, corresponds to each weapon slot in the vehicle's handling.meta.
            The valid range is between 0 and 5 since the game version v1.0.1180.2, between 0 and 4 in the game version between v1.0.944.2 and v1.0.1103.2.
            you can see what weapon hashes the weapon sub handling data specifies with <see cref="P:GTA.VehicleWeaponHandlingData.WeaponHash"/>.
            </param>
            <returns>
            The current restricted ammo count for specified weapon index if the <see cref="T:GTA.Vehicle"/> exists and the weapon index is valid
            (can be a negative value other than -1); otherwise, -1, which is the same as the default value set when the <see cref="T:GTA.Vehicle"/> just spawned.
            </returns>
            <exception cref="T:GTA.GameVersionNotSupportedException">Thrown when called in v1.0.944.2 or earlier game versions.</exception>
        </member>
        <member name="M:GTA.Vehicle.SetRestrictedAmmoCount(System.Int32,System.Int32)">
            <summary>
            <para>
            Sets the current restricted ammo count for a particular vehicle weapon index on this <see cref="T:GTA.Vehicle"/>.
            </para>
            <para>
            Not available in v1.0.877.1 or earlier game versions due to absence of members for restricted
            ammo counts in <c>CVehicle</c>.
            </para>
            </summary>
            <param name="vehicleWeaponIndex">
            The weapon index, corresponds to each weapon slot in the vehicle's handling.meta.
            The valid range is between 0 and 5 since the game version v1.0.1180.2, between 0 and 4 in the game version between v1.0.944.2 and v1.0.1103.2.
            you can see what weapon hashes the weapon sub handling data specifies with <see cref="P:GTA.VehicleWeaponHandlingData.WeaponHash"/>.
            </param>
            <param name="ammoCount">
            When set positive, will count down with every fire and prevent firing at 0.
            Set -1 (or another negative value) to disable restricted ammo, which will result in the same result as when the <see cref="T:GTA.Vehicle"/> just spawned.
            </param>
            <exception cref="T:GTA.GameVersionNotSupportedException">Thrown when called in v1.0.877.1 or earlier game versions.</exception>
        </member>
        <member name="P:GTA.Vehicle.BombAmmoCount">
            <summary>
            <para>
            Sets the current bomb ammo count on this <see cref="T:GTA.Vehicle"/>, which does not make the game prevent from using bombs
            but can be read/write across scripts.
            </para>
            <para>
            Not available in v1.0.1103.2 or earlier game versions.
            </para>
            </summary>
            <remarks>
            Unlike restricted vehicle ammo (which is game code fired), this is script-fired and manually decremented,
            and only stored in vehicle code for network sync purposes. Therefore, you need to manage this property in your scripts on your own.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.CountermeasureAmmoCount">
            <summary>
            <para>
            Sets the current countermeasure ammo count on this <see cref="T:GTA.Vehicle"/>, which does not make the game prevent from using bombs
            but can be read/write across scripts.
            </para>
            <para>
            Not available in v1.0.1103.2 or earlier game versions.
            </para>
            </summary>
            <remarks>
            Unlike restricted vehicle ammo (which is game code fired), this is script-fired and manually decremented,
            and only stored in vehicle code for network sync purposes. Therefore, you need to manage this property in your scripts on your own.
            </remarks>
        </member>
        <member name="P:GTA.Vehicle.HasForks">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has forks.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has forks; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.HasBombBay">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has a bomb bay.
            </summary>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has a bomb bay; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:GTA.Vehicle.OpenBombBay">
            <summary>
            Opens the bomb bay of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.CloseBombBay">
            <summary>
            Closes the bomb bay of this <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.SetHeliYawPitchRollMult(System.Single)">
            <summary>
            Sets the heli control lagging scalar.
            The control lags more with smaller value.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.DropCargobobHook(GTA.CargobobHook)">
            <summary>
            Generates the pick up rope for cargobob.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.RetractCargobobHook">
            <summary>
            Removes the pick up rope for cargobob.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.IsCargobobHookActive">
            <summary>
            Gets the value that indicates if this cargobob <see cref="T:GTA.Vehicle"/> currently has a pick-up hook or
            pick-up magnet gadget.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.IsCargobobHookActive(GTA.CargobobHook)">
            <summary>
            Gets the value that indicates if this cargobob <see cref="T:GTA.Vehicle"/> currently has a pick-up hook or
            pick-up magnet gadget.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.HasTowArm">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Vehicle"/> has tow arms.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Vehicle"/> has tow arms; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Vehicle.TowArmPosition">
            <summary>
            Sets a tow truck arm position, 0.0 on the ground 1.0 in the air.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.TowVehicle(GTA.Vehicle,GTA.Math.Vector3)">
            <summary>
            Attaches a vehicle to this tow truck <see cref="T:GTA.Vehicle"/> if this <see cref="T:GTA.Vehicle"/> has
            a tow arm gadget.
            </summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> to tow.</param>
            <param name="attachPointOffset">
            The offset from the base position of <paramref name="vehicle"/>.
            </param>
            <remarks>
            This method does not reposition the vehicles.
            Try and position the vehicle around 0.5m behind the truck if necessary.
            </remarks>
        </member>
        <member name="M:GTA.Vehicle.TowVehicle(GTA.EntityBone,GTA.Math.Vector3)">
            <summary>
            Attaches a vehicle to this tow truck <see cref="T:GTA.Vehicle"/> if this <see cref="T:GTA.Vehicle"/> has
            a tow arm gadget.
            </summary>
            <param name="vehicleBone">The bone that belong to the <see cref="T:GTA.Vehicle"/> to tow.</param>
            <param name="attachPointOffset">
            The offset from the position of <paramref name="vehicleBone"/>.
            </param>
            <remarks>
            This method does not reposition the vehicles.
            Try and position the vehicle around 0.5m behind the truck if necessary.
            </remarks>
        </member>
        <member name="M:GTA.Vehicle.DetachFromTowTruck">
            <summary>
            Detaches specified vehicle from any tow truck it might be attached through, loops through all vehicles so could be expensive.
            If you know the tow truck <see cref="T:GTA.Vehicle"/> that tows this <see cref="T:GTA.Vehicle"/>, you should call <see cref="M:GTA.Vehicle.DetachTowedVehicle"/> on the tow truck.
            </summary>
            <remarks>
            Although <c>DETACH_VEHICLE_FROM_ANY_TOW_TRUCK</c> returns a bool value that indicates whether the <see cref="T:GTA.Vehicle"/>
            has been detached from a tow truck, this method returns nothing in favor of the compatibility for scripts
            built against v3.6.0 or earlier versions.
            </remarks>
        </member>
        <member name="M:GTA.Vehicle.DetachTowedVehicle">
            <summary>
            Detach the towed <see cref="T:GTA.Vehicle"/> to from this tow truck <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.TowedVehicle">
            <summary>
            Gets the <see cref="T:GTA.Vehicle"/> this tow truck <see cref="T:GTA.Vehicle"/> is towing.
            </summary>
            <returns>
            A <see cref="T:GTA.Vehicle"/> if this <see cref="T:GTA.Vehicle"/> is towing one; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="P:GTA.Vehicle.TrailerVehicle">
            <summary>
            Gets a trailer vehicle if this <see cref="T:GTA.Vehicle"/> has trailer attach points and one of them has a trailer.
            </summary>
            <returns>
            A trailer <see cref="T:GTA.Vehicle"/> if this <see cref="T:GTA.Vehicle"/> has a trailer attach point (gadget) that has
            a trailer <see cref="T:GTA.Vehicle"/>; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.Vehicle.AttachToTrailer(GTA.Vehicle,System.Single)">
            <summary>
            Attaches this <see cref="T:GTA.Vehicle"/> to a trailer using a trailer attach point instantly.
            </summary>
            <remarks>
            Requires a <c>CVehicleTrailerAttachPoint</c> to successfully attach the <see cref="T:GTA.Vehicle"/> to a trailer.
            </remarks>
        </member>
        <member name="M:GTA.Vehicle.DetachFromTrailer">
            <summary>
            Detaches this <see cref="T:GTA.Vehicle"/> from a trailer.
            </summary>
        </member>
        <member name="P:GTA.Vehicle.IsAttachedToTrailer">
            <summary>
            Checks if this (truck) <see cref="T:GTA.Vehicle"/> is attached to a trailer <see cref="T:GTA.Vehicle"/>.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.SetTrailerLegsRaised">
            <summary>
            Instantly raises the trailers legs, useful when attaching a trailer in script to prevent popping.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.SetTrailerLegsLowered">
            <summary>
            <para>
            Instantly lowers the trailers legs.
            </para>
            <para>
            Currently not available in the game version earlier than v1.0.1103.2 (technically possible to backport the
            feature for the earlier versions).
            </para>
            </summary>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called in one of the game version earlier than v1.0.1103.2.
            </exception>
        </member>
        <member name="M:GTA.Vehicle.AttachOnToTrailer(GTA.Vehicle,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Attaches this <see cref="T:GTA.Vehicle"/> on to the back of a trailer.
            This limits the mass of the vehicle put onto the trailer to reduce physics issues.
            </summary>
            <param name="trailer">The trailer <see cref="T:GTA.Vehicle"/>.</param>
            <param name="offset">
            The offset of this <see cref="T:GTA.Vehicle"/>. Typically left as the same value as <see cref="P:GTA.Math.Vector3.Zero"/>.
            </param>
            <param name="trailerOffset">
            The offset of <paramref name="trailer"/>
            </param>
            <param name="rotation">
            The rotation in <see cref="F:GTA.EulerRotationOrder.YXZ"/>.
            </param>
            <param name="physicalStrength">
            The physical strength. Typically left as -1f.
            </param>
        </member>
        <member name="P:GTA.Vehicle.IsBeingBroughtToHalt">
            <summary>
            Checks if this <see cref="T:GTA.Vehicle"/> is being brought to a halt.
            Currently supports only in v1.0.1493.0.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.BringToHalt(System.Single,System.Int32,System.Boolean)">
            <summary>
            Starts the task to decelerate this <see cref="T:GTA.Vehicle"/> until it comes to rest, possibly in an unphysically short distance.
            </summary>
            <param name="stoppingDistance">The distance from the initial coords at which the vehicle should come to rest.</param>
            <param name="timeToStopFor">The length of time in seconds to hold the car at rest after stopping.</param>
            <param name="controlVerticalVelocity">
            If <see langword="false" />, the task allows gravity to act normally in the Z direction.
            If <see langword="true" />,  the task will also arrest the car's vertical velocity.
            </param>
        </member>
        <member name="M:GTA.Vehicle.StopBringingToHalt">
            <summary>
            Stops bringing this <see cref="T:GTA.Vehicle"/> to a halt.
            Currently supports only in v1.0.1103.2.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetActiveMissionType">
            <summary>
            Gets active vehicle mission type.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.StartParachuting(System.Boolean)">
            <summary>
            Open the vehicle's parachute (if any)
            </summary>
            <param name="allowPlayerToCancel">Whether to allow the player to cancel parachuting before the vehicle lands</param>
        </member>
        <member name="M:GTA.Vehicle.SetSpecialFlightModeAllowed(System.Boolean)">
            <summary>
            Completely enables or disables this <see cref="T:GTA.Vehicle"/>'s flight mode, used for <see cref="F:GTA.VehicleHash.Deluxo"/> and <see cref="F:GTA.VehicleHash.Oppressor2"/>.
            Only available in v1.0.1290.1 or later.
            </summary>
            <param name="allowed">Whether to allow the <see cref="T:GTA.Vehicle"/> to switch to flight mode or not.</param>
        </member>
        <member name="P:GTA.Vehicle.SpecialFlightModeTargetRatio">
            <summary>
            Gets or sets the current ratio indicating how much the <see cref="T:GTA.Vehicle"/> is transformed to hover mode for special flight mode,
            which is used for <see cref="F:GTA.VehicleHash.Deluxo"/> and <see cref="F:GTA.VehicleHash.Oppressor2"/>.
            Only available in v1.0.1290.1 or later.
            </summary>
            <value>The target ratio indicating how much the <see cref="T:GTA.Vehicle"/> will be transformed into hover mode from <c>0f</c> to <c>1f</c>.</value>
        </member>
        <member name="P:GTA.Vehicle.SpecialFlightModeCurrentRatio">
            <summary>
            Gets or sets the current ratio indicating how much the <see cref="T:GTA.Vehicle"/> is transformed to hover mode for special flight mode,
            which is used for <see cref="F:GTA.VehicleHash.Deluxo"/> and <see cref="F:GTA.VehicleHash.Oppressor2"/>.
            Only available in v1.0.1290.1 or later.
            </summary>
            <value>The current ratio indicating how much the <see cref="T:GTA.Vehicle"/> is transformed to hover mode from <c>0f</c> to <c>1f</c>.</value>
        </member>
        <member name="P:GTA.Vehicle.SpecialFlightModeWingRatio">
            <summary>
            Gets or sets the ratio indicating how much wings are deployed for the special flight mode,
            which is used for <see cref="F:GTA.VehicleHash.Deluxo"/> and <see cref="F:GTA.VehicleHash.Oppressor2"/>.
            Only available in v1.0.1290.1 or later.
            </summary>
            <value>The ratio indicating how much wings are deployed for the special flight mode from <c>0f</c> to <c>1f</c>.</value>
        </member>
        <member name="P:GTA.Vehicle.AreWingsEnabledForSpecialFlightMode">
            <summary>
            Gets or sets the value indicating whether wings are enabled for the special flight mode,
            which is used for <see cref="F:GTA.VehicleHash.Deluxo"/> and <see cref="F:GTA.VehicleHash.Oppressor2"/>.
            Only available in v1.0.1290.1 or later.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetAllModelValues">
            <summary>
            Gets an array of all model values.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetAllModels">
            <summary>
            Gets an array of all <see cref="T:GTA.VehicleHash"/>es.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetAllLoadedModelsAppropriateForAmbientVehicles">
            <summary>
            Gets an array of all loaded <see cref="T:GTA.VehicleHash"/>es that is appropriate to spawn as ambient vehicles.
            All the model hashes of the elements are loaded and the <see cref="T:GTA.Vehicle"/>s with the model hashes can be spawned immediately.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetAllModelsOfClass(GTA.VehicleClass)">
            <summary>
            Gets an array of all <see cref="T:GTA.VehicleHash"/>es whose <see cref="T:GTA.VehicleClass"/>es belong to the specified one.
            </summary>
        </member>
        <member name="M:GTA.Vehicle.GetAllModelsOfType(GTA.VehicleType)">
            <summary>
            Gets an array of all <see cref="T:GTA.VehicleHash"/>es whose <see cref="T:GTA.VehicleType"/>es belong to the specified one.
            </summary>
        </member>
        <member name="F:GTA.VehicleHash.Coureur">
            <summary>
            The English game name is "La Coureuse".
            </summary>
        </member>
        <member name="F:GTA.VehicleHash.StingerTT">
            <summary>
            The English game name is "Itali GTO Stinger TT".
            </summary>
        </member>
        <member name="F:GTA.VehicleHash.TenF">
            <summary>10F</summary>
        </member>
        <member name="F:GTA.VehicleHash.TenF2">
            <summary>10F Widebody</summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CannotEnter">
            <summary>
            The <see cref="T:GTA.Vehicle"/> cannot be entered regardless of whether the door is open or closed, or missing entirely.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on a seat.
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.PlayerCannotEnter">
             <summary>
             Players cannot enter the <see cref="T:GTA.Vehicle"/> regardless of whether the door is open or closed, or missing entirely.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on a seat.
             </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist">
            <summary>
            <para>Doesn't allow players to exit the <see cref="T:GTA.Vehicle"/> with the exit vehicle key or button.</para>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into even if already broken into (the same as <see cref="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist"/>).</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CannotEnterIfDriverExists">
            <summary>
            For players, the <see cref="T:GTA.Vehicle"/> cannot open any door if it has a driver.
            For AI, entering vehicle tasks will not start if the target <see cref="T:GTA.Vehicle"/>'s lock status is set to this value and the <see cref="T:GTA.Vehicle"/> has a driver.
            </summary>
            <remarks>
            <para>When a <see cref="T:GTA.Ped"/> is about to open the <see cref="T:GTA.Vehicle"/>'s door or the <see cref="T:GTA.Vehicle"/>'s driver instance is changed, the lock status will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            <para>AI <see cref="T:GTA.Ped"/>s can still get the driver out of the <see cref="T:GTA.Vehicle"/> to kill the driver, while players cannot do that even if given a task.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleLockStatus.CanBeBrokenInto">
            <summary>
            <para>Can be broken into the car. When a <see cref="T:GTA.Ped"/> breaks the window of the door the <see cref="T:GTA.Ped"/> is entering through, the value will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            <para>If the glass is broken when a <see cref="T:GTA.Ped"/> is about to open the <see cref="T:GTA.Vehicle"/>'s door, the value immediately will be set to <see cref="F:GTA.VehicleLockStatus.Unlocked"/>.</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist">
            <summary>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into.</para>
            <para>Even if the door the <see cref="T:GTA.Ped"/> is entering through has its window broken, <see cref="T:GTA.Ped"/>s will always have to try to break it and enter the <see cref="T:GTA.Vehicle"/> consecutively.</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.DriversSeatOnlyNoJacking">
            <summary>
            <para><see cref="T:GTA.Ped"/>s can only get in on the driver's seat normally only when the <see cref="T:GTA.Vehicle"/> does not have a driver.
            Warping into the <see cref="T:GTA.Vehicle"/> is the only way to make <see cref="T:GTA.Ped"/>s get in on any other seat.</para>
            <para><see cref="T:GTA.Ped"/>s cannot get any other <see cref="T:GTA.Ped"/>s out of the <see cref="T:GTA.Vehicle"/> to kill them.</para>
            </summary>
            <remarks>
            Changing the <see cref="T:GTA.Vehicle"/>'s lock status to this value does not immediately block <see cref="T:GTA.Ped"/>s' entering vehicle tasks.
            </remarks>
        </member>
        <member name="F:GTA.VehicleLockStatus.IgnoredByPlayer">
            <summary>Players cannot attempt to enter the <see cref="T:GTA.Vehicle"/> with the enter vehicle key or button.</summary>
        </member>
        <member name="F:GTA.VehicleLockStatus.StickPlayerInside">
            <summary>
            <para>The <see cref="T:GTA.Vehicle"/> is locked and must be broken into even if already broken into (the same as <see cref="F:GTA.VehicleLockStatus.CanBeBrokenIntoPersist"/>).</para>
            <para>Doesn't allow players to exit the <see cref="T:GTA.Vehicle"/> with the exit vehicle key or button.</para>
            </summary>
        </member>
        <member name="F:GTA.VehicleModType.None">
            <summary>
            Intended to use with <see cref="P:GTA.VehicleWeaponHandlingData.WeaponVehicleModType"/>, not in <see cref="T:GTA.VehicleMod"/> or <see cref="T:GTA.VehicleModCollection"/>.
            </summary>
        </member>
        <member name="F:GTA.VehicleType.None">
            <summary>
            The default/invalid type.
            </summary>
            <remarks>
            The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_NONE</c>.
            The hash value for <c>VEHICLE_TYPE_NONE</c> is <c>0x2F2B9BC</c> (hashed by Jenkins one-at-a-time hash but without lowercase conversion before hashing).
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Automobile">
            <summary>
            The non-special automobile type, such as general cars, taxis, trucks, and tanks.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_CAR</c>.</para>
            <para>The internal class in memory is <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Plane">
            <summary>
            The airplane type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_PLANE</c>.</para>
            <para>The internal class in memory is <c>CPlane</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Trailer">
            <summary>
            The trailer type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAILER</c>.</para>
            <para>The internal class in memory is <c>CTrailer</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.QuadBike">
            <summary>
            The non-special quad bike type. Also includes tricycles, such as <see cref="F:GTA.VehicleHash.Chimera"/>, <see cref="F:GTA.VehicleHash.RRocket"/>, and <see cref="F:GTA.VehicleHash.Stryder"/>.
            </summary>
            <remarks>
            <para>Amphibious quad bikes are not classified as this type but classified as <see cref="F:GTA.VehicleType.AmphibiousQuadBike"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_QUADBIKE</c>.</para>
            <para>The internal class in memory is <c>CQuadBike</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.SubmarineCar">
            <summary>
            The submarine car type for the submarine cars, which can travel underwater like submarines.
            </summary>
            <remarks>
            <para>Amphibious automobiles are not classified as this type but classified as <see cref="F:GTA.VehicleType.AmphibiousAutomobile"/>.</para>
            <para>Submarines are not classified as this type but classified as <see cref="F:GTA.VehicleType.Submarine"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_SUBMARINECAR</c>.</para>
            <para>The internal class in memory is <c>CSubmarineCar</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.AmphibiousAutomobile">
            <summary>
            The amphibious automobile type.
            </summary>
            <remarks>
            <para>Submarine cars are not classified as this type but classified as <see cref="F:GTA.VehicleType.SubmarineCar"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE</c>.</para>
            <para>The internal class in memory is <c>CAmphibiousAutomobile</c>, which is a subclass of <c>CAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.AmphibiousQuadBike">
            <summary>
            The amphibious quad bike type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE</c>.</para>
            <para>The internal class in memory is <c>CAmphibiousQuadBike</c>, which is a subclass of <c>CAmphibiousAutomobile</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Helicopter">
            <summary>
            The helicopter type. <see cref="F:GTA.VehicleHash.Thruster"/> is also classified as this type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_HELI</c>.</para>
            <para>The internal class in memory is <c>CHeli</c>, which is a subclass of <c>CAutomobile</c> via <c>CRotaryWingAircraft</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Blimp">
            <summary>
            The blimp type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BLIMP</c>.</para>
            <para>The internal class in memory is <c>CBlimp</c>, which is a subclass of <c>CHeli</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Autogyro">
            <summary>
            The autogyro type, which is not used in the stock game.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_AUTOGYRO</c>.</para>
            <para>The internal class in memory is <c>CAutogyro</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Motorcycle">
            <summary>
            The motorcycle type.
            </summary>
            <remarks>
            <para>Tricycles are not classified as this type but classified as <see cref="F:GTA.VehicleType.QuadBike"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BIKE</c>.</para>
            <para>The internal class in memory is <c>CBike</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Bicycle">
            <summary>
            The bicycle type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BICYCLE</c>.</para>
            <para>The internal class in memory is <c>CBmx</c>, which is a subclass of <c>CBike</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Boat">
            <summary>
            The boat type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_BOAT</c>.</para>
            <para>The internal class in memory is <c>CBoat</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Train">
            <summary>
            The train type.
            </summary>
            <remarks>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAIN</c>.</para>
            <para>The internal class in memory is <c>CTrain</c>.</para>
            </remarks>
        </member>
        <member name="F:GTA.VehicleType.Submarine">
            <summary>
            The submarine type.
            </summary>
            <remarks>
            <para>Submarine cars are not classified as this type but classified as <see cref="F:GTA.VehicleType.SubmarineCar"/>.</para>
            <para>The corresponding name in vehicles.meta for this value is <c>VEHICLE_TYPE_TRAIN</c>.</para>
            <para>The internal class in memory is <c>CSubmarine</c></para>
            </remarks>
        </member>
        <member name="T:GTA.VehicleWheel">
            <summary>
            Represents a vehicle wheel for a vehicle (internally for a <c>CWheel</c> struct).
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Vehicle">
            <summary>
            Gets the <see cref="P:GTA.VehicleWheel.Vehicle"/>this <see cref="T:GTA.VehicleWheel"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Index">
            <summary>
            Gets the script wheel index for native functions.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.ScriptIndex">
            <summary>
            Gets the script wheel index for native functions.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.BoneId">
            <summary>
            Gets the bone id this <see cref="T:GTA.VehicleWheel"/>.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.MemoryAddress">
            <summary>
            Gets the memory address where this <see cref="T:GTA.VehicleWheel"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.LastContactPosition">
            <summary>
            Gets the last contact (hit) position.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.HitNormal">
            <summary>
            Gets the hit normal, which is the direction of the collision.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.SteeringLimitMultiplier">
            <summary>
            Gets or sets the limit multiplier that affects how much this <see cref="T:GTA.VehicleWheel"/> can turn.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.StaticForce">
            <summary>
            Gets or sets the static force of this <see cref="T:GTA.VehicleWheel"/>.
            After the value is changed, the physics of the owner <see cref="P:GTA.VehicleWheel.Vehicle"/> must be activated before
            the change can apply.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Temperature">
            <summary>
            Gets or sets the tire temperature of <see cref="T:GTA.VehicleWheel"/>.
            This value rises when <see cref="P:GTA.VehicleWheel.Vehicle"/> is drifting, braking, or in burnout.
            If this value is kept at <c>59f</c> when <see cref="P:GTA.VehicleWheel.Vehicle"/> is on burnout for a short time, the tire will burst.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsTouchingSurface">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is touching any surface.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsTireOnFire">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/>'s tire is on fire.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsSteeringWheel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is a steering wheel.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsDrivingWheel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is a driving wheel.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsPunctured">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is punctured.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.IsBursted">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.VehicleWheel"/> is bursted.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.Health">
            <summary>
            Gets or sets the suspension health.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.TireHealth">
            <summary>
            Gets or sets the tire health.
            If <see cref="P:GTA.VehicleWheel.WearMultiplier" /> is set to exactly <c>0f</c>, the value will default to <c>350f</c> if the value is positive and less than <c>1000f</c>.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheel.WearMultiplier">
            <summary>
            <para>
            Gets or sets the value indicating how fast the tire will wear out.
            The higher this value is, the greater downforce will be created.
            </para>
            <para>
            Only supported in v1.0.1868.0 and later versions.
            Will throw <see cref="T:GTA.GameVersionNotSupportedException"/> if the setter is called in earlier versions (the getter always returns <see langword="false"/> in earlier versions).
            </para>
            </summary>
            <remarks>
            This property represents the wear rate property <c>SET_TYRE_WEAR_RATE</c> is supposed to change,
            but Script Hook V does never call it and instead calls <c>SET_TYRE_WEAR_RATE_SCALE</c> in versions that
            support up to v1.0.2944.0 or some earlier game version (you can actually call <c>SET_TYRE_WEAR_RATE</c>
            in RAGE Plugin Hook and FiveM, and you can call <c>GET_TYRE_WEAR_RATE</c> in SHV scripts).
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called on a game version prior to v1.0.1868.0.
            </exception>
        </member>
        <member name="P:GTA.VehicleWheel.MaxGripDiffFromWearRate">
            <summary>
            <para>
            Gets or sets the difference in tire grip.
            The more this value is, the more traction the wheel loses of traction produced from <see cref="P:GTA.VehicleWheel.WearMultiplier"/>.
            Should be between a wear rate of 1 and 0.
            </para>
            <para>
            Only supported in v1.0.2060.0 and later versions.
            Will throw <see cref="T:GTA.GameVersionNotSupportedException"/> if the setter is called in earlier versions (the getter always returns <see langword="false"/> in earlier versions).
            </para>
            </summary>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called on a game version prior to v1.0.2060.0.
            </exception>
        </member>
        <member name="P:GTA.VehicleWheel.WearRateScale">
            <summary>
            <para>
            Gets or sets the value indicating how fast the tires will wear out.
            Only affects how fast the tires will wear out and does not affect how strong the downforce will be.
            </para>
            <para>
            Only supported in v1.0.2060.0 and later versions.
            Will throw <see cref="T:GTA.GameVersionNotSupportedException"/> if the setter is called in earlier versions (the getter always returns <see langword="false"/> in earlier versions).
            </para>
            </summary>
            <remarks>
            This property represents the wear rate scale property, which <c>SET_TYRE_WEAR_RATE_SCALE</c> is supposed to
            change, not the the wear rate property, which <c>SET_TYRE_WEAR_RATE</c> is supposed to change.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called on a game version prior to v1.0.2060.0.
            </exception>
        </member>
        <member name="M:GTA.VehicleWheel.Fix">
            <summary>
            Fixes this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheel.Fix(System.Boolean)">
            <summary>
            Fixes this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
            <param name="leaveOtherBurstedTiresNotShowing">If set to <see langword="false"/>, bursted tires will appear again just like <c>SET_VEHICLE_TYRE_FIXED</c> does.</param>
        </member>
        <member name="M:GTA.VehicleWheel.Puncture(System.Single)">
            <summary>
            Punctures this <see cref="T:GTA.VehicleWheel"/>'s tire.
            </summary>
            <param name="damage">How much damage this <see cref="T:GTA.VehicleWheel"/> will take.</param>
        </member>
        <member name="M:GTA.VehicleWheel.Burst">
            <summary>
            Bursts this <see cref="T:GTA.VehicleWheel"/>'s tire completely.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheel.SetHydraulicSuspensionRaiseFactor(System.Single)">
            <summary>
            <para>
            Sets the hydraulic suspension raise factor for this wheel.
            </para>
            <para>
            Not available in game versions prior to v1.0.505.2.
            </para>
            </summary>
            <remarks>
            Does not support for <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle2"/>, <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle2"/>,
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle3"/>, or <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle3"/>.
            If called on one of the wheels, this method will throw <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called on a game version prior to v1.0.505.2.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when called on a <see cref="T:GTA.VehicleWheel"/> whose <see cref="P:GTA.VehicleWheel.BoneId"/> is
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle2"/>, <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle2"/>,
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle3"/>, or <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle3"/>.
            </exception>
        </member>
        <member name="M:GTA.VehicleWheel.GetHydraulicSuspensionRaiseFactor">
            <summary>
            <para>
            Gets the hydraulic suspension raise factor for this wheel.
            </para>
            <para>
            Currently only available in game versions prior to v1.0.2372.0 (will not be available in game versions prior
            to v1.0.505.2 as lowrider state variables are not present in those versions).
            </para>
            </summary>
            <remarks>
            Does not support for <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle2"/>, <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle2"/>,
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle3"/>, or <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle3"/>.
            If called on one of the wheels, this method will throw <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown when called on a game version prior to v1.0.2372.0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when called on a <see cref="T:GTA.VehicleWheel"/> whose <see cref="P:GTA.VehicleWheel.BoneId"/> is
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle2"/>, <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle2"/>,
            <see cref="F:GTA.VehicleWheelBoneId.WheelLeftMiddle3"/>, or <see cref="F:GTA.VehicleWheelBoneId.WheelRightMiddle3"/>.
            </exception>
        </member>
        <member name="M:GTA.VehicleWheelCollection.GetWheelByIndexOfCollection(System.Int32)">
            <summary>
            Gets the <see cref="T:GTA.VehicleWheel"/> by index.
            </summary>
            <param name="index">The index of the wheel collection. The order is the same as how the wheel array of the owner <see cref="P:GTA.VehicleWheelCollection.Vehicle"/> is aligned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:GTA.VehicleWheelCollection.Vehicle">
            <summary>
            Gets the <see cref="P:GTA.VehicleWheelCollection.Vehicle"/>this <see cref="T:GTA.VehicleWheelCollection"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.VehicleWheelCollection.Count">
            <summary>
            Gets the number of <see cref="T:GTA.VehicleWheel"/> this <see cref="T:GTA.VehicleWheelCollection"/> has. <c>0</c> will be returned if the owner vehicle does not exist.
            </summary>
        </member>
        <member name="M:GTA.VehicleWheelCollection.GetAllWheels">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.VehicleWheel"/>s this <see cref="T:GTA.VehicleWheelCollection"/> has.
            </summary>
        </member>
        <member name="T:GTA.ForceType">
            <summary>
            The apply force type.
            </summary>
        </member>
        <member name="F:GTA.ForceType.InternalForce">
            <summary>
            Add a continuous internal force to the entity.
            Force itself cannot detach any fragment parts of props like <see cref="F:GTA.ForceType.ExternalForce"/> can.
            </summary>
        </member>
        <member name="F:GTA.ForceType.InternalImpulse">
            <summary>
            Add an instant internal impulse to the entity.
            Impulse itself cannot detach any fragment parts of props like <see cref="F:GTA.ForceType.ExternalImpulse"/> can.
            </summary>
        </member>
        <member name="F:GTA.ForceType.ExternalForce">
            <summary>
            Add a continuous external force to the entity.
            Unlike <see cref="F:GTA.ForceType.InternalForce"/>, force itself can detach any fragment parts of props.
            </summary>
        </member>
        <member name="F:GTA.ForceType.ExternalImpulse">
            <summary>
            Add an instant external impulse to the entity.
            Unlike <see cref="F:GTA.ForceType.InternalImpulse"/>, impulse itself can detach any fragment parts of props.
            </summary>
        </member>
        <member name="F:GTA.ForceType.Torque">
            <summary>
            Add a torque to the entity.
            </summary>
        </member>
        <member name="F:GTA.ForceType.AngularImpulse">
            <summary>
            Add an angular impulse to the entity.
            Basically works just like <see cref="F:GTA.ForceType.Torque"/>, but the force will be multiplied by 102.931, which is
            calculated by <c>1.75f / (0.0340035 / 2.0f)</c>.
            </summary>
        </member>
        <member name="P:GTA.FwSyncedScene.Handle">
            <summary>
            Gets the handle for native functions for vehicle path nodes.
            </summary>
        </member>
        <member name="P:GTA.FwSyncedScene.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.PathNode"/>.
            </summary>
        </member>
        <member name="P:GTA.FwSyncedScene.Phase">
            <summary>
            Gets or sets the current phase. The value range is [0.0, 1.0].
            </summary>
            <remarks>
            Changing the phase of a synced scene will update the phases of any objects attached to it.
            </remarks>
        </member>
        <member name="P:GTA.FwSyncedScene.Rate">
            <summary>
            Gets or sets the playback rate. The normal rate is 1.0.
            </summary>
            <remarks>
            <para>
            Changing the rate of a synced scene will update the playback speed of any objects attached to it.
            </para>
            <para>
            The getter returns 1.0 if the <see cref="T:GTA.FwSyncedScene"/> does not exist.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.FwSyncedScene.IsLooped">
            <summary>
            Gets or sets a value that indicates whether this <see cref="T:GTA.FwSyncedScene"/> should be looped.
            </summary>
        </member>
        <member name="P:GTA.FwSyncedScene.HoldsLastFrame">
            <summary>
            Gets or sets a value that indicates whether this <see cref="T:GTA.FwSyncedScene"/> should hold the last frame
            instead of stopping the <see cref="T:GTA.FwSyncedScene"/> to discard its resources.
            </summary>
            <remarks>
            When <see cref="P:GTA.FwSyncedScene.IsLooped"/> is set to <see langword="true"/>, this property does not have actual effect.
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.Exists">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.FwSyncedScene"/> exists.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.FwSyncedScene"/> exists, otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Despite how the native function `<c>IS_SYNCHRONIZED_SCENE_RUNNING</c>` is named, which this method queries,
            This method is named "Exists" as the native function internally calls
            `<c>fwAnimDirectorComponentSyncedScene::IsValidSceneId(fwSyncedSceneId sceneId)</c>`.
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.SetOrigin(GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder)">
            <summary>
            Changes the root position and orientation.
            </summary>
            <param name="position">The position of the scene root in world coordinates</param>
            <param name="orientation">The orientation of the scene root in world coordinates.</param>
            <param name="rotOrder">The rotation order to apply.</param>
        </member>
        <member name="M:GTA.FwSyncedScene.AttachTo(GTA.Entity)">
            <summary>
            Attaches this <see cref="T:GTA.FwSyncedScene"/> to the matrix (physics capsule) of an <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to attach.</param>
            <remarks>
            Since this method does not set the origin position and rotation to the zero vector, you should call
            <see cref="M:GTA.FwSyncedScene.SetOrigin(GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder)"/> with desired offsets before or after calling this method.
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.AttachTo(GTA.EntityBone)">
            <summary>
            Attaches this <see cref="T:GTA.FwSyncedScene"/> to an <see cref="T:GTA.EntityBone"/>.
            </summary>
            <param name="bone">The <see cref="T:GTA.EntityBone"/> to attach.</param>
            <remarks>
            <inheritdoc cref="M:GTA.FwSyncedScene.AttachTo(GTA.Entity)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.Detach">
            <summary>
            Detaches this <see cref="T:GTA.FwSyncedScene"/> from an <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="M:GTA.FwSyncedScene.Create(GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder)">
            <summary>
            Creates a common scene origin which can be used to playback synchronised animations across multiple
            <see cref="T:GTA.Ped"/>s and objects.
            </summary>
            <param name="position">The position of the scene root in world coordinates.</param>
            <param name="orientation">The orientation of the scene root in world coordinates.</param>
            <param name="rotOrder">The rotation order to apply.</param>
            <returns>
            A <see cref="T:GTA.FwSyncedScene"/> instance if successfully created, otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            You should finish loading a <see cref="T:GTA.CrClipDictionary"/> that you are planning to play on a synchronized
            scene instance before you create one using this method. The game releases any
            <see cref="T:GTA.FwSyncedScene"/>s that do not have any references to anything every frame (including but may
            not be limited to; <see cref="T:GTA.Entity"/>s, or <see cref="T:GTA.Camera"/>s), making <see cref="M:GTA.FwSyncedScene.Exists"/> return
            <see langword="false"/> on them.
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.CreateAtMapObject(GTA.Math.Vector3,System.Single,GTA.Model)">
            <summary>
            Creates a common scene origin which can be used to playback synchronised animations across multiple
            <see cref="T:GTA.Ped"/>s and objects, at the closest <see cref="T:GTA.Prop"/> within a search sphere.
            </summary>
            <param name="newPos">The center position for the test sphere.</param>
            <param name="radius">The radius for the test sphere.</param>
            <param name="propModel">The prop model to consider.</param>
            <returns>
            A <see cref="T:GTA.FwSyncedScene"/> instance if the method finds some <see cref="T:GTA.Prop"/> with
            <paramref name="propModel"/> within the search sphere and it successfully creates a new synchronized scene
            at the closest <see cref="T:GTA.Prop"/>, otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            <inheritdoc cref="M:GTA.FwSyncedScene.Create(GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder)" path="/remarks"/>
            </remarks>
        </member>
        <member name="M:GTA.FwSyncedScene.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same synced scene as this <see cref="T:GTA.FwSyncedScene"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is the same synced scene as
            this <see cref="T:GTA.FwSyncedScene"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.FwSyncedScene.Equals(GTA.FwSyncedScene)">
            <summary>
            Determines if an <see cref="T:GTA.FwSyncedScene"/> refers to the same synced scene as
            this <see cref="T:GTA.FwSyncedScene"/>.
            </summary>
            <param name="scene">The <see cref="T:GTA.FwSyncedScene"/> to check.</param>
            <returns>
            <see langword="true"/> if <paramref name="scene"/> is the same synced scene as
            this <see cref="T:GTA.FwSyncedScene"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.FwSyncedScene.op_Equality(GTA.FwSyncedScene,GTA.FwSyncedScene)">
            <summary>
            Determines if two <see cref="T:GTA.PathNode"/>s refer to the same path node.
            </summary>
            <param name="left">The left <see cref="T:GTA.FwSyncedScene"/>.</param>
            <param name="right">The right <see cref="T:GTA.FwSyncedScene"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is the same path node as <paramref name="right"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.FwSyncedScene.op_Inequality(GTA.FwSyncedScene,GTA.FwSyncedScene)">
            <summary>
            Determines if two <see cref="T:GTA.PathNode"/>s don't refer to the same path node.
            </summary>
            <param name="left">The left <see cref="T:GTA.PathNode"/>.</param>
            <param name="right">The right <see cref="T:GTA.PathNode"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is not the same path node as <paramref name="right"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.FwSyncedScene.op_Implicit(GTA.FwSyncedScene)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.FwSyncedScene"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.Game.Player">
            <summary>
            Gets the local <see cref="T:GTA.Player"/> that you are controlling.
            </summary>
        </member>
        <member name="P:GTA.Game.LocalPlayerPed">
            <summary>
            Gets the local player <see cref="T:GTA.Ped"/> that you are controlling.
            Use this property instead of <see cref="P:GTA.Player.Character"/> when you are only interested in the player <see cref="T:GTA.Ped"/>
            and not the <see cref="T:GTA.Player"/> instance where a lot of player specific states are stored.
            </summary>
        </member>
        <member name="P:GTA.Game.PlayerBlip">
            <summary>
            Gets the blip of the <see cref="T:GTA.Player"/> that you are controlling.
            </summary>
        </member>
        <member name="P:GTA.Game.NorthBlip">
            <summary>
            Gets the north blip, which is shown on the radar.
            </summary>
        </member>
        <member name="P:GTA.Game.Language">
            <summary>
            Gets the current game language.
            </summary>
        </member>
        <member name="P:GTA.Game.FileVersion">
            <summary>
            Gets the "FileVersion" resource value of GTA5.exe, which is the same as what SHV's function
            <c>getGameVersionInfo</c> retrieves, as a <see cref="T:System.Version"/> instance.
            </summary>
        </member>
        <member name="P:GTA.Game.Version">
            <summary>
            Gets the version of the game.
            </summary>
        </member>
        <member name="P:GTA.Game.MeasurementSystem">
            <summary>
            Gets the measurement system the game uses to display.
            </summary>
        </member>
        <member name="P:GTA.Game.GameTime">
            <summary>
            Gets how many milliseconds the game has been open in this session
            </summary>
        </member>
        <member name="P:GTA.Game.TimeScale">
            <summary>
            Gets or sets the time scale of the game.
            </summary>
            <value>
            The time scale, only accepts values in range 0.0f to 1.0f.
            </value>
        </member>
        <member name="P:GTA.Game.FrameCount">
            <summary>
            Gets the total number of frames that have been rendered in this session.
            </summary>
        </member>
        <member name="P:GTA.Game.FPS">
            <summary>
            Gets the current frame rate in frames per second.
            </summary>
        </member>
        <member name="P:GTA.Game.LastFrameTime">
            <summary>
            Gets the time in seconds it took for the last frame to render.
            </summary>
        </member>
        <member name="P:GTA.Game.MaxWantedLevel">
            <summary>
            Gets or sets the maximum wanted level a <see cref="T:GTA.Player"/> can receive.
            </summary>
            <value>
            The maximum wanted level, only accepts values 0 to 5 inclusive.
            </value>
        </member>
        <member name="P:GTA.Game.RadioStation">
            <summary>
            Gets or sets the current radio station.
            </summary>
            <remarks>
            Setting to <see cref="F:GTA.RadioStation.RadioOff"/> has the effect only when the player is using
            the radio of a <see cref="T:GTA.Vehicle"/> or the mobile radio, since
            <c>audRadioAudioEntity::RetuneToStation(const char *stationName)</c> does nothing if the player is not
            using their radio when the argument is a string that says "<c>OFF</c>".
            </remarks>
        </member>
        <member name="M:GTA.Game.UnlockRadioStation(GTA.RadioStation)">
            <summary>
            Makes the specified radio station appear on the radio wheel.
            </summary>
            <param name="station">Radio station</param>
        </member>
        <member name="M:GTA.Game.LockRadioStation(GTA.RadioStation)">
            <summary>
            Prevents the specified radio station from appearing on the radio wheel.
            </summary>
            <param name="station">Radio station</param>
        </member>
        <member name="M:GTA.Game.UnlockAllRadioStations">
            <summary>
            Makes all the radio stations appear on the radio wheel.
            </summary>
        </member>
        <member name="P:GTA.Game.IsNightVisionActive">
            <summary>
            Gets or sets a value indicating whether to render the world with a night vision filter.
            </summary>
        </member>
        <member name="P:GTA.Game.IsThermalVisionActive">
            <summary>
            Gets or sets a value indicating whether to render the world with a thermal vision filter.
            </summary>
        </member>
        <member name="P:GTA.Game.IsMissionActive">
            <summary>
            Gets or sets a value informing the engine if a mission is in progress.
            </summary>
        </member>
        <member name="P:GTA.Game.IsRandomEventActive">
            <summary>
            Gets or sets a value informing the engine if a random event is in progress.
            </summary>
        </member>
        <member name="P:GTA.Game.IsCutsceneActive">
            <summary>
            Gets a value indicating whether the cutscene is active.
            </summary>
        </member>
        <member name="P:GTA.Game.IsWaypointActive">
            <summary>
            Gets a value indicating whether there is a waypoint set on the map.
            </summary>
        </member>
        <member name="M:GTA.Game.DoAutoSave">
            <summary>
            Performs an automatic game save if allowed by the game settings.
            </summary>
        </member>
        <member name="M:GTA.Game.ShowSaveMenu">
            <summary>
            Shows the save menu enabling the user to perform a manual game save.
            </summary>
        </member>
        <member name="P:GTA.Game.IsPaused">
            <summary>
            Gets or sets a value indicating whether the pause menu is active.
            </summary>
        </member>
        <member name="M:GTA.Game.Pause(System.Boolean)">
            <summary>
            Pause/resume the game.
            </summary>
            <param name="value">True/false for pause/resume.</param>
        </member>
        <member name="P:GTA.Game.IsLoading">
            <summary>
            Gets a value indicating whether there is a loading screen being displayed.
            </summary>
        </member>
        <member name="M:GTA.Game.GetUserInput(System.String)">
            <summary>
            Creates an input box for the user to input text using the keyboard.
            </summary>
            <param name="defaultText">The default text.</param>
            <returns>The <see cref="T:System.String"/> of what the user entered or <see cref="F:System.String.Empty"/> if the user canceled.</returns>
        </member>
        <member name="M:GTA.Game.GetUserInput(GTA.WindowTitle,System.String,System.Int32)">
            <summary>
            Creates an input box for the user to input text using the keyboard.
            </summary>
            <param name="windowTitle">The title of the input box window.</param>
            <param name="maxLength">The maximum length of text input allowed.</param>
            <param name="defaultText">The default text.</param>
            <returns>The <see cref="T:System.String"/> of what the user entered or <see cref="F:System.String.Empty"/> if the user canceled.</returns>
        </member>
        <member name="M:GTA.Game.WasCheatStringJustEntered(System.String)">
            <summary>
            Gets whether a cheat code was entered into the cheat text box.
            </summary>
            <param name="cheat">The name of the cheat to check.</param>
            <returns><see langword="true" /> if the cheat was just entered; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.Game.WasButtonCombinationJustEntered(GTA.Button[])">
            <summary>
            Gets whether a specific sequence of <see cref="T:GTA.Button"/>s has been pressed.
            </summary>
            <param name="buttons">The sequence of <see cref="T:GTA.Button"/>s in the order the user should enter them in-game.</param>
            <returns><see langword="true" /> if the combination was just entered; otherwise, <see langword="false" /></returns>
            <remarks>
            There must be between 6 and 29 inclusive <see cref="T:GTA.Button"/>s otherwise an <see cref="T:System.ArgumentException"/> is thrown.
            It only works for GamePad inputs. The in-game cheat combinations use the same system.
            </remarks>
        </member>
        <member name="P:GTA.Game.LastInputMethod">
            <summary>
            Gets whether the last input was made with a GamePad or keyboard and mouse.
            </summary>
        </member>
        <member name="P:GTA.Game.PlayerTargetingMode">
            <summary>
            Gets the current targeting mode of the local player.
            </summary>
        </member>
        <member name="P:GTA.Game.IsVibrationEnabled">
            <summary>
            Gets a value indicating whether the controller vibration is enabled.
            </summary>
        </member>
        <member name="M:GTA.Game.GetControlValue(GTA.Control)">
            <summary>
            Gets an analog value of a <see cref="T:GTA.Control"/> input in the range of [0, 255].
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The <see cref="T:GTA.Control"/> value in the range of [0, 255].</returns>
        </member>
        <member name="M:GTA.Game.GetControlValueNormalized(GTA.Control)">
            <summary>
            Gets an analog value of a <see cref="T:GTA.Control"/> input between -1.0f and 1.0f.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The normalized <see cref="T:GTA.Control"/> value between -1.0f and 1.0f.</returns>
            <remarks>
            Tests whether the control is disabled before getting an analog value of a given <see cref="T:GTA.Control"/>.
            Will return zero if the control is disabled.
            </remarks>
        </member>
        <member name="M:GTA.Game.GetDisabledControlValueNormalized(GTA.Control)">
            <summary>
            Gets an analog value of a <see cref="T:GTA.Control"/> input between -1.0f and 1.0f even if
            the <see cref="T:GTA.Control"/> is disabled.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>The normalized <see cref="T:GTA.Control"/> value between -1.0f and 1.0f.</returns>
        </member>
        <member name="M:GTA.Game.SetControlValueNormalized(GTA.Control,System.Single)">
            <summary>
            Sets the value of a <see cref="T:GTA.Control"/> for the next frame (not this frame) if the control is enabled.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <param name="value">the value to set the control to for the next frame.</param>
            <remarks>
            Does not set a value for the next frame if the control is disabled.
            Does not return a bool value despite the fact <c>SET_CONTROL_VALUE_NEXT_FRAME</c> returns
            <see langword="true"/> if the control is enabled and returns <see langword="false"/> otherwise.
            </remarks>
        </member>
        <member name="M:GTA.Game.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is currently held down.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:GTA.Game.IsControlPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is currently pressed/down.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true"/> if the <see cref="T:GTA.Control"/> is pressed/down; otherwise, <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetDisabledControlValueNormalized(GTA.Control)"/>
            returns <c>0.5f</c> or more; otherwise, returns <see langword="false"/>.
            </para>
            </returns>
            <remarks>
            Does not test whether the control is disabled before checking whether a <see cref="T:GTA.Control"/> is currently
            pressed like how <c>IS_CONTROL_PRESSED</c> does.
            </remarks>
        </member>
        <member name="M:GTA.Game.IsControlJustPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> was just pressed/down this frame and was not pressed/down last frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true" /> if the <see cref="T:GTA.Control"/> was pressed/down this frame and was not pressed/down
            last frame;  otherwise, <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetDisabledControlValueNormalized(GTA.Control)"/>
            returns <c>0.5f</c> or more this frame and it returns a value less than <c>0.5f</c> last frame; otherwise,
            returns <see langword="false"/>.
            </para>
            </returns>
            <remarks>
            Does not test whether the control is disabled before checking whether a <see cref="T:GTA.Control"/> was just
            pressed this frame like <c>IS_CONTROL_JUST_PRESSED</c> does.
            </remarks>
        </member>
        <member name="M:GTA.Game.IsControlJustReleased(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> was just released/up this frame and was not released/up last frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true" /> if the <see cref="T:GTA.Control"/> was just released/up this frame and was not
            released/up last frame; otherwise, <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetDisabledControlValueNormalized(GTA.Control)"/>
            returns a value less than <c>0.5f</c> and it returns <c>0.5f</c> last frame; otherwise, returns
            <see langword="false"/>.
            </para>
            </returns>
            <remarks>
            Does not test whether the control is disabled before checking whether a <see cref="T:GTA.Control"/> was just
            released this frame like <c>IS_CONTROL_JUST_RELEASED</c> does.
            </remarks>
        </member>
        <member name="M:GTA.Game.IsEnabledControlPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and currently pressed/down.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true"/> if the <see cref="T:GTA.Control"/> is enabled and currently pressed/down; otherwise,
            <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetControlValueNormalized(GTA.Control)"/> returns
            <c>0.5f</c> or more; otherwise, returns <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:GTA.Game.IsEnabledControlJustPressed(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and pressed/down this frame and was not pressed/down
            last frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true"/> if the <see cref="T:GTA.Control"/> is enabled and pressed/down this frame, and was
            not pressed/down last frame; otherwise, <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetControlValueNormalized(GTA.Control)"/> returns
            <c>0.5f</c> or more and it returns a value less than <c>0.5f</c> last frame; otherwise, returns
            <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:GTA.Game.IsEnabledControlJustReleased(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled and was just released/up this frame and was not released/up
            last frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <para>
            <see langword="true"/> if the <see cref="T:GTA.Control"/> is enabled and released/up this frame, and was not
            released/up last frame; otherwise, <see langword="false"/>.
            </para>
            <para>
            Strictly, returns <see langword="true"/> when <see cref="M:GTA.Game.GetControlValueNormalized(GTA.Control)"/> returns
            a value less than <c>0.5f</c> and it returns <c>0.5f</c> or more last frame; otherwise, returns
            <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:GTA.Game.IsControlEnabled(GTA.Control)">
            <summary>
            Gets whether a <see cref="T:GTA.Control"/> is enabled or disabled this frame.
            </summary>
            <param name="control">The <see cref="T:GTA.Control"/> to check.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:GTA.Control"/> is enabled; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.Game.EnableControlThisFrame(GTA.Control)">
            <summary>
            Enables the action input for the given <see cref="T:GTA.Control"/> and related action inputs in the control
            system for the main player  so enabled control variants of control (action input) methods and script
            commands (native functions) will accept the given <see cref="T:GTA.Control"/>.
            </summary>
            <param name="control">
            The <see cref="T:GTA.Control"/> to disable. Related action inputs will also be enabled.
            </param>
        </member>
        <member name="M:GTA.Game.DisableControlThisFrame(GTA.Control)">
            <summary>
            Disables the action input for the given <see cref="T:GTA.Control"/> and related action inputs in the control
            system for the main player so enabled control variants of control (action input) methods and script
            commands (native functions) will not accept the given <see cref="T:GTA.Control"/>.
            </summary>
            <param name="control">
            The <see cref="T:GTA.Control"/> to disable. Related action inputs will also be disabled.
            </param>
        </member>
        <member name="M:GTA.Game.EnableAllControlsThisFrame">
            <summary>
            Enables all <see cref="T:GTA.Control"/>s this frame.
            </summary>
        </member>
        <member name="M:GTA.Game.DisableAllControlsThisFrame">
            <summary>
            Disables all <see cref="T:GTA.Control"/>s this frame.
            </summary>
        </member>
        <member name="M:GTA.Game.GenerateHash(System.String)">
            <summary>
            Calculates a Jenkins One At A Time hash from the given <see cref="T:System.String"/> which can then be used by any native function that takes a hash.
            Can be called in any thread.
            </summary>
            <param name="input">The input <see cref="T:System.String"/> to hash.</param>
            <returns>The Jenkins hash of the input <see cref="T:System.String"/>.</returns>
            <remarks>
            Converts ASCII uppercase characters to lowercase ones and backslash characters to slash ones before
            converting into a hash. Computes the hash from the substring between two double quotes if the first
            character is a double quote character.
            </remarks>
        </member>
        <member name="M:GTA.Game.GetLocalizedString(System.String)">
            <summary>
            Returns a localized <see cref="T:System.String"/> from the games language files with a specified GXT key.
            </summary>
            <param name="entry">The GXT key.</param>
            <returns>The localized <see cref="T:System.String"/> if the key exists; otherwise, <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:GTA.Game.GetLocalizedString(System.Int32)">
            <summary>
            Returns a localized <see cref="T:System.String"/> from the games language files with a specified GXT key hash.
            </summary>
            <param name="entryLabelHash">The GXT key hash.</param>
            <returns>The localized <see cref="T:System.String"/> if the key hash exists; otherwise, <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:GTA.Game.GetProfileSetting(System.Int32)">
            <summary>
            Gets an value associated with the specified index of the profile setting.
            </summary>
            <param name="index">The index of the profile setting values.</param>
            <returns>The integer value associated with the specified index of the profile setting.</returns>
        </member>
        <member name="M:GTA.Game.FindPattern(System.String,System.IntPtr)">
            <summary>
            Searches the address space of the current process for a memory pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" /> (<see langword="default" />), search is started at the base address.</param>
            <returns>The address of a region matching the pattern, or <see cref="F:System.IntPtr.Zero" /> if none was found.</returns>
            <remarks>This function takes the Cheat Engine/IDA format ("48 8B 0D ?? ?? ? ? 44 8B C6 8B D5 8B D8" for example, where ?? and ? are wildcards).</remarks>
        </member>
        <member name="M:GTA.Game.FindPattern(System.String,System.String,System.IntPtr)">
            <summary>
            Searches the address space of the current process for a memory pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="mask">The pattern mask.</param>
            <param name="startAddress">The address to start searching at. If <see cref="F:System.IntPtr.Zero" /> (<see langword="default" />), search is started at the base address.</param>
            <returns>The address of a region matching the pattern, or <see cref="F:System.IntPtr.Zero" /> if none was found.</returns>
            <remarks>This function takes the classic format ("\x48\x8B\x0D\x00\x00\x00\x00\x44\x8B\xC6\x8B\xD5\x8B\xD8" as the pattern and "xxx????xxxxxxx" as the mask for example, where \x00 in the pattern and ? In the mask is a wildcard).</remarks>
        </member>
        <member name="F:GTA.GameVersion.v1_0_757_3_Steam">
            <remarks>
            The correct name would be <c>v1_0_757_4_Steam</c> since the Steam v1.0.757.3 does not exist but Steam
            v1.0.757.4 does. Script Hook V can log <c>VER_1_0_757_4_STEAM</c> in <c>ScriptHookV.log</c> but cannot
            log <c>VER_1_0_757_3_STEAM</c> as well.
            </remarks>
        </member>
        <member name="F:GTA.GameVersion.v1_0_1737_0_Steam">
            <summary>
            This value also represents the exe version 1.0.1734.0 for Steam version. 1.0.1737.0 basically works in the same way as 1.0.1734.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_1737_0_NoSteam">
            <summary>
            This value also represents the exe version 1.0.1734.0 for non-Steam version. 1.0.1737.0 basically works in the same way as 1.0.1734.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_2372_0_Steam">
            <summary>
            This value also represents the exe version 1.0.2372.2 for Steam version. 1.0.2372.2 basically works in the same way as 1.0.2372.0 but with bug fixes.
            </summary>
        </member>
        <member name="F:GTA.GameVersion.v1_0_2372_0_NoSteam">
            <summary>
            This value also represents the exe version 1.0.2372.2 for non-Steam version. 1.0.2372.2 basically works in the same way as 1.0.2372.0 but with bug fixes.
            </summary>
        </member>
        <member name="T:GTA.GameVersionNotSupportedException">
            <summary>
            The exception that is thrown when an invoked method is not supported in the running game version.
            </summary>
            <remarks>
            <see cref="T:GTA.GameVersionNotSupportedException"/> indicates that no implementation exists for the running game
            version for an invoked method or property. There are two typical cases where a
            <see cref="T:GTA.GameVersionNotSupportedException"/> is thrown:
            <list type="bullet">
            <item>
            <description>
            The relevant implementation is completely absent and operation cannot be performed in a meaningful way in
            the running game version. For example, <see cref="M:GTA.Vehicle.SetRestrictedAmmoCount(System.Int32,System.Int32)"/> cannot be
            implemented for the game versions earlier than v1.0.877.1 due to the absent of the member of restricted ammo
            count in <c>CVehicle</c>.
            </description>
            </item>
            <item>
            <description>
            An invoked method or property calls a native function that does not exist in the running game version.
            In this case, some issues can be resolved with a custom wrapper implementation for earlier game version
            if relevant implementation is present.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:GTA.GetSafePositionFlags">
            <summary>
            An enumeration of the flags to be passed in to <see cref="M:GTA.World.GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)"/>
            to govern which navmesh polygons it considers.
            </summary>
            <remarks>
            The test function that is used for this enum can be found with <c>"75 07 32 C0 E9 88 00 00 00 F6 C1 04 74 0A 8B 42 24"</c> (which is called via a function pointer).
            The test function uses the same struct layout as YnvPoly class in CodeWalker.
            <see href="https://github.com/dexyfex/CodeWalker/blob/9d76f2c6c42b580e67aabf293e3c57be5edbb190/CodeWalker.Core/GameFiles/FileTypes/YnvFile.cs#L756"/>
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.OnlyPavement">
            <summary>
            Only navmesh polygons marked as pavement.
            </summary>
            <remarks>
            The pavement flag is named <c>B02_IsFootpath</c> in CodeWalker30_dev44.
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.NotIsolated">
            <summary>
            Only navmesh polygons not marked as "isolated".
            </summary>
            <remarks>
            The isolated flag is named <c>B15_InteractionUnk</c> in CodeWalker30_dev44.
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.NotInterior">
            <summary>
            No navmesh polygons created from interiors.
            </summary>
            <remarks>
            The interior flag is named <c>B14_IsInterior</c> in CodeWalker30_dev44.
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.NotWater">
            <summary>
            No navmesh polygons marked as water.
            </summary>
            <remarks>
            The water flag is named <c>B07_IsWater</c> in CodeWalker30_dev44.
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.OnlyNetworkSpawn">
            <summary>
            Only navmesh polygons marked as "network spawn candidate".
            </summary>
            <remarks>
            The flag is named <c>B17_IsFlatGround</c> in CodeWalker30_dev44.
            Despite the name in the said CodeWalker build, some slope navmesh polygons has the "network spawn candidate" flag.
            </remarks>
        </member>
        <member name="F:GTA.GetSafePositionFlags.UseFloodFill">
            <summary>
            Specify whether to use a flood-fill from the starting position, as opposed to scanning all polygons within the search volume.
            </summary>
        </member>
        <member name="M:GTA.IJoaatHashValue.GetJoaatHash">
            <summary>
            Gets the jenkins-one-at-a-time hash.
            </summary>
        </member>
        <member name="T:GTA.Interior">
            <summary>
            Represents a static class for general interior stuff.
            </summary>
        </member>
        <member name="M:GTA.Interior.CullExteriorObjectGeometryThisFrame(GTA.Model)">
            <summary>
            Culls exterior objects from rendering (g-buffer only) by model hash this frame.
            This method is for use in multiplayer apartments which need to cull exterior shell of building etc.
            </summary>
            <remarks>
            The game can cull exterior geometries for up to 32 models at one frame.
            If the game already has 32 models to cull object geometries at this frame, the request will be ignored.
            </remarks>
        </member>
        <member name="M:GTA.Interior.CullExteriorObjectShadowThisFrame(GTA.Model)">
            <summary>
            <para>
            Culls exterior objects from rendering (g-buffer only) by model hash this frame.
            This method is for use in multiplayer apartments which need to cull shadows of exterior shell of building etc.
            </para>
            <para>
            Not available in the game versions prior to v1.0.757.2.
            </para>
            </summary>
            <remarks>
            The game can cull shadows of exterior objects for up to 32 models at one frame.
            If the game already has 32 models to cull object geometries at this frame, the request will be ignored.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if the method is called in one of the game versions prior to v1.0.757.2.
            </exception>
        </member>
        <member name="M:GTA.Interior.ForceRoomForGameViewport(GTA.InteriorProxy,System.Int32)">
            <summary>
            Force the game viewport to be registered in the specified interior and room.
            </summary>
            <param name="interior">The interior proxy.</param>
            <param name="roomKey">The room key (name hash), which is defined in a <c>CMloRoomDef</c>.</param>
        </member>
        <member name="M:GTA.Interior.SetRoomForGameViewport(System.String)">
            <summary>
            Associates the game viewport with the specified interior room to ensure that it renders correctly
            after a camera cut or warp.
            </summary>
            <param name="roomName">The room name, which is defined in a <c>CMloRoomDef</c>.</param>
        </member>
        <member name="M:GTA.Interior.SetRoomForGameViewport(System.Int32)">
            <summary>
            Associates the game viewport with the specified interior room to ensure that it renders correctly
            after a camera cut or warp.
            </summary>
            <param name="roomKey">The room key (name hash), which is defined in a <c>CMloRoomDef</c>.</param>
        </member>
        <member name="M:GTA.Interior.GetRoomKeyForGameViewport">
            <summary>
            Returns the key (name hash) of the interior room currently associated with the game viewport.
            </summary>
            <returns>
            The name hash key of the room the game viewport is in if it is in a <see cref="T:GTA.InteriorProxy"/>;
            otherwise, zero.
            </returns>
            <remarks>
            This method gets the name hash from the <see cref="T:GTA.InteriorInstance"/> of <see cref="T:GTA.InteriorProxy"/>
            associated with the game viewport. The list of rooms are defined in a <c>CMloRoomDef</c> in a corresponding
            ytyp file, and this methods hashes the raw name before returning a value.
            </remarks>
        </member>
        <member name="T:GTA.InteriorProxy">
            <summary>
            Represents a interior proxy, which is for <c>CInteriorProxy</c> and is used for native functions for interiors.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.FromHandle(System.Int32)">
            <summary>
            Creates a new instance of an <see cref="T:GTA.InteriorProxy"/> from the given handle.
            </summary>
            <param name="handle">The interior proxy handle.</param>
            <returns>
            Returns a <see cref="T:GTA.InteriorProxy"/> if this handle corresponds to a <see cref="T:GTA.InteriorProxy"/>.
            Returns <see langword="null" /> if no <see cref="T:GTA.InteriorProxy"/> exists this the specified <paramref name="handle"/>
            </returns>
        </member>
        <member name="P:GTA.InteriorProxy.Handle">
            <summary>
            The handle of this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.NativeValue">
            <summary>
            The handle of this <see cref="T:GTA.InteriorProxy"/> translated to a native value.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.MemoryAddress">
            <summary>
            Gets the memory address where the <see cref="T:GTA.InteriorProxy"/> is stored in memory.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.Position">
            <summary>
            Gets or sets the position of this <see cref="T:GTA.AnimatedBuilding"/>.
            </summary>
            <value>
            The position in world space.
            </value>
        </member>
        <member name="P:GTA.InteriorProxy.CurrentInteriorInstance">
            <summary>
            Gets the current <see cref="T:GTA.InteriorInstance"/> this <see cref="T:GTA.InteriorProxy"/> is using.
            </summary>
            <remarks>returns <see langword="null" /> if this <see cref="T:GTA.InteriorProxy"/> is not using any <see cref="T:GTA.InteriorInstance"/>.</remarks>
        </member>
        <member name="P:GTA.InteriorProxy.Model">
            <summary>
            Gets the MLO model this <see cref="T:GTA.InteriorProxy"/> will load.
            Return value has the hashed value of <c>archetypeName</c> in a ymap file.
            </summary>
        </member>
        <member name="P:GTA.InteriorProxy.IsDisabled">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.InteriorProxy"/> will not process, making the interior looks like completely not loaded.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> will not process, making the interior looks like completely not loaded; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.InteriorProxy.IsCapped">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.InteriorProxy"/> is capped to load only the shell objects (usually walls + floor + doors + windows),
            prevents most of collisions from loading.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> is capped to load only the shell objects; otherwise, <see langword="false" />.
            </value>
            <remarks>
            Doors can be loaded and the collision is not necessarily completely disabled (e.g. collisions for bullets and projectiles can work).
            </remarks>
        </member>
        <member name="M:GTA.InteriorProxy.Refresh">
            <summary>
            Refreshes the current <see cref="T:GTA.InteriorInstance"/> if loaded.
            </summary>
            <remarks>
            Does not change the memory address or handle of the <see cref="P:GTA.InteriorProxy.CurrentInteriorInstance"/>.
            </remarks>
        </member>
        <member name="M:GTA.InteriorProxy.Disable(System.Boolean)">
            <summary>
            Disables the interior, making <see cref="T:GTA.InteriorProxy"/> will not process, making the interior looks like completely not loaded.
            </summary>
            <remarks>
            <para>Does not prevent from having a <see cref="T:GTA.InteriorInstance"/>.</para>
            <para>Does nothing if the player <see cref="T:GTA.Ped"/> is in this <see cref="T:GTA.InteriorProxy"/>.</para>
            </remarks>
        </member>
        <member name="M:GTA.InteriorProxy.Cap(System.Boolean)">
            <summary>
            Caps the interior so this <see cref="T:GTA.InteriorProxy"/> will load only the shell objects (usually walls + floor + doors + windows),
            prevents most of collisions from loading.
            </summary>
            <remarks>Does nothing if the player <see cref="T:GTA.Ped"/> is in this <see cref="T:GTA.InteriorProxy"/>.</remarks>
        </member>
        <member name="M:GTA.InteriorProxy.PinInMemory">
            <summary>
            Makes the game keep the <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.UnpinFromMemory">
            <summary>
            Lets the game free the <see cref="T:GTA.InteriorProxy"/>.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.ActivateEntitySet(System.String)">
            <summary>
            Mark the entity set with the given name in this <see cref="T:GTA.InteriorProxy"/> as being active.
            You need to call <see cref="M:GTA.InteriorProxy.Refresh"/> to apply the changes.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.DeactivateEntitySet(System.String)">
            <summary>
            Mark the entity set with the given name in this <see cref="T:GTA.InteriorProxy"/> as being inactive.
            You need to call <see cref="M:GTA.InteriorProxy.Refresh"/> to apply the changes.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.IsEntitySetActive(System.String)">
            <summary>
            Return <cref langword="true"/> if the entity set with the given name in this interior is marked as active.
            </summary>
        </member>
        <member name="M:GTA.InteriorProxy.SetEntitySetTintIndex(System.String,System.Int32)">
            <summary>
            <para>
            Sets tint index for given entity set.
            You need to call <see cref="M:GTA.InteriorProxy.Refresh"/> to apply the changes.
            </para>
            <para>
            Not available in the game versions prior to v1.0.877.1.
            </para>
            </summary>
            <param name="entitySetName">The entity set name.</param>
            <param name="index">The tint index. Must be positive.</param>
            <exception cref="T:GTA.GameVersionNotSupportedException">
            Thrown if the method is called in one of the game versions prior to v1.0.877.1.
            </exception>
        </member>
        <member name="M:GTA.InteriorProxy.GetInteriorProxyFromGameplayCam">
            <summary>
            Gets the <see cref="T:GTA.InteriorProxy"/> if the gameplay camera is in a interior.
            </summary>
            <remarks>returns <see langword="null" /> if the gameplay camera is not in any interior space.</remarks>
        </member>
        <member name="M:GTA.InteriorProxy.Exists">
            <summary>
            Determines if this <see cref="T:GTA.InteriorProxy"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.InteriorProxy"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same interior proxy as this <see cref="T:GTA.InteriorProxy"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is the same interior proxy as this <see cref="T:GTA.InteriorProxy"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Equality(GTA.InteriorProxy,GTA.InteriorProxy)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorProxy"/>s refer to the same interior proxy.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorProxy"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorProxy"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is the same interior proxy as <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Inequality(GTA.InteriorProxy,GTA.InteriorProxy)">
            <summary>
            Determines if two <see cref="T:GTA.InteriorProxy"/>s don't refer to the same interior proxy.
            </summary>
            <param name="left">The left <see cref="T:GTA.InteriorProxy"/>.</param>
            <param name="right">The right <see cref="T:GTA.InteriorProxy"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is not the same interior proxy as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.InteriorProxy.op_Implicit(GTA.InteriorProxy)~GTA.Native.InputArgument">
            <summary>
            Converts an <see cref="T:GTA.InteriorProxy"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.IScriptStreamingResource">
            <summary>
            A interface for streaming resources that can be requested and pinned by scripts
            (by increasing reference counts).
            </summary>
        </member>
        <member name="F:GTA.Language.Chinese">
            <summary>Traditional Chinese</summary>
        </member>
        <member name="T:GTA.MarkerType">
            <summary>
            An enumeration of marker types.
            </summary>
            <remarks>
            You can find hardcoded model names that code for marker uses to draw markers, such as "<c>PROP_MK_CONE</c>",
            in the exe.
            </remarks>
        </member>
        <member name="F:GTA.MarkerType.Cone">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_CONE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_CONE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Cylinder">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_CYLINDER</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_CYLINDER</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Arrow">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_ARROW</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_ARROW_3D</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.ArrowFlat">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_ARROW_FLAT</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_ARROW_FLAT</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Flag">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_FLAG</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_FLAG_2</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.RingFlag">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_RING_FLAG</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_FLAG</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Ring">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_RING</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RING</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Plane">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_PLANE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_PLANE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.BikeLogo1">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_BIKE_LOGO_1</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_BIKE_LOGO_1</c>". The marker is a Lost MC logo that has transparent area inside black outline.
            </summary>
        </member>
        <member name="F:GTA.MarkerType.BikeLogo2">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_BIKE_LOGO_1</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_BIKE_LOGO_1</c>". The marker is a Lost MC logo that has solid white area inside black outline.
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num0">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_0</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_0</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num1">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_1</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_1</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num2">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_2</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_2</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num3">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_3</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_3</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num4">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_4</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_4</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num5">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_5</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_5</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num6">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_6</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_6</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num7">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_7</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_7</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num8">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_8</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_8</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Num9">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_NUM_9</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_NUM_9</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Chevron1">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_CHEVRON_1</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RACE_CHEVRON_01</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Chevron2">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_CHEVRON_2</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RACE_CHEVRON_02</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Chevron3">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_CHEVRON_3</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RACE_CHEVRON_03</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.RingFlat">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_RING_FLAT</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RING_FLAT</c>". Unlike <see cref="F:GTA.MarkerType.Ring"/>, the marker faces in the Z direction.
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Lap">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_LAP</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_LAP</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Halo">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_HALO</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.HaloPoint">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_HALO_POINT</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_POINT</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.HaloRotate">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_HALO_CIRCLE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_CIRCLE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Sphere">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_SPHERE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_SPHERE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Money">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_MONEY</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_MONEY</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Lines">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_LINES</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_LINES</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Beast">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_BEAST</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_HALO_BEAST</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.QuestionMark">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_QUESTION_MARK</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_RANDOM_TRANSFORM</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformPlane">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_PLANE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_PLANE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformHelicopter">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_HELICOPTER</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_HELICOPTER</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformBoat">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_BOAT</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_BOAT</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformCar">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_CAR</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_CAR</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformBike">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_BIKE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_BIKE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformPushBike">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_PUSH_BIKE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_PUSH_BIKE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformTruck">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_TRUCK</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_TRUCK</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformParachute">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_PARACHUTE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_PARACHUTE</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.TransformThruster">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_TRANSFORM_THRUSTER</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_TRANSFORM_THRUSTER</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Warp">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_WARP</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_MK_WARP</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.Boxes">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_BOXES</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_ARENA_ICON_BOXMK</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.PitLane">
            <summary>
            The marker type for <c>MarkerType_e::MARKERTYPE_PIT_LANE</c>, which uses the prop <see cref="T:GTA.Model"/>
            "<c>PROP_AC_PIT_LANE_BLIP</c>".
            </summary>
        </member>
        <member name="F:GTA.MarkerType.VerticleCircle">
            <summary>
            Vehicle Circle
            </summary>
        </member>
        <member name="F:GTA.ParachuteTint.AirFocce">
            <summary>
            Air Force Chute
            </summary>
        </member>
        <member name="F:GTA.ParachuteTint.Airbone">
            <summary>
            Airborne Chute
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.MemoryAddress">
            <summary>
            Gets the memory address where this <see cref="T:GTA.ParticleEffect"/> is located in game memory.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Entity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.ParticleEffect"/> is attached to or <see langword="null" /> if there is none.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Bone">
            <summary>
            Gets the <see cref="T:GTA.EntityBone"/> that this <see cref="T:GTA.ParticleEffect"/> is attached to or <see langword="null" /> if there is none.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.AssetName">
            <summary>
            Gets the name of the asset used for this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.EffectName">
            <summary>
            Gets the name of the effect used for this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Offset">
            <summary>
            Gets or sets the offset.
            If this <see cref="T:GTA.ParticleEffect"/> is attached to an <see cref="P:GTA.ParticleEffect.Entity"/>, this refers to the offset from the <see cref="P:GTA.ParticleEffect.Entity"/>;
            otherwise, this refers to its position in World coordinates
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Rotation">
            <summary>
            Sets the rotation of this <see cref="T:GTA.ParticleEffect"/>
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Color">
            <summary>
            Gets or sets the <see cref="P:GTA.ParticleEffect.Color"/> of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffect.Scale">
            <summary>
            Gets or sets the size scaling factor of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <value>
            The scale, default = 1.0f;
            To Decrease the size use a value less than 1.0f;
            To Increase the size use a value greater than 1.0f;
            </value>
        </member>
        <member name="P:GTA.ParticleEffect.Range">
            <summary>
            Gets or sets the range of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffect.SetParameter(System.String,System.Single)">
            <summary>
            Modifies parameters of this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <param name="parameterName">Name of the parameter you want to modify, these are stored inside the effect files.</param>
            <param name="value">The new value for the parameter.</param>
        </member>
        <member name="M:GTA.ParticleEffect.Delete">
            <summary>
            Stops and removes this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffect.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Checkpoint"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Checkpoint"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same effect as this <see cref="T:GTA.ParticleEffect"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same effect as this <see cref="T:GTA.ParticleEffect"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Equality(GTA.ParticleEffect,GTA.ParticleEffect)">
            <summary>
            Determines if two <see cref="T:GTA.ParticleEffect"/>s refer to the same effect.
            </summary>
            <param name="left">The left <see cref="T:GTA.ParticleEffect"/>.</param>
            <param name="right">The right <see cref="T:GTA.ParticleEffect"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same effect as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Inequality(GTA.ParticleEffect,GTA.ParticleEffect)">
            <summary>
            Determines if two <see cref="T:GTA.ParticleEffect"/>s don't refer to the same effect.
            </summary>
            <param name="left">The left <see cref="T:GTA.ParticleEffect"/>.</param>
            <param name="right">The right <see cref="T:GTA.ParticleEffect"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same effect as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.ParticleEffect.op_Implicit(GTA.ParticleEffect)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.ParticleEffect"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.#ctor(System.String)">
            <summary>
            Creates a class used for loading <see cref="T:GTA.ParticleEffectAsset"/>s than can be used to start <see cref="T:GTA.ParticleEffect"/>s from inside the Asset
            </summary>
            <param name="assetName">The name of the asset file which contains all the <see cref="T:GTA.ParticleEffect"/>s you are wanting to start</param>
            <remarks>The files have the extension *.ypt in OpenIV, use the file name without the extension for the <paramref name="assetName"/></remarks>
        </member>
        <member name="P:GTA.ParticleEffectAsset.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.ParticleEffectAsset"/> is Loaded
            </summary>
            <remarks>Use <see cref="M:GTA.ParticleEffectAsset.Request"/> or <see cref="M:GTA.ParticleEffectAsset.Request(System.Int32)"/> to load the asset</remarks>
        </member>
        <member name="P:GTA.ParticleEffectAsset.AssetName">
            <summary>
            Gets the name of the this <see cref="T:GTA.ParticleEffectAsset"/> file.
            </summary>
        </member>
        <member name="P:GTA.ParticleEffectAsset.NonLoopedColor">
            <summary>
            Sets the <see cref="T:System.Drawing.Color"/> for all NonLooped Particle Effects
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.UseNext">
            <summary>
            Make this the current particle asset.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.ParticleEffectAsset"/> into memory so it can be used for starting <see cref="T:GTA.ParticleEffect"/>s.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.ParticleEffectAsset"/> into memory so it can be used for starting <see cref="T:GTA.ParticleEffect"/>s.
            </summary>
            <param name="timeout">How long in milliseconds should the game wait while the model hasn't been loaded before giving up</param>
            <returns><see langword="true" /> if the <see cref="T:GTA.ParticleEffectAsset"/> is Loaded; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.ParticleEffectAsset.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.ParticleEffectAsset"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="M:GTA.ParticleEffectAsset.op_Implicit(GTA.ParticleEffectAsset)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.ParticleEffectAsset"/> to a native input argument.
            </summary>
        </member>
        <member name="M:GTA.PathFind.GetAllVehicleNodes(System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})">
            <summary>
            Gets an array of all the vehicle <see cref="T:GTA.PathNode"/>s that meet <paramref name="predicate"/>.
            Without <paramref name="predicate"/> set to filter vehicle nodes, the array contains can be more than 20000 vehicle nodes and manually filtering the array may cost significant time.
            Therefore, you should set pass some predicate as <paramref name="predicate"/> to filter vehicle nodes unless you need to retrieve all loaded vehicle parameters without testing.
            </summary>
            <param name="predicate">The predicate the node must meet to consider.</param>
        </member>
        <member name="M:GTA.PathFind.GetNearbyVehicleNodes(GTA.Math.Vector3,System.Single,System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})">
            <summary>
            Gets an array of nearby vehicle <see cref="T:GTA.PathNode"/>s that meet <paramref name="predicate"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Ped"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.PathNode"/>s.</param>
            <param name="predicate">The predicate the node must meet to consider.</param>
        </member>
        <member name="M:GTA.PathFind.GetVehicleNodesInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})">
            <summary>
            Gets the vehicle <see cref="T:GTA.PathNode"/>s in the specified area that meet <paramref name="predicate"/>.
            </summary>
            <param name="min">The minimum bound of the area.</param>
            <param name="max">The maximum bound of the area.</param>
            <param name="predicate">The predicate the node must meet to consider.</param>
        </member>
        <member name="M:GTA.PathFind.GetClosestVehicleNode(GTA.Math.Vector3,System.Single,System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})">
            <summary>
            Gets the closest vehicle <see cref="T:GTA.PathNode"/> among the ones and that meet <paramref name="predicate"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Ped"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.PathNode"/>s.</param>
            <param name="predicate">The predicate the node must meet to consider.</param>
        </member>
        <member name="M:GTA.PathFind.GetClosestVehicleNodePosition(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetClosestVehicleNodeFlags,System.Single,System.Single)">
            <summary>
            Gets the position where the closest vehicle node is located.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.PathNode"/>s against.</param>
            <param name="closestNodePosition">The position where the closest node is.</param>
            <param name="flags">The flags to consider for the search.</param>
            <param name="zMeasureMult">The factor how strongly should the difference in Z direction be weighted if the Z coords is more than <paramref name="zTolerance"/>.</param>
            <param name="zTolerance">
            The minimum difference how far apart to the Z coords have to be before the Z coords difference is considered.
            If the Z coords difference is the same as this value or less, the Z coords difference will be considered as zero.
            </param>
            <returns>
              <see langword="true"/> if the closest <see cref="T:GTA.PathNode"/> is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.GetNthClosestVehicleNode(GTA.Math.Vector3,System.Int32,GTA.GetClosestVehicleNodeFlags,System.Single,System.Single)">
            <summary>
            Gets the Nth closest <see cref="T:GTA.PathNode"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.PathNode"/>s against.</param>
            <param name="nthClosest">
            The numeric position the in a series of closest nodes.
            If this is set to 1 then the closest node will be returned. If this is set to 2 then the second closest node will be returned and so on.
            </param>
            <param name="flags">The flags to consider for the search.</param>
            <param name="zMeasureMult">The factor how strongly should the difference in Z direction be weighted if the Z coords is more than <paramref name="zTolerance"/>.</param>
            <param name="zTolerance">
            The minimum difference how far apart to the Z coords have to be before the Z coords difference is considered.
            If the Z coords difference is the same as this value or less, the Z coords difference will be considered as zero.
            </param>
            <returns>
              Returns <see langword="null"/> if nth closest <see cref="T:GTA.PathNode"/> is found; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.GetNthClosestVehicleNodePosition(GTA.Math.Vector3,System.Int32,GTA.Math.Vector3@,GTA.GetClosestVehicleNodeFlags,System.Single,System.Single)">
            <summary>
            Gets the position where the Nth closest vehicle <see cref="T:GTA.PathNode"/> is located.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.PathNode"/>s against.</param>
            <param name="nthClosest">
            The numeric position the in a series of closest nodes.
            If this is set to 1 then the closest node will be returned. If this is set to 2 then the second closest node will be returned and so on.
            </param>
            <param name="closestNodePosition">The position where the closest node is.</param>
            <param name="flags">The flags to consider for the search.</param>
            <param name="zMeasureMult">The factor how strongly should the difference in Z direction be weighted if the Z coords is more than <paramref name="zTolerance"/>.</param>
            <param name="zTolerance">
            The minimum difference how far apart to the Z coords have to be before the Z coords difference is considered.
            If the Z coords difference is the same as this value or less, the Z coords difference will be considered as zero.
            </param>
            <returns>
              <see langword="true"/> if the nth closest <see cref="T:GTA.PathNode"/> is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.GetNthClosestVehicleNodeWithHeading(GTA.Math.Vector3,System.Int32,System.Single@,System.Int32@,GTA.GetClosestVehicleNodeFlags,System.Single,System.Single)">
            <summary>
            Gets the Nth closest <see cref="T:GTA.PathNode"/>.
            Also retrieves the heading and number of the lanes of the <see cref="T:GTA.PathNode"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.PathNode"/>s against.</param>
            <param name="nthClosest">
            The numeric position the in a series of closest nodes.
            If this is set to 1 then the closest node will be returned. If this is set to 2 then the second closest node will be returned and so on.
            </param>
            <param name="heading">
            The heading of the first node link that has forward lanes among the array of node links of the found vehicle path node.
            If none of the node links have forward lanes, <c>0f</c> will be returned.
            </param>
            <param name="numLanes">
            The number of forward and backward lanes of the first node link that has forward lanes among the array of node links
            of the found vehicle path node.
            If none of the node links have forward lanes, <c>1</c> will be returned.
            </param>
            <param name="flags">The flags to consider for the search.</param>
            <param name="zMeasureMult">The factor how strongly should the difference in Z direction be weighted if the Z coords is more than <paramref name="zTolerance"/>.</param>
            <param name="zTolerance">
            The minimum difference how far apart to the Z coords have to be before the Z coords difference is considered.
            If the Z coords difference is the same as this value or less, the Z coords difference will be considered as zero.
            </param>
            <returns>
              Returns <see langword="null"/> if nth closest <see cref="T:GTA.PathNode"/> is found; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.GetNthClosestVehicleNodePositionWithHeading(GTA.Math.Vector3,System.Int32,GTA.Math.Vector3@,System.Single@,System.Int32@,GTA.GetClosestVehicleNodeFlags,System.Single,System.Single)">
            <summary>
            Gets the position, heading, and number of lanes of the Nth closest vehicle <see cref="T:GTA.PathNode"/>.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.PathNode"/>s against.</param>
            <param name="nthClosest">
            The numeric position the in a series of closest nodes.
            If this is set to 1 then the closest node will be returned. If this is set to 2 then the second closest node will be returned and so on.
            </param>
            <param name="closestNodePosition">The position where the closest node is.</param>
            <param name="heading">
            The heading of the first node link that has forward lanes among the array of node links of the found vehicle path node.
            If none of the node links have forward lanes, <c>0f</c> will be returned.
            </param>
            <param name="numLanes">
            The number of forward and backward lanes of the first node link that has forward lanes among the array of node links
            of the found vehicle path node.
            If none of the node links have forward lanes, <c>1</c> will be returned.
            </param>
            <param name="flags">The flags to consider for the search.</param>
            <param name="zMeasureMult">The factor how strongly should the difference in Z direction be weighted if the Z coords is more than <paramref name="zTolerance"/>.</param>
            <param name="zTolerance">
            The minimum difference how far apart to the Z coords have to be before the Z coords difference is considered.
            If the Z coords difference is the same as this value or less, the Z coords difference will be considered as zero.
            </param>
            <returns>
              <see langword="true"/> if the nth closest <see cref="T:GTA.PathNode"/> is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.ArePathNodesLoadedForArea(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Gets a value indicating whether <see cref="T:GTA.PathNode"/>s are loaded for the region specified.
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
            <returns>
              <see langword="true"/> if <see cref="T:GTA.PathNode"/>s are loaded for the region specified; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.RequestPathNodesInAreaThisFrame(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            <para>
            Requests the path nodes in the given region to stream this frame.
            </para>
            <para>
            This does not guarantee that the nodes will be loaded this frame.
            Therefore, you should keep calling this method for as long as you wish nodes to be present in the given area.
            If you stop calling this method, the nodes may be streamed out again at any time.
            </para>
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
            <returns>
              <see langword="true"/> if <see cref="T:GTA.PathNode"/>s are loaded for the region specified; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GTA.PathFind.SwitchPedPathsInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Toggles ped paths in a cubic area. <see cref="T:GTA.Ped"/>s will walk in areas that are switched on and new
            <see cref="T:GTA.Ped"/>s will be generated on them. If a ped path is switched off, no <see cref="T:GTA.Ped"/>s will be
            created on it and <see cref="T:GTA.Ped"/>s that already exist will try to avoid walking through it.
            To revert to the original state, use <see cref="M:GTA.PathFind.SetPedPathsBackToOriginal(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)"/>.
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
            <param name="active">
            Specifies whether ped nodes in area should be switched on or off. If <see langword="true"/>, they will be
            switched on.
            </param>
            <param name="forceAbortCurrentPath">
            If <see langword="true"/>, this method will avoid possible stalls by forcing any active pathfinding request
            to be aborted before switching ped navmeshes.
            Use this if there are reports of this method causing brief hangs waiting for navmesh data to be accessible,
            but be aware that if timing-critical pathfinding is occuring, that it can be interrupted by this.
            </param>
        </member>
        <member name="M:GTA.PathFind.SetPedPathsBackToOriginal(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Sets all ped paths (navmeshes) in area back to their original state as per the map data and ynv files define.
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
            <param name="forceAbortCurrentPath">
            If <see langword="true"/>, this method will avoid possible stalls by forcing any active pathfinding request
            to be aborted before switching ped navmeshes.
            Use this if there are reports of this method causing brief hangs waiting for navmesh data to be accessible,
            but be aware that if timing-critical pathfinding is occuring, that it can be interrupted by this.
            </param>
        </member>
        <member name="M:GTA.PathFind.SwitchVehicleNodesInArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Toggles vehicle nodes in angled area. <see cref="T:GTA.Vehicle"/>s will drive on to roads that are switched on and new <see cref="T:GTA.Vehicle"/>s will be generated on them.
            A vehicle node is switched off, no <see cref="T:GTA.Vehicle"/>s should be created on it and <see cref="T:GTA.Vehicle"/>s that already exist will try to avoid driving on to it.
            To undo effects of this method, use <see cref="M:GTA.PathFind.SetVehicleNodesBackToOriginal(GTA.Math.Vector3,GTA.Math.Vector3)"/> or <see cref="M:GTA.PathFind.SetVehicleNodesBackToOriginalInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)"/>.
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
            <param name="active">Specifies whether vehicle nodes in area should be switched on or off. If <see langword="true"/>, they will be switched on.</param>
        </member>
        <member name="M:GTA.PathFind.SwitchVehicleNodesInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)">
            <summary>
            <para>
            Toggles vehicle nodes in angled area. <see cref="T:GTA.Vehicle"/>s will drive on to roads that are switched on and new <see cref="T:GTA.Vehicle"/>s will be generated on them.
            A vehicle node is switched off, no <see cref="T:GTA.Vehicle"/>s should be created on it and <see cref="T:GTA.Vehicle"/>s that already exist will try to avoid driving on to it.
            To undo effects of this method, use <see cref="M:GTA.PathFind.SetVehicleNodesBackToOriginal(GTA.Math.Vector3,GTA.Math.Vector3)"/> or <see cref="M:GTA.PathFind.SetVehicleNodesBackToOriginalInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)"/>.
            </para>
            <para>
            <paramref name="position1"/> and <paramref name="position2"/> define the midpoints of two parallel sides and <paramref name="areaWidth"/> is the width of these sides.
            </para>
            </summary>
            <param name="position1">One of the midpoints of two parallel sides, which should be different from <paramref name="position2"/>.</param>
            <param name="position2">One of the midpoints of two parallel sides, which should be different from <paramref name="position1"/>.</param>
            <param name="areaWidth">The width of these sides that defines <paramref name="position1"/> and <paramref name="position2"/>.</param>
            <param name="active">Specifies whether vehicle nodes in area should be switched on or off. If <see langword="true"/>, they will be switched on.</param>
        </member>
        <member name="M:GTA.PathFind.SetVehicleNodesBackToOriginal(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Sets all vehicle nodes in area back to their original state as per area and ynd file defines (which is loaded as <c>CPathRegion</c> in the game process memory).
            </summary>
            <param name="min">The minimum position of the region.</param>
            <param name="max">The maximum position of the region.</param>
        </member>
        <member name="M:GTA.PathFind.SetVehicleNodesBackToOriginalInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            <para>
            Sets all vehicle nodes in area back to their original state as per area and ynd file defines (which is loaded as <c>CPathRegion</c> in the game process memory).
            </para>
            <para>
            <paramref name="position1"/> and <paramref name="position2"/> define the midpoints of two parallel sides and <paramref name="areaWidth"/> is the width of these sides.
            </para>
            </summary>
            <param name="position1">One of the midpoints of two parallel sides, which should be different from <paramref name="position2"/>.</param>
            <param name="position2">One of the midpoints of two parallel sides, which should be different from <paramref name="position1"/>.</param>
            <param name="areaWidth">The width of these sides that defines <paramref name="position1"/> and <paramref name="position2"/>.</param>
        </member>
        <member name="P:GTA.PathNode.AreaId">
            <summary>
            Gets the area id.
            </summary>
        </member>
        <member name="P:GTA.PathNode.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:GTA.PathNode.Handle">
            <summary>
            Gets the handle for native functions for vehicle path nodes.
            </summary>
        </member>
        <member name="P:GTA.PathNode.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.PathNode"/>.
            </summary>
        </member>
        <member name="P:GTA.PathNode.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.PathNode"/>.
            </summary>
        </member>
        <member name="P:GTA.PathNode.IsLoaded">
            <summary>
            Determines if this <see cref="T:GTA.PathNode"/> is loaded.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNode"/> is loaded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.PathNode.Position">
            <summary>
            Determines if this <see cref="T:GTA.PathNode"/> is loaded.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNode"/> is loaded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.PathNode.IsSwitchedOff">
            <summary>
            Determines if this <see cref="T:GTA.PathNode"/> is switched off for ambient population.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNode"/> is switched off for ambient population; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.PathNode.IsGpsAllowed">
            <summary>
            Determines if this <see cref="T:GTA.PathNode"/> has GPS allowed.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNode"/> has GPS allowed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.PathNode.VehicleDensity">
            <summary>
            Gets the value indicating how busy the <see cref="T:GTA.PathNode"/> is.
            </summary>
            <returns>The value indicating how busy the <see cref="T:GTA.PathNode"/> is. if the node is loaded and is for vehicles; otherwise, zero.</returns>
        </member>
        <member name="M:GTA.PathNode.GetVehicleNodePropertyFlags">
            <summary>
            Gets the property flags if this <see cref="T:GTA.PathNode"/> has.
            </summary>
            <returns>The property flags if this <see cref="T:GTA.PathNode"/> has if the node is loaded and is for vehicles; otherwise, <see langword="VehiclePathNodePropertyFlags.None"/>.</returns>
        </member>
        <member name="M:GTA.PathNode.GetAllPathNodeLinks">
            <summary>
            Gets all the <see cref="T:GTA.PathNodeLink"/> this <see cref="T:GTA.PathNode"/> links to.
            </summary>
            <returns>The <see cref="T:GTA.PathNodeLink"/> this <see cref="T:GTA.PathNode"/> links to if this <see cref="T:GTA.PathNode"/> is loaded; otherwise, the empty array.</returns>
        </member>
        <member name="M:GTA.PathNode.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same path node as this <see cref="T:GTA.PathNode"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same path node as this <see cref="T:GTA.PathNode"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PathNode.op_Equality(GTA.PathNode,GTA.PathNode)">
            <summary>
            Determines if two <see cref="T:GTA.PathNode"/>s refer to the same path node.
            </summary>
            <param name="left">The left <see cref="T:GTA.PathNode"/>.</param>
            <param name="right">The right <see cref="T:GTA.PathNode"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same path node as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PathNode.op_Inequality(GTA.PathNode,GTA.PathNode)">
            <summary>
            Determines if two <see cref="T:GTA.PathNode"/>s don't refer to the same path node.
            </summary>
            <param name="left">The left <see cref="T:GTA.PathNode"/>.</param>
            <param name="right">The right <see cref="T:GTA.PathNode"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same path node as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PathNode.op_Implicit(GTA.PathNode)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.PathNode"/> to a native input argument.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.AreaId">
            <summary>
            Gets the area id this <see cref="T:GTA.PathNodeLink"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.Index">
            <summary>
            Gets the index for the node link array of the region this <see cref="T:GTA.PathNodeLink"/> belongs to.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.TargetAreaId">
            <summary>
            Gets target area id for the target <see cref="T:GTA.PathNode"/>.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.TargetNodeId">
            <summary>
            Gets target node id for the target <see cref="T:GTA.PathNode"/>.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.TargetPathNode">
            <summary>
            Gets to the <see cref="T:GTA.PathNode"/> this <see cref="T:GTA.PathNodeLink"/> is targeted at.
            </summary>
            <returns>The <see cref="T:GTA.PathNode"/> this <see cref="T:GTA.PathNodeLink"/> is targeted at if both this <see cref="T:GTA.PathNodeLink"/> and the target <see cref="T:GTA.PathNode"/> are loaded; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:GTA.PathNodeLink.GetForwardAndBackwardLaneCounts(System.Int32@,System.Int32@)">
            <summary>
            Gets the number of forward and backward lanes this <see cref="T:GTA.PathNodeLink"/> has.
            </summary>
            <param name="forwardLaneCount">The number of forward lanes if the <see cref="T:GTA.PathNodeLink"/> is loaded. If not loaded, zero will be returned.</param>
            <param name="backwardLaneCount">The number of backward lanes if the <see cref="T:GTA.PathNodeLink"/> is loaded. If not loaded, zero will be returned.</param>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNodeLink"/> is loaded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.PathNodeLink.GetForwardAndBackwardLaneCounts">
            <summary>
            Gets the number of forward and backward lanes this <see cref="T:GTA.PathNodeLink"/> has.
            </summary>
            <returns>The numbers of forward and backward lanes this <see cref="T:GTA.PathNodeLink"/> has if loaded; otherwise, the tuples with both values filled with zero.</returns>
        </member>
        <member name="P:GTA.PathNodeLink.MemoryAddress">
            <summary>
            Gets the memory address of this <see cref="T:GTA.PathNodeLink"/>.
            </summary>
        </member>
        <member name="P:GTA.PathNodeLink.IsLoaded">
            <summary>
            Determines if this <see cref="T:GTA.PathNodeLink"/> is loaded.
            </summary>
            <returns><see langword="true"/> if this <see cref="T:GTA.PathNodeLink"/> is loaded; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.PathNodeLink.ForwardLaneCount">
            <summary>
            Gets the number of forward lanes this <see cref="T:GTA.PathNodeLink"/> has.
            </summary>
            <returns>The number of forward lanes if this <see cref="T:GTA.PathNodeLink"/> is loaded; otherwise, zero.</returns>
        </member>
        <member name="P:GTA.PathNodeLink.BackwardLaneCount">
            <summary>
            Gets the number of backward lanes this <see cref="T:GTA.PathNodeLink"/> has.
            </summary>
            <returns>The number of backward lanes if this <see cref="T:GTA.PathNodeLink"/> is loaded; otherwise, zero.</returns>
        </member>
        <member name="M:GTA.PathNodeLink.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same path node link as this <see cref="T:GTA.PathNodeLink"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same path node link as this <see cref="T:GTA.PathNodeLink"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PathNodeLink.op_Equality(GTA.PathNodeLink,GTA.PathNodeLink)">
            <summary>
            Determines if two <see cref="T:GTA.PathNodeLink"/>s refer to the same path node link.
            </summary>
            <param name="left">The left <see cref="T:GTA.PathNodeLink"/>.</param>
            <param name="right">The right <see cref="T:GTA.PathNodeLink"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same path node link as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.PathNodeLink.op_Inequality(GTA.PathNodeLink,GTA.PathNodeLink)">
            <summary>
            Determines if two <see cref="T:GTA.PathNodeLink"/>s don't refer to the same path node link.
            </summary>
            <param name="left">The left <see cref="T:GTA.PathNodeLink"/>.</param>
            <param name="right">The right <see cref="T:GTA.PathNodeLink"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same path node link as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:GTA.Rope.VertexCount">
            <summary>
            Gets the number of vertices of this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="P:GTA.Rope.Length">
            <summary>
            Gets or sets the length of this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.ActivatePhysics">
            <summary>
            Activates physics interactions for this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.Attach(GTA.Entity)">
            <summary>
            Attaches a single <see cref="T:GTA.Entity"/> to this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity">The entity to attach.</param>
        </member>
        <member name="M:GTA.Rope.Attach(GTA.Entity,GTA.Math.Vector3)">
            <summary>
            Attaches a single <see cref="T:GTA.Entity"/> to this <see cref="T:GTA.Rope"/> at the specified <paramref name="position"/>.
            </summary>
            <param name="entity">The entity to attach.</param>
            <param name="position">The position in world coordinates to attach to.</param>
        </member>
        <member name="M:GTA.Rope.Detach(GTA.Entity)">
            <summary>
            Detaches a single <see cref="T:GTA.Entity"/> from this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity">The entity to detach.</param>
        </member>
        <member name="M:GTA.Rope.Connect(GTA.Entity,GTA.Entity,System.Single)">
            <summary>
            Connects two <see cref="T:GTA.Entity"/>s with this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="entity1">The first entity to attach.</param>
            <param name="entity2">The second entity to attach.</param>
            <param name="length">The rope length.</param>
        </member>
        <member name="M:GTA.Rope.Connect(GTA.Entity,GTA.Math.Vector3,GTA.Entity,GTA.Math.Vector3,System.Single)">
            <summary>
            Connects two <see cref="T:GTA.Entity"/>s with this <see cref="T:GTA.Rope"/> at the specified positions.
            </summary>
            <param name="entity1">The first entity to attach.</param>
            <param name="entity2">The second entity to attach.</param>
            <param name="position1">The position in world coordinates to attach the first entity to.</param>
            <param name="position2">The position in world coordinates to attach the second entity to.</param>
            <param name="length">The rope length.</param>
        </member>
        <member name="M:GTA.Rope.PinVertex(System.Int32,GTA.Math.Vector3)">
            <summary>
            Pin a vertex of this <see cref="T:GTA.Rope"/> to a <paramref name="position"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <param name="position">The position in world coordinates to pin to.</param>
        </member>
        <member name="M:GTA.Rope.UnpinVertex(System.Int32)">
            <summary>
            Unpin a vertex of this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
        </member>
        <member name="M:GTA.Rope.GetVertexCoord(System.Int32)">
            <summary>
            Gets the world coordinates of a single vertex of this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="vertex">The index of the vertex.</param>
            <returns>The position of the vertex in world coordinates.</returns>
        </member>
        <member name="M:GTA.Rope.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Rope"/>.
            </summary>
        </member>
        <member name="M:GTA.Rope.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Rope"/> exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Rope"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same rope as this <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same rope as this <see cref="T:GTA.Rope"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Equality(GTA.Rope,GTA.Rope)">
            <summary>
            Determines if two <see cref="T:GTA.Rope"/>s refer to the same rope.
            </summary>
            <param name="left">The left <see cref="T:GTA.Rope"/>.</param>
            <param name="right">The right <see cref="T:GTA.Rope"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same rope as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Inequality(GTA.Rope,GTA.Rope)">
            <summary>
            Determines if two <see cref="T:GTA.Rope"/>s don't refer to the same rope.
            </summary>
            <param name="left">The left <see cref="T:GTA.Rope"/>.</param>
            <param name="right">The right <see cref="T:GTA.Rope"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same rope as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Rope.op_Implicit(GTA.Rope)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Rope"/> to a native input argument.
            </summary>
        </member>
        <member name="F:GTA.GetGroundHeightMode.Normal">
            <summary>
            Does not consider water as ground.
            </summary>
        </member>
        <member name="F:GTA.GetGroundHeightMode.ConsiderWaterAsGround">
            <summary>
            Consider water as ground and takes the waves into account.
            Does not make any difference from <see cref="F:GTA.GetGroundHeightMode.Normal"/> in earlier game versions such as v1.0.372.2.
            </summary>
        </member>
        <member name="F:GTA.GetGroundHeightMode.ConsiderWaterAsGroundNoWaves">
            <summary>
            Consider water as ground but does not take the waves into account.
            Does not make any difference from <see cref="F:GTA.GetGroundHeightMode.Normal"/> in earlier game versions such as v1.0.372.2.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.PedCapsules">
            <summary>
            Detects <see cref="T:GTA.Ped"/> who are not ragdolled (not running any NM tasks) by detecting the simple capsule shape of <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.Ragdolls">
            <summary>
            Detects <see cref="T:GTA.Ped"/>'s ragdoll. Can detect those who are not ragdolled.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.Objects">
            <summary>
            Detects <see cref="T:GTA.Prop"/>s.
            </summary>
        </member>
        <member name="F:GTA.IntersectFlags.Foliage">
            <summary>
            Detects foliage, which can be affected by the wind or contacts of <see cref="T:GTA.Entity"/>.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.Result">
            <summary>
            Gets the result code.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.DidHit">
            <summary>
            Gets a value indicating whether this ray cast collided with anything.
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.HitEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity" /> this ray cast collided with.
            <remarks>Returns <see langword="null" /> if the ray cast didn't collide with any <see cref="T:GTA.Entity"/>.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.HitPosition">
            <summary>
            Gets the world coordinates where this ray cast collided.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.SurfaceNormal">
            <summary>
            Gets the normal of the surface where this ray cast collided.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.RaycastResult.MaterialHash">
            <summary>
            Gets a hash indicating the material type of what this ray cast collided with.
            <remarks>Returns <see cref="F:GTA.MaterialHash.None"/> if the ray cast didn't collide with anything.</remarks>
            </summary>
        </member>
        <member name="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a line-of-sight world probe shape test between 2 points.
            </summary>
            <param name="startPosition">The position where the shape test starts.</param>
            <param name="endPosition">The position where the shape test ends.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartExpensiveSyncTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a expensive synchronous line-of-sight world probe shape test between 2 points and blocks the game until the shape test completes.
            </summary>
            <param name="startPosition">The position where the shape test starts.</param>
            <param name="endPosition">The position where the shape test ends.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <remarks>This method is much more expensive than the asynchronous version (<see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/>).</remarks>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBoundingBox(GTA.Entity,GTA.IntersectFlags,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bounding box.
            </summary>
            <param name="entity">The entity to inspect.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBox(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.EulerRotationOrder,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bound where the entity can collide.
            </summary>
            <param name="sourcePosition">The source position.</param>
            <param name="dimension">The dimensions how much the shape test will search from the source position.</param>
            <param name="rotationAngles">The rotations in degree how much the dimension will be rotated before the shape test starts.</param>
            <param name="rotationOrder">The rotation order in local space the dimensions will be rotated in.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestBound(GTA.Entity,GTA.IntersectFlags,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the <see cref="T:GTA.Entity"/>'s bound where the entity can collide.
            </summary>
            <param name="entity">The entity to inspect.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the area where shape test capsule covers.
            </summary>
            <param name="startPosition">The position where the shape test starts.</param>
            <param name="endPosition">The position where the shape test ends.</param>
            <param name="radius">The radius of the shape test capsule.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestSweptSphere(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test against the area where swept sphere (ellipsoid) for shape test covers.
            </summary>
            <param name="startPosition">The position where the shape test starts.</param>
            <param name="endPosition">The position where the shape test ends.</param>
            <param name="radius">The radius of the swept sphere.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestMouseCursorLOSProbe(GTA.Math.Vector3@,GTA.Math.Vector3@,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a line-of-sight world probe shape test between 2 points calculated based on the mouse cursor position.
            Works just like <see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/> only the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            </summary>
            <param name="probeStartPosition">The returned start position of the probe in world space.</param>
            <param name="probeEndPosition">The returned end position of the probe in world space.</param>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="M:GTA.ShapeTest.StartTestMouseCursorLOSProbe(GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)">
            <summary>
            Start a shape test between 2 points calculated based on the mouse cursor position.
            Works just like <see cref="M:GTA.ShapeTest.StartTestLOSProbe(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity,GTA.ShapeTestOptions)"/> only the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            </summary>
            <param name="intersectFlags">What type of objects the shape test should intersect with.</param>
            <param name="excludeEntity">Specify an <see cref="T:GTA.Entity"/> that the shape test should exclude, leave null for no entities ignored.</param>
            <param name="options">Specify options for the shape test.</param>
            <value>
            The shape test handle and the start and end points of the probe are calculated based on the mouse cursor position projected into the world.
            If this method fails to create the shape test request because there are too many ongoing requests, <see cref="P:GTA.ShapeTestHandle.IsRequestFailed"/> will return <see langword="true" /> on the handle struct.
            </value>
        </member>
        <member name="T:GTA.ShapeTestHandle">
            <summary>
            Represents a shape test handle.
            You need to call <see cref="M:GTA.ShapeTestHandle.GetResult(GTA.ShapeTestResult@)"/> or <see cref="M:GTA.ShapeTestHandle.GetResultIncludingMaterial(GTA.ShapeTestResult@,GTA.MaterialHash@)"/>
            every frame until one of the methods returns <see cref="F:GTA.ShapeTestStatus.Ready"/>.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.Handle">
            <summary>
            Gets the shape test handle.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.Model"/>.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestHandle.IsRequestFailed">
            <summary>
            Gets if the request of <see cref="T:GTA.ShapeTestHandle"/> is failed.
            There is a limit to the number that can be in the system. Therefore, native functions for shape tests may fail to create the shapetest requests.
            </summary>
            <value>
              <see langword="true" /> if the request is failed; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResult(GTA.ShapeTestResult@)">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position and normal.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResult">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position and normal.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResultIncludingMaterial(GTA.ShapeTestResult@,GTA.MaterialHash@)">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position, normal, and a hash of the material name.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="M:GTA.ShapeTestHandle.GetResultIncludingMaterial">
            <summary>
            If status returned is <see cref="F:GTA.ShapeTestStatus.Ready"/>, then returns whether something was hit, and if so nearest hit position, normal, and a hash of the material name.
            You need to call this method until the result is ready since the shape test result may not be finished in the same frame you start the shape test.
            </summary>
            <remarks>
            The shape test request is destroyed by this call if <see cref="F:GTA.ShapeTestStatus.Ready"/> is returned.
            If this is not called every frame then the request will be destroyed.
            </remarks>
        </member>
        <member name="T:GTA.ShapeTestResult">
            <summary>
            Represents a shape test result.
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.DidHit">
            <summary>
            Gets a value indicating whether this shape test collided with anything.
            </summary>
        </member>
        <member name="M:GTA.ShapeTestResult.TryGetHitEntity(GTA.Entity@)">
            <summary>
            Try to get the <see cref="T:GTA.Entity" /> this shape test hit.
            <remarks>Returns <see langword="false" /> if the shape test didn't hit or what was hit wasn't a <see cref="T:GTA.Entity" />.</remarks>
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.HitPosition">
            <summary>
            Gets the world coordinates where this shape test hit.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the shape test didn't hit anything.</remarks>
            </summary>
        </member>
        <member name="P:GTA.ShapeTestResult.SurfaceNormal">
            <summary>
            Gets the normal of the surface where this shape test hit.
            <remarks>Returns <see cref="P:GTA.Math.Vector3.Zero"/> if the shape test didn't hit anything.</remarks>
            </summary>
        </member>
        <member name="F:GTA.ShapeTestStatus.NonExistent">
            <summary>
            Shapetest requests are discarded if they are ignored for a frame or as soon as the results are returned.
            </summary>
        </member>
        <member name="F:GTA.ShapeTestStatus.NotReady">
            <summary>
            Not ready yet; try again next frame.
            </summary>
        </member>
        <member name="F:GTA.ShapeTestStatus.Ready">
            <summary>
            The result is ready and the results have been returned to you.
            The shape test request has also just been destroyed.
            </summary>
        </member>
        <member name="T:GTA.Pickup">
            <summary>
            Represents a pickup placement, not pickup object.
            </summary>
        </member>
        <member name="P:GTA.Pickup.Position">
            <summary>
            The position of this <see cref="T:GTA.Pickup"/> placement.
            </summary>
        </member>
        <member name="P:GTA.Pickup.IsCollected">
            <summary>
            Gets if this <see cref="T:GTA.Pickup"/> placement has been collected.
            </summary>
        </member>
        <member name="P:GTA.Pickup.Object">
            <summary>
            Gets the <see cref="T:GTA.PickupObject"/> of this <see cref="T:GTA.Pickup"/> placement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GTA.Pickup.ObjectExists">
            <summary>
            Determines if the object of this <see cref="T:GTA.Pickup"/> placement exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GTA.Pickup.Delete">
            <summary>
            Destroys this <see cref="T:GTA.Pickup"/> placement.
            </summary>
        </member>
        <member name="M:GTA.Pickup.Exists">
            <summary>
            Determines if this <see cref="T:GTA.Pickup"/> placement exists.
            </summary>
            <returns><see langword="true" /> if this <see cref="T:GTA.Pickup"/> exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same pickup placement as this <see cref="T:GTA.Pickup"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same pickup as this <see cref="T:GTA.Pickup"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Equality(GTA.Pickup,GTA.Pickup)">
            <summary>
            Determines if two <see cref="T:GTA.Pickup"/>s refer to the same pickup placement.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same pickup placement as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Inequality(GTA.Pickup,GTA.Pickup)">
            <summary>
            Determines if two <see cref="T:GTA.Pickup"/>s don't refer to the same pickup placement.
            </summary>
            <param name="left">The left <see cref="T:GTA.Pickup"/>.</param>
            <param name="right">The right <see cref="T:GTA.Pickup"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same pickup as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Pickup.op_Implicit(GTA.Pickup)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Pickup"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.PickupObject">
            <summary>
            Represents a pickup object, which is for a <c>CPickup</c>.
            </summary>
        </member>
        <member name="M:GTA.PickupObject.FromHandle(System.Int32)">
            <summary>
            Get a <see cref="T:GTA.PickupObject"/> instance by its handle.
            </summary>
            <param name="handle"></param>
            <returns>
            A <see cref="T:GTA.PickupObject"/> if the handle is for pickup object; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="F:GTA.PickupPlacementFlags.Map">
            <summary>
            Only used in MP.
            This is used for pickups that are created locally on each machine and only networked when collected.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.Fixed">
            <summary>
            Sets the pickup as fixed so it cannot move.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.Regenerates">
            <summary>
            Sets the pickup as regenerating.
            </summary>
            <remarks>
            Cannot be used in <see cref="M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:GTA.PickupPlacementFlags.SnapToGround">
            <summary>
            Places the pickup on the ground.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.OrientToGround">
            <summary>
            Orientates the pickup correctly on the ground.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.LocalOnly">
            <summary>
            Only used in MP.
            Creates the pickup non-networked.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.BlippedSimple">
            <summary>
            Intended to give the pickup a simple blip, but does not seem to work.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.BlippedComplex">
            <summary>
            Gives the pickup a complex blip.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.Upright">
            <summary>
            Some pickups need to be orientated differently to lie on the ground properly.
            Use this flag if your pickup is not lying correctly.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.Rotate">
            <summary>
            Pickup will rotate.
            </summary>
            <remarks>
            Cannot be used in <see cref="M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:GTA.PickupPlacementFlags.FaceToPlayer">
            <summary>
            Pickup will always face the player.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.HideInPhotos">
            <summary>
            Pickup will be hidden when the player is using the phone camera.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.PlayerGift">
            <summary>
            The pickup is being dropped as a gift to another player.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.OnObject">
            <summary>
            The pickup is lying on an object and probes for that when snapping or orientating to ground.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.GlowInTeam">
            <summary>
            Set pickups to glow even if pickup can't be picked up because of team checks.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.AutoEquip">
            <summary>
            If set on a weapon pickup, it will auto equip the picked up weapon.
            It will ignore autoswap logic.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.CollectableInVehicle">
            <summary>
            If set, the pickup can be collected by a ped in a vehicle.
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.DisableWeaponHdModel">
            <summary>
            if set the weapon pickup will render SD model only (HD&lt;-&gt;SD model switch will be disabled).
            </summary>
        </member>
        <member name="F:GTA.PickupPlacementFlags.ForceDeferredModel">
            <summary>
            If set the pickup will render as deferred model (no transparency/alpha blending in this render mode).
            </summary>
        </member>
        <member name="P:GTA.Player.MemoryAddress">
            <summary>
            Gets the memory address of <c>CPlayerInfo</c> for this <see cref="T:GTA.Player"/>, where most of the player specific variables are stored in memory.
            </summary>
            <remarks>
            Some the native functions exposed in the namespace <c>PLAYER</c> just access some of members of <c>CPed</c> but none of those of <c>CPlayerInfo</c>.
            For example, <see cref="P:GTA.Player.ForcedAim"/> only access one member of <c>CPed</c>, which does not affect non-player <see cref="T:GTA.Ped"/>s.
            </remarks>
        </member>
        <member name="P:GTA.Player.Character">
            <summary>
            Gets the <see cref="T:GTA.Ped"/> this <see cref="T:GTA.Player"/> is controlling.
            </summary>
        </member>
        <member name="P:GTA.Player.Name">
            <summary>
            Gets the Social Club name of this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.Money">
            <summary>
            Gets or sets how much money this <see cref="T:GTA.Player"/> has.
            <remarks>Only works if current player is <see cref="F:GTA.PedHash.Michael"/>, <see cref="F:GTA.PedHash.Franklin"/> or <see cref="F:GTA.PedHash.Trevor"/></remarks>
            </summary>
        </member>
        <member name="M:GTA.Player.IsTargeting(GTA.Entity)">
            <summary>
            Determines whether this <see cref="T:GTA.Player"/> is targeting the specified <see cref="T:GTA.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to check.</param>
            <returns>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is targeting the specified <see cref="T:GTA.Entity"/>; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:GTA.Player.IsTargetingAnything">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is targeting anything.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is targeting anything; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.TargetedEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Player"/> is free aiming.
            </summary>
            <returns>The <see cref="T:GTA.Entity"/> if this <see cref="T:GTA.Player"/> is free aiming any <see cref="T:GTA.Entity"/>; otherwise, <see langword="null" /></returns>
        </member>
        <member name="P:GTA.Player.TargetedBuilding">
            <summary>
            Gets the <see cref="T:GTA.Building"/> this <see cref="T:GTA.Player"/> is free aiming.
            You can use this property to detect if the raycast collided with something (although you cannot detect if the raycast collided with <see cref="T:GTA.AnimatedBuilding"/>).
            </summary>
            <remarks>
            <para>This functions the same as <see cref="P:GTA.Player.TargetedEntity"/> except this property returns a <see cref="T:GTA.Building"/> instead of an <see cref="T:GTA.Entity"/>.</para>
            <para>You should not expect the returned <see cref="T:GTA.Building"/> instance has meaningful position info as its matrix is set to <see cref="P:GTA.Math.Matrix.Identity"/> most of the time.</para>
            </remarks>
            <returns>The <see cref="T:GTA.Building"/> if this <see cref="T:GTA.Player"/> is free aiming any <see cref="T:GTA.Building"/>; otherwise, <see langword="null"/></returns>
        </member>
        <member name="P:GTA.Player.ClosestFreeAimTargetPos">
            <summary>
            Gets the closest target position where this <see cref="T:GTA.Player"/> is free aiming at.
            </summary>
            <remarks>
            <para>
            Bullets and projectiles this <see cref="T:GTA.Player"/> shoot will go through this point.
            For projectiles, this applies only if the gravity is set to the default value.
            </para>
            <para>
            The value will be the position the current asynchronous shape test yields
            if this <see cref="T:GTA.Player"/> is pressing <see cref="F:GTA.Control.Aim"/> this frame.
            The range how far the shape test will be tested depends on the <c>WeaponRange</c> value in the <c>weapons.meta</c> file.
            You should not use what this property returns as the exact crosshair target position,
            because the shape test for crosshair target processes asynchronously.
            </para>
            If <see cref="T:GTA.Player"/> is not pressing <see cref="F:GTA.Control.Aim"/> this frame, The value will be the position of
            the last asynchronous shape test result when this <see cref="T:GTA.Player"/> was pressing <see cref="F:GTA.Control.Aim"/>.
            </remarks>
            <returns>The position where this <see cref="T:GTA.Player"/> is free aiming at.</returns>
        </member>
        <member name="P:GTA.Player.LockedOnEntity">
            <summary>
            Gets the <see cref="T:GTA.Entity"/> this <see cref="T:GTA.Player"/> is locking on when they are aiming with a firearm using a controller or they are locking on unarmed or with a melee weapon.
            </summary>
            <returns>The <see cref="T:GTA.Entity"/> if this <see cref="T:GTA.Player"/> is automatically locking on any <see cref="T:GTA.Entity"/>; otherwise, <see langword="null" /></returns>
        </member>
        <member name="P:GTA.Player.LastLockOnTargetPos">
            <summary>
            Gets the last position where this <see cref="T:GTA.Player"/> is automatically targeting at.
            The position should be where the <see cref="F:GTA.Bone.SkelSpine3"/> bone is if the target is <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            The value will be <see cref="P:GTA.Math.Vector3.Zero"/> when <see cref="P:GTA.Player.LockedOnEntity"/> returns <see langword="null"/>.
            </remarks>
            <returns>The position where this <see cref="T:GTA.Player"/> is automatically targeting at.</returns>
        </member>
        <member name="P:GTA.Player.WantedLevel">
            <summary>
            Gets or sets the wanted level for this <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            <para>
            Will refocus the search area if you set a value less than the current value and is not zero.
            </para>
            <para>
            Hardcoded to clamp to at most 5 since <c>SET_PLAYER_WANTED_LEVEL</c> just sets the pending crime value to zero
            when passed wanted level is a value other than from 1 to 5 (inclusive).
            Also, the game does not read <c>WantedLevel6</c> items from <c>dispatch.meta</c>.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Player.WantedCenterPosition">
            <summary>
            Gets or sets the wanted center position for this <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            The place in world coordinates where the police think this <see cref="T:GTA.Player"/> is.
            </value>
        </member>
        <member name="P:GTA.Player.CurrentCrimeValue">
            <summary>
            Gets or sets the current crime value that determines the real wanted level when the game updates the real wanted level.
            </summary>
            <remarks>
            For instance, if this value is 32 and a vehicle theft crime you started gets reported (increases by 18) without crime directly getting spotted by the police,
            this value will be 50 and the wanted level will be one when the game updates the real wanted level using this value.
            </remarks>
            <value>
            The current crime value.
            </value>
        </member>
        <member name="P:GTA.Player.NewCrimeValue">
            <summary>
            Gets or sets the pending crime value that will be applied when the game ticks
            if <see cref="P:GTA.Player.TimeWhenNewCrimeValueTakesEffect"/> is not zero and less than <see cref="P:GTA.Game.GameTime"/>.
            </summary>
            <remarks>
            The game sets this value only when this <see cref="T:GTA.Player"/> commit a crime that will immediately increase their wanted level such as targeting a police officer,
            when <c>SET_PLAYER_WANTED_LEVEL</c> is called and the wanted level is to increase, or when the game applies this value to <see cref="P:GTA.Player.CurrentCrimeValue"/>.
            </remarks>
            <value>
            The pending crime value.
            </value>
        </member>
        <member name="P:GTA.Player.TimeWhenNewCrimeValueTakesEffect">
            <summary>
            Gets or sets the game time when <see cref="P:GTA.Player.NewCrimeValue"/> will be set to <see cref="P:GTA.Player.CurrentCrimeValue"/>.
            If zero, the game will not apply <see cref="P:GTA.Player.NewCrimeValue"/>.
            </summary>
            <remarks>
            The game sets this value only when <c>SET_PLAYER_WANTED_LEVEL</c> is called and the wanted level is to increase
            or when the game applies <see cref="P:GTA.Player.NewCrimeValue"/> to <see cref="P:GTA.Player.CurrentCrimeValue"/> and set this value to zero.
            </remarks>
            <value>
            The game time when <see cref="P:GTA.Player.NewCrimeValue"/> will be set to <see cref="P:GTA.Player.CurrentCrimeValue"/>.
            </value>
        </member>
        <member name="P:GTA.Player.TimeSearchLastRefocused">
            <summary>
            Gets or sets the last time when the search area got refocused for this <see cref="T:GTA.Player"/>.
            When you commit a crime that refocus the search area, this value will update.
            </summary>
            <remarks>
            The game will set this value to zero when the wanted level is zero.
            </remarks>
        </member>
        <member name="P:GTA.Player.TimeLastSpotted">
            <summary>
            Gets or sets the last game time when this <see cref="T:GTA.Player"/> is spotted by the police.
            The game will set this value to zero when the wanted level is zero.
            </summary>
            <remarks>
            The game will set to the game time as long as this <see cref="T:GTA.Player"/> is spotted by the police each frame,
            but you can make the <see cref="T:GTA.Player"/> getting in the hidden evasion phase up to 1 or 2 seconds if the police does not know where the <see cref="T:GTA.Player"/> is.
            </remarks>
        </member>
        <member name="P:GTA.Player.TimeHiddenEvasionStarted">
            <summary>
            Gets or sets the game time when hidden evasion phase gets started.
            </summary>
            <remarks>
            The game will set to zero when this <see cref="T:GTA.Player"/> is spotted by the police each frame,
            but you can set small value (but not zero) to clear the wanted level when the <see cref="T:GTA.Player"/> is in the hidden evasion phase
            if not suppressed by <c>SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME</c>.
            </remarks>
        </member>
        <member name="P:GTA.Player.AreWantedStarsGrayedOut">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GTA.Player"/> has a wanted level and the stars are displayed gray.
            </summary>
            <remarks>
            Technically, this property returns <see langword="true"/> when the flag for stars graying out is set
            and <see cref="P:GTA.Player.TimeLastSpotted"/> has more value by more than <c>1000</c> or <c>2000</c> (depending on a unknown state)
            than <see cref="P:GTA.Game.GameTime"/>.
            </remarks>
        </member>
        <member name="P:GTA.Player.IgnoredByPolice">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> is ignored by the police.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is ignored by the police; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IgnoredByEveryone">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> is ignored by everyone.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is ignored by everyone; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.DispatchsCops">
            <summary>
            Gets or sets a value indicating whether cops will be dispatched for this <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            <see langword="true" /> if cops will be dispatched; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.SetNewWantedLevel(System.Int32,System.Boolean)">
            <summary>
            Sets the "new" wanted level for the player.
            The current wanted level changes takes 10 seconds before it gets applied (emulating the time it takes
            a citizen to report the crime) if the passed wanted level is higher than the current.
            Otherwise, the change will get applied immediately, including <see cref="P:GTA.Player.CurrentCrimeValue"/> and
            <see cref="P:GTA.Player.WantedCenterPosition"/>.
            </summary>
        </member>
        <member name="M:GTA.Player.SetNewWantedLevelNoDrop(System.Int32,System.Boolean)">
            <summary>
            Sets the "new" wanted level for the player only if its higher than the current.
            The current wanted level changes takes 10 seconds before it gets applied.
            </summary>
        </member>
        <member name="M:GTA.Player.SetWantedLevelNoRefocusSearchArea(System.Int32)">
            <summary>
            Sets the wanted level for this <see cref="T:GTA.Player"/> but without refocusing the search area.
            </summary>
            <remarks>
            When the previous wanted level is zero, you cannot avoid refocusing the search area with this method.
            </remarks>
        </member>
        <member name="M:GTA.Player.ReportCrime(GTA.CrimeType,System.Int32)">
            <summary>
            Reports a crime for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="crimeToReport">The crime time to report.</param>
            <param name="crimeValue">
            If left at zero, the crime will get evaluated.
            It not zero, the crime value will be overridden to specify an amount (can be both positive or negative).
            </param>
            <remarks>
            Clearing the wanted level will disable to increase the crime value for commiting crimes for 2 seconds.
            </remarks>
        </member>
        <member name="M:GTA.Player.ReportPoliceSpottingPlayer">
            <summary>
            Forces this <see cref="T:GTA.Player"/> to get spotted by police.
            </summary>
            <remarks>
            Unlike when you commit a crime that refocuses the search area, this method also updates <see cref="P:GTA.Player.TimeLastSpotted"/>.
            </remarks>
        </member>
        <member name="M:GTA.Player.ForceStartHiddenEvasion">
            <summary>
            Force hidden evasion to start for this <see cref="T:GTA.Player"/>, making wanted stars flashing and cops using vision cones to search for the player.
            You can use this method at any point that police know where this player is.
            </summary>
        </member>
        <member name="P:GTA.Player.RemainingSpecialAbilityMeter">
            <summary>
            Gets or sets the remaining value of the special ability meter for this <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            Returns <c>0f</c> if this <see cref="T:GTA.Player"/> does not have their special ability.
            </remarks>
            <value>
            the remaining value of the special ability meter for this <see cref="T:GTA.Player"/>.
            </value>
        </member>
        <member name="P:GTA.Player.MaxSpecialAbilityMeter">
            <summary>
            Gets or sets the maximum value of the special ability meter for this <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            Returns <c>0f</c> if this <see cref="T:GTA.Player"/> does not have their special ability.
            </remarks>
            <value>
            the maximum value of the special ability meter for this <see cref="T:GTA.Player"/>.
            </value>
        </member>
        <member name="P:GTA.Player.HasSpecialAbility">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.Player"/> has their special ability.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Player"/> has their special ability; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Player.IsSpecialAbilityActive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is using their special ability.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:GTA.Player"/> is using their special ability; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:GTA.Player.IsSpecialAbilityEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> can use their special ability.
            </summary>
            <value>
            <see langword="true"/> if this  <see cref="T:GTA.Player"/> can use their special ability; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Int32)">
            <inheritdoc cref="M:GTA.Player.ChargeSpecialAbility(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Int32,System.Boolean)">
            <summary>
            Charges the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="absoluteAmount">The absolute amount.</param>
            <param name="ignoreActive">
            If <see langword="true"/>, this method will do nothing if the special ability is active.
            </param>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Single)">
            <inheritdoc cref="M:GTA.Player.ChargeSpecialAbility(System.Single,System.Boolean)"/>
        </member>
        <member name="M:GTA.Player.ChargeSpecialAbility(System.Single,System.Boolean)">
            <summary>
            Charges the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="normalizedRatio">The amount between <c>0.0f</c> and <c>1.0f</c></param>
            <param name="ignoreActive">
            If <see langword="false"/>, this method will do nothing if the special ability is active.
            </param>
        </member>
        <member name="M:GTA.Player.RefillSpecialAbility">
            <inheritdoc cref="M:GTA.Player.RefillSpecialAbility(System.Boolean)"/>
        </member>
        <member name="M:GTA.Player.RefillSpecialAbility(System.Boolean)">
            <summary>
            Refills the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="ignoreActive">
            If <see langword="false"/>, this method will do nothing if the special ability is active.
            </param>
        </member>
        <member name="M:GTA.Player.DepleteSpecialAbility">
            <inheritdoc cref="M:GTA.Player.DepleteSpecialAbility(System.Boolean)"/>
        </member>
        <member name="M:GTA.Player.DepleteSpecialAbility(System.Boolean)">
            <summary>
            Depletes the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="ignoreActive">
            If <see langword="false"/>, this method will to nothing if the special ability is active.
            </param>
        </member>
        <member name="M:GTA.Player.ActivateSpecialAbility">
            <summary>
            Activates the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            Although <c>SPECIAL_ABILITY_ACTIVATE</c> is not present in any versions prior to v1.0.678.1,
            you can call this method without having the SHVDN runtime stopped in any versions.
            </remarks>
        </member>
        <member name="M:GTA.Player.DeactivateSpecialAbility">
            <summary>
            Deactivates the special ability for this <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            The current time scale for the special ability, which is different from the one that can be accessed via
            <see cref="P:GTA.Game.TimeScale"/>, will gradually go to 1.0 (in the ease-out style where the value starts
            quickly, slowing down the animation continues).
            </remarks>
        </member>
        <member name="M:GTA.Player.DeactivateSpecialAbilityInstantly">
            <summary>
            Deactivates the special ability for this <see cref="T:GTA.Player"/> instantly without applying the fadeout fx.
            Also immediately sets the current time scale for the special ability, which is different from the one that
            can be accessed via <see cref="P:GTA.Game.TimeScale"/>, to 1.0.
            </summary>
        </member>
        <member name="P:GTA.Player.MaxHealth">
            <summary>
            Gets or sets the maximum amount of armor this <see cref="T:GTA.Player"/> can have.
            The value range is between 0 and 65535.
            </summary>
            <remarks>
            This value is used for the setter of <see cref="P:GTA.Entity.MaxHealth"/> and when the game respawns player <see cref="T:GTA.Ped"/>s.
            </remarks>
        </member>
        <member name="P:GTA.Player.MaxArmor">
            <summary>
            Gets or sets the maximum amount of armor this <see cref="T:GTA.Player"/> can carry.
            The value range is between 0 and 65535.
            </summary>
        </member>
        <member name="P:GTA.Player.PrimaryParachuteTint">
            <summary>
            Gets or sets the primary parachute tint for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.ReserveParachuteTint">
            <summary>
            Gets or sets the reserve parachute tint for this <see cref="T:GTA.Player"/>.
            </summary>
        </member>
        <member name="P:GTA.Player.CanLeaveParachuteSmokeTrail">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can leave a parachute smoke trail.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can leave a parachute smoke trail; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.ParachuteSmokeTrailColor">
            <summary>
            Gets or sets the color of the parachute smoke trail for this <see cref="T:GTA.Player"/>.
            </summary>
            <value>
            The color of the parachute smoke trail for this <see cref="T:GTA.Player"/>.
            </value>
        </member>
        <member name="P:GTA.Player.IsDead">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is dead.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is dead; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is alive.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is alive; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsAiming">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is aiming.
            </summary>
            <value>
              <see langword="true" /> if this <see cref="T:GTA.Player"/> is aiming; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsClimbing">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is climbing.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is climbing; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsRidingTrain">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is riding a train.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is riding a train; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsPressingHorn">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> is pressing a horn.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is pressing a horn; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.IsPlaying">
            <summary>
            Returns <see langword="false"/> if the screen is fading due to this <see cref="T:GTA.Player"/> being killed or arrested or failing a critical mission.
            </summary>
            <value>
             <see langword="false"/> if the screen is fading due to this <see cref="T:GTA.Player"/> being killed or arrested or failing a critical mission.; otherwise, <see langword="true"/>.
            </value>
        </member>
        <member name="P:GTA.Player.IsInvincible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> is invincible.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> is invincible; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanUseCover">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can use cover.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can use cover; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanStartMission">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.Player"/> can start a mission.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can start a mission; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanControlRagdoll">
            <summary>
            Sets a value indicating whether this <see cref="T:GTA.Player"/> can control ragdoll.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can control ragdoll; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.Player.CanControlCharacter">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GTA.Player"/> can control its <see cref="T:GTA.Ped"/>.
            </summary>
            <value>
            <see langword="true" /> if this <see cref="T:GTA.Player"/> can control its <see cref="T:GTA.Ped"/>; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.SetControlState(System.Boolean,GTA.SetPlayerControlFlags)">
            <summary>
            Sets this <see cref="T:GTA.Player"/>'s control state.
            </summary>
            <param name="setControlOn">Specifies whether the player control should be on.</param>
            <param name="flags">
            The flags for additional flag modifications or additional function calls such as removing projectiles.
            All the flags except for <see cref="F:GTA.SetPlayerControlFlags.AmbientScript"/> work only when <paramref name="setControlOn"/> is set to <see langword="false"/>.
            </param>
        </member>
        <member name="M:GTA.Player.ChangeModel(GTA.Model)">
            <summary>
            Attempts to change the <see cref="T:GTA.Model"/> of this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> to change this <see cref="T:GTA.Player"/> to.</param>
            <returns><see langword="true" /> if the change was successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:GTA.Player.RemainingSprintTime">
            <summary>
            Gets how long this <see cref="T:GTA.Player"/> can remain sprinting for.
            </summary>
        </member>
        <member name="P:GTA.Player.RemainingSprintStamina">
            <summary>
            Gets how much sprint stamina this <see cref="T:GTA.Player"/> currently has.
            </summary>
        </member>
        <member name="P:GTA.Player.RemainingUnderwaterTime">
            <summary>
            Gets how long this <see cref="T:GTA.Player"/> can stay underwater before they start losing health.
            </summary>
        </member>
        <member name="P:GTA.Player.LastVehicle">
            <summary>
            Gets the last <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Player"/> used.
            </summary>
            <remarks>returns <see langword="null" /> if the last vehicle doesn't exist.</remarks>
        </member>
        <member name="P:GTA.Player.ForcedAim">
            <summary>
            Sets a value indicating whether the player is forced to aim.
            </summary>
            <value>
              <see langword="true" /> to make the player always be aiming; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:GTA.Player.DisableFiringThisFrame">
            <summary>
            Prevents this <see cref="T:GTA.Player"/> firing this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetRunSpeedMultThisFrame(System.Single)">
            <summary>
            Sets the run speed multiplier for this <see cref="T:GTA.Player"/> this frame.
            </summary>
            <param name="mult">The factor - min: <c>0.0f</c>, default: <c>1.0f</c>, max: <c>1.499f</c>.</param>
        </member>
        <member name="M:GTA.Player.SetSwimSpeedMultThisFrame(System.Single)">
            <summary>
            Sets the swim speed multiplier for this <see cref="T:GTA.Player"/> this frame.
            </summary>
            <param name="mult">The factor - min: <c>0.0f</c>, default: <c>1.0f</c>, max: <c>1.499f</c>.</param>
        </member>
        <member name="M:GTA.Player.SetFireAmmoThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> shoot fire bullets this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetExplosiveAmmoThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> shoot explosive bullets this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetExplosiveMeleeThisFrame">
            <summary>
            Makes this <see cref="T:GTA.Player"/> have an explosive melee attack this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetSuperJumpThisFrame">
            <summary>
            Lets this <see cref="T:GTA.Player"/> jump really high this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetMayNotEnterAnyVehicleThisFrame">
            <summary>
            Blocks this <see cref="T:GTA.Player"/> from entering any <see cref="T:GTA.Vehicle"/> this frame.
            </summary>
        </member>
        <member name="M:GTA.Player.SetMayOnlyEnterThisVehicleThisFrame(GTA.Vehicle)">
            <summary>
            Only lets this <see cref="T:GTA.Player"/> enter a specific <see cref="T:GTA.Vehicle"/> this frame.
            </summary>
            <param name="vehicle">The <see cref="T:GTA.Vehicle"/> this <see cref="T:GTA.Player"/> is allowed to enter.</param>
        </member>
        <member name="M:GTA.Player.Equals(System.Object)">
            <summary>
            Determines if an <see cref="T:System.Object"/> refers to the same player as this <see cref="T:GTA.Player"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check.</param>
            <returns><see langword="true" /> if the <paramref name="obj"/> is the same player as this <see cref="T:GTA.Player"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Equality(GTA.Player,GTA.Player)">
            <summary>
            Determines if two <see cref="T:GTA.Player"/>s refer to the same player.
            </summary>
            <param name="left">The left <see cref="T:GTA.Player"/>.</param>
            <param name="right">The right <see cref="T:GTA.Player"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is the same player as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Inequality(GTA.Player,GTA.Player)">
            <summary>
            Determines if two <see cref="T:GTA.Player"/>s don't refer to the same player.
            </summary>
            <param name="left">The left <see cref="T:GTA.Player"/>.</param>
            <param name="right">The right <see cref="T:GTA.Player"/>.</param>
            <returns><see langword="true" /> if <paramref name="left"/> is not the same player as <paramref name="right"/>; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.Player.op_Implicit(GTA.Player)~GTA.Native.InputArgument">
            <summary>
            Converts a <see cref="T:GTA.Player"/> to a native input argument.
            </summary>
        </member>
        <member name="T:GTA.ISpatial">
            <summary>
            An object with position and rotation information.
            </summary>
        </member>
        <member name="T:GTA.IExistable">
            <summary>
            An object that can exist in the world.
            </summary>
        </member>
        <member name="T:GTA.IDeletable">
            <summary>
            An object that can be deleted from the world.
            </summary>
        </member>
        <member name="T:GTA.PoolObject">
            <summary>
            An object that resides in one of the available object pools.
            </summary>
        </member>
        <member name="P:GTA.PoolObject.Handle">
            <summary>
            The handle of the object.
            </summary>
        </member>
        <member name="P:GTA.PoolObject.NativeValue">
            <summary>
            The handle of the object translated to a native value.
            </summary>
        </member>
        <member name="T:GTA.Scaleform">
            <summary>
            A class which handles rendering of Scaleform elements.
            </summary>
        </member>
        <member name="M:GTA.Scaleform.RequestMovie(System.String)">
            <summary>
            Requests a scaleform movie that is streamed in.
            </summary>
            <returns>A <see cref="T:GTA.Scaleform"/> instance if successfully created; otherwise, <see langword="null"/>.</returns>
            <remarks>
            Only allows 1 instance of a movie active at one time, so you cannot create multiple instances for the same movie.
            </remarks>
        </member>
        <member name="M:GTA.Scaleform.RequestMovieIgnoreSuperWidescreenAdjustment(System.String)">
            <summary>
            Requests a scaleform movie that is streamed in and that is set to ignore super widescreen adjustments.
            Not available in v1.0.335.2 or v1.0.350.1.
            </summary>
            <returns>A <see cref="T:GTA.Scaleform"/> instance if successfully created; otherwise, <see langword="null"/>.</returns>
            <remarks>
            Only allows 1 instance of a movie active at one time, so you cannot create multiple instances for the same movie.
            </remarks>
        </member>
        <member name="M:GTA.Scaleform.RequestMovieSkipRenderWhilePaused(System.String)">
            <summary>
            Requests a scaleform movie that is streamed in and that will not render when the game is paused.
            </summary>
            <returns>A <see cref="T:GTA.Scaleform"/> instance if successfully created; otherwise, <see langword="null"/>.</returns>
            <remarks>
            Only allows 1 instance of a movie active at one time, so you cannot create multiple instances for the same movie.
            </remarks>
        </member>
        <member name="M:GTA.Scaleform.FromHandle(System.Int32)">
            <summary>
            Gets a <see cref="T:GTA.Scaleform"/> instance for the passed handle if it is valid.
            </summary>
            <param name="handle">
            The handle value.
            Should be between 1 and 20 since native functions for scaleform only accepts the values between 1 and 20
            as scaleform handles (hardcoded limit).
            </param>
            <returns>
            A <see cref="T:GTA.Scaleform"/> instance if the passed handle is valid; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            Strictly, this method returns a <see cref="T:GTA.Scaleform"/> instance
            if the <c>CGameScriptHandler</c> for the SHVDN runtime has a <c>CScriptResource_ScaleformMovie</c> for the passed handle.
            </remarks>
        </member>
        <member name="T:GTA.ScriptSound">
            <summary>
            Represents a script sound, which is for <c>audScriptSound</c>. It is used for script audio sounds processed
            via the static <c>audScriptAudioEntity</c> instance.
            </summary>
        </member>
        <member name="P:GTA.ScriptSound.Id">
            <summary>
            Gets the script sound id/index.
            </summary>
        </member>
        <member name="P:GTA.ScriptSound.IsNull">
            <summary>
            Returns <see langword="true"/> if the sound <see cref="P:GTA.ScriptSound.Id"/> is negative,
            which indicates this <see cref="T:GTA.ScriptSound"/> is not valid.
            </summary>
        </member>
        <member name="M:GTA.ScriptSound.PlaySound(System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound with the name <paramref name="soundName"/>.
            If this is used to play a sound for which no pan or speakermask is set by the sound designer, then the sound will play from the map's origin -
            therefore this should only be used to play frontend sounds like menu bleeps or other artificially panned effects.
            </summary>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="enableOnReplay"><inheritdoc cref="M:GTA.ScriptSound.PlaySoundFrontend(System.String,System.String,System.Boolean)" path="/param[@name='enableOnReplay']"/></param>.
        </member>
        <member name="M:GTA.ScriptSound.PlaySoundFrontend(System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound "frontend" - at full volume, panned centrally.
            </summary>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="enableOnReplay">
            <para>
            The name is taken from the official definition, but the effect is unknown.
            </para>
            <para>
            Will be internally disabled if the hash calculated from <paramref name="soundName"/> (with <see cref="M:GTA.Game.GenerateHash(System.String)"/>) is one of the values
            <c>[0x5A23F3D5, 0xDF84A53C, 0xFD4C28, 0x832CAA0F, 0x17BD10F1, 0xFA4A5AA0, 0x2B8F97E3, 0x1D46A6A2, 0xF5E3A26A, 0xF35C567B,
            0x71F56AB4, 0xC55C68A0, 0x54C522AD, 0xD382DF7C, 0x2A508F9C, 0xE8F24AFD, 0x8DDBFC96, 0x28C8633, 0x596B8EBB, 0x8A73028A,
            0x578FE4D7, 0xE52306DE, 0x10109BEB]</c>.
            </para>
            </param>
            <remarks>
            If the sound has a Pan or a SpeakerMask set by the sound designer then the it will play using these settings,
            otherwise it will play from dead ahead (0°).
            </remarks>
        </member>
        <member name="M:GTA.ScriptSound.PlaySoundFromEntity(GTA.Entity,System.String,System.String)">
            <summary>
            Plays back a sound from an <see cref="T:GTA.Entity"/>'s location.
            The sound's position will track the <see cref="T:GTA.Entity"/>'s position as it moves.
            </summary>
            <param name="entity">The <see cref="T:GTA.Entity"/> to play the sound from.</param>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
        </member>
        <member name="M:GTA.ScriptSound.PlaySoundFromPosition(GTA.Math.Vector3,System.String,System.String,System.Boolean)">
            <summary>
            Plays back a sound from an absolute position.
            </summary>
            <param name="position">The world coordinates to play the sound from.</param>
            <param name="soundName">The sound name to play.</param>
            <param name="setName">The optional sound set name that contains the sound.</param>
            <param name="isExteriorLoc">
            If <see langword="true"/>, the sound will use a portal occlusion environmentGroup.
            Only use this if the sound is playing outside and needs occlusion.
            </param>
        </member>
        <member name="M:GTA.ScriptSound.UpdatePosition(System.String,System.Single)">
            <summary>
            <para>
            Sets a variable on a sound.
            </para>
            <para>
            This method allows to communicate with the sound engine in complex ways,
            by passing a floating point value to a specific sound object. This allows some nice effects such as adjusting the pitch of a sample being to be played back,
            or varying a lowpass cutoff. The VariableName parameter must be set up in RAVE (the audio scripting tool) as well as instruction on its usage on a case-by-case
            basis therefore a sound designer must be consulted with before using this command.
            </para>
            </summary>
        </member>
        <member name="M:GTA.ScriptSound.UpdatePosition(GTA.Math.Vector3)">
            <summary>
            Updates a playing sounds absolute position.
            Currently not available in v1.0.617.1 or earlier game versions.
            </summary>
            <param name="position">The new position.</param>
        </member>
        <member name="M:GTA.ScriptSound.HasFinished">
            <summary>
            Gets a boolean indicating whether the specified sound instance has completed playing.
            </summary>
        </member>
        <member name="M:GTA.ScriptSound.Stop">
            <summary>
            Stops a playing sound.
            Calling this method on this <see cref="T:GTA.ScriptSound"/> that has finished playing will have no ill effects in any case
            as long as the <see cref="T:GTA.ScriptSound"/> has not been released.
            </summary>
        </member>
        <member name="M:GTA.ScriptSound.Release">
            <summary>
            Releases this <see cref="T:GTA.ScriptSound"/>.
            This should be called once a sound has finished being manipulated by the script so that its <see cref="T:GTA.ScriptSound"/>
            can be released and re-used.
            </summary>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.AmbientScript">
            <summary>
            Sets or removes the additional flag that determines whether this was called by an ambient script.
            </summary>
            <remarks>
            You will need to set this flag to make the <see cref="T:GTA.Player"/> have control when you switch the controls back on
            if you specified this flag when you disabled the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.ClearTasks">
            <summary>
            Clears the current tasks, such as a task for entering a vehicle (<c>CTaskEnterVehicle</c>).
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.RemoveFires">
            <summary>
            Removes fires in the vicinity of the <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.RemoveExplosions">
            <summary>
            Removes explosions in the vicinity of the <see cref="T:GTA.Player"/>.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.RemoveProjectiles">
            <summary>
            Removes all projectiles.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.DeactivateGadgets">
            <summary>
            Deactivates all the player's gadgets.
            </summary>
            <remarks>
            <para>
            Only works when you disable the controls.
            </para>
            <para>
            Internally calls an additional function for <c>CPedWeaponManager</c> on the player <see cref="T:GTA.Ped"/>.
            </para>
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.ReenableControlOnDeath">
            <summary>
            Re-enables the player's controls if they die whilst not under control.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.LeaveCameraControlOn">
            <summary>
            Leaves the camera control on when disabling player control by not setting the flag for disabling the camera control
            (off by default if removing player control, turned back on when resuming control).
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.AllowPlayerDamage">
            <summary>
            Allow the player to be damaged even if their control is turned off.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.DontStopOtherCarsAroundPlayer">
            <summary>
            Tells nearby <see cref="T:GTA.Vehicle"/>s to stop moving or get out of the way
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.PreventEverybodyBackOff">
            <summary>
            Prevent <see cref="T:GTA.Ped"/>s from backing off when player controls are disabled
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="F:GTA.SetPlayerControlFlags.AllowPadShake">
            <summary>
            Allows the game controller (gamepad) to rumble.
            </summary>
            <remarks>
            Only works when you disable the controls.
            </remarks>
        </member>
        <member name="T:GTA.Script">
            <summary>
            A base class for all user scripts to inherit.
            Only scripts that inherit directly from this class and have a default (parameterless) public constructor will be detected and started.
            </summary>
        </member>
        <member name="M:GTA.Script.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GTA.Script"/> class.
            This constructor is called from the script domain of ScriptHookVDotNet and is
            not intended to be used directly from your code.
            To instantiate scripts from a running script instance, use <see cref="M:GTA.Script.InstantiateScript``1"/>.
            </summary>
        </member>
        <member name="E:GTA.Script.Tick">
            <summary>
            An event that is raised every tick of the script.
            Put code that needs to be looped each frame in here.
            </summary>
        </member>
        <member name="E:GTA.Script.Aborted">
            <summary>
            An event that is raised when this <see cref="T:GTA.Script"/> gets aborted for any reason.
            This should be used for cleaning up anything created during this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="E:GTA.Script.KeyUp">
            <summary>
            An event that is raised when a key is lifted.
            The <see cref="T:System.Windows.Forms.KeyEventArgs"/> contains the key that was lifted.
            </summary>
        </member>
        <member name="E:GTA.Script.KeyDown">
            <summary>
            An event that is raised when a key is first pressed or being pressed for more than about half a second.
            The <see cref="T:System.Windows.Forms.KeyEventArgs"/> contains the key that was pressed.
            </summary>
        </member>
        <member name="P:GTA.Script.Name">
            <summary>
            Gets the name of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.Filename">
            <summary>
            Gets the filename of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.BaseDirectory">
            <summary>
            Gets the Directory where this <see cref="T:GTA.Script"/> is stored.
            </summary>
        </member>
        <member name="P:GTA.Script.IsPaused">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is paused.
            </summary>
        </member>
        <member name="P:GTA.Script.IsRunning">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is running.
            </summary>
        </member>
        <member name="P:GTA.Script.IsExecuting">
            <summary>
            Checks if this <see cref="T:GTA.Script"/> is executing.
            </summary>
        </member>
        <member name="P:GTA.Script.Settings">
            <summary>
            Gets an INI file associated with this <see cref="T:GTA.Script"/>.
            The file will be in the same location as this <see cref="T:GTA.Script"/> but with an extension of ".ini".
            Use this to save and load settings for this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="P:GTA.Script.Interval">
            <summary>
            Gets or sets the minimum interval in ms between <see cref="E:GTA.Script.Tick"/> for this <see cref="T:GTA.Script"/>.
            Default value is 0 meaning the event will execute once each frame.
            </summary>
        </member>
        <member name="M:GTA.Script.ToString">
            <summary>
            Returns a string that represents this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.GetRelativeFilePath(System.String)">
            <summary>
            Gets the full file path for a file relative to this <see cref="T:GTA.Script"/>.
            e.g: <c>GetRelativeFilePath("ScriptFiles\texture1.png")</c> may return <c>"C:\Program Files\Rockstar Games\Grand Theft Auto V\scripts\ScriptFiles\texture1.png"</c>.
            </summary>
            <param name="filePath">The file path relative to the location of this <see cref="T:GTA.Script"/>.</param>
        </member>
        <member name="M:GTA.Script.Abort">
            <summary>
            Aborts execution of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.Pause">
            <summary>
            Pause execution of this <see cref="T:GTA.Script"/>.
            </summary>
        </member>
        <member name="M:GTA.Script.Resume">
            <summary>
            Starts execution of this <see cref="T:GTA.Script"/> after it has been Paused.
            </summary>
        </member>
        <member name="M:GTA.Script.Wait(System.Int32)">
            <summary>
            Pauses execution of the <see cref="T:GTA.Script"/> for at least a specific amount of time.
            Must be called inside the main script loop (the <see cref="E:GTA.Script.Tick"/> event or any sub methods called from it).
            </summary>
            <param name="ms">The minimum amount of time in milliseconds to pause for.</param>
        </member>
        <member name="M:GTA.Script.Yield">
            <summary>
            Yields the execution of the script for 1 frame.
            </summary>
        </member>
        <member name="M:GTA.Script.InstantiateScript``1">
            <summary>
            Spawns a new <see cref="T:GTA.Script"/> instance of the specified type.
            </summary>
            <remarks>
            You need to call this method on the main script thread so instantiation can succeed.
            Do not call this method in field initializers or your script constructor, and doing so
            will result in failure to instantiate a new script instance.
            </remarks>
        </member>
        <member name="P:GTA.ScriptAttributes.NativeCallResetsTimeout">
            <summary>
            Determines whether native calls resets timeout, which is set to <see cref="F:GTA.AbortScriptMode.Default"/>
            by default.
            </summary>
            <remarks>
            If set to <see cref="F:GTA.AbortScriptMode.Default"/>, the script domain will not
            reset script timeout (unless the script uses v3.6.0 or earlier <b>only for compatibility reasons</b>).
            </remarks>
        </member>
        <member name="T:GTA.ScriptSettings">
            <summary>
            Represents a script settings written in the INI format.
            </summary>
            <remarks>
            The file encoding must be UTF-8 without BOM.
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.Load(System.String)">
            <summary>
            Loads a <see cref="T:GTA.ScriptSettings"/> from the specified file.
            </summary>
            <param name="filename">The filename to load the settings from.</param>
            <remarks>
            If this method cannot load the file due to <see cref="T:System.IO.IOException"/>, the created instance will not contain any setting values.
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.Save">
            <summary>
            Saves this <see cref="T:GTA.ScriptSettings"/> to file.
            </summary>
            <returns><see langword="true" /> if the file saved successfully; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:GTA.ScriptSettings.GetValue``1(System.String,System.String,``0)">
            <summary>
            Reads a value from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the value is saved at.</param>
            <param name="defaultvalue">The fall-back value if the key doesn't exist or casting to type <typeparamref name="T"/> fails.</param>
            <returns>The value at <see paramref="name"/> in <see paramref="section"/>.</returns>
            <remarks>
            This overload parses using the current culture for the compatibility with scripts built against v3.6.0 or earlier.
            Consider using the overload <see cref="M:GTA.ScriptSettings.GetValue``1(System.String,System.String,``0,System.IFormatProvider)"/> or call this overload with string type and parse the return value with a format provider later
            to avoid users having trouble with culture-dependent issues, such as not recognizing a decimal points as a decimal separator for floating-point numbers.
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.GetValue``1(System.String,System.String,``0,System.IFormatProvider)">
            <summary>
            Reads a value from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="sectionName">The section name where the value is.</param>
            <param name="keyName">The name of the key the value is saved at.</param>
            <param name="defaultValue">The fall-back value if the key doesn't exist or casting to type <typeparamref name="T"/> fails.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>The value at <see paramref="name"/> in <see paramref="section"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.TryGetValue``1(System.String,System.String,``0@)">
            <summary>
            Reads a value from this <see cref="T:GTA.ScriptSettings"/> using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="sectionName">The section name where the value is.</param>
            <param name="keyName">The name of the key the value is saved at.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified section and key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            </param>
            <returns><see langword="true"/> if the <see cref="T:GTA.ScriptSettings"/> contains a value with the specified section and key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.TryGetValue``1(System.String,System.String,``0@,System.IFormatProvider)">
            <summary>
            Reads a value from this <see cref="T:GTA.ScriptSettings"/> using <paramref name="formatProvider"/>.
            </summary>
            <param name="sectionName">The section name where the value is.</param>
            <param name="keyName">The name of the key the value is saved at.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified section and key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            </param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns><see langword="true"/> if the <see cref="T:GTA.ScriptSettings"/> contains a value with the specified section and key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.SetValue``1(System.String,System.String,``0)">
            <summary>
            Sets a value in this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the value is saved at.</param>
            <param name="value">The value to set the key to.</param>
            <remarks>
            <para>
            Overwrites the first value at a specified section and name and ignore the other values
            if multiple values are set at a specified section and name.
            </para>
            <para>
            This overload parses using the current culture for the compatibility with scripts built against v3.6.0 or earlier.
            Consider using the overload <see cref="M:GTA.ScriptSettings.SetValue``1(System.String,System.String,``0,System.String,System.IFormatProvider)"/> or call this overload with string type and format the return value later
            to avoid users having trouble with culture-dependent issues, such as not recognizing a decimal points as a decimal separator for floating-point numbers.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.SetValue``1(System.String,System.String,``0,System.String,System.IFormatProvider)">
            <summary>
            Sets a value in this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="sectionName">The section where the value is.</param>
            <param name="keyName">The name of the key the value is saved at.</param>
            <param name="value">The value to set the key to.</param>
            <param name="format">The format to use.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <remarks>
            Overwrites the first value at a specified section and name and ignore the other values
            if multiple values are set at a specified section and name.
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.GetAllValues``1(System.String,System.String)">
            <summary>
            Reads all the values at a specified key and section from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="section">The section where the value is.</param>
            <param name="name">The name of the key the values are saved at.</param>
            <remarks>
            <para>
            You can set multiple values at a specified section and key by writing key and value pairs
            at the same section and key in multiple lines.
            </para>
            <para>
            This overload parses using the current culture for the compatibility with scripts built against v3.6.0 or earlier.
            Consider using the overload <see cref="M:GTA.ScriptSettings.GetValue``1(System.String,System.String,``0,System.IFormatProvider)"/> to avoid users having trouble with culture-dependent issues,
            such as not recognizing a decimal points as a decimal separator for floating-point numbers.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.GetAllValues``1(System.String,System.String,System.IFormatProvider)">
            <summary>
            Reads all the values at a specified key and section from this <see cref="T:GTA.ScriptSettings"/>.
            </summary>
            <param name="sectionName">The section name where the value is.</param>
            <param name="keyName">The name of the key the values are saved at.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <remarks>
            You can set multiple values at a specified section and key by writing key and value pairs
            at the same section and key in multiple lines.
            </remarks>
        </member>
        <member name="M:GTA.ScriptSettings.ContainsSection(System.String)">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.ScriptSettings"/> contains the specified section.
            </summary>
        </member>
        <member name="M:GTA.ScriptSettings.ContainsKey(System.String,System.String)">
            <summary>
            Gets a value that indicates whether this <see cref="T:GTA.ScriptSettings"/> contains the specified key at the specified section.
            </summary>
        </member>
        <member name="M:GTA.ScriptSettings.GetAllSectionNames">
            <summary>
            Gets all of the section names this <see cref="T:GTA.ScriptSettings"/> contains.
            </summary>
        </member>
        <member name="M:GTA.ScriptSettings.GetAllKeyNames(System.String)">
            <summary>
            Gets all of the key names at the specified section name this <see cref="T:GTA.ScriptSettings"/> contains.
            </summary>
            <param name="sectionName">The section name.</param>
        </member>
        <member name="M:GTA.ScriptSettings.RemoveKey(System.String,System.String)">
            <summary>
            Removes all of the keys of the specified section this <see cref="T:GTA.ScriptSettings"/> has the key.
            </summary>
            <param name="sectionName">The section name.</param>
            <param name="keyName">The name of the key.</param>
            <returns><see langword="true"/> if the <see cref="T:GTA.ScriptSettings"/> contained the specified key at the specified section and removed the key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.RemoveSection(System.String)">
            <summary>
            Removes the specified section if this <see cref="T:GTA.ScriptSettings"/> has the section.
            </summary>
            <param name="sectionName">The section name where the value is.</param>
            <returns><see langword="true"/> if the <see cref="T:GTA.ScriptSettings"/> contained the specified section and removed the section; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.ScriptSettings.Clear">
            <summary>
            Clears all sections this <see cref="T:GTA.ScriptSettings"/> has.
            </summary>
        </member>
        <member name="T:GTA.Streaming">
            <summary>
            Represents a facade class of general resource streaming stuff,
            which indirectly access various global variables for streaming.
            </summary>
        </member>
        <member name="M:GTA.Streaming.LoadScene(GTA.Math.Vector3)">
            <summary>
            Synchronously loads a location (could be inside an interior, or not).
            </summary>
            <remarks>
            <para>
            Stops an asynchronous load scene (<c>CLoadScene</c>) if there is an active one.
            </para>
            <para>
            Since this method blocks the game until the location is loaded,
            the script may be terminated for timeout at the tick this method is executed.
            </para>
            </remarks>
        </member>
        <member name="P:GTA.Streaming.IsEnabled">
            <summary>
            Sets the value that indicates whether the game will stream resources.
            </summary>
        </member>
        <member name="M:GTA.Streaming.RequestCollisionAt(GTA.Math.Vector3)">
            <summary>
            Tell streaming to request collision about point, having game stream extra collision and IPL/YMAP files around
            this coordinate. This function needs called every frame the additional data is needed.
            </summary>
            <param name="point">The coordinate point to stream extra collision and map resources.</param>
            <remarks>
            Calling this method does not result in loaded collisions for weapon tests for bullets and projectiles
            around the specified point.
            </remarks>
        </member>
        <member name="M:GTA.Streaming.SetFocusPositionAndVelocity(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Overrides the game focus and sets it to specified position and velocity
            The game focus is used for loading map data, collisions, object population etc.
            This method overrides it for the specified position and velocity.
            </summary>
            <param name="position">The position in world space.</param>
            <param name="velocity">
            The velocity to use for <see cref="T:GTA.Ped"/> &amp; <see cref="T:GTA.Vehicle"/> population in meters.
            </param>
        </member>
        <member name="P:GTA.Streaming.FocusEntity">
            <summary>
            <para>
            Sets the specified entity as the focus for streaming.
            </para>
            <para>
            The game focus is used for loading map data, collisions, object population etc.
            This command overrides it for the specified entity.
            </para>
            </summary>
            <remarks>
            Does not change anything on streaming focus if an invalid <see cref="T:GTA.Entity"/> is passed.
            </remarks>
        </member>
        <member name="M:GTA.Streaming.IsEntityFocus(GTA.Entity)">
            <summary>
            Returns <see langowrd="true"/> if the specified <see cref="T:GTA.Entity"/> is the current focus.
            </summary>
        </member>
        <member name="M:GTA.Streaming.ClearOverriddenFocus">
            <summary>
            <para>
            Clears the overridden game focus and sets it to the player ped again (default).
            </para>
            <para>
            The game focus is used for loading map data, collisions, object population etc.
            If this has been overridden by script, it is important to clear it afterwards.
            </para>
            </summary>
        </member>
        <member name="M:GTA.Streaming.StartNewFrustumLoadScene(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.NewLoadSceneFlags)">
            <summary>
            Asynchronously loads a location (could be inside an interior, or not).
            Starts a new frustum load scene, which is interior-aware and uses a streaming volume.
            </summary>
            <param name="position">The position to load around.</param>
            <param name="direction">
            The direction to stream for <see cref="T:GTA.Ped"/>s and <see cref="T:GTA.Vehicle"/>s (probably in meters).
            Should be non-zero.
            </param>
            <param name="farClip">The far clip.</param>
            <param name="controlFlags">The control flags.</param>
            <returns><see langword="true"/> if load scene has started successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>
            You cannot use a new load scene during a player switch.
            </para>
            <para>
            The game stops a load scene when SHVDN runtime terminates if it holds one for SHVDN script thread.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Streaming.StartNewSphereLoadScene(GTA.Math.Vector3,System.Single,GTA.NewLoadSceneFlags)">
            <summary>
            Asynchronously loads a location (could be inside an interior, or not).
            Starts a new spherical load scene, which is interior-aware and uses a streaming volume.
            </summary>
            <param name="position">The position to load around.</param>
            <param name="radius">The radius for the load scene in meters.</param>
            <param name="controlFlags">The control flags.</param>
            <returns><see langword="true"/> if load scene has started successfully; otherwise, <see langword="false"/>.</returns>
            <remarks>
            <para>
            You cannot use a new load scene during a player switch.
            </para>
            <para>
            The game stops a load scene when SHVDN runtime terminates if it holds one for SHVDN script thread.
            </para>
            </remarks>
        </member>
        <member name="M:GTA.Streaming.StopNewLoadScene">
            <summary>
            stops the global asynchronous load scene, if it is active.
            </summary>
        </member>
        <member name="P:GTA.Streaming.IsNewLoadSceneActive">
            <summary>
            Gets the value that indicates whether the global asynchronous load scene is currently running.
            </summary>
            <returns>
            <see langword="true"/> if if an asynchronous load scene is active; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Streaming.IsNewLoadSceneLoaded">
            <summary>
            Gets the value that indicates whether the global asynchronous load scene is fully loaded.
            </summary>
            <returns>
            <see langword="true"/> if the global asynchronous load scene is active and fully loaded; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            A new load scene is never guaranteed to eventually return <see langword="true"/> if memory is under heavy load.
            Therefore, you might want to set up a custom timeout so you can do some alternative actions
            if new load scene is taking too long time to load a location.
            </remarks>
        </member>
        <member name="M:GTA.Streaming.SetPedPopulationBudget(System.Int32)">
            <summary>
            Sets the population budget allocated for spawning ambient <see cref="T:GTA.Ped"/>s.
            </summary>
            <param name="amount">The budget amount to allocate from 0 to 3, with 0 being none and 3 being normal.</param>
        </member>
        <member name="M:GTA.Streaming.SetVehiclePopulationBudget(System.Int32)">
            <summary>
            Sets the population budget allocated for spawning ambient <see cref="T:GTA.Vehicle"/>s.
            </summary>
            <param name="amount">The budget amount to allocate from 0 to 3, with 0 being none and 3 being normal.</param>
        </member>
        <member name="T:GTA.StringHash">
            <summary>
            A static class for jenkins-one-at-a-time hash methods, which is very robust for as a full 32-bit hash function
            and is heavily used by the game.
            </summary>
        </member>
        <member name="M:GTA.StringHash.AtPartialStringHash(System.String,System.UInt32)">
             <summary>
             Partially computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from a
             <see cref="T:System.String"/> that contains only ASCII characters. Does not finalize the hash.
             Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
             </summary>
             <param name="input">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
             <param name="initValue">The initial value when hashing starts.</param>
             <returns>The partially calculated joaat hash.</returns>
             <remarks>
             <para>
             The following conversions will be performed before hashing the original string:
             <list type="bullet">
             <item>
             <description>
             Map ASCII uppercase letters to lowercase.
             </description>
             </item>
             <item>
             <description>
             Extract the substring within the first two double quotes if the first character/byte is a double quote
             (hashes to the end of sequence if there is only one double quote).
             </description>
             </item>
             <item>
             <description>
             Convert backslashes to forward slashes so that the has is more useful for filenames.
             </description>
             </item>
             </list>
             </para>
            
             <para>
             This method only expects ASCII characters in <paramref name="input"/>.
             This is because the lookup table used by the joaat hash function used in <c>GET_HASH_KEY</c> expects
             only ASCII characters, and the table contains values for non-ASCII characters only to guarantee correctness
             even if "weird" european characters "sneak in" (are included in the string).
             If you need to pass a string that contains non-ASCII characters, use
             <see cref="M:GTA.StringHash.AtPartialStringHashUtf8(System.String,System.UInt32)"/> instead.
             </para>
             </remarks>
        </member>
        <member name="M:GTA.StringHash.AtPartialStringHash(System.Byte[],System.UInt32)">
            <summary>
            Partially computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from an array of
            <see cref="T:System.Byte"/>. Does not finalize the hash.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">An array of <see cref="T:System.Byte"/>.</param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The partially calculated joaat hash.</returns>
            <remarks>
            The following conversions will be performed before hashing the original string:
            <list type="bullet">
            <item>
            <description>
            Map ASCII uppercase letters to lowercase.
            </description>
            </item>
            <item>
            <description>
            Extract the substring within the first two double quotes if the first character/byte is a double quote
            (hashes to the end of sequence if there is only one double quote).
            </description>
            </item>
            <item>
            <description>
            Convert backslashes to forward slashes so that the has is more useful for filenames.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GTA.StringHash.AtPartialStringHashUtf8(System.String,System.UInt32)">
            <summary>
            Partially computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from
            <paramref name="input"/>. Does not finalize the hash.
            <paramref name="input"/> will be converted to a UTF-8 sequence before hashing.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> to hash. Will be converted to a UTF-8 sequence before hashing.
            </param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The partially calculated joaat hash.</returns>
            <remarks>
            The following conversions will be performed before hashing the original string:
            <list type="bullet">
            <item>
            <description>
            Map ASCII uppercase letters to lowercase.
            </description>
            </item>
            <item>
            <description>
            Extract the substring within the first two double quotes if the first character/byte is a double quote
            (hashes to the end of sequence if there is only one double quote).
            </description>
            </item>
            <item>
            <description>
            Convert backslashes to forward slashes so that the has is more useful for filenames.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)">
             <summary>
             Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from a <see cref="T:System.String"/> that
             contains only ASCII characters.
             Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
             </summary>
             <param name="input">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
             <param name="initValue">The initial value when hashing starts.</param>
             <returns>The calculated joaat hash.</returns>
             <remarks>
             <para>
             The following conversions will be performed before hashing the original string:
             <list type="bullet">
             <item>
             <description>
             Map ASCII uppercase letters to lowercase.
             </description>
             </item>
             <item>
             <description>
             Extract the substring within the first two double quotes if the first character/byte is a double quote
             (hashes to the end of sequence if there is only one double quote).
             </description>
             </item>
             <item>
             <description>
             Convert backslashes to forward slashes so that the has is more useful for filenames.
             </description>
             </item>
             </list>
             </para>
            
             <para>
             This method only expects ASCII characters in <paramref name="input"/>.
             This is because the lookup table used by the joaat hash function used in <c>GET_HASH_KEY</c> expects
             only ASCII characters, and the table contains values for non-ASCII characters only to guarantee correctness
             even if "weird" european characters "sneak in" (are included in the string).
             If you need to pass a string that contains non-ASCII characters, use
             <see cref="M:GTA.StringHash.AtStringHashUtf8(System.String,System.UInt32)"/> instead.
             </para>
             </remarks>
        </member>
        <member name="M:GTA.StringHash.AtStringHash(System.Byte[],System.UInt32)">
            <summary>
            Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from an array of
            <see cref="T:System.Byte"/>.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">An array of <see cref="T:System.Byte"/>.</param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The calculated joaat hash.</returns>
            <remarks>
            The following conversions will be performed before hashing the original string:
            <list type="bullet">
            <item>
            <description>
            Map ASCII uppercase letters to lowercase.
            </description>
            </item>
            <item>
            <description>
            Extract the substring within the first two double quotes if the first character/byte is a double quote
            (hashes to the end of sequence if there is only one double quote).
            </description>
            </item>
            <item>
            <description>
            Convert backslashes to forward slashes so that the has is more useful for filenames.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GTA.StringHash.AtStringHashUtf8(System.String,System.UInt32)">
            <summary>
            Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from <paramref name="input"/>.
            <paramref name="input"/> will be converted to a UTF-8 sequence before hashing.
            Uppercase letters and backslashes will be converted to lowercase letters and slashes respectively.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> to hash. Will be converted to a UTF-8 sequence before hashing.
            </param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The calculated joaat hash.</returns>
            <remarks>
            The following conversions will be performed before hashing the original string:
            <list type="bullet">
            <item>
            <description>
            Map ASCII uppercase letters to lowercase.
            </description>
            </item>
            <item>
            <description>
            Extract the substring within the first two double quotes if the first character/byte is a double quote
            (hashes to the end of sequence if there is only one double quote).
            </description>
            </item>
            <item>
            <description>
            Convert backslashes to forward slashes so that the has is more useful for filenames.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:GTA.StringHash.AtLiteralStringHash(System.String,System.UInt32)">
            <summary>
            Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from a <see cref="T:System.String"/> that
            contains only ASCII characters. Unlike <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/>, this method does not
            perform any character conversion before hashing, where the technique is heavily used when comparing member
            names in pso/meta config files.
            </summary>
            <param name="input">A <see cref="T:System.String"/> that contains only ASCII characters.</param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The calculated joaat hash.</returns>
        </member>
        <member name="M:GTA.StringHash.AtLiteralStringHash(System.Byte[],System.UInt32)">
            <summary>
            Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from an array of
            <see cref="T:System.Byte"/>. Unlike <see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/>, this method does not
            perform any character conversion before hashing, where the technique is heavily used when comparing member
            names in pso/meta config files.
            </summary>
            <param name="input">An array of <see cref="T:System.Byte"/>.</param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The calculated joaat hash.</returns>
        </member>
        <member name="M:GTA.StringHash.AtLiteralStringHashUtf8(System.String,System.UInt32)">
            <summary>
            Computes a jenkins-one-at-a-time (joaat) hash as an <see langword="uint"/> from <paramref name="input"/>.
            <paramref name="input"/> will be converted to a UTF-8 sequence before hashing.
            Unlike<see cref="M:GTA.StringHash.AtStringHash(System.String,System.UInt32)"/>, this method does not perform any character conversion
            before hashing, where the technique is heavily used when comparing member names in pso/meta config files.
            </summary>
            <param name="input">
            A <see cref="T:System.String"/> to hash. Will be converted to a UTF-8 sequence before hashing.
            </param>
            <param name="initValue">The initial value when hashing starts.</param>
            <returns>The calculated joaat hash.</returns>
        </member>
        <member name="M:GTA.StringHash.AtFinalizeHash(System.UInt32)">
            <summary>
            Finalizes a jenkins-one-at-a-time (joaat) hash.
            </summary>
            <param name="partialHashValue">A partial hash value to finalize.</param>
            <returns>The finalized hash value.</returns>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.NullReferenceException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.NullReferenceException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentException">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with the acceptable range info.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="value">The value.</param>
            <param name="minInclusive">The min value of the acceptable range inclusive.</param>
            <param name="maxInclusive">The max value of the acceptable range inclusive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with the acceptable range info.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="value">The value.</param>
            <param name="minInclusive">The min value of the acceptable range inclusive.</param>
            <param name="maxInclusive">The max value of the acceptable range inclusive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:GTA.ThrowHelper.CheckArgumentRange(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with the acceptable range info if
            <paramref name="value"/> is not in the range.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="minInclusive">The min value of the acceptable range inclusive.</param>
            <param name="maxInclusive">The max value of the acceptable range inclusive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not between <paramref name="minInclusive"/> and <paramref name="maxInclusive"/>.
            </exception>
        </member>
        <member name="M:GTA.ThrowHelper.CheckArgumentRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with the acceptable range info if
            <paramref name="value"/> is not in the range.
            </summary>
            <param name="paramName">The name of the parameter.</param>
            <param name="value">The value.</param>
            <param name="minInclusive">The min value of the acceptable range inclusive.</param>
            <param name="maxInclusive">The max value of the acceptable range inclusive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not between <paramref name="minInclusive"/> and <paramref name="maxInclusive"/>.
            </exception>
        </member>
        <member name="M:GTA.ThrowHelper.ArgumentOutOfRangeException_Enum_Value(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> with a parameter name for an enum value out of legal
            range, which means the value is not defined.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:GTA.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">The message that describes the error.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:GTA.DrivingStyle">
            <summary>
            An enumeration of frequently used driving styles.
            Consider using <see cref="T:GTA.VehicleDrivingFlags"/> since it represents how flags affects how <see cref="T:GTA.Ped"/>s should drive vehicles
            more accurately than this enumeration.
            </summary>
        </member>
        <member name="T:GTA.ParkType">
            <summary>
            Set of enumerations of the available park types for <see cref="M:GTA.TaskInvoker.ParkVehicle(GTA.Vehicle,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:GTA.VehicleChaseBehaviorFlags">
            <summary>
            A set of flags to define how <see cref="T:GTA.Ped"/>s should behave in vehicle chases.
            </summary>
        </member>
        <member name="T:GTA.VehicleDrivingFlags">
            <summary>
            A set of flags to define how <see cref="T:GTA.Ped"/>s should drive vehicles.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DontSteerAroundPlayerPed">
            <summary>Don't steer around the player ped even if <see cref="F:GTA.VehicleDrivingFlags.SteerAroundPeds"/> is set.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.GoOffRoadWhenAvoiding">
            <summary>
            Make the <see cref="T:GTA.Ped"/> prefer to go off the road rather than enter oncoming lanes when avoiding (steering around) obstacles if the correct lanes are full.
            Even if this value is set, the <see cref="T:GTA.Ped"/> will try to steer around obstacles by entering other correct lanes if the correct lanes are not full.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.AllowGoingWrongWay">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to drive into the oncoming traffic if the correct lanes are full.
            Even if this value is set, the <see cref="T:GTA.Ped"/> will try to reach the correct lanes again as soon as possible.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseWanderFallbackInsteadOfStraightLine">
            <summary>
            If pathfinding fails, cruise randomly instead of going on a straight line.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PreventBackgroundPathfinding">
            <summary>
            Only works when the car mission is set to MISSION_CRUISE.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.AdjustCruiseSpeedBasedOnRoadSpeed">
            <summary>
            Limit the speed based on the road speed if the max cruise speed for driving tasks exceeds the road speed. Only works when the car mission is set to MISSION_CRUISE.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseShortCutLinks">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to use short cut links (e.g. the 180? turns on the highways without the direction sign).
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.ChangeLanesAroundObstructions">
            <summary>
            Make the driver change lanes around obstructions.
            Without this flag, even small obstacles make the driver completely change lanes.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.UseSwitchedOffNodes">
            <summary>
            Allow the <see cref="T:GTA.Ped"/> to drive on switched off nodes, which are usually located at paths whose colors on the map are darker than roads for driving (e.g. some dirt roads), and on parking lots.
            You can check if some nodes are marked as switched off with <c>GET_VEHICLE_NODE_IS_SWITCHED_OFF</c>.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PreferNavmeshRoute">
            <summary>
            Make <see cref="T:GTA.Ped"/> prefer navigation mesh routes rather than vehicle nodes.
            Can be useful if you're going to be primarily driving off road.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.PlaneTaxiMode">
            <summary>
            Only works for planes using <c>MISSION_GOTO</c>, will cause them to drive along the ground instead of fly.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.ForceStraightLine">
            <summary>
            Force to go to the target directly instead of following the nodes regardless of the distance config for driving or vehicle mission tasks at which the ai switches to heading for the target directly.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.TryToAvoidHighways">
            <summary>
            Avoid the highway unless the <see cref="T:GTA.Ped"/> has to drive on it to achieve the vehicle task.
            </summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehicles">
            <summary>Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions, and obey lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehiclesStrict">
            <summary>Like <see cref="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehicles"/>, but doesn't steer around anything in its way - will only wait instead (doesn't deviate an inch).</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehicles">
            <summary>Default "alerted" driving mode. Drives around everything, doesn't obey lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesReckless">
            <summary>Very erratic driving. difference between this and <see cref="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehicles"/> is that it doesn't use the brakes at ALL to help with steering.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModePloughThrough">
            <summary>Smashes through everything.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeStopForVehiclesIgnoreLights">
            <summary>Drives normally except for the fact that it ignores lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesObeyLights">
            <summary>Try to swerve around everything, but stop for lights if necessary.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.DrivingModeAvoidVehiclesStopForPedsObeyLights">
            <summary>Swerve around cars, be careful around peds, and stop for lights.</summary>
        </member>
        <member name="F:GTA.VehicleDrivingFlags.AvoidEmptyVehicles">
            <summary>
            Use <see cref="F:GTA.VehicleDrivingFlags.SteerAroundStationaryVehicles"/> instead.
            Even with this flag set, the ped may avoid vehicles that have drivers when they are stationary.
            </summary>
        </member>
        <member name="T:GTA.VehicleEscortType">
            <summary>
            Set of enumerations of the available vehicle escort types for <see cref="M:GTA.TaskInvoker.VehicleEscort(GTA.Vehicle,GTA.Entity,GTA.VehicleEscortType,System.Single,GTA.VehicleDrivingFlags,System.Single,System.Int32,System.Single)"/>.
            </summary>
        </member>
        <member name="T:GTA.VehiclePathNodePropertyFlags">
            <summary>
            Set of flags which may be passed in to methods in <see cref="T:GTA.PathFind"/> such as <see cref="M:GTA.PathFind.GetAllVehicleNodes(System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})"/>.
            All the enums except <see cref="F:GTA.VehiclePathNodePropertyFlags.DontAllowGps"/> can be used when calling <c>GET_VEHICLE_NODE_PROPERTIES</c> in the same way as <see cref="M:GTA.PathFind.GetAllVehicleNodes(System.Func{GTA.VehiclePathNodePropertyFlags,System.Boolean})"/>.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.OffRoad">
            <summary>
            The node has been flagged as 'off road', suitable only for 4x4 vehicles, etc.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.OnPlayersRoad">
            <summary>
            The node has been dynamically marked as somewhere ahead, possibly on (or near to) the player's current road.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.NoBigVehicles">
            <summary>
            The node has been marked as not suitable for big vehicles.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.SwitchedOff">
            <summary>
            The node is switched off for ambient population.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.LeadsToDeadEnd">
            <summary>
            The node is, or leads to, a dead end.
            </summary>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.Highway">
            <remarks>
            Cannot be used with <see cref="F:GTA.VehiclePathNodePropertyFlags.Highway"/> and <see cref="F:GTA.VehiclePathNodePropertyFlags.Boat"/> takes precedence over this flag.
            </remarks>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.TrafficLight">
            <remarks>
            Cannot be used with <see cref="F:GTA.VehiclePathNodePropertyFlags.GiveWay"/>, because vehicle nodes can have either traffic-light or give-way feature as a special function but cannot have both of them.
            </remarks>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.GiveWay">
            <remarks>
            Cannot be used with <see cref="F:GTA.VehiclePathNodePropertyFlags.TrafficLight"/>, because vehicle nodes can have either traffic-light or give-way feature as a special function but cannot have both of them.
            </remarks>
        </member>
        <member name="F:GTA.VehiclePathNodePropertyFlags.Boat">
            <remarks>
            Cannot be used with <see cref="F:GTA.VehiclePathNodePropertyFlags.Highway"/>.
            </remarks>
        </member>
        <member name="T:GTA.Water">
            <summary>
            Represents a collection of static methods about water.
            </summary>
        </member>
        <member name="M:GTA.Water.GetWaterLevel(GTA.Math.Vector3,System.Single@)">
            <summary>
            Gets the level/height of the water below the position including the waves.
            This method takes the waves into account so the result may be different depending on
            the exact frame of calling.
            </summary>
            <returns>
            <see langword="true"/> if successfully get the level/height of the water below
            the position; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method gets the level of the water excluding the waves first, then adds the wave
            level delta if the method have successfully retrieve the level/height of the water.
            Therefore, this method returns <see langword="false"/> when
            <see cref="M:GTA.Water.GetWaterLevelNoWaves(GTA.Math.Vector3,System.Single@)"/> returns <see langword="false"/> with the same
            arguments.
            </remarks>
        </member>
        <member name="M:GTA.Water.GetWaterLevelNoWaves(GTA.Math.Vector3,System.Single@)">
            <summary>
            Gets the height of the water below the position excluding the waves.
            This method does not take the waves into account so the result will be the same between
            different frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GTA.Water.TestLineAgainstWater(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3@)">
            <summary>
            Test a directed line probe against the water.
            </summary>
            <param name="startPos">The start of the probe.</param>
            <param name="endPos">The end of the probe.</param>
            <param name="intersectionPos">
            When this method returns, contains the intersection position on the water, the line probe hits water before
            hitting land. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the line probe hits water before hitting land; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="P:GTA.Weapon.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.Weapon"/>.
            </summary>
        </member>
        <member name="P:GTA.Weapon.SlotHash">
            <summary>
            Gets the slot hash for this <see cref="T:GTA.Weapon"/>.
            </summary>
            <remarks>
            The slot hash must be unique in a weapon inventory of a <see cref="T:GTA.Ped"/>, so a <see cref="T:GTA.Ped"/> cannot have multiple <see cref="T:GTA.Weapon"/> items with the same slot hash in their inventory.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.DisplayName">
            <summary>
            Gets the display name label string for this <see cref="T:GTA.Weapon"/>.
            </summary>
        </member>
        <member name="P:GTA.Weapon.LocalizedName">
            <summary>
            Gets the localized human name for this <see cref="T:GTA.Weapon"/>.
            </summary>
        </member>
        <member name="P:GTA.Weapon.TintCount">
            <summary>
            Gets the number of available color tints for this <see cref="T:GTA.Weapon"/>.
            </summary>
        </member>
        <member name="P:GTA.Weapon.Ammo">
            <summary>
            Gets or sets the amount of ammo for this weapon.
            If this weapon is using special ammo, this property will return the value for it.
            </summary>
            <remarks>
            Will return 1 if <see cref="P:GTA.Weapon.Hash"/> is <see cref="F:GTA.WeaponHash.Unarmed"/> instead of 0.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.AmmoInClip">
            <summary>
            Gets or sets the current amount of ammo in a clip.
            </summary>
            <remarks>
            Will return 1 if <see cref="P:GTA.Weapon.Hash"/> is <see cref="F:GTA.WeaponHash.Unarmed"/> instead of 0.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.MaxAmmo">
            <summary>
            Gets or sets the max amount of ammo this weapon can have.
            </summary>
            <remarks>
            Will return 1 if <see cref="P:GTA.Weapon.Hash"/> is <see cref="F:GTA.WeaponHash.Unarmed"/> instead of 0.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.MaxAmmoInClip">
            <summary>
            Gets or sets the max amount of ammo this weapon can have in a clip.
            </summary>
            <remarks>
            Will return 1 if <see cref="P:GTA.Weapon.Hash"/> is <see cref="F:GTA.WeaponHash.Unarmed"/> instead of 0.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.InfiniteAmmo">
            <summary>
            Sets whether this ped will not consume the current ammo this weapon is using from the weapon ammo inventory.
            </summary>
            <remarks>
            Despite the interface, setting this value globally affects any of the weapons that uses the ammo the current weapon is using
            as <c>SET_PED_INFINITE_AMMO</c> modifies a of member of weapon ammo item in <c>CPedInventory</c> of the owner <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="P:GTA.Weapon.InfiniteAmmoClip">
            <summary>
            Sets whether this ped will not consume any ammo in any clips or that of the weapon ammo inventory of the owner <see cref="T:GTA.Ped"/>.
            </summary>
            <remarks>
            Despite the interface, setting this value globally affects all of the weapons of the owner <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="M:GTA.Weapon.GetDisplayNameFromHash(GTA.WeaponHash)">
            <summary>
            Gets the display name label string for the <see cref="T:GTA.WeaponHash"/>.
            </summary>
        </member>
        <member name="M:GTA.Weapon.GetHumanNameFromHash(GTA.WeaponHash)">
            <summary>
            Gets the localized human name for the <see cref="T:GTA.WeaponHash"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.Hash">
            <summary>
            Gets the hash for this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.SlotHash">
            <summary>
            Gets the slot hash for this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
            <remarks>
            The slot hash must be unique in a weapon inventory of a <see cref="T:GTA.Ped"/> , so a <see cref="T:GTA.Ped"/> cannot have multiple weapon items with the same slot hash in their inventory.
            </remarks>
        </member>
        <member name="P:GTA.WeaponAsset.NativeValue">
            <summary>
            Gets the native representation of this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsValid">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is valid as a weapon or a ammo hash.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsValidAsWeaponHash">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is valid as a weapon hash.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.IsLoaded">
            <summary>
            Gets a value indicating whether this <see cref="T:GTA.WeaponAsset"/> is loaded so it can be spawned.
            </summary>
        </member>
        <member name="M:GTA.WeaponAsset.Request">
            <summary>
            Attempts to load this <see cref="T:GTA.WeaponAsset"/> into memory.
            </summary>
        </member>
        <member name="M:GTA.WeaponAsset.Request(System.Int32)">
            <summary>
            Attempts to load this <see cref="T:GTA.WeaponAsset"/> into memory for a given period of time.
            </summary>
            <param name="timeout">The time (in milliseconds) before giving up trying to load this <see cref="T:GTA.WeaponAsset"/>.</param>
            <returns><see langword="true" /> if this <see cref="T:GTA.WeaponAsset"/> is loaded; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.WeaponAsset.MarkAsNoLongerNeeded">
            <summary>
            Tells the game we have finished using this <see cref="T:GTA.WeaponAsset"/> and it can be freed from memory.
            </summary>
        </member>
        <member name="P:GTA.WeaponAsset.DisplayName">
            <summary>
            Gets the display name label string for this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
            <remarks>
            Returns <see cref="F:System.String.Empty"/> if this <see cref="T:GTA.WeaponAsset"/> is not valid as a weapon hash.
            </remarks>
        </member>
        <member name="P:GTA.WeaponAsset.HumanName">
            <summary>
            Gets the localized human name for this <see cref="T:GTA.WeaponAsset"/>.
            </summary>
            <remarks>
            Returns <see cref="F:System.String.Empty"/> if this <see cref="T:GTA.WeaponAsset"/> is not valid as a weapon hash.
            </remarks>
        </member>
        <member name="F:GTA.WeaponAttachmentPoint.Flash">
            <summary> Used for <see cref="F:GTA.WeaponHash.Flashlight"/>.</summary>
        </member>
        <member name="F:GTA.WeaponAttachmentPoint.GunGripR">
            <summary> Used for <see cref="F:GTA.WeaponComponentHash.GunrunMk2Upgrade"/>.</summary>
        </member>
        <member name="P:GTA.WeaponCollection.Item(GTA.WeaponHash)">
            <summary>
            Gets the <see cref="T:GTA.Weapon"/> associated with the specified <see cref="T:GTA.WeaponHash"/>.
            </summary>
            <param name="hash">The <see cref="T:GTA.WeaponHash"/> of the <see cref="T:GTA.Weapon"/> to get</param>
            <value>
            The value associated with the specified <see cref="T:GTA.WeaponHash"/>.
            If the specified <see cref="T:GTA.WeaponHash"/> is not found, this property will return <see langword="null"/>.
            </value>
        </member>
        <member name="P:GTA.WeaponCollection.Count">
            <summary>
            Gets the number of <see cref="T:GTA.Weapon"/> items contained in the <see cref="T:GTA.WeaponCollection"/>.
            </summary>
            <remarks>
            May count the <see cref="T:GTA.Weapon"/> instances with the hash for <see cref="F:GTA.WeaponHash.Unarmed"/> and <c>"OBJECT"</c> in favor of faster operation.
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.GetEnumerator">
            <remarks>
            May count the <see cref="T:GTA.Weapon"/> instances with the hash for <see cref="F:GTA.WeaponHash.Unarmed"/> and
            <c>"OBJECT"</c> in favor of faster operation.
            </remarks>
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:GTA.WeaponCollection.System#Collections#Generic#IEnumerable{GTA#Weapon}#GetEnumerator">
            <internalonly/>
        </member>
        <member name="M:GTA.WeaponCollection.GetAllWeaponHashes">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.WeaponHash"/>es this <see cref="T:GTA.WeaponCollection"/> has.
            </summary>
        </member>
        <member name="M:GTA.WeaponCollection.TryGetWeaponHashBySlotHash(System.Int32,GTA.WeaponHash@)">
            <summary>
            Gets the <see cref="T:GTA.WeaponHash"/> associated with the slot hash in the weapon inventory of the owner <see cref="T:GTA.Ped"/>.
            Can fetch the weapon hash faster than <see cref="P:GTA.WeaponCollection.Item(GTA.WeaponHash)"/> since the internal weapon inventory array is sorted in ascending order by slot hashes.
            </summary>
            <param name="slotHash">The slot hash key of the value to get.</param>
            <param name="weaponHash">
            When this method returns, contains the <see cref="T:GTA.WeaponHash"/> associated with the slot hash,
            if the weapon inventory of the owner <see cref="T:GTA.Ped"/> has a weapon for the slot hash; otherwise, the zero <see cref="T:GTA.WeaponHash"/>.
            This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/> if the <see cref="T:GTA.WeaponCollection"/> contains a <see cref="T:GTA.WeaponHash"/> with the specified slot hash; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.WeaponCollection.TryGetWeaponBySlotHash(System.Int32,GTA.Weapon@)">
            <summary>
            Gets the <see cref="T:GTA.Weapon"/> associated with the slot hash in the weapon inventory of the owner <see cref="T:GTA.Ped"/>.
            Can fetch the weapon hash faster than <see cref="P:GTA.WeaponCollection.Item(GTA.WeaponHash)"/> since the internal weapon inventory array is sorted in ascending order by slot hashes.
            </summary>
            <param name="slotHash">The slot hash key of the value to get.</param>
            <param name="weapon">
            When this method returns, contains the <see cref="T:GTA.Weapon"/> associated with the slot hash,
            if the weapon inventory of the owner <see cref="T:GTA.Ped"/> has a weapon for the slot hash; otherwise, <see langword="null"/>.
            This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/> if the <see cref="T:GTA.WeaponCollection"/> contains a <see cref="T:GTA.Weapon"/> with the specified slot hash; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GTA.WeaponCollection.Current">
            <summary>
            Gets the current <see cref="T:GTA.Weapon"/>.
            </summary>
            <remarks>
            Returns the target <see cref="T:GTA.Weapon"/> if the <c>CWeaponInventory</c> of the owner <see cref="T:GTA.Ped"/> is trying to switch the current weapon to another
            but not finished doing (e.g. calls <see cref="M:GTA.WeaponCollection.Select(GTA.WeaponHash)"/> on the <see cref="T:GTA.Ped"/> but they are ragdolling at that time).
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.HasWeapon(GTA.WeaponHash)">
            <summary>
            Gets the value that indicates whether the owner <see cref="T:GTA.Ped"/> has the weapon for <paramref name="weaponHash"/>.
            </summary>
            <remarks>
            Returns <see langword="true"/> for <see cref="F:GTA.WeaponHash.Unarmed"/> unless the item for the hash is removed from <c>CWeaponInventory</c> of the owner <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.HasWeapon(System.String)">
            <summary>
            Gets the value that indicates whether the owner <see cref="T:GTA.Ped"/> has the weapon for <paramref name="weaponName"/>.
            </summary>
            <remarks>
            Returns <see langword="true"/> for <see cref="F:GTA.WeaponHash.Unarmed"/> unless the item for the hash is removed from <c>CWeaponInventory</c> of the owner <see cref="T:GTA.Ped"/>.
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.IsWeaponValid(GTA.WeaponHash)">
            <summary>
            Gets the value that indicates whether <paramref name="hash"/> is valid.
            Strictly, this method checks whether the array for <c>CWeaponInfo</c> contains an CWeaponInfo instance with <paramref name="hash"/>.
            </summary>
        </member>
        <member name="M:GTA.WeaponCollection.IsWeaponValid(System.String)">
            <summary>
            Gets the value that indicates whether <paramref name="weaponName"/> is valid.
            Strictly, this method checks whether the array for <c>CWeaponInfo</c> contains an CWeaponInfo instance with the hash generated from <paramref name="weaponName"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponCollection.CurrentWeaponObject">
            <summary>
            Gets the current weapon <see cref="T:GTA.Prop"/>.
            </summary>
            <remarks>
            Always check if the returned value is valid with the null check and <see cref="M:GTA.Entity.Exists"/>.
            This method returns <see langword="null"/> if the current weapon is <see cref="F:GTA.WeaponHash.Unarmed"/>, but always returns a <see cref="T:GTA.Prop"/> instance otherwise
            even if the owner <see cref="T:GTA.Ped"/> is not using the weapon <see cref="T:GTA.Prop"/> (For example, when the <see cref="T:GTA.Ped"/> is ragdolling and the current weapon cannot hold with one hand),
            which is kept for compatibility as calling methods on a invalid <see cref="T:GTA.Prop"/> will not cause serious issues in general (just do nothing or return zero values in most cases).
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.Select(GTA.WeaponHash,System.Boolean)">
            <summary>
            Selects the specified weapon.
            </summary>
            <param name="weaponHash">The weapon hash.</param>
            <param name="equipNow">Specifies if the owner ped will equip in hands immediately.</param>
            <returns><see langword="true"/> if the ped has the weapon; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.WeaponCollection.IsWeaponValid(System.String,System.Boolean)">
            <summary>
            Selects the specified weapon.
            </summary>
            <param name="weaponName">The weapon name.</param>
            <param name="forceInHand">Specifies if the owner ped will equip in hands immediately.</param>
            <returns><see langword="true"/> if the ped has the weapon; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GTA.WeaponCollection.Give(GTA.WeaponHash,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gives the specified weapon if the owner <see cref="T:GTA.Ped"/> does not have one, or selects the weapon if they have one and <paramref name="equipNow"/> is set to <see langword="true" />.
            </summary>
            <param name="weaponHash">The weapon hash.</param>
            <param name="ammoCount">The ammo count to be added to the weapon inventory of the owner <see cref="T:GTA.Ped"/>.</param>
            <param name="equipNow">If set to <see langword="true" />, the owner <see cref="T:GTA.Ped"/> will switch their weapon to the weapon of <paramref name="weaponHash"/> as soon as they can (not instantly).</param>
            <param name="isAmmoLoaded">
            Does not work since the ammo in clip is always full if not selected unless the game code related to auto-reload is modified.
            This was supposed to determine if the ammo will be loaded after the weapon is given to the owner <see cref="T:GTA.Ped"/>.
            </param>
        </member>
        <member name="M:GTA.WeaponCollection.Give(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gives the specified weapon if the owner <see cref="T:GTA.Ped"/> does not have one, or selects the weapon if they have one and <paramref name="equipNow"/> is set to <see langword="true" />.
            </summary>
            <param name="name">The weapon name.</param>
            <param name="ammoCount">The ammo count to be added to the weapon inventory of the owner <see cref="T:GTA.Ped"/>.</param>
            <param name="equipNow">If set to <see langword="true" />, the owner <see cref="T:GTA.Ped"/> will switch their weapon to the weapon of <paramref name="name"/> as soon as they can (not instantly).</param>
            <param name="isAmmoLoaded">
            Does not work since the ammo in clip is always full if not selected unless the game code related to auto-reload is modified.
            This was supposed to determine if the ammo will be loaded after the weapon is given to the owner <see cref="T:GTA.Ped"/>.
            </param>
        </member>
        <member name="M:GTA.WeaponCollection.Drop">
            <summary>
            Drops the current weapon and creates a pickup <see cref="T:GTA.Prop"/> with the owner address set to that of the owner <see cref="T:GTA.Ped"/>.
            </summary>
        </member>
        <member name="M:GTA.WeaponCollection.Remove(GTA.Weapon)">
            <summary>
            Removes the specified weapon.
            </summary>
            <remarks>
            This method can remove <see cref="F:GTA.WeaponHash.Unarmed"/> from the weapon inventory.
            </remarks>
        </member>
        <member name="M:GTA.WeaponCollection.Remove(GTA.WeaponHash)">
            <inheritdoc cref="M:GTA.WeaponCollection.Remove(GTA.Weapon)"/>
        </member>
        <member name="M:GTA.WeaponCollection.Remove(System.String)">
            <inheritdoc cref="M:GTA.WeaponCollection.Remove(GTA.Weapon)"/>
        </member>
        <member name="M:GTA.WeaponCollection.RemoveAll">
            <summary>
            Removes all weapons from the weapon inventory except for <see cref="F:GTA.WeaponHash.Unarmed"/>.
            </summary>
        </member>
        <member name="P:GTA.WeaponComponentCollection.Count">
            <summary>
            Gets the number of compatible components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetClipComponent(System.Int32)">
            <summary>
            Gets the clip component at the index.
            </summary>
            <param name="index">The index of the clip component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the clip component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.ClipVariationsCount">
            <summary>
            Gets the number of compatible clip components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetScopeComponent(System.Int32)">
            <summary>
            Gets the scope component at the index.
            </summary>
            <param name="index">The index of the scope component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the scope component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.ScopeVariationsCount">
            <summary>
            Gets the number of compatible scope components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetBarrelComponent(System.Int32)">
            <summary>
            Gets the barrel component at the index.
            </summary>
            <param name="index">The index of the barrel component subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the barrel component subset is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.BarrelVariationsCount">
            <summary>
            Gets the number of compatible barrel components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetSuppressorOrMuzzleBrakeComponent(System.Int32)">
            <summary>
            Gets the suppressor or muzzle brake component at the index.
            </summary>
            <param name="index">The index of the subset of the suppressor and muzzle brake components of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the subset of the suppressor and muzzle brake components is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.SuppressorAndMuzzleBrakeVariationsCount">
            <summary>
            Gets the number of compatible suppressor and muzzle brake components.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetGunRootComponent(System.Int32)">
            <summary>
            Gets the component for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> at the index.
            </summary>
            <param name="index">The index of the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> subset of all the weapon component array.</param>
            <returns>
            A <see cref="T:GTA.WeaponComponent"/> instance if the <see cref="T:GTA.WeaponComponent"/> at the <paramref name="index"/> of the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="P:GTA.WeaponComponentCollection.GunRootVariationsCount">
            <summary>
            Gets the number of compatible components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/>.
            </summary>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetSuppressorComponent">
            <summary>
            Gets the suppressor component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the suppressor component is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetFlashLightComponent">
            <summary>
            Gets the flashlight component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the flashlight component is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetLuxuryFinishComponent">
            <summary>
            Gets the first component of all the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/>.
            Despite the method name, return value is not guaranteed to a <see cref="T:GTA.WeaponComponent"/> instance that represents the luxury finish component.
            </summary>
            <returns>
            The <see cref="T:GTA.WeaponComponent"/> instance if the first component of all the components for <see cref="F:GTA.WeaponAttachmentPoint.GunRoot"/> is found;
            otherwise, the <see cref="T:GTA.WeaponComponent"/> instance representing the invalid component.
            </returns>
        </member>
        <member name="M:GTA.WeaponComponentCollection.GetComponentsFromHash(GTA.WeaponHash)">
            <summary>
            Gets all the compatible weapon component hashes for the specified weapon hash.
            </summary>
            <param name="hash">The weapon hash.</param>
        </member>
        <member name="F:GTA.WeaponComponentHash.CarbineRifleVarmodMich">
            <summary>
            Named "Suede Bucks Finish" in the Ammunation menu in GTA Online.
            No valid name for this component for the weapon wheel HUD.
            </summary>
        </member>
        <member name="F:GTA.WeaponComponentHash.MicroSMGVarmodFrn">
            <summary>
            Named "Employee of the Month Finish" in the Ammunation menu in GTA Online.
            No valid name for this component for the weapon wheel HUD.
            </summary>
        </member>
        <member name="F:GTA.WeaponComponentHash.RPGVarmodTvr">
            <summary>
            Named "Uncle T Finish" in the Ammunation menu in GTA Online.
            No valid name for this component for the weapon wheel HUD.
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterEyefindMessage">
            <summary>
            "Enter your Eyefind message (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.MessageTooLong">
            <summary>
            "Message too long. Try again (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenMessage">
            <summary>
            "Forbidden message. Try again (MAX 500 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterEyefindSubject">
            <summary>
            "Enter your Eyefind subject (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.SubjectTooLong">
            <summary>
            "Subject too long. Try again (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterSynopsis">
            <summary>
            "Enter Synopsis (MAX 125 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterCustomTeamName">
            <summary>
            "Enter Custom Team Name (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenText15">
            <summary>
            "Forbidden Text. Try again (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.CustomTeamName">
            <summary>
            "Custom Team Name"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterMessage60">
            <summary>
            "Enter Message (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.ForbiddenText60">
            <summary>
            "Forbidden Text. Try again (MAX 60 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.InvalidMessage">
            <summary>
            "Invalid Message. Try again (MAX 20 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterMessage20">
            <summary>
            "Enter Message (MAX 20 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterOutfitName">
            <summary>
            "Enter Outfit Name (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.InvalidOutfitName">
            <summary>
            "Invalid Outfit Name. Try again (MAX 15 characters)"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.OutfitName">
            <summary>
            "Outfit Name"
            </summary>
        </member>
        <member name="F:GTA.WindowTitle.EnterChallengeName">
            <summary>
            "Enter your Challenge name (MAX 30 characters)"
            </summary>
        </member>
        <member name="P:GTA.World.IsClockPaused">
            <inheritdoc cref="P:GTA.Chrono.GameClock.IsPaused"/>
        </member>
        <member name="M:GTA.World.PauseClock(System.Boolean)">
            <summary>
            Pauses or resumes the in-game clock.
            </summary>
            <param name="value">Pauses the game clock if set to <see langword="true" />; otherwise, resumes the game clock.</param>
        </member>
        <member name="P:GTA.World.CurrentDate">
            <summary>
            Gets or sets the current date and time in the GTA world.
            </summary>
            <value>
            The current date and time.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The internal date is not valid for the Gregorian calendar or the internal time of day is not normalized.
            </exception>
        </member>
        <member name="P:GTA.World.CurrentTimeOfDay">
            <summary>
            Gets or sets the current time of day in the GTA world.
            </summary>
            <value>
            The current time of day.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One of the values minutes or seconds are smaller than <c>0</c> or larger than <c>59</c>, or the hour value
            is smaller than <c>0</c> or larger than <c>23</c>.
            </exception>
            <remarks>
            The resolution of the value is 1 second.
            </remarks>
        </member>
        <member name="P:GTA.World.MillisecondsPerGameMinute">
            <inheritdoc cref="P:GTA.Chrono.GameClock.MillisecondsPerGameMinute"/>
        </member>
        <member name="P:GTA.World.Blackout">
            <summary>
            Sets a value indicating whether artificial lights in the <see cref="T:GTA.World"/> should be rendered.
            </summary>
            <value>
              <see langword="true" /> if blackout; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:GTA.World.Weather">
            <summary>
            Gets or sets the previous weather.
            </summary>
            <value>
            The previous weather.
            </value>
        </member>
        <member name="P:GTA.World.NextWeather">
            <summary>
            Gets or sets the next weather.
            </summary>
            <value>
            The next weather.
            </value>
        </member>
        <member name="M:GTA.World.TransitionToWeather(GTA.Weather,System.Single)">
            <summary>
            Transitions to weather.
            </summary>
            <param name="weather">The weather.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:GTA.World.SetRandomWeather">
            <summary>
            Transitions the weather to a random state.
            </summary>
        </member>
        <member name="P:GTA.World.GravityLevel">
            <summary>
            Sets the gravity level for all <see cref="T:GTA.World"/> objects.
            </summary>
            <value>
            The gravity level:
            9.8f - Default gravity.
            2.4f - Moon gravity.
            0.1f - Very low gravity.
            0.0f - No gravity.
            </value>
        </member>
        <member name="M:GTA.World.ForceLightningFlash">
            <summary>
            Forces a flash of lightning and its accompanying thunder to occur at a random location.
            </summary>
        </member>
        <member name="P:GTA.World.RainLevel">
            <summary>
            Gets the rain level.
            </summary>
            <value>
            The rain level.
            </value>
        </member>
        <member name="P:GTA.World.RainLevelOverride">
            <summary>
            Sets the rain level.
            </summary>
            <remarks>
            <para>
            Level higher than <c>'0.5f'</c>, only the creation of puddles gets faster, rain and rain sound won't increase after that.
            </para>
            <para>
            Level of <c>'0.0f'</c> rain and rain sounds are disabled and there won't be any new puddles.
            </para>
            <para>
            To use the rain level of the current weather, set this to <c>'-1f'</c>.
            </para>
            </remarks>
            <value>
            The rain level.
            </value>
        </member>
        <member name="P:GTA.World.SnowLevel">
            <summary>
            Gets the snow level.
            </summary>
            <value>
            The snow level.
            </value>
        </member>
        <member name="P:GTA.World.SnowLevelOverride">
            <summary>
            Sets the snow level.
            </summary>
            <remarks>
            <para>
            Set level to <c>'0f'</c> disables snow effects.
            </para>
            <para>
            Set level to <c>'-1f'</c> the snow effects are set to the current weather.
            </para>
            </remarks>
            <value>
            The snow level.
            </value>
        </member>
        <member name="P:GTA.World.WindSpeed">
            <summary>
            Gets the current wind speed in m/s. The value is between 0 to 12.
            </summary>
        </member>
        <member name="P:GTA.World.WindSpeedOverride">
            <summary>
            Sets the wind speed override by percentage, where 1.0 sets the current wind speed to 12.0 in m/s.
            Sets an negative value to stop using the override and let the game calculates the current wind speed as usual.
            </summary>
            <remarks>
            Although this property does not clamp the override value at all, the game clamps the wind speed between
            0 and 12.0.
            </remarks>
        </member>
        <member name="M:GTA.World.SetWindSpeedOverrideBySpeed(System.Single)">
            <summary>
            Sets the wind speed override by speed. The value divided by 12 will be set if the result is lower than 1.0.
            Otherwise, the value will be set to 1.0.
            Sets an negative value to stop using the override and let the game calculates the current wind speed as usual.
            </summary>
            <remarks>
            Basically do the same as <see cref="M:GTA.World.set_WindSpeedOverride(System.Single)"/> does but with a upper bound and one division.
            Use <see cref="M:GTA.World.set_WindSpeedOverride(System.Single)"/> to set the value precisely (and avoid one division for performance).
            </remarks>
        </member>
        <member name="P:GTA.World.WindDirection">
            <summary>
            Gets the current wind direction with a unit vector.
            </summary>
        </member>
        <member name="P:GTA.World.WaypointBlip">
            <summary>
            Gets the waypoint blip.
            </summary>
            <returns>The <see cref="T:GTA.Math.Vector3"/> coordinates of the Waypoint <see cref="T:GTA.Blip"/></returns>
            <remarks>
            Returns <see langword="null" /> if a waypoint <see cref="T:GTA.Blip"/> hasn't been set
            </remarks>
        </member>
        <member name="M:GTA.World.RemoveWaypoint">
            <summary>
            Removes the waypoint.
            </summary>
        </member>
        <member name="P:GTA.World.WaypointPosition">
            <summary>
            Gets or sets the waypoint position.
            </summary>
            <returns>The <see cref="T:GTA.Math.Vector3"/> coordinates of the Waypoint <see cref="T:GTA.Blip"/></returns>
            <remarks>
            Returns an empty <see cref="T:GTA.Math.Vector3"/> if a waypoint <see cref="T:GTA.Blip"/> hasn't been set
            If the game engine cant extract height information the Z component will be 0.0f
            </remarks>
        </member>
        <member name="M:GTA.World.GetAllBlips(GTA.BlipSprite[])">
            <summary>
            Gets an <c>array</c> of all the <see cref="T:GTA.Blip"/>s on the map with a given <see cref="T:GTA.BlipSprite"/>.
            </summary>
            <param name="blipTypes">The blip types to include, leave blank to get all <see cref="T:GTA.Blip"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyBlips(GTA.Math.Vector3,System.Single,GTA.BlipSprite[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Blip"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Blip"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Blip"/>s.</param>
            <param name="blipTypes">The blip types to include, leave blank to get all <see cref="T:GTA.Blip"/>s.</param>
        </member>
        <member name="M:GTA.World.CreateBlip(GTA.Math.Vector3)">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> at the given position on the map.
            </summary>
            <param name="position">The position of the blip on the map.</param>
        </member>
        <member name="M:GTA.World.CreateBlip(GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a <see cref="T:GTA.Blip"/> for a circular area at the given position on the map.
            </summary>
            <param name="position">The position of the blip on the map.</param>
            <param name="radius">The radius of the area on the map.</param>
        </member>
        <member name="P:GTA.World.VehicleCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Vehicle"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PedCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Ped"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PropCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Prop"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.PickupObjectCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Prop"/>s in the world associated with a <see cref="T:GTA.Pickup"/>.
            </summary>
        </member>
        <member name="P:GTA.World.BuildingCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Building"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.AnimatedBuildingCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.AnimatedBuilding"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorInstanceCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.InteriorInstance"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorProxyCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.InteriorProxy"/>s managed in the <see cref="T:GTA.InteriorProxy"/> pool.
            </summary>
        </member>
        <member name="P:GTA.World.ProjectileCount">
            <summary>
            A fast way to get the total number of <see cref="T:GTA.Projectile"/>s spawned in the world.
            </summary>
        </member>
        <member name="P:GTA.World.EntityColliderCount">
            <summary>
            Returns the total number of <see cref="T:GTA.Entity"/> colliders used.
            </summary>
        </member>
        <member name="P:GTA.World.VehicleCapacity">
            <summary>
            The total number of <see cref="T:GTA.Vehicle"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Vehicle"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Vehicle"/>.</remarks>
        </member>
        <member name="P:GTA.World.PedCapacity">
            <summary>
            The total number of <see cref="T:GTA.Ped"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Ped"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Ped"/>.</remarks>
        </member>
        <member name="P:GTA.World.PropCapacity">
            <summary>
            The total number of <see cref="T:GTA.Prop"/>s that can exist in the world.
            </summary>
            <remarks>The game will crash when the number of <see cref="T:GTA.Prop"/> is the same as this limit and the game tries to create a <see cref="T:GTA.Prop"/>.</remarks>
        </member>
        <member name="P:GTA.World.PickupObjectCapacity">
            <summary>
            The total number of <see cref="T:GTA.Prop"/>s in the world associated with a <see cref="T:GTA.Pickup"/> that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.ProjectileCapacity">
            <summary>
            The total number of <see cref="T:GTA.Projectile"/>s that can exist in the world.
            Always returns 50 currently since the limit is hard-coded in the exe.
            </summary>
        </member>
        <member name="P:GTA.World.BuildingCapacity">
            <summary>
            The total number of <see cref="T:GTA.Building"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.AnimatedBuildingCapacity">
            <summary>
            The total number of <see cref="T:GTA.AnimatedBuilding"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorInstanceCapacity">
            <summary>
            The total number of <see cref="T:GTA.InteriorInstance"/>s that can exist in the world.
            </summary>
        </member>
        <member name="P:GTA.World.InteriorProxyCapacity">
            <summary>
            The total number of <see cref="T:GTA.InteriorProxy"/>s the game can manage at the same time in the <see cref="T:GTA.InteriorProxy"/> pool.
            </summary>
        </member>
        <member name="P:GTA.World.EntityColliderCapacity">
            <summary>
            <para>The total number of <see cref="T:GTA.Entity"/> colliders can be used. The return value can be different in different versions.</para>
            <para>When <see cref="P:GTA.World.EntityColliderCount"/> reaches this value, no more <see cref="T:GTA.Entity"/> will not be able to be physically moved
            and <see cref="T:GTA.Vehicle"/>s and <see cref="T:GTA.Prop"/>s will not be able to detach fragment parts properly.</para>
            </summary>
        </member>
        <member name="M:GTA.World.GetClosestPed(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Ped"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Ped"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Ped"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllPeds(GTA.Model[])">
            <summary>
            Gets an <c>array</c>of all <see cref="T:GTA.Ped"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyPeds(GTA.Ped,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Ped"/>s near a given <see cref="T:GTA.Ped"/> in the world
            </summary>
            <param name="ped">The ped to check.</param>
            <param name="radius">The maximum distance from the <paramref name="ped"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Doesnt include the <paramref name="ped"/> in the result</remarks>
        </member>
        <member name="M:GTA.World.GetNearbyPeds(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Ped"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Ped"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Ped"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Ped"/>s to get, leave blank for all <see cref="T:GTA.Ped"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestVehicle(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Vehicle"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Vehicle"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Vehicle"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllVehicles(GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyVehicles(GTA.Ped,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s near a given <see cref="T:GTA.Ped"/> in the world
            </summary>
            <param name="ped">The ped to check.</param>
            <param name="radius">The maximum distance from the <paramref name="ped"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Doesnt include the <see cref="T:GTA.Vehicle"/> the <paramref name="ped"/> is using in the result</remarks>
        </member>
        <member name="M:GTA.World.GetNearbyVehicles(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Vehicle"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Vehicle"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Vehicle"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Vehicle"/>s to get, leave blank for all <see cref="T:GTA.Vehicle"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestProp(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets the closest <see cref="T:GTA.Prop"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Prop"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Prop"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllProps(GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in the World.
            </summary>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetNearbyProps(GTA.Math.Vector3,System.Single,GTA.Model[])">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Prop"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Prop"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <param name="models">The <see cref="T:GTA.Model"/> of <see cref="T:GTA.Prop"/>s to get, leave blank for all <see cref="T:GTA.Prop"/> <see cref="T:GTA.Model"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestPickupObject(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest pickup object as <see cref="T:GTA.Prop"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Prop"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <remarks>
            <para>
            Returns <see langword="null" /> if no <see cref="T:GTA.Prop"/> was in the given region.
            </para>
            <remarks>
            This method returns an array of <see cref="T:GTA.Prop"/> instances for all pickup objects for compatibility
            reasons (ones for scripts built against v3.6.0 or earlier versions of SHVDN).
            Arrays in .NET s covariant and that may lead you to an <see cref="T:System.ArrayTypeMismatchException"/> when you
            call a method that returns an array of one of the derived types of the return type. For this reason,
            this method does not return an array of <see cref="T:GTA.PickupObject"/> but instead returns one of
            <see cref="T:GTA.Prop"/> as how this method returns in v3.6.0 or earlier versions.
            </remarks>
            </remarks>
        </member>
        <member name="M:GTA.World.GetAllPickupObjects">
            <summary>
            Gets an <c>array</c> of pickup objects as <see cref="T:GTA.Prop"/>s in a given region in the World.
            </summary>
            <remarks>
            This method returns an array of <see cref="T:GTA.Prop"/> instances for all pickup objects for compatibility
            reasons (ones for scripts built against v3.6.0 or earlier versions of SHVDN).
            Arrays in .NET s covariant and that may lead you to an <see cref="T:System.ArrayTypeMismatchException"/> when you
            call a method that returns an array of one of the derived types of the return type. For this reason,
            this method does not return an array of <see cref="T:GTA.PickupObject"/> but instead returns one of
            <see cref="T:GTA.Prop"/> as how this method returns in v3.6.0 or earlier versions.
            </remarks>
        </member>
        <member name="M:GTA.World.GetNearbyPickupObjects(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all pickup objects as <see cref="T:GTA.Prop"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Entity"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Prop"/>s.</param>
            <remarks>
            This method returns an array of <see cref="T:GTA.Prop"/> instances for all pickup objects for compatibility
            reasons (ones for scripts built against v3.6.0 or earlier versions of SHVDN).
            Arrays in .NET s covariant and that may lead you to an <see cref="T:System.ArrayTypeMismatchException"/> when you
            call a method that returns an array of one of the derived types of the return type. For this reason,
            this method does not return an array of <see cref="T:GTA.PickupObject"/> but instead returns one of
            <see cref="T:GTA.Prop"/> as how this method returns in v3.6.0 or earlier versions.
            </remarks>
        </member>
        <member name="M:GTA.World.GetClosestProjectile(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:GTA.Projectile"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.Projectile"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Projectile"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.Projectile"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllProjectiles">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Projectile"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyProjectiles(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Projectile"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Projectile"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Projectile"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestRocketProjectile(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:GTA.ProjectileRocket"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.ProjectileRocket"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.ProjectileRocket"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.ProjectileRocket"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllRocketProjectiles">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.ProjectileRocket"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyRocketProjectiles(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.ProjectileRocket"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.ProjectileRocket"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.ProjectileRocket"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosestThrownProjectile(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets the closest <see cref="T:GTA.ProjectileThrown"/> to a given position in the World.
            </summary>
            <param name="position">The position to find the nearest <see cref="T:GTA.ProjectileThrown"/>.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.ProjectileThrown"/>s.</param>
            <remarks>Returns <see langword="null" /> if no <see cref="T:GTA.ProjectileThrown"/> was in the given region.</remarks>
        </member>
        <member name="M:GTA.World.GetAllThrownProjectiles">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.ProjectileRocket"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyThrownProjectiles(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.ProjectileThrown"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.ProjectileThrown"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.ProjectileThrown"/>s.</param>
        </member>
        <member name="M:GTA.World.GetAllEntities">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Entity"/>s in the World.
            </summary>
        </member>
        <member name="M:GTA.World.GetNearbyEntities(GTA.Math.Vector3,System.Single)">
            <summary>
            Gets an <c>array</c> of all <see cref="T:GTA.Entity"/>s in a given region in the World.
            </summary>
            <param name="position">The position to check the <see cref="T:GTA.Entity"/> against.</param>
            <param name="radius">The maximum distance from the <paramref name="position"/> to detect <see cref="T:GTA.Entity"/>s.</param>
        </member>
        <member name="M:GTA.World.GetClosest``1(GTA.Math.Vector3,``0[])">
            <summary>
            Gets the closest <see cref="T:GTA.ISpatial"/> to a given position in the World.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position">The position to check against.</param>
            <param name="spatials">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.ISpatial"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest``1(GTA.Math.Vector2,``0[])">
            <summary>
            Gets the closest <see cref="T:GTA.ISpatial"/> to a given position in the World ignoring height.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="position">The position to check against.</param>
            <param name="spatials">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.ISpatial"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.Building[])">
            <summary>
            Gets the closest <see cref="T:GTA.Building"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="buildings">The buildings to check.</param>
            <returns>The closest <see cref="T:GTA.Building"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.Building[])">
            <summary>
            Gets the closest <see cref="T:GTA.Building"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="buildings">The buildings to check.</param>
            <returns>The closest <see cref="T:GTA.Building"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.AnimatedBuilding[])">
            <summary>
            Gets the closest <see cref="T:GTA.AnimatedBuilding"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="animatedBuildings">The animated building to check.</param>
            <returns>The closest <see cref="T:GTA.AnimatedBuilding"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.AnimatedBuilding[])">
            <summary>
            Gets the closest <see cref="T:GTA.AnimatedBuilding"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="animatedBuildings">The animated building to check.</param>
            <returns>The closest <see cref="T:GTA.AnimatedBuilding"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorInstance[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorInstance"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorInstances">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorInstance"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorInstance[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorInstance"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorInstances">The interior instances to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorInstance"/> to the <paramref name="interiorInstances"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector3,GTA.InteriorProxy[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorProxy"/> to a given position in the World.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorProxies">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorProxy"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.GetClosest(GTA.Math.Vector2,GTA.InteriorProxy[])">
            <summary>
            Gets the closest <see cref="T:GTA.InteriorProxy"/> to a given position in the World ignoring height.
            </summary>
            <param name="position">The position to check against.</param>
            <param name="interiorProxies">The spatials to check.</param>
            <returns>The closest <see cref="T:GTA.InteriorProxy"/> to the <paramref name="position"/></returns>
        </member>
        <member name="M:GTA.World.SetAmbientVehicleDensityMultiplierThisFrame(System.Single)">
            <summary>
            Sets the density of all ambient vehicles in the world.
            Must be called each frame to remain in effect.
            Values are 0.0f to 1.0f inclusive; any value outside this range will cause this function to do nothing.
            </summary>
            <param name="densityMult">The density multiplier, between 0 and 1.</param>
        </member>
        <member name="M:GTA.World.SetAmbientPedDensityMultiplierThisFrame(System.Single)">
            <summary>
            Sets the density of ambient peds in the world.
            Must be called each frame to remain in effect.
            Values are 0.0f to 1.0f inclusive; any value outside this range will cause this function to do nothing.
            </summary>
            <param name="densityMult">The density multiplier, between 0 and 1.</param>
        </member>
        <member name="M:GTA.World.CreatePed(GTA.Model,GTA.Math.Vector3,System.Single)">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of the given <see cref="T:GTA.Model"/> at the position and heading specified.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Ped"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Ped"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Ped"/> could not be spawned or the model could not be loaded within 1 second.</remarks>
        </member>
        <member name="M:GTA.World.CreateRandomPed(GTA.Math.Vector3)">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
            <remarks>
            This overload picks the least used appropriate model that is not suppressed.
            This overload can pick a gangster and an animal model that do not swim or fly.
            </remarks>
        </member>
        <member name="M:GTA.World.CreateRandomPed(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})">
            <summary>
            Spawns a <see cref="T:GTA.Ped"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Ped"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Ped"/>.</param>
            <param name="predicate">
            <para>
            The method that determines whether a model should be considered when choosing a random model for
            the <see cref="T:GTA.Ped"/>. If <see langword="null"/> is set, gangster and any animal models will not be chosen,
            including animals that do not swim or fly. Note that <see cref="M:GTA.World.CreateRandomPed(GTA.Math.Vector3)"/> and
            `<c>CREATE_RANDOM_PED</c>` can pick a gangster and an animal model that do not swim or fly.
            </para>
            <para>
            The default model prohibition was to imitate how `<c>CREATE_RANDOM_PED</c>` pick a ped model, but it turned
            out that the native does not filter out gang ped models or animal <see cref="T:GTA.Ped"/> models that do not swim
            or fly after SHVDN v3.6.0 was released.
            </para>
            </param>
        </member>
        <member name="M:GTA.World.CreateVehicle(GTA.Model,GTA.Math.Vector3,System.Single)">
            <summary>
            Spawns a <see cref="T:GTA.Vehicle"/> of the given <see cref="T:GTA.Model"/> at the position and heading specified.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Vehicle"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Vehicle"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Vehicle"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Vehicle"/> could not be spawned or the model could not be loaded within 1 second.</remarks>
        </member>
        <member name="M:GTA.World.CreateRandomVehicle(GTA.Math.Vector3,System.Single,System.Func{GTA.Model,System.Boolean})">
            <summary>
            Spawns a <see cref="T:GTA.Vehicle"/> of a random <see cref="T:GTA.Model"/> at the position specified.
            </summary>
            <param name="position">The position to spawn the <see cref="T:GTA.Vehicle"/> at.</param>
            <param name="heading">The heading of the <see cref="T:GTA.Vehicle"/>.</param>
            <param name="predicate">The method that determines whether a model should be considered when choosing a random model for the <see cref="T:GTA.Vehicle"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Vehicle"/> could not be spawned.</remarks>
        </member>
        <member name="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position.
            </summary>
            <param name="model">The <see cref="T:GTA.Model"/> of the <see cref="T:GTA.Prop"/>.</param>
            <param name="position">The position to spawn the <see cref="T:GTA.Prop"/> at.</param>
            <param name="rotation">The rotation of the <see cref="T:GTA.Prop"/>.</param>
            <param name="dynamic">
            <para>
            If <see langword="true"/>, the <see cref="T:GTA.Prop"/> will always be forced to be an regular prop type (<c>CObject</c>). This applies when creating a <see cref="T:GTA.Prop"/> that uses a door <see cref="T:GTA.Model"/>.
            If this is <see langword="false"/>, the <see cref="T:GTA.Prop"/> will be created as a door type (<c>CDoor</c>) and it will work as a door.
            </para>
            <para>Although "dynamic" is an incorrectly named parameter, the name is retained for scripts that use the method with named parameters.</para>
            </param>
            <param name="placeOnGround">if set to <see langword="true" /> place the prop on the ground nearest to the <paramref name="position"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Prop"/> could not be spawned or the model could not be loaded within 1 second.</remarks>
        </member>
        <member name="M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position without any offset.
            </summary>
            <inheritdoc cref="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.World.CreatePropNoOffset(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Prop"/> of the given <see cref="T:GTA.Model"/> at the specified position without any offset.
            </summary>
            <inheritdoc cref="M:GTA.World.CreateProp(GTA.Model,GTA.Math.Vector3,GTA.Math.Vector3,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model,System.Boolean)">
            <summary>
            Creates a pickup <see cref="T:GTA.Prop"/> similar to those dropped by dead <see cref="T:GTA.Ped"/>s.
            These types of pickups are part of the ambient population and will get removed if the player moves too far away from them.
            </summary>
            <param name="type">The pickup type hash.</param>
            <param name="position">The pickup position to place in world space.</param>
            <param name="placementFlags">The pickup placement flags.</param>
            <param name="amount">
            A variable amount that can be specified for some pickups, such as money or ammo.
            Leave this parameter as <c>-1</c> to apply the default amount.
            </param>
            <param name="customModel">
            If set to non-zero value, this model will be used for the pickup instead of the default one.
            </param>
            <param name="createAsScriptObject">
            If <see langword="true"/>, the pickup will be treated as a script object and persist until the SHVDN runtime terminates, or the pickup <see cref="T:GTA.Prop"/> is marked as no longer needed.
            </param>
        </member>
        <member name="M:GTA.World.CreateAmbientPickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Creates a pickup <see cref="T:GTA.Prop"/> similar to those dropped by dead <see cref="T:GTA.Ped"/>s.
            These types of pickups are part of the ambient population and will get removed if the player moves too far away from them.
            </summary>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.Model)">
            <inheritdoc cref="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)"/>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.PickupPlacementFlags,System.Int32,GTA.EulerRotationOrder,GTA.Model)">
            <summary>
            Creates a pickup spawner (a <see cref="T:GTA.Pickup"/> instance) which can be referenced by the script and will spawn a pickup whenever the player gets near.
            This spawner can also regenerate the pickup after it is collected.
            The spawner is removed when the script terminates.
            </summary>
            <param name="type">The pickup type hash.</param>
            <param name="position">The pickup position to place in world space.</param>
            <param name="rotation">The pickup orientation.</param>
            <param name="placementFlags">The pickup placement flags.</param>
            <param name="amount">
            A variable amount that can be specified for some pickups, such as money or ammo.
            Leave this parameter as <c>-1</c> to apply the default amount.
            </param>
            <param name="rotOrder">The rotation order in world space.</param>
            <param name="customModel">
            If set to non-zero value, this model will be used for the pickup instead of the default one.
            </param>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Spawns a <see cref="T:GTA.Pickup"/> at the specified position.
            </summary>
        </member>
        <member name="M:GTA.World.CreatePickup(GTA.PickupType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Model,System.Int32)">
            <summary>
            Spawns a <see cref="T:GTA.Pickup"/> at the specified position.
            </summary>
        </member>
        <member name="M:GTA.World.GetAllCheckpoints">
            <summary>
            Gets an <c>array</c> of all the <see cref="T:GTA.Checkpoint"/>s.
            </summary>
        </member>
        <member name="M:GTA.World.CreateCheckpoint(GTA.CheckpointIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:GTA.Checkpoint"/> in the world.
            </summary>
            <param name="icon">The <see cref="T:GTA.CheckpointIcon"/> to display inside the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="position">The position in the World.</param>
            <param name="pointTo">The position in the world where this <see cref="T:GTA.Checkpoint"/> should point.</param>
            <param name="radius">The radius of the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="color">The color of the <see cref="T:GTA.Checkpoint"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Checkpoint"/> could not be created</remarks>
        </member>
        <member name="M:GTA.World.CreateCheckpoint(GTA.CheckpointCustomIcon,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:GTA.Checkpoint"/> in the world.
            </summary>
            <param name="icon">The <see cref="T:GTA.CheckpointCustomIcon"/> to display inside the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="position">The position in the World.</param>
            <param name="pointTo">The position in the world where this <see cref="T:GTA.Checkpoint"/> should point.</param>
            <param name="radius">The radius of the <see cref="T:GTA.Checkpoint"/>.</param>
            <param name="color">The color of the <see cref="T:GTA.Checkpoint"/>.</param>
            <remarks>returns <see langword="null" /> if the <see cref="T:GTA.Checkpoint"/> could not be created</remarks>
        </member>
        <member name="M:GTA.World.DestroyAllCameras">
            <summary>
            Destroys all scripted <see cref="T:GTA.Camera"/>s.
            </summary>
        </member>
        <member name="M:GTA.World.CreateCamera(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)">
            <summary>
            Creates a <see cref="T:GTA.Camera"/>, use <see cref="M:GTA.ScriptCameraDirector.StartRendering"/> to switch to
            this camera.
            </summary>
            <param name="position">The position of the camera.</param>
            <param name="rotation">The rotation of the camera.</param>
            <param name="fov">The field of view of the camera.</param>
            <remarks>
            This overload (<see cref="M:GTA.World.CreateCamera(GTA.Math.Vector3,GTA.Math.Vector3,System.Single)"/>) does not return <see langword="null"/>
            even if the method fails to create and <c>CREATE_CAM_WITH_PARAMS</c> returns -1 due to the camera pool being full.
            This is done for compatibility for scripts built against v3.6.0 or earlier.
            </remarks>
        </member>
        <member name="P:GTA.World.RenderingCamera">
            <summary>
            Gets or sets the rendering camera.
            </summary>
            <value>
            The rendering <see cref="T:GTA.Camera"/>.
            </value>
            <remarks>
            Setting to <see langword="null" /> sets the rendering <see cref="T:GTA.Camera"/> to <see cref="T:GTA.GameplayCamera"/>.
            The getter will return a invalid <see cref="T:GTA.Camera"/> where <see cref="P:GTA.PoolObject.Handle"/> is -1 if the
            rendering camera does not match any scripted cameras the scripted camera director is managing.
            </remarks>
        </member>
        <member name="M:GTA.World.ClearArea(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clears non-mission <see cref="T:GTA.Entity"/>s and cleans <see cref="T:GTA.Building"/>s and <see cref="T:GTA.AnimatedBuilding"/>s within the defined sphere.
            All fires and explosions in the area are also cleared.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
            <param name="deleteProjectiles">
            If <see langword="true"/>, all <see cref="T:GTA.Projectile"/>s in the area will also be cleared
            except for ones that are on <see cref="T:GTA.Ped"/>s' hands or rocket <see cref="T:GTA.Projectile"/>s that are attached to rocket weapon <see cref="T:GTA.Prop"/>s.
            </param>
            <param name="leaveCarGenCars">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s generated by vehicle generators will be cleared even if they have been entered.
            </param>
            <param name="clearLowPriorityPickupsOnly">
            If <see langword="true"/>, none of pickup <see cref="T:GTA.Prop"/>s will get deleted except for low priority ones (although the exact condition is unknown).
            </param>
            <remarks>
            Does not delete non-mission <see cref="T:GTA.Entity"/>s that is protected by conditions other than <see cref="P:GTA.Entity.PopulationType"/>.
            For example, this method does not delete the <see cref="T:GTA.Vehicle"/> the player is in or automobiles (excluding amphibious or submarine cars), bikes, and helicopters (excluding blimps) in some garages.
            This method does not delete <see cref="T:GTA.Ped"/> who are members of the player group as they are protected, either.
            </remarks>
        </member>
        <member name="M:GTA.World.ClearAreaOfProjectiles(GTA.Math.Vector3,System.Single)">
            <summary>
            Clears <see cref="T:GTA.Projectile"/> within the defined sphere except for ones that are on <see cref="T:GTA.Ped"/>s' hands or rocket <see cref="T:GTA.Projectile"/>s that are attached to rocket weapon <see cref="T:GTA.Prop"/>s.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
        </member>
        <member name="M:GTA.World.ClearAreaOfVehicles(GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clears non-mission <see cref="T:GTA.Vehicle"/>s within the defined sphere.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
            <param name="leaveCarGenCars">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s generated by vehicle generators will be cleared even if they have been entered.
            </param>
            <param name="checkViewFrustum">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s on screen will be cleared.
            </param>
            <param name="ifWrecked">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s on which <see cref="P:GTA.Entity.IsDead"/> returns <see langword="true"/> will be cleared.
            </param>
            <param name="ifAbandoned">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s that has a non-mission driver <see cref="T:GTA.Ped"/> will be cleared.
            None of <see cref="T:GTA.Vehicle"/>s has a mission driver <see cref="T:GTA.Ped"/> will be cleared even if this parameter is set to <see langword="false"/>.
            </param>
            <param name="ifEngineOnFire">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s on which <see cref="P:GTA.Vehicle.EngineHealth"/> return a value more than zero will be cleared.
            </param>
            <remarks>
            Does not delete non-mission <see cref="T:GTA.Entity"/>s that is protected by conditions other than <see cref="P:GTA.Entity.PopulationType"/>.
            For example, this method does not delete the <see cref="T:GTA.Vehicle"/> the player is in or automobiles (excluding amphibious or submarine cars), bikes, and helicopters (excluding blimps) in some garages.
            </remarks>
        </member>
        <member name="M:GTA.World.ClearAngledAreaOfVehicles(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Clears the non axis aligned area of non-mission <see cref="T:GTA.Vehicle"/>s.
            </para>
            <para>
            <paramref name="position1"/> and <paramref name="position2"/> define the midpoints of two parallel sides and <paramref name="areaWidth"/> is the width of these sides.
            </para>
            </summary>
            <param name="position1">One of the midpoints of two parallel sides, which should be different from <paramref name="position2"/>.</param>
            <param name="position2">One of the midpoints of two parallel sides, which should be different from <paramref name="position1"/>.</param>
            <param name="areaWidth">The width of these sides that defines <paramref name="position1"/> and <paramref name="position2"/>.</param>
            <param name="leaveCarGenCars">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s generated by vehicle generators will be cleared even if they have been entered.
            </param>
            <param name="checkViewFrustum">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s on screen will be cleared.
            </param>
            <param name="ifWrecked">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s on which <see cref="P:GTA.Entity.IsDead"/> returns <see langword="true"/> will be cleared.
            </param>
            <param name="ifAbandoned">
            If <see langword="true"/>, none of <see cref="T:GTA.Vehicle"/>s that has a non-mission driver <see cref="T:GTA.Ped"/> will be cleared.
            None of <see cref="T:GTA.Vehicle"/>s has a mission driver <see cref="T:GTA.Ped"/> will be cleared even if this parameter is set to <see langword="false"/>.
            </param>
            <param name="ifEngineOnFire">
            If <see langword="true"/> and the game version is v1.0.1180.2 or later, none of <see cref="T:GTA.Vehicle"/>s on which <see cref="P:GTA.Vehicle.EngineHealth"/> return a value more than zero will be cleared.
            </param>
            <remarks>
            Does not delete non-mission <see cref="T:GTA.Entity"/>s that is protected by conditions other than <see cref="P:GTA.Entity.PopulationType"/>.
            For example, this method does not delete the <see cref="T:GTA.Vehicle"/> the player is in or automobiles (excluding amphibious or submarine cars), bikes, and helicopters (excluding blimps) in some garages.
            </remarks>
        </member>
        <member name="M:GTA.World.ClearAreaOfProps(GTA.Math.Vector3,System.Single,GTA.ClearPropsFlags)">
            <summary>
            Clears non-mission <see cref="T:GTA.Prop"/>s within the defined sphere. Does not clear pickup <see cref="T:GTA.Prop"/>s or <see cref="T:GTA.Projectile"/>s.
            As calling <see cref="M:GTA.Entity.Delete"/> on random <see cref="T:GTA.Prop"/>s (most likely on which population types are set to <see cref="F:GTA.EntityPopulationType.Unknown"/>)
            will result in the almost immediate game crash, you should clear area of ambient <see cref="T:GTA.Prop"/>s with this method instead of the said way.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
            <param name="flags">The flags for area clearance.</param>
        </member>
        <member name="M:GTA.World.ClearAreaOfPeds(GTA.Math.Vector3,System.Single)">
            <summary>
            Clears non-mission <see cref="T:GTA.Ped"/>s within the defined sphere.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
            <remarks>
            Does not delete <see cref="T:GTA.Ped"/> who are members of the player group as they are protected.
            </remarks>
        </member>
        <member name="M:GTA.World.ClearAreaOfCops(GTA.Math.Vector3,System.Single)">
            <summary>
            Clears non-mission cop <see cref="T:GTA.Ped"/>s within the defined sphere.
            </summary>
            <param name="position">The center position.</param>
            <param name="radius">The radius for area clearance.</param>
            <remarks>
            Does not delete <see cref="T:GTA.Ped"/> who are members of the player group as they are protected.
            </remarks>
        </member>
        <member name="M:GTA.World.DeleteAllTrains">
            <summary>
            Clears all currently present trains from the world.
            </summary>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect that runs once at a given position then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the effect.</param>
            <param name="pos">The World position where the effect is.</param>
            <param name="rot">What rotation to apply to the effect.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in.</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect on an <see cref="T:GTA.Entity"/> that runs once then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">the name of the effect.</param>
            <param name="entity">The <see cref="T:GTA.Entity"/> the effect is attached to.</param>
            <param name="off">The offset from the <paramref name="entity"/> to attach the effect.</param>
            <param name="rot">The rotation, relative to the <paramref name="entity"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffectNonLooped(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Starts a Particle Effect on an <see cref="T:GTA.EntityBone"/> that runs once then is destroyed.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">the name of the effect.</param>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> the effect is attached to.</param>
            <param name="off">The offset from the <paramref name="entityBone"/> to attach the effect.</param>
            <param name="rot">The rotation, relative to the <paramref name="entityBone"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis</param>
            <returns><see langword="true" />If the effect was able to start; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Entity,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> on an <see cref="T:GTA.Entity"/> that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the Effect</param>
            <param name="entity">The <see cref="T:GTA.Entity"/> the effect is attached to.</param>
            <param name="offset">The offset from the <paramref name="entity"/> to attach the effect.</param>
            <param name="rotation">The rotation, relative to the <paramref name="entity"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis.</param>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.EntityBone,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> on an <see cref="T:GTA.EntityBone"/> that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the Effect</param>
            <param name="entityBone">The <see cref="T:GTA.EntityBone"/> the effect is attached to.</param>
            <param name="offset">The offset from the <paramref name="entityBone"/> to attach the effect.</param>
            <param name="rotation">The rotation, relative to the <paramref name="entityBone"/>, the effect has.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in. For a car side exhaust you may need to flip in the Y Axis.</param>
        </member>
        <member name="M:GTA.World.CreateParticleEffect(GTA.ParticleEffectAsset,System.String,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.InvertAxisFlags)">
            <summary>
            Creates a <see cref="T:GTA.ParticleEffect"/> at a position that runs looped.
            </summary>
            <param name="asset">The effect asset to use.</param>
            <param name="effectName">The name of the effect.</param>
            <param name="position">The world coordinates where the effect is.</param>
            <param name="rotation">What rotation to apply to the effect.</param>
            <param name="scale">How much to scale the size of the effect by.</param>
            <param name="invertAxis">Which axis to flip the effect in.</param>
        </member>
        <member name="M:GTA.World.RemoveAllParticleEffectsInRange(GTA.Math.Vector3,System.Single)">
            <summary>
            Stops all particle effects in a range.
            </summary>
            <param name="pos">The position in the world to stop particle effects.</param>
            <param name="range">The maximum distance from the <paramref name="pos"/> to stop particle effects.</param>
        </member>
        <member name="M:GTA.World.AddRope(GTA.RopeType,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Spawns a <see cref="T:GTA.Rope"/>.
            </summary>
            <param name="type">The type of <see cref="T:GTA.Rope"/>.</param>
            <param name="position">The position of the <see cref="T:GTA.Rope"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:GTA.Rope"/>.</param>
            <param name="length">The length of the <see cref="T:GTA.Rope"/>.</param>
            <param name="minLength">The minimum length of the <see cref="T:GTA.Rope"/>.</param>
            <param name="breakable">if set to <see langword="true" /> the <see cref="T:GTA.Rope"/> will break if shot.</param>
        </member>
        <member name="M:GTA.World.ShootBullet(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Ped,GTA.WeaponAsset,System.Int32,System.Single)">
            <summary>
            Fires a single bullet in the world.
            </summary>
            <param name="sourcePosition">Where the bullet is fired from.</param>
            <param name="targetPosition">Where the bullet is fired to.</param>
            <param name="owner">The <see cref="T:GTA.Ped"/> who fired the bullet, leave <see langword="null" /> for no one.</param>
            <param name="weaponAsset">The weapon that the bullet is fired from.</param>
            <param name="damage">The damage the bullet will cause.</param>
            <param name="speed">The speed, only affects projectile weapons, leave -1 for default.</param>
        </member>
        <member name="M:GTA.World.ShootSingleBullet(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Fires an instant hit bullet between the two points or a projectile that goes toward
            <paramref name="endPosition"/>.
            </summary>
            <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.World.ShootSingleBulletIgnoreEntity(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,GTA.Entity)">
             <param name="startPosition">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param"/>
             </param>
             <param name="endPosition">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='endPosition']"/>
             </param>
             <param name="damage">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='damage']"/>
             </param>
             <param name="weapon">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='weapon']"/>
             </param>
             <param name="owner">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='owner']"/>
             </param>
             <param name="perfectAccuracy">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='perfectAccurary']"/>
             </param>
             <param name="createTraceVfx">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='createTraceVfx']"/>
             </param>
             <param name="allowRumble">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='allowRumble']"/>
             </param>
             <param name="initialVelocity">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='initialVelocity']"/>
             </param>
             <param name="ignoreEntity">
             <para>
             The <see cref="T:GTA.Entity"/> who the bullet or projectile disable damage against. Must not be the same as
             <paramref name="owner"/>, as the bullet will not collide with the owner or the <see cref="T:GTA.Vehicle"/> the
             owner is in.
             </para>
             <para>
             To prevent created projectiles from colliding with this <see cref="T:GTA.Entity"/>, you will need to use
             <see cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)"/> and set the bool parameter <c>ignoreCollisionEntity</c>
             to <see langword="true"/>.
             </para>
             </param>
             <param name="targetEntity">
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)" path="/param[@name='targetEntity']"/>
             </param>
            
             <inheritdoc cref="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GTA.World.ShootSingleBulletIgnoreEntityNew(GTA.Math.Vector3,GTA.Math.Vector3,System.Int32,GTA.WeaponAsset,GTA.Ped,System.Boolean,System.Boolean,System.Boolean,System.Single,GTA.Entity,System.Boolean,System.Boolean,GTA.Entity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Fires an instant hit bullet between the two points or a projectile that goes toward
            <paramref name="endPosition"/> taking into account an entity to ignore for damage.
            </summary>
            <param name="startPosition">
            Where the bullet or projectile is fired from.
            </param>
            <param name="endPosition">
            Where the bullet is fired to.
            If the <paramref name="weapon"/> specifies a projectile weapon, the produced projectile will go
            in the direction of this parameter from <paramref name="startPosition"/>.
            </param>
            <param name="damage">
            The damage the bullet will cause.
            Must not be negative; otherwise, this method will not fire a bullet.
            </param>
            <param name="weapon">
            The weapon type to fire a bullet or projectile.
            You might want to request the asset and keep in memory unless you know the weapon info is already streamed,
            such as when <paramref name="owner"/> has a weapon of this parameter hash. If the weapon info is not
            streamed, this method will not fire a bullet or projectile.
            </param>
            <param name="owner">
            The owner <see cref="T:GTA.Ped"/> who fires the bullet or projectile.
            Leaving <see langword="null" /> will result in absent of owner of the produced bullet or projectile.
            </param>
            <param name="perfectAccuracy">
            If <see langword="true"/>, the bullet will go to the exact point where <paramref name="endPosition"/> is.
            If <see langword="false"/>, the method will apply a spread to the bullet.
            </param>
            <param name="createTraceVfx">
            If <see langword="true"/>, the bullet trace visual effect will not be prevented from being created for
            not hitting an <see cref="T:GTA.Entity"/>.
            Note that there are other conditions for where bullet comes from in both position and direction
            before bullet trace can be created (this parameter has no effect in these conditions).
            </param>
            <param name="allowRumble">
            If <see langword="true"/>, <paramref name="owner"/> is the player, and you are using a controller (pad),
            the controller can rumble/vibrate due to the corresponding <c>CWeaponInfo</c> setting.
            </param>
            <param name="initialVelocity">
            The initial velocity for the produced projectile, leave -1 (or some negative value) for the default speed.
            Not used for bullets.
            </param>
            <param name="ignoreEntity">
            <para>
            The <see cref="T:GTA.Entity"/> who the bullet or projectile disable damage against. Must not be the same as
            <paramref name="owner"/>, as the bullet will not collide with the owner or the <see cref="T:GTA.Vehicle"/> the
            owner is in.
            </para>
            <para>
            To prevent created projectiles from colliding with this <see cref="T:GTA.Entity"/>, you need to set
            <paramref name="ignoreCollisionEntity"/> to <see langword="true"/> (the bool parameter has no effect
            in the game versions earlier than v1.0.1103.2).
            </para>
            </param>
            <param name="forceCreateNewProjectileObject">
            If <see langword="true"/>, <paramref name="owner"/> is set, and <paramref name="weapon"/> is a projectile
            weapon, this method will create a NEW projectile and don't use any equipped <see cref="T:GTA.Projectile"/>s from
            a weapon <see cref="T:GTA.Prop"/> of <paramref name="owner"/>.
            </param>
            <param name="disablePlayerCoverStartAdjustment">
            Although this parameter name follows the canonical one <c>bDisablePlayerCoverStartAdjustment</c>,
            the actual effect is not known enough to describe (there is only one occurrence where this parameter is set
            to true out of all ysc scripts in v1.0.2944.0).
            </param>
            <param name="targetEntity">
            The <see cref="T:GTA.Entity"/> who the produced rocket will home in.
            Must not be the same as <paramref name="owner"/> or <paramref name="ignoreEntity"/>.
            Only used if <paramref name="weapon"/> is a rocket weapon and the homing flag is set in the corresponding
            <c>CWeaponInfo</c> data. For example, <c>VEHICLE_WEAPON_SPACE_ROCKET</c> and <c>VEHICLE_WEAPON_PLANE_ROCKET</c>
            can be used to home in. However, <see cref="F:GTA.WeaponHash.HomingLauncher"/> is not appropriate to home in
            using this method even though <c>Homing</c> flag is set in the <c>CWeaponInfo</c> data.
            </param>
            <param name="freezeProjectileWaitingOnCollision">
            If <see langword="true"/> and the game version is v1.0.1103.2 or later,
            the created projectile will freeze waiting for collision if absent.
            </param>
            <param name="ignoreCollisionEntity">
            <para>
            If <see langword="true"/> and the game version is v1.0.1103.2 or later,
            the created projectile will not collide with <paramref name="ignoreEntity"/>.
            </para>
            <para>
            Cannot be used in conjunction with <paramref name="ignoreCollisionResetNoBB"/>
            and <paramref name="ignoreCollisionResetNoBB"/> takes precedence if both are set to <see langword="true"/>
            and the game version is v1.0.2189.0 or later.
            </para>
            </param>
            <param name="ignoreCollisionResetNoBB">
            <para>
            If <see langword="true"/> and if <paramref name="startPosition"/> is inside the BoundingBox of
            <paramref name="ignoreEntity"/>, the created projectile will ignore collision until it leaves the
            BoundingBox.
            </para>
            <para>
            Only available in the game version is v1.0.2189.0 or later.
            Cannot be used in conjunction with <paramref name="ignoreCollisionEntity"/>
            and this parameter takes precedence if both are set to <see langword="true"/>.
            </para>
            </param>
        </member>
        <member name="M:GTA.World.AddExplosion(GTA.Math.Vector3,GTA.ExplosionType,System.Single,System.Single,GTA.Ped,System.Boolean,System.Boolean)">
            <summary>
            Creates an explosion in the world.
            </summary>
            <param name="position">The position of the explosion.</param>
            <param name="type">The type of explosion.</param>
            <param name="radius">The radius of the explosion.</param>
            <param name="cameraShake">The amount of camera shake to apply to nearby cameras.</param>
            <param name="owner">The <see cref="T:GTA.Ped"/> who caused the explosion, leave null if no one caused the explosion.</param>
            <param name="aubidble">If set to <see langword="true" />, explosion can be heard.</param>
            <param name="invisible">If set to <see langword="true" />, explosion will not create particle effects.</param>
        </member>
        <member name="M:GTA.World.AddRelationshipGroup(System.String)">
            <summary>
            Creates a <see cref="T:GTA.RelationshipGroup"/> with the given name.
            </summary>
            <param name="name">The name of the relationship group.</param>
        </member>
        <member name="M:GTA.World.VehicleHighSpeedBumpMultiplier(System.Single)">
            <summary>
            Sets the intensity of the "shaking" effect of all vehicles at speed.
            </summary>
            <param name="multiplier">Intensity of the shaking effect between 0f and 1f.</param>
        </member>
        <member name="M:GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Draws a marker in the world, this needs to be done on a per frame basis
            </summary>
            <param name="type">The type of marker.</param>
            <param name="pos">The position of the marker.</param>
            <param name="dir">The direction the marker points in.</param>
            <param name="rot">The rotation of the marker.</param>
            <param name="scale">The amount to scale the marker by.</param>
            <param name="color">The color of the marker.</param>
            <param name="bobUpAndDown">if set to <see langword="true" /> the marker will bob up and down.</param>
            <param name="faceCamera">if set to <see langword="true" /> the marker will always face the camera, regardless of its rotation.</param>
            <param name="rotateY">
            if set to <see langword="true" /> rotates only on the z axis (heading).
            Incorrectly named as &quot;rotateY&quot;, but the name is kept for source compatibility.
            </param>
            <param name="textueDict">Name of texture dictionary to load the texture from, leave null for no texture in the marker.</param>
            <param name="textureName">Name of texture inside the dictionary to load the texture from, leave null for no texture in the marker.</param>
            <param name="drawOnEntity">if set to <see langword="true" /> draw on any <see cref="T:GTA.Entity"/> that intersects the marker.</param>
            <remarks>
            There is no overload that takes <see cref="T:System.Nullable`1"/> <see cref="T:GTA.Graphics.TextureAsset"/> as a default
            parameter, since trying to provide one will result in ambiguous call resolution.
            </remarks>
        </member>
        <member name="M:GTA.World.DrawMarkerEx(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,GTA.EulerRotationOrder,System.Boolean,System.Nullable{GTA.Graphics.TextureAsset},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws a marker this frame with 2 extra parameters.
            Not supported in the game versions earlier than v1.0.573.1.
            </summary>
            <param name="type">The type of marker.</param>
            <param name="pos">The position of the marker.</param>
            <param name="dir">The direction the marker points in.</param>
            <param name="rot">The rotation of the marker.</param>
            <param name="scale">The amount to scale the marker by.</param>
            <param name="color">The color of the marker.</param>
            <param name="bounce">if set to <see langword="true" /> the marker will bounce up and down.</param>
            <param name="faceCamera">if set to <see langword="true" /> the marker will always face the camera, regardless of its rotation.</param>
            <param name="rotOrder">The rotation order.</param>
            <param name="rotate">if set to <see langword="true" /> rotates only on the z axis(heading).</param>
            <param name="texAsset">
            The <see cref="T:GTA.Graphics.TextureAsset"/> to use a custom texture.
            Leave <see langword="null"/> to use the texture for <paramref name="type"/>.
            </param>
            <param name="renderInverted">
            if set to <see langword="true"/> the marker will be drawed in the reverse order.
            Marker vertices will shown on any <c>CEntity</c> (which includes but not limited to <see cref="T:GTA.Entity"/>
            and <see cref="T:GTA.Building"/>), that are intersected.
            </param>
            <param name="usePreAlphaDepth">
            If <see langword="false"/>, the marker will not use pre-alpha depth, making the marker invisible behind
            translucent <see cref="T:GTA.Vehicle"/>s and translucent <see cref="T:GTA.Prop"/>s with smooth opacity (which is
            different from <see cref="M:GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)"/>.
            </param>
            <param name="matchEntityRotOrder">
            If <see langword="true"/>, the marker will rotate in the same way how <see cref="T:GTA.Entity"/>s are rotated
            (which is different from <see cref="M:GTA.World.DrawMarker(GTA.MarkerType,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean)"/>.
            </param>
        </member>
        <member name="M:GTA.World.DrawLightWithRange(GTA.Math.Vector3,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Draws light around a region.
            </summary>
            <param name="position">The position to center the light around.</param>
            <param name="color">The color of the light.</param>
            <param name="range">How far the light should extend to.</param>
            <param name="intensity">The intensity: should be positive.</param>
        </member>
        <member name="M:GTA.World.DrawBoxForAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Drawing.Color,GTA.DrawBoxFlags)">
            <summary>
            Draws a box that occupies the angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="color">The color of the box.</param>
            <param name="drawFlags">Which sides to draw.</param>
        </member>
        <member name="M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="target">The target of the raycast.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.Raycast(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="direction">The direction of the raycast.</param>
            <param name="maxDistance">How far the raycast should go out to.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.RaycastCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a 3D raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="target">The target of the raycast.</param>
            <param name="radius">The radius of the raycast.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.RaycastCapsule(GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Single,GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Creates a 3D raycast between 2 points.
            </summary>
            <param name="source">The source of the raycast.</param>
            <param name="direction">The direction of the raycast.</param>
            <param name="radius">The radius of the raycast.</param>
            <param name="maxDistance">How far the raycast should go out to.</param>
            <param name="options">What type of objects the raycast should intersect with.</param>
            <param name="ignoreEntity">Specify an <see cref="T:GTA.Entity"/> that the raycast should ignore, leave null for no entities ignored.</param>
        </member>
        <member name="M:GTA.World.GetCrosshairCoordinates">
            <summary>
            Determines where the crosshair intersects with the world.
            </summary>
            <returns>A <see cref="T:GTA.RaycastResult"/> containing information about where the crosshair intersects with the world.</returns>
        </member>
        <member name="M:GTA.World.GetCrosshairCoordinates(GTA.IntersectFlags,GTA.Entity)">
            <summary>
            Determines where the crosshair intersects with the world.
            </summary>
            <param name="intersectOptions">Type of <see cref="T:GTA.IntersectFlags">environment</see> the raycast should intersect with.</param>
            <param name="ignoreEntity">Prevent the raycast detecting a specific <see cref="T:GTA.Entity"/>.</param>
            <returns>A <see cref="T:GTA.RaycastResult"/> containing information about where the crosshair intersects with the world.</returns>
        </member>
        <member name="M:GTA.World.GetDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Gets the straight line distance between 2 positions.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:GTA.World.CalculateTravelDistance(GTA.Math.Vector3,GTA.Math.Vector3)">
            <summary>
            Calculates the travel distance using roads and paths between 2 positions.
            </summary>
            <param name="origin">The origin.</param>
            <param name="destination">The destination.</param>
            <returns>The travel distance.</returns>
        </member>
        <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)">
            <summary>
            Tries to store the z coordinate of the highest ground below the given point.
            Detects <see cref="T:GTA.Building"/>s and some of static <see cref="T:GTA.Prop"/>s that are on the ground,
            such as "prop_portacabin01" at (916.3843, -3242.021, 4.886292).
            </summary>
            <param name="position">The start position to test.</param>
            <param name="height">
            When this method returns, contains the Z coordinate of the highest ground below <paramref name="position"/>,
            if the highest ground is found. This parameter is passed uninitialized.
            </param>
            <param name="mode">
            The test mode. Does not make any difference in earlier game versions such as v1.0.372.2.
            </param>
            <returns><see langword="true"/> if it finds collision; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This test does not include all kind of static <see cref="T:GTA.Prop"/>s, and this test excludes any fragment <see cref="T:GTA.Prop"/>s.
            </remarks>
        </member>
        <member name="M:GTA.World.GetGroundHeightAndNormal(GTA.Math.Vector3,System.Single@,GTA.Math.Vector3@)">
            <summary>
            Tries to store the z coordinate and surface normal of the highest ground below the given point.
            Detects <see cref="T:GTA.Building"/>s and some of static <see cref="T:GTA.Prop"/>s that are on the ground,
            such as "prop_portacabin01" at (916.3843, -3242.021, 4.886292).
            </summary>
            <param name="position">The start position to test.</param>
            <param name="height">
            When this method returns, contains the Z coordinate of the highest ground below <paramref name="position"/>,
            if the highest ground is found. This parameter is passed uninitialized.
            </param>
            <param name="normal">
            When this method returns, contains the surface normal of the highest ground below <paramref name="position"/>,
            if the highest ground is found. This parameter is passed uninitialized.
            </param>
            <returns><see langword="true"/> if it finds collision; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This test does not include all kind of static <see cref="T:GTA.Prop"/>s, and this test excludes any fragment <see cref="T:GTA.Prop"/>s.
            </remarks>
        </member>
        <member name="M:GTA.World.GetGroundHeightExcludingProps(GTA.Math.Vector3,System.Single@,GTA.GetGroundHeightMode)">
            <summary>
            <para>
            Tries to store the z coordinate of the highest ground below the given point.
            This test excludes any <see cref="T:GTA.Prop"/>s that are on the ground (so only <see cref="T:GTA.Building"/>s can be detected).
            </para>
            <para>
            Not available in v1.0.463.1 or earlier game versions (currently).
            </para>
            </summary>
            <param name="position">The start position to test.</param>
            <param name="height">
            When this method returns, contains the Z coordinate of the highest ground below <paramref name="position"/>,
            if the highest ground is found. This parameter is passed uninitialized.
            </param>
            <param name="mode">
            The test mode. May not make any difference in very earlier game versions (not confirmed if there are any).
            </param>
            <returns><see langword="true"/> if it finds collision; otherwise, <see langword="false"/>.</returns>
            <remarks>
            This test excludes any fragment <see cref="T:GTA.Prop"/>s.
            </remarks>
            <exception cref="T:GTA.GameVersionNotSupportedException">Thrown when called in v1.0.463.1 or earlier game versions.</exception>
        </member>
        <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector2)">
            <summary>
            Gets the height of the ground at a given position.
            </summary>
            <param name="position">The position.</param>
            <returns>The height measured in meters</returns>
        </member>
        <member name="M:GTA.World.GetGroundHeight(GTA.Math.Vector3)">
            <summary>
            Gets the height of the ground at a given position.
            Note : If the Vector3 is already below the ground, this will return 0.
            You may want to use the other overloaded function to be safe.
            </summary>
            <param name="position">The position.</param>
            <returns>The height measured in meters</returns>
        </member>
        <member name="M:GTA.World.GetApproxHeightForPoint(GTA.Math.Vector2)">
            <summary>
            Returns an approximate height at the 2d coordinate in meters.
            This is based on a coarse grid compiled from collision data.
            </summary>
            <remarks>A coarse grids has a 50-meter x 50-meter tile.</remarks>
        </member>
        <member name="M:GTA.World.GetApproxHeightForArea(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns an approximate height for the area in meters.
            This is based on a coarse grid compiled from collision data.
            </summary>
            <returns>The approximate height for the area, which is the maximum height in that area.</returns>
            <remarks>A coarse grids has a 50-meter x 50-meter tile.</remarks>
        </member>
        <member name="M:GTA.World.GetApproxFloorForPoint(GTA.Math.Vector2)">
            <summary>
            Returns an approximate floor at the 2d coordinate in meters.
            This is based on a coarse grid compiled from collision data.
            </summary>
            <remarks>A coarse grids has a 50-meter x 50-meter tile.</remarks>
        </member>
        <member name="M:GTA.World.GetApproxFloorForArea(GTA.Math.Vector2,GTA.Math.Vector2)">
            <summary>
            Returns an approximate floor for the area in meters.
            This is based on a coarse grid compiled from collision data.
            </summary>
            <returns>The approximate floor for the area, which is the maximum height in that area.</returns>
            <remarks>A coarse grids has a 50-meter x 50-meter tile.</remarks>
        </member>
        <member name="M:GTA.World.GetSafePositionForPed(GTA.Math.Vector3,GTA.Math.Vector3@,GTA.GetSafePositionFlags)">
            <summary>
            Checks to see if it can find a safe bit of ground to place a <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="safePosition">If successful, will be filled with the position to check around.</param>
            <param name="flags">The flags to determine how the method searches for positions.</param>
            <returns>
            <see langword="true"/> if successfully found a safe bit of ground to place a <see cref="T:GTA.Ped"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Use this carefully since it can have a considerable performance hit, having to stall the game whilst it queries navmesh polygons.
            </remarks>
        </member>
        <member name="M:GTA.World.GetSafeCoordForPed(GTA.Math.Vector3,System.Boolean,System.Int32)">
            <summary>
            Gets the nearest safe coordinate to position a <see cref="T:GTA.Ped"/>.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="sidewalk">if set to <see langword="true" /> Only find positions on the sidewalk.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector2,System.Boolean)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Vehicle"/> can be placed.  Considers switched off nodes, where ambient vehicles will not spawn.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="unoccupied">if set to <see langword="true" /> only find positions that dont already have a vehicle in them.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnStreet(GTA.Math.Vector3,System.Boolean)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Vehicle"/> can be placed. Considers switched off nodes, where ambient vehicles will not spawn.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="unoccupied">if set to <see langword="true" /> only find positions that dont already have a vehicle in them.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector2)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Ped"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
        </member>
        <member name="M:GTA.World.GetNextPositionOnSidewalk(GTA.Math.Vector3)">
            <summary>
            Gets the next position on the street where a <see cref="T:GTA.Ped"/> can be placed.
            </summary>
            <param name="position">The position to check around.</param>
        </member>
        <member name="M:GTA.World.GetPositionOnRoadside(GTA.Math.Vector3,GTA.Direction,GTA.Math.Vector3@)">
            <summary>
            Gets the nearest roadside point to the given coordinates. Returns true on success.
            </summary>
            <param name="position">The position to check around.</param>
            <param name="direction">Which direction to check relative to the given position.</param>
            <param name="output">The variable which will receive the output position of this function.</param>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector2)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector3)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
        </member>
        <member name="M:GTA.World.GetStreetName(GTA.Math.Vector3,System.String@)">
            <summary>
            Determines the name of the street which is the closest to the given coordinates.
            </summary>
            <param name="position">The coordinates of the street</param>
            <param name="crossingRoadName">If the coordinates are on an intersection, the name of the crossing road</param>
            <returns>Returns the name of the street the coordinates are on.</returns>
        </member>
        <member name="M:GTA.World.GetZoneDisplayName(GTA.Math.Vector2)">
            <summary>
            Gets the display name of the a zone in the map.
            Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to convert to the localized name.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneDisplayName(GTA.Math.Vector3)">
            <summary>
            Gets the display name of the a zone in the map.
            Use <see cref="M:GTA.Game.GetLocalizedString(System.String)"/> to convert to the localized name.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector2)">
            <summary>
            Gets the localized name of the a zone in the map.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.GetZoneLocalizedName(GTA.Math.Vector3)">
            <summary>
            Gets the localized name of the a zone in the map.
            </summary>
            <param name="position">The position on the map.</param>
        </member>
        <member name="M:GTA.World.IsPointInAngledArea(GTA.Math.Vector3,GTA.Math.Vector3,GTA.Math.Vector3,System.Single,System.Boolean)">
            <summary>
            Determines whether the specified point is in the angled area.
            An angled area is an X-Z oriented rectangle with three parameters: origin, extent, and width.
            </summary>
            <param name="point">The point to check whether is in the angled area.</param>
            <param name="originEdge">The mid-point along a base edge of the rectangle.</param>
            <param name="extentEdge">The mid-point of opposite base edge on the other Z.</param>
            <param name="width">The length of the base edge.</param>
            <param name="includeZAxis">
            If set to <see langword="true" />, the method will also check if the point is in area in Z axis as well as X and Y axes.
            If set to <see langword="false" />, the method will only check if the point is in area in X and Y axes.
            </param>
             <returns>
              <see langword="true" /> if the specified point is in the specified angled area; otherwise, <see langword="false" />.
            </returns>
        </member>
    </members>
</doc>
